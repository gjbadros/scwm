<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V3.0//EN">
<book>
  <bookinfo>
    <title>
      <productname>SCWM Reference Manual</productname>
    </title>
    <authorgroup>
      <author>
  	<firstname>Maciej</firstname>
  	<surname>Stachowiak</surname>
  	<affiliation>
  	  <shortaffil>MIT</shortaffil>
  	  <jobtitle>M.S. Degree Recipient</jobtitle>
  	  <orgname>Massachusetts Institute of Technology</orgname>
  	  <orgdiv>Department of Computer Science</orgdiv>
  	  <address>
  	    <city>Cambridge</city>
  	    <state>Massachusetts</state>
  	    <postcode>12345</postcode>
  	    <country>U.S.A.</country>
  	    <email>mstachow@mit.edu</email>
  	  </address>
  	</affiliation>
      </author>
      <author>
  	<firstname>Greg</firstname>
  	<surname>Badros</surname>
  	<affiliation>
  	  <shortaffil>UWashington</shortaffil>
  	  <jobtitle>Graduate Research Assistant</jobtitle>
  	  <orgname>University of Washington</orgname>
  	  <orgdiv>Department of Computer Science and Engineering</orgdiv>
  	  <address>
  	    <city>Seattle</city>
  	    <state>Washington</state>
  	    <postcode>98195</postcode>
  	    <country>U.S.A.</country>
  	    <email>gjb@cs.washington.edu</email>
  	  </address>
  	</affiliation>
      </author>
    </authorgroup>
    <releaseinfo>Release pre-0.8</releaseinfo>
    <pubdate>21 July 1998</pubdate>
    <copyright>
      <year>1997&ndash;1998</year>
      <holder>Maciej Stachowiak and Greg J. Badros</holder>
    </copyright>
  </bookinfo>
  <chapter>
    <title>Primitives in Alphabetical Order</title>
<refentry>
  <refnamediv>
    <refname>add-input-hook!</refname>
    <refpurpose>Add a timer hook;</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(add-input-hook! port proc)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Add a timer hook; whenever input becomes availabe on <parameter>port</parameter>,
procedure <parameter>proc</parameter> will be called with no arguments repeatedly until no
unprocessed input remains on <parameter>port</parameter>. <parameter>port</parameter> must be open, it must be an
input port, and it must be a file port (this includes pipes and
sockets, but not string ports or soft ports). A handle suitable for
passing to <function>remove-input-hook!</function> is returned. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>callbacks.c</filename> at line 567 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>add-timer-hook!</refname>
    <refpurpose>Add a timer hook;</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(add-timer-hook! usec proc)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Add a timer hook; when at least <parameter>usec</parameter> microseconds have
passed, procedure <parameter>proc</parameter> will be called with no arguments. A
handle suitable for passing to <function>remove-timer-hook!</function> is
returned. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>callbacks.c</filename> at line 428 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>beep</refname>
    <refpurpose>Ring the standard X bell.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(beep)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Ring the standard X bell. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 359 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>bind-key</refname>
    <refpurpose>Bind the given KEY within the CONTEXTS to invoke PROC.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(bind-key contexts key proc)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Bind the given <parameter>key</parameter> within the <parameter>contexts</parameter> to invoke <parameter>proc</parameter>.
<parameter>contexts</parameter> is a list of event-contexts (e.g., '(button1 sidebar))
<parameter>key</parameter> is a string giving the key-specifier (e.g., M-Delete for Meta+Delete)
<parameter>proc</parameter> is a procedure (possibly a thunk) that should be invoked 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>binding.c</filename> at line 464 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>bind-mouse</refname>
    <refpurpose>Bind the given mouse BUTTON within the CONTEXTS to invoke PROC.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(bind-mouse contexts button proc)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Bind the given mouse <parameter>button</parameter> within the <parameter>contexts</parameter> to invoke <parameter>proc</parameter>.
<parameter>contexts</parameter> is a list of event-contexts (e.g., '(button1 sidebar))
<parameter>button</parameter> is a string or integer giving the mouse button number
<parameter>proc</parameter> is a procedure (possibly a thunk) that should be invoked 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>binding.c</filename> at line 565 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>border-normal?</refname>
    <refpurpose>Return a boolean value indicating whether or not WIN</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(border-normal?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a boolean value indicating whether or not <parameter>win</parameter>
currently has a normal border. <parameter>win</parameter> defaults to the window context in
the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2700 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>capturing?</refname>
    <refpurpose>Returns true when the windows are being caputured, either</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(capturing?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns true when the windows are being caputured, either
during initial startup, or during a recapture operation. In either
case, placement procedures should probably avoid interaction and
perhaps avoid moving the window being placed at all. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 179 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>clear-color-cache-entry</refname>
    <refpurpose>Colors are cached by name.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(clear-color-cache-entry name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Colors are cached by name. It is remotely possible that the
meaning of a particular string as a color will change in your X
server, if you try hard enough. For this unlikely eventuality,
<function>clear-color-cache-entry</function> is provided - it removes the color
associated with <parameter>name</parameter> from the color cache.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 186 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>clear-font-cache-entry</refname>
    <refpurpose>Fonts are cached by name.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(clear-font-cache-entry name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Fonts are cached by name. It is remotely possible that the
meaning of a particular string as a fonts will change in your X
server, if you try hard enough (perhaps if you add or remove font
servers). For this unlikely eventuality, <function>clear-font-cache-entry</function> is
provided - it removes the font associated with <parameter>name</parameter> from the font
cache.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>font.c</filename> at line 378 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>clear-image-cache-entry</refname>
    <refpurpose>Images are cached by both name and full pathnme.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(clear-image-cache-entry name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Images are cached by both name and full pathnme. It is
remotely possible that the file that should be used for a particular
name will change, for example if you alter the image file or change
your image path. For this unlikely eventuality,
<function>clear-image-cache-entry</function> is provided - it removes the image
associated with <parameter>name</parameter> from the image cache.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>image.c</filename> at line 552 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>clever-place-window</refname>
    <refpurpose>Places WIN just as if being placed by fvwm2's SmartPlacement,</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(clever-place-window win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Places <parameter>win</parameter> just as if being placed by fvwm2's SmartPlacement,
	 as if SmartPlacementIsReallySmart were in effect. That is, it
	 tries to place the window so as to minimize its area of
	 overlap with other windows. Several parameters give different
	 weight to various kinds of windows, but they are not tunable
	 at runtime currently. If it fails to place the window, it
	 returns <literal>#f</literal>; otherwise it returns <literal>#t</literal>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>placement.c</filename> at line 478 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>color-properties</refname>
    <refpurpose>Return an association list giving some properties of</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(color-properties color)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return an association list giving some properties of
<parameter>color</parameter>. Currently defined properties are 'name, the string name of the
color, and 'pixel, the X pixel value it uses. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 98 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>color?</refname>
    <refpurpose>Returns #t if OBJ is a color object, otherwise #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(color? obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns <literal>#t</literal> if <parameter>obj</parameter> is a color object, otherwise <literal>#f</literal>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 84 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>current-decor</refname>
    <refpurpose>Return the current decor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(current-decor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current decor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>decor.c</filename> at line 297 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>current-desk</refname>
    <refpurpose>Returns the integer identifying the current desk.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(current-desk)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the integer identifying the current desk. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>deskpage.c</filename> at line 275 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>current-window-with-focus</refname>
    <refpurpose>Return the window that currently has the input focus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(current-window-with-focus)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window that currently has the input focus. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 481 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>current-window-with-pointer</refname>
    <refpurpose>Return the window that currently contains the mouse pointer.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(current-window-with-pointer)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window that currently contains the mouse pointer. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 491 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>default-decor</refname>
    <refpurpose>Return the default decor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(default-decor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the default decor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>decor.c</filename> at line 257 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>default-placement-proc</refname>
    <refpurpose>This is the default placement procedure for non-transient</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(default-placement-proc win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  This is the default placement procedure for non-transient
	 windows. It tries <function>smart-place-window</function>,
	 <function>clever-place-window</function>, <function>random-place-window</function>, or
	 <function>interactive-move</function> (to achieve interactive placement) on <parameter>win</parameter>
	 depending on several settable style flags. However, if one of
	 the following factors holds, the window will instead be
	 placed exactly as requested by the program: the position was
	 specified by the user, the position was specified by the
	 program, and #:no-PPosition-hint is not set, or the window
	 starts iconic. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>placement.c</filename> at line 556 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>default-transient-placement-proc</refname>
    <refpurpose>This is the default placement procedure for transient</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(default-transient-placement-proc win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  This is the default placement procedure for transient
	 windows. It simply leaves the window <parameter>win</parameter> in place, exactly as
	 requested. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>placement.c</filename> at line 602 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>deiconify</refname>
    <refpurpose>Deiconify WIN - unmap its icon window, and map its regular</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(deiconify  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Deiconify <parameter>win</parameter> - unmap its icon window, and map its regular
window. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1561 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>delete-window</refname>
    <refpurpose>Request that WIN remove itself from the display.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(delete-window  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Request that <parameter>win</parameter> remove itself from the display. This is the
friendly way of closing a window, but it will not work if the
application does not cooperate. <parameter>win</parameter> defaults to the window context in
the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1223 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>desk-size</refname>
    <refpurpose>Returns the size of the current desk, in units of the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(desk-size)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the size of the current desk, in units of the
physical screen size, as a list of the width and the height. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>deskpage.c</filename> at line 250 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>destroy-window</refname>
    <refpurpose>Forcibly remove WIN from the screen.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(destroy-window  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Forcibly remove <parameter>win</parameter> from the screen. This will kill the
application without giving it a chance to save its state or do any
other shutdown, but is guaranteed to work. <parameter>win</parameter> defaults to the window
context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1253 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>display-size</refname>
    <refpurpose>Returns the size of the physical screen, in pixels, as a list of </refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(display-size)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the size of the physical screen, in pixels, as a list of 
the width and the height. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>deskpage.c</filename> at line 237 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>focus</refname>
    <refpurpose>Give WIN the input focus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(focus  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Give <parameter>win</parameter> the input focus. This will typically result in
drawing <parameter>win</parameter>'s frame in a special style as well. <parameter>win</parameter> defaults to the
window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1296 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>font-properties</refname>
    <refpurpose>Return an association list giving some properties of</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(font-properties font)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return an association list giving some properties of
<parameter>font</parameter>. Currently defined properties are 'name, the string name of the
color, and 'height, it's total height in pixels. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>font.c</filename> at line 248 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>font?</refname>
    <refpurpose>Returns #t if OBJ is a font object, otherwise #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(font? obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns <literal>#t</literal> if <parameter>obj</parameter> is a font object, otherwise <literal>#f</literal>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>font.c</filename> at line 236 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>frame-id->window</refname>
    <refpurpose>Return the window object, if any, corresponding to the frame</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(frame-id->window window-id)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window object, if any, corresponding to the frame
window id <parameter>window-id</parameter>. If there is no such window object, return <literal>#f</literal>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2404 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>get-window</refname>
    <refpurpose>Retrieve the context window or, if none is set, possible</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(get-window  #&amp;optional kill? select? release?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Retrieve the context window or, if none is set, possible
select a window interactively. The optional boolean argument <parameter>kill?</parameter>
(default <literal>#f</literal>) determines whether to use the "kill" cursor when
selecting interactively. The boolean <parameter>select?</parameter> argument (default <literal>#t</literal>)
determines whether or not a window should be selected interactively if
there is no current context window. And finally the <parameter>release?</parameter> argument
(default <literal>#t</literal>) determines wether or not interactive selection (if any)
should wait for a mouse release event or just a press. The latter
behavior is useful if the action being performed on the window is an
interactive one involving mouse drags. (FIXMS: that's probably a bad
order for the optional arguments) 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 450 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>hide-titlebar</refname>
    <refpurpose>Cause WIN not to be decorated with a titlebar.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(hide-titlebar  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter> not to be decorated with a titlebar. <parameter>win</parameter> defaults
to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2592 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>hilight-background</refname>
    <refpurpose>Return the background color being used for windows with the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(hilight-background)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the background color being used for windows with the
input focus in the current decor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 686 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>hilight-factor</refname>
    <refpurpose>Return the current hilight factor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(hilight-factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current hilight factor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 457 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>hilight-foreground</refname>
    <refpurpose>Return the foreground color being used for windows with the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(hilight-foreground)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the foreground color being used for windows with the
input focus in the current decor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 613 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>icon-sticky?</refname>
    <refpurpose>Return a boolean value indicating whether or not WIN</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(icon-sticky?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a boolean value indicating whether or not <parameter>win</parameter>
currently has a "sticky" icon. See <function>stick-icon</function> and <function>stick</function>. <parameter>win</parameter>
defaults to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2787 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>iconified?</refname>
    <refpurpose>Return a boolean value indicating whether or not WIN is</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(iconified?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a boolean value indicating whether or not <parameter>win</parameter> is
iconified. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1577 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>iconify</refname>
    <refpurpose>Iconify WIN - unmap its regular window, and map its icon</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(iconify  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Iconify <parameter>win</parameter> - unmap its regular window, and map its icon
window. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1536 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>id->window</refname>
    <refpurpose>Return the window object, if any, corresponding to the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(id->window window-id)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window object, if any, corresponding to the
application window id <parameter>window-id</parameter>. If there is no such window object,
return <literal>#f</literal>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2384 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>image-properties</refname>
    <refpurpose>Return an association list giving some properties of IMAGE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(image-properties image)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return an association list giving some properties of <parameter>image</parameter>.
Currently defined properties are 'filename, the fully expanded
pathname of the image, 'width, it's width, 'height, it's height, and
depth, it's color depth. 

  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>image.c</filename> at line 167 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>image?</refname>
    <refpurpose>Returns #t if OBJ is an image object, otherwise #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(image? obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns <literal>#t</literal> if <parameter>obj</parameter> is an image object, otherwise <literal>#f</literal>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>image.c</filename> at line 153 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>interactive-move</refname>
    <refpurpose>Move WIN interactively, allowing the user to drag a rubber</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(interactive-move  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move <parameter>win</parameter> interactively, allowing the user to drag a rubber
band frame or the window itself around the screen (depending on the
setting of <function>set-opaque-move-size!</function> and drop it where desired). <parameter>win</parameter>
defaults to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1960 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>interactive-resize</refname>
    <refpurpose>Resize WIN interactively, allowing the user to drag a rubber</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(interactive-resize  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Resize <parameter>win</parameter> interactively, allowing the user to drag a rubber
band frame to set the size of the window. <parameter>win</parameter> defaults to the window
context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2063 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>keep-on-top</refname>
    <refpurpose>Ensure that WIN is kept on top of all other windows, except</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(keep-on-top  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Ensure that <parameter>win</parameter> is kept on top of all other windows, except
possibly other windows that are also on-top. <parameter>win</parameter> defaults to
the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2503 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>kept-on-top?</refname>
    <refpurpose>Return a boolean value indicating whether or not WIN is is</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(kept-on-top?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a boolean value indicating whether or not <parameter>win</parameter> is is
currently being kept on top. <parameter>win</parameter> defaults to the window context in the
usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2546 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>list-all-windows</refname>
    <refpurpose>Return a Scheme list of all of the windows.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(list-all-windows)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a Scheme list of all of the windows. The list is in a
semi-arbitrary order that is convenient for the sake of circulation.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2485 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>load-xbm</refname>
    <refpurpose>Load an X Bitmap file identified by the pathname FULL-PATH.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(load-xbm full-path)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Load an X Bitmap file identified by the pathname <parameter>full-path</parameter>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>image.c</filename> at line 223 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>load-xpm</refname>
    <refpurpose>Load an X Pixmap file identified by the pathname FULL-PATH.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(load-xpm full-path)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Load an X Pixmap file identified by the pathname <parameter>full-path</parameter>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>image.c</filename> at line 257 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>lower-window</refname>
    <refpurpose>Lower WIN to the bottom of the window stack.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(lower-window  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Lower <parameter>win</parameter> to the bottom of the window stack. <parameter>win</parameter> defaults to
the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1371 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>make-color</refname>
    <refpurpose>Return the color object corresponding to the X color</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-color cname)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the color object corresponding to the X color
specifier <parameter>cname</parameter>. If <parameter>cname</parameter> is not a valid X color name, or cannot be
allocated, an error results. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 116 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>make-decor</refname>
    <refpurpose>Create a new decor object.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-decor  #&amp;optional name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Create a new decor object. <parameter>name</parameter> optionally provides a string
that is used to name the decor, and is displayed when the decor is
printed. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>decor.c</filename> at line 231 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>make-face</refname>
    <refpurpose>Create a new face using FLAGS, a list of face flags and</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-face flags specs)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Create a new face using <parameter>flags</parameter>, a list of face flags and
<parameter>specs</parameter>, a list of face specs. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>face.c</filename> at line 327 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>make-font</refname>
    <refpurpose>Return the font object corresponding to the X color</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-font fname)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the font object corresponding to the X color
specifier <parameter>fname</parameter>. If <parameter>fname</parameter> is not a valid X font name, or cannot be
allocated, an error results. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>font.c</filename> at line 106 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>make-image</refname>
    <refpurpose>Loads an image from the file NAME, invoking appropriate image</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-image name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Loads an image from the file <parameter>name</parameter>, invoking appropriate image
loaders. If <parameter>name</parameter> starts with "/", "./" or "../", it is treated as a
fully qulified pathname; otherwise, the image path is searched for an
appropriate file. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>image.c</filename> at line 482 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>make-menu</refname>
    <refpurpose>Make and return a menu object from the given arguments.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-menu list-of-menuitems #&amp;optional picture-side side-bg-color bg-color text-color picture-bg font extra-options)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Make and return a menu object from the given arguments.
<parameter>list-of-menuitems</parameter> is a scheme list of menu items -- see <function>make-menuitem</function>;
<parameter>picture-side</parameter> is an image object;
<parameter>side-bg-color</parameter>, <parameter>bg-color</parameter>, <parameter>text-color</parameter>, <parameter>picture-bg</parameter> are color objects;
<parameter>font</parameter> is a font object;
<parameter>extra-options</parameter> can be anything understood by the menu-specific
drawing code (not used currently).

  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>scwmmenu.c</filename> at line 213 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>make-menuitem</refname>
    <refpurpose>Return a newly created menuitem object using the given arguments.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-menuitem label action #&amp;optional extra-label picture-above picture-left hover-action unhover-action hotkey-prefs)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a newly created menuitem object using the given arguments.
<parameter>label</parameter> is a string giving the main text label of the menu item;
<parameter>action</parameter> is a procedure or menu object -- if it is a procedure, it gets
invoked when the menuitem is selected, if it is a menu object, that
menu is attached as a submenu from the enclosing menu that the created 
menuitem is put in.
<parameter>extra-label</parameter> is extra text describing the menu item -- often this
contains a shortcut key description, or some other descriptive text.
<parameter>picture-above</parameter> and <parameter>picture-left</parameter> are picture objects which correspond to 
images to display within the bounding region of the menuitem.
<parameter>hover-action</parameter> and <parameter>unhover-action</parameter> are procedures to be invoked when the
mouse pointer hovers over the item and is moved away after hovering
over the item, respectively.
<parameter>hotkey-prefs</parameter> is a string listing preferred alphanumeric shortcut-keys
for the given menu-item; the menu creation routine uses these as hints 
for assigning shortcut keys to the various menuitems. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>menuitem.c</filename> at line 142 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>make-relief-color</refname>
    <refpurpose>Multiply the luminosity and saturation of COLOR by the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-relief-color color factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Multiply the luminosity and saturation of <parameter>color</parameter> by the
positive floating point number <parameter>factor</parameter>. Using a <parameter>factor</parameter> smaller than 1
will result in a dimmer color, suitable for use as a darker
relief. Using a factor greater than 1 will result in a brighter color
which is suitable for use as a hilight. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 371 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>marshal-fvwm2-config-info</refname>
    <refpurpose>This procedure constructs the contents of a BroadcastInfo fvwm</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(marshal-fvwm2-config-info win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  This procedure constructs the contents of a BroadcastInfo fvwm
module packet for <parameter>win</parameter> and returns it as a Scheme string. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>module-interface.c</filename> at line 88 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>marshal-fvwm2-iconify-info</refname>
    <refpurpose>This procedure constructs the contents of an "M_ICONIFY" fvwm</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(marshal-fvwm2-iconify-info win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  This procedure constructs the contents of an "M_ICONIFY" fvwm
module packet for <parameter>win</parameter> and returns it as a Scheme string. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>module-interface.c</filename> at line 131 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>menu-hilight-factor</refname>
    <refpurpose>Return the current menu hilight factor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menu-hilight-factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current menu hilight factor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 532 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>menu-properties</refname>
    <refpurpose>Returns the a list of the menu properties of MENU, a menu object.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menu-properties menu)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the a list of the menu properties of <parameter>menu</parameter>, a menu object.
The properties returned are: 
'(menu-items side-image side-bg-color bg-color text-color image-bg
font extra-options used-shortcutkeys) 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>scwmmenu.c</filename> at line 180 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>menu-shadow-factor</refname>
    <refpurpose>Return the current menu shadow factor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menu-shadow-factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current menu shadow factor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 561 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>menu?</refname>
    <refpurpose>Return true if OBJ is a menu object </refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menu? obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return true if <parameter>obj</parameter> is a menu object 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>scwmmenu.c</filename> at line 119 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>menuitem-properties</refname>
    <refpurpose>Return a list of the properties of the given MENU-ITEM.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menuitem-properties menu-item)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a list of the properties of the given <parameter>menu-item</parameter>.
<parameter>menu-item</parameter> is a menuitem object, created by <function>make-menuitem</function>.  The
returned list contains the following, in this order:
'(label action extra-label picture-above picture-left hover-action
  unhover-action hotkey-prefs)
Note that this is the same as the arguments to the <function>make-menuitem</function>
primitive 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>menuitem.c</filename> at line 103 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>mod-mask-alt</refname>
    <refpurpose>Return the bitmask for the Alt modifier key, or #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(mod-mask-alt)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the bitmask for the Alt modifier key, or <literal>#f</literal>.
Returns <literal>#f</literal> iff there is no key bound to act as Alt, otherwise
returns a power of two corresponding to the bitmask of the modifier 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>binding.c</filename> at line 763 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>mod-mask-hyper</refname>
    <refpurpose>Return the bitmask for the Hyper modifier key, or #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(mod-mask-hyper)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the bitmask for the Hyper modifier key, or <literal>#f</literal>.
Returns <literal>#f</literal> iff there is no key bound to act as Hyper, otherwise
returns a power of two corresponding to the bitmask of the modifier 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>binding.c</filename> at line 771 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>mod-mask-meta</refname>
    <refpurpose>Return the bitmask for the Meta modifier key, or #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(mod-mask-meta)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the bitmask for the Meta modifier key, or <literal>#f</literal>.
Returns <literal>#f</literal> iff there is no key bound to act as Meta, otherwise
returns a power of two corresponding to the bitmask of the modifier 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>binding.c</filename> at line 755 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>mod-mask-super</refname>
    <refpurpose>Return the bitmask for the Super modifier key, or #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(mod-mask-super)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the bitmask for the Super modifier key, or <literal>#f</literal>.
Returns <literal>#f</literal> iff there is no key bound to act as Super, otherwise
returns a power of two corresponding to the bitmask of the modifier 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>binding.c</filename> at line 780 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>mouse-event-type</refname>
    <refpurpose>Return a mouse-event-type corresponding to the most recent mouse event.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(mouse-event-type)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a mouse-event-type corresponding to the most recent mouse event.
Return value is one of 'motion, 'click, 'one-and-a-half-clicks, 'double-clicks 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>binding.c</filename> at line 744 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>move-pointer-to</refname>
    <refpurpose>Move the mouse pointer to SX, SY (given in pixels).</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(move-pointer-to sx sy)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move the mouse pointer to <parameter>sx</parameter>, <parameter>sy</parameter> (given in pixels). 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 284 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>move-to</refname>
    <refpurpose>Move WIN to coordinates X, Y.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(move-to x y #&amp;optional win animated? move-pointer-too?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move <parameter>win</parameter> to coordinates <parameter>x</parameter>, <parameter>y</parameter>. If <parameter>animated?</parameter> is specified and
 true, animate the motion of the window, otherwise the move is
 instantaneous. If <parameter>move-pointer-too?</parameter> is specified and true, move the
 mouse pointer by the same amount as the window, animating the motion
 of the pointer along with the window if <parameter>animated?</parameter> is true. <parameter>win</parameter>
 defaults to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1875 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>move-window-to-desk</refname>
    <refpurpose>Move WIN to DESK.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(move-window-to-desk desk #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move <parameter>win</parameter> to <parameter>desk</parameter>. <parameter>desk</parameter> is an integer desk identifier. <parameter>win</parameter>
defaults to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2272 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>normal-border</refname>
    <refpurpose>Cause WIN to be decorated with a normal border.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(normal-border  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter> to be decorated with a normal border. This means
that there will be resize handles in the corners. <parameter>win</parameter> defaults to the
window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2636 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>plain-border</refname>
    <refpurpose>Cause WIN to be decorated with a plain border.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(plain-border  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter> to be decorated with a plain border. This means
that there will be no resize handles in the corners, and the
window . <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2670 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>pointer-position</refname>
    <refpurpose>Return the current position of the mouse pointer in pixels.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(pointer-position)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current position of the mouse pointer in pixels.
The return value is a two-element list of the x and y coordinates. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 269 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>popup-menu</refname>
    <refpurpose>Popup MENU, a menu object, and warp to the first item if WARP-TO-FIRST? is #t.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(popup-menu menu #&amp;optional warp-to-first?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Popup <parameter>menu</parameter>, a menu object, and warp to the first item if <parameter>warp-to-first?</parameter> is <literal>#t</literal>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>scwmmenu.c</filename> at line 1243 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>raise-window</refname>
    <refpurpose>Raise WIN to the top of the window stack (excluding on-top</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(raise-window  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Raise <parameter>win</parameter> to the top of the window stack (excluding on-top
windows). <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1345 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>raised?</refname>
    <refpurpose>Return a boolean value indicating whether or not WIN is</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(raised?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a boolean value indicating whether or not <parameter>win</parameter> is
currently raised. <parameter>win</parameter> defaults to the window context in the usual way
if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1476 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>random-place-window</refname>
    <refpurpose>Places WIN just as if being placed by fvwm2's</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(random-place-window win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Places <parameter>win</parameter> just as if being placed by fvwm2's
	 RandomPlacement.  This placement is not truly random; it is
	 based on two state variables which are incremented for the x
	 and y coordinates, and which wrap around once a window would
	 be forced off the screen. The placement is fairly arbitrary,
	 but always succeeds, and so avoids user interaction. <literal>#t</literal> is
	 always returned. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>placement.c</filename> at line 515 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>recapture</refname>
    <refpurpose>Recapture all the windows, in other words, destroy all the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(recapture)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Recapture all the windows, in other words, destroy all the
current frame windows and recreate them from scratch. This is
hopefully not necessary during normal operation. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 313 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>refresh</refname>
    <refpurpose>Make sure all decorations for all windows are up to date.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(refresh)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Make sure all decorations for all windows are up to date. In theory,
this should not be needed. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 190 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>refresh-window</refname>
    <refpurpose>Refresh the window WIN, ensuring that everything, including</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(refresh-window  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Refresh the window <parameter>win</parameter>, ensuring that everything, including
the decorations is up to date. <function>refresh</function> does this in a more efficient
way for all windows, as well as the root. <parameter>win</parameter> defaults to the window
context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2251 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>register-image-loader</refname>
    <refpurpose>Register PROC as the loader to use for images ending in</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(register-image-loader extension proc)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Register <parameter>proc</parameter> as the loader to use for images ending in
<parameter>extension</parameter>. <parameter>extension</parameter> must be a string beginning with a period, the
empty string (for files with no extension), or the strting "default"
(for files that no other image loader succeeds in loading). <parameter>proc</parameter> will
be called with the full pathname of the image and should return an
image object, or <literal>#f</literal> if it succeeds. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>image.c</filename> at line 310 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>remove-input-hook!</refname>
    <refpurpose>Remove an input hook identified by HANDLE, which should be an</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(remove-input-hook! handle)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Remove an input hook identified by <parameter>handle</parameter>, which should be an
object that was returned by <function>add-input-hook!</function>. An input hook may
safely remove itself. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>callbacks.c</filename> at line 594 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>remove-timer-hook!</refname>
    <refpurpose>Remove a timer hook identified by HANDLE, which should be an</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(remove-timer-hook! handle)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Remove a timer hook identified by <parameter>handle</parameter>, which should be an
object that was returned by <function>add-timer-hook!</function>. No warning or
error will occur if <parameter>handle</parameter> is for a timer hook that has
already been triggered. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>callbacks.c</filename> at line 470 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>resize-to</refname>
    <refpurpose>Resize WIN to a size of W by H in pixels.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(resize-to w h #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Resize <parameter>win</parameter> to a size of <parameter>w</parameter> by <parameter>h</parameter> in pixels. The size includes
the window decorations. <parameter>win</parameter> defaults to the window context in the
usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1999 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>restack-windows</refname>
    <refpurpose>WINLIST is a list of windows.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(restack-windows winlist)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  <parameter>winlist</parameter> is a list of windows. The first element of <parameter>winlist</parameter>
will be kept in its current stacking order, the remainder will be
stacked immediately below it in the order given. (Note: This will
currently confuse the heck out of the pager and possibly other lagacy
fvwm2 modules). 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1390 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>restart</refname>
    <refpurpose>Restart the window manager.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(restart  #&amp;optional command)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Restart the window manager. If <parameter>command</parameter> is specified, use
that, as the new window manager to run. If <parameter>command</parameter> is not specified or
is exactly equal to "scwm", restart scwm with the same command-line
arguments as given previously. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>shutdown.c</filename> at line 130 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>restarted?</refname>
    <refpurpose>Returns true if scwm is being restarted by itself.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(restarted?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns true if scwm is being restarted by itself. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 167 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>safe-load</refname>
    <refpurpose>Load file FNAME, trapping and displaying errors on each</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(safe-load fname)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Load file <parameter>fname</parameter>, trapping and displaying errors on each
	 individual top-level expression. Should be used if you need
	 to make sure most of a file loads, even if it may contain
	 errors. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>callbacks.c</filename> at line 250 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>scwm-quit</refname>
    <refpurpose>Exit scwm cleanly.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(scwm-quit  . args)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Exit scwm cleanly. <function>quit</function> is redefined as this within
scwm. <parameter>args</parameter> is ignored.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>shutdown.c</filename> at line 154 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>scwm-version</refname>
    <refpurpose>Return the version of scwm running.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(scwm-version)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the version of scwm running. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 442 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>select-window</refname>
    <refpurpose>Select a window interactively, by using a special cursor and</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(select-window  #&amp;optional kill? release?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Select a window interactively, by using a special cursor and
letting the user click to select the window. The optional arguments
<parameter>kill?</parameter> and <parameter>release?</parameter> indicate whether to use the "skull and crossbones"
kill cursor (reccomended for destructive operations like delete-window
and destroy-window), and whether to wait for a mouse release or act
immediately on the click. The former is a placeholder until we have
proper cursor support in scwm. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 868 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>select-window-interactively</refname>
    <refpurpose>Should return a window selected interactively - unimplemented.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(select-window-interactively)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Should return a window selected interactively - unimplemented. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 502 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>send-button-press</refname>
    <refpurpose>Send a synthetic press of mouse button BUTTON, with modifier</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(send-button-press button modifier #&amp;optional win button-press? button-release? propagate?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Send a synthetic press of mouse button <parameter>button</parameter>, with modifier
<parameter>modifier</parameter>. The event is sent to window <parameter>win</parameter> if specified; otherwise the
window to be used defaults to the window context in the usual way. By
default, both a press and a release are sent. However, the boolean
parameters <parameter>button-press?</parameter> and <parameter>button-release?</parameter> allow you to specify
which are sent individually. <parameter>propagate?</parameter> indicates wether the propagate
flag is set on the event; the default is <literal>#f</literal>. You shouldn't have to
worry about this unless you know what it means. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>events.c</filename> at line 1717 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>send-key-press</refname>
    <refpurpose>Send a synthetic press of KEY.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(send-key-press key #&amp;optional win key-press? key-release? propagate?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Send a synthetic press of <parameter>key</parameter>. The usual key specification
format (with modifiers) is used. The event is sent to window <parameter>win</parameter> if
specified; otherwise the window to be used defaults to the window
context in the usual way. By default, both a press and a release are
sent. However, the boolean parameters <parameter>key-press?</parameter> and <parameter>key-release?</parameter>
allow you to specify which are sent individually. <parameter>propagate?</parameter> indicates
wether the propagate flag is set on the event; the default is <literal>#f</literal>. You
shouldn't have to worry about this unless you know what it means. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>events.c</filename> at line 1804 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-animation!</refname>
    <refpurpose>Set the animation parameters to VECTOR.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-animation! vector)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the animation parameters to <parameter>vector</parameter>. <parameter>vector</parameter> is a vector of
floats which give the fractions of the final position that the window
should appear at. For intance, #(0.0 0.25 0.5 0.75 1.0 1.1 1.0) would
make the window appear at the initial positon, 1/4 of the way, 1/2 of
the way, 3/4 of the way, overshoot the finall position slightly, and
finally slide back into place. This parameter is used for both
animated window shades and animated moves. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1829 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-border-face!</refname>
    <refpurpose>In the current decor, use ACTIVE as the face for the border</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-border-face! active #&amp;optional inactive)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  In the current decor, use <parameter>active</parameter> as the face for the border
when the window is active. Use <parameter>inactive</parameter> when the window is
inactive. <parameter>inactive</parameter> defaults to the same as <parameter>active</parameter> when not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>face.c</filename> at line 940 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-border-width!</refname>
    <refpurpose>Set the border width of WIN's border to WIDTH pixels.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-border-width! width #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the border width of <parameter>win</parameter>'s border to <parameter>width</parameter> pixels. <parameter>win</parameter>
defaults to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2713 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-button-face!</refname>
    <refpurpose>In the current decor, use ACTIVE-UP as the face for the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-button-face! button active-up #&amp;optional active-down inactive)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  In the current decor, use <parameter>active-up</parameter> as the face for the
button specified by the integer <parameter>button</parameter> when active and not pressed
in. Use <parameter>active-down</parameter> when <parameter>button</parameter> is active and pressed in, and <parameter>inactive</parameter>
when the window is inactive. Both <parameter>inactive</parameter> and <parameter>active-down</parameter> default to
<parameter>active-up</parameter> when not specified. Note that <parameter>active-down</parameter> will magically
reverse the sense of the relief flag, so if the button is raised in
the <parameter>active-up</parameter> state, it will be sunk in the <parameter>active-down</parameter> state by
default.  
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>face.c</filename> at line 852 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-button-mwm-flag!</refname>
    <refpurpose>Specify the Mwm flag for BUTTON, that is, specify wether or</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-button-mwm-flag! button flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Specify the Mwm flag for <parameter>button</parameter>, that is, specify wether or
not it's relief pattern (if any) should reverse in depth sense when
the window is maximized. This is specified by the boolean value <parameter>flag</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>face.c</filename> at line 907 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-click-time!</refname>
    <refpurpose>Set the delay before a mouse-down as considered a drag, and</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-click-time! ctime)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the delay before a mouse-down as considered a drag, and
before a single click is definitively identified as not a double
click, to <parameter>ctime</parameter> microseconds. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 203 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-click-to-focus-passes-click!</refname>
    <refpurpose>Determine wether or not a click-to-focus window will actually</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-click-to-focus-passes-click! flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine wether or not a click-to-focus window will actually
receive the click event that causes it to gain focus, according to the
boolean value <parameter>flag</parameter>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 391 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-click-to-focus-raises!</refname>
    <refpurpose>Determine whether a click to focus raises the clicked-on window</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-click-to-focus-raises! flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine whether a click to focus raises the clicked-on window
accoring to the boolean value <parameter>flag</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 407 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-colormap-focus!</refname>
    <refpurpose>Set the colormap focus policy to FTYPE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-colormap-focus! ftype)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the colormap focus policy to <parameter>ftype</parameter>. <parameter>ftype</parameter> can either be
'mouse, indicating that the window under the mouse pointer should
always have it's colormap installed, or 'focus to indicate that the
window with the input focus should also get the colormap focus. This
makes a difference onl when using focus policies other than 'mouse. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 224 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-current-decor!</refname>
    <refpurpose>Set the current decor to DECOR.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-current-decor! decor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the current decor to <parameter>decor</parameter>. Operations described as
setting options "in the current decor" will now operate on this
one. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>decor.c</filename> at line 269 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-current-desk!</refname>
    <refpurpose>Change the current desk to DESK.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-current-desk! desk)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Change the current desk to <parameter>desk</parameter>. <parameter>desk</parameter> should be an integer
small enough to fit in one machine word. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>deskpage.c</filename> at line 63 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-decorate-transient!</refname>
    <refpurpose>Determine wether or not to decorate WIN fully if it is a</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-decorate-transient! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine wether or not to decorate <parameter>win</parameter> fully if it is a
transient window according to the boolean value <parameter>flag</parameter>. Transient
windows that are not fully decorated will be given only a border and
no titlebar regardless of other settings. <parameter>win</parameter> defaults to the
window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3229 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-desk-size!</refname>
    <refpurpose>Sets the desk size to WIDTH, HEIGHT (in units of the physical</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-desk-size! width height)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Sets the desk size to <parameter>width</parameter>, <parameter>height</parameter> (in units of the physical
screen size) 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>deskpage.c</filename> at line 203 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-edge-resistance!</refname>
    <refpurpose>Set two parameters indicating how much resistance should be</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-edge-resistance! sr mr)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set two parameters indicating how much resistance should be
offered when scrolling things past the edge, in two different
senses. <parameter>sr</parameter> is an amount in microseconds that indicates how long the
mouse pointer must stay at the edge of the screen before the viewport
scrolls. If this paramenter is greater than 10,000, the viewport will
not scroll at all at the screen edge (FIXMS: that's a bogus way to
indicate that.) <parameter>mr</parameter> is an amount in pixels that indicates how many
pixels past the edge of the screen a window must be moved before it
will really go past the edge. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>deskpage.c</filename> at line 178 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-edge-scroll!</refname>
    <refpurpose>Set the amount, in pixels, by which the viewport will scroll</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-edge-scroll! sx sy)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the amount, in pixels, by which the viewport will scroll
when the mouse hits the edge. <parameter>sx</parameter> gives the amount at a time to scroll
horizontally, while <parameter>sy</parameter> gives the amount to scroll vertically. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>deskpage.c</filename> at line 111 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-edge-wrap!</refname>
    <refpurpose>Set wether or not the pointer will wrap around to the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-edge-wrap! wx wy)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set wether or not the pointer will wrap around to the
opposite edge of the desk when it hits the very edge. <parameter>wx</parameter> is a boolean
value indicating wether horizontal wraparound is in effect, while <parameter>wy</parameter>
indicates wether vertical wraparound is in effect. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>deskpage.c</filename> at line 138 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-force-icon!</refname>
    <refpurpose>Set wether or not the icon spcified for WIN will override an</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-force-icon! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set wether or not the icon spcified for <parameter>win</parameter> will override an
app-provided icon, if any, according to the boolean value <parameter>flag</parameter>. <parameter>win</parameter>
defaults to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3064 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-hilight-background!</refname>
    <refpurpose>Use BG as the background color for the window with focus in</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-hilight-background! bg)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>bg</parameter> as the background color for the window with focus in
the current decor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 632 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-hilight-factor!</refname>
    <refpurpose>Use positive floating point number FACTOR to generate hilight</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-hilight-factor! factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use positive floating point number <parameter>factor</parameter> to generate hilight
colors in the current decor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 435 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-hilight-foreground!</refname>
    <refpurpose>Use FG as the foreground color for the window with focus in</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-hilight-foreground! fg)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>fg</parameter> as the foreground color for the window with focus in
the current decor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 589 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-hint-override!</refname>
    <refpurpose>Set wether or not Mwm and Open Look function hints, which</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-hint-override! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set wether or not Mwm and Open Look function hints, which
indicate what operations should be allowed on a window, should be
ignored, according to the boolean value <parameter>flag</parameter>. <parameter>win</parameter> defaults to the
window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3212 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-icon!</refname>
    <refpurpose>Set the image to use for the icon of WIN to IMAGE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-icon! image #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the image to use for the icon of <parameter>win</parameter> to <parameter>image</parameter>. As usual,
an image object or a filename string may be given. <literal>#f</literal> May also be
specified, ndicating no icon image. <parameter>win</parameter> defaults to the window context
in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3108 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-icon-box!</refname>
    <refpurpose>Set the icon box in which WIN's icon will be placed to the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-icon-box! x y w h #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the icon box in which <parameter>win</parameter>'s icon will be placed to the
box at coordinates <parameter>x</parameter>, <parameter>y</parameter> with width <parameter>w</parameter> and height <parameter>h</parameter>. <parameter>win</parameter> defaults to the
window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2800 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-icon-font!</refname>
    <refpurpose>Set the font used for drawing icon titles to FONT.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-icon-font! font)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the font used for drawing icon titles to <parameter>font</parameter>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>font.c</filename> at line 263 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-icon-title!</refname>
    <refpurpose>Set the visibility of WIN's icon title according to FLAG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-icon-title! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the visibility of <parameter>win</parameter>'s icon title according to <parameter>flag</parameter>. <parameter>win</parameter>
defaults to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3046 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-lenience!</refname>
    <refpurpose>Determine wether or not to try to give WIN the input focus</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-lenience! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine wether or not to try to give <parameter>win</parameter> the input focus
when asked, even if the window claims according to hints that it
cannot receive the input focus, according to the boolean value
<parameter>flag</parameter>. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3342 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-menu-background!</refname>
    <refpurpose>Use BG as the default foreground color for menus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-background! bg)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>bg</parameter> as the default foreground color for menus. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 726 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-menu-font!</refname>
    <refpurpose>Set the default font used for drawing menus to FONT.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-font! font)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the default font used for drawing menus to <parameter>font</parameter>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>font.c</filename> at line 350 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-menu-foreground!</refname>
    <refpurpose>Use FG as the default foreground color for menus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-foreground! fg)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>fg</parameter> as the default foreground color for menus. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 699 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-menu-hilight-factor!</refname>
    <refpurpose>Use positive floating point number FACTOR to generate hilight</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-hilight-factor! factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use positive floating point number <parameter>factor</parameter> to generate hilight
colors for menus. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 514 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-menu-mwm-style!</refname>
    <refpurpose>Set the menu mwm style according to the boolean FLAG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-mwm-style!  #&amp;optional flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the menu mwm style according to the boolean <parameter>flag</parameter>. This
         option is currently ignored. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 37 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-menu-shadow-factor!</refname>
    <refpurpose>Use positive floating point number FACTOR to generate shadow</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-shadow-factor! factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use positive floating point number <parameter>factor</parameter> to generate shadow
colors for menus. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 543 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-menu-stipple!</refname>
    <refpurpose>Use ST as the default stipple color for menus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-stipple! st)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>st</parameter> as the default stipple color for menus. 
(GJBFIX: I am not sure this is used for anything any more. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 781 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-mini-icon!</refname>
    <refpurpose>Set the image to use for the mini-icon of WIN to IMAGE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-mini-icon! image #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the image to use for the mini-icon of <parameter>win</parameter> to <parameter>image</parameter>. As
usual, an image object or a filename string may be given. <parameter>win</parameter> defaults
to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3159 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-mouse-focus-click-raises!</refname>
    <refpurpose>Determine wether or not a mouse-focus window will always be</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-mouse-focus-click-raises! flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine wether or not a mouse-focus window will always be
raised by a click on the frame according to the boolean value <parameter>flag</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 428 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-mwm-border!</refname>
    <refpurpose>Set wether or not the decorations of WIN will be drawn in the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-mwm-border! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set wether or not the decorations of <parameter>win</parameter> will be drawn in the
Mwm style rather than the Fvwm style according to the boolean value
<parameter>flag</parameter>. The Mwm style has shallower bevels. <parameter>win</parameter> defaults to the window
context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3018 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-mwm-buttons!</refname>
    <refpurpose>Set the mwm-buttons flag of WIN according to the boolean</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-mwm-buttons! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the mwm-buttons flag of <parameter>win</parameter> according to the boolean
value <parameter>flag</parameter>. The mwm-buttons flag controls whether any of this window's
flags obey their mwm-flags. See <function>set-button-mwm-flag!</function>. <parameter>win</parameter> defaults
to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3002 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-mwm-decor-hint!</refname>
    <refpurpose>Determine wether or not to respect Motif decoration hints for</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-mwm-decor-hint! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine wether or not to respect Motif decoration hints for
<parameter>win</parameter> according to the boolean value <parameter>flag</parameter>. <parameter>win</parameter> defaults to the window
context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3243 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-mwm-func-hint!</refname>
    <refpurpose>Determine wether or not to respect Motif function hints for</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-mwm-func-hint! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine wether or not to respect Motif function hints for
<parameter>win</parameter> according to the boolean value <parameter>flag</parameter>. <parameter>win</parameter> defaults to the window
context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3257 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-OL-decor-hint!</refname>
    <refpurpose>Determine wether or not to respect Open Look decoration hints</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-OL-decor-hint! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine wether or not to respect Open Look decoration hints
for <parameter>win</parameter> according to the boolean value <parameter>flag</parameter>. <parameter>win</parameter> defaults to the
window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3288 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-opaque-move-size!</refname>
    <refpurpose>Set the opaque move size limit to SIZE, which is given as a</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-opaque-move-size! size)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the opaque move size limit to <parameter>size</parameter>, which is given as a
percentage of the screen area. If the area of a window is greater than
this percentage, the window will be moved with a rubber band
instead. (FIXGJB: this should be determined more flexibly) 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 251 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-PPosition-hint!</refname>
    <refpurpose>Determine wether or not to respect the program-specified</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-PPosition-hint! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine wether or not to respect the program-specified
position hint for <parameter>win</parameter> according to the boolean value <parameter>flag</parameter>. This only
matters when using the default placement procedure. Some programs
allegedly set this hint to a useless value like (0,0) always, so
ignoring it is reccomended. <parameter>win</parameter> defaults to the window context in the
usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3274 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-random-placement!</refname>
    <refpurpose>Set the random-placement flag of WIN to the boolean value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-random-placement! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the random-placement flag of <parameter>win</parameter> to the boolean value
<parameter>flag</parameter>. This flag only matters if the default placement procedure is
being used. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2948 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-rubber-band-mask!</refname>
    <refpurpose>Set the rubber band mask, the value XORed with the background</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-rubber-band-mask! value)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the rubber band mask, the value XORed with the background
when dragging non-opaque move or resize frames to <parameter>value</parameter>. <parameter>value</parameter> should
be an integer. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 64 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-shadow-factor!</refname>
    <refpurpose>Use positive floating point number FACTOR to generate shadow</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-shadow-factor! factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use positive floating point number <parameter>factor</parameter> to generate shadow
colors in the current decor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 472 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-show-icon!</refname>
    <refpurpose>Set whether or not the icon of WIN as a whole will be visible</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-show-icon! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set whether or not the icon of <parameter>win</parameter> as a whole will be visible
or not, according to the boolean value <parameter>flag</parameter>. <parameter>win</parameter> defaults to the
window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3090 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-skip-mapping!</refname>
    <refpurpose>Determine wether or not to skip changing to WIN's desktop</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-skip-mapping! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine wether or not to skip changing to <parameter>win</parameter>'s desktop
when first mapping <parameter>win</parameter> according to the boolean value <parameter>flag</parameter>. <parameter>win</parameter>
defaults to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3326 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-smart-placement!</refname>
    <refpurpose>Set the smart-placement flag of WIN to the boolean value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-smart-placement! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the smart-placement flag of <parameter>win</parameter> to the boolean value
<parameter>flag</parameter>. This flag only matters if the default placement procedure is
being used. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2963 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-smart-placement-is-really-smart!</refname>
    <refpurpose>Determine wether or not clever-place-window will be used in</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-smart-placement-is-really-smart! flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine wether or not clever-place-window will be used in
place of smart-place-window when the default placement procedure is
used, and the window's smart-placement flag is on, according to the
boolean value <parameter>flag</parameter>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 373 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-start-on-desk!</refname>
    <refpurpose>Make WIN start on DESK when first mapped.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-start-on-desk! desk #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Make <parameter>win</parameter> start on <parameter>desk</parameter> when first mapped. <parameter>win</parameter> defaults to the
window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3301 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-title-face!</refname>
    <refpurpose>In the current decor, use ACTIVE-UP as the face for the title</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-title-face! active-up #&amp;optional active-down inactive)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  In the current decor, use <parameter>active-up</parameter> as the face for the title
bar when active and not pressed in. Use <parameter>active-down</parameter> when the title bar
is active and pressed in, and <parameter>inactive</parameter> when the window is
inactive. Both <parameter>inactive</parameter> and <parameter>active-down</parameter> default to <parameter>active-up</parameter> when not
specified. Note that <parameter>active-down</parameter> will magically reverse the sense of
the relief flag, so if your titlebar bar is raised in the <parameter>active-up</parameter>
state, it will be sunk in the <parameter>active-down</parameter> state by default.  
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>face.c</filename> at line 812 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-title-height!</refname>
    <refpurpose>Set the height of the titlebar in pixels to HEIGHT in the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-title-height! height)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the height of the titlebar in pixels to <parameter>height</parameter> in the
current decor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 128 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-title-justify!</refname>
    <refpurpose>Set the justification used for the title in the current decor</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-title-justify! just)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the justification used for the title in the current decor
to <parameter>just</parameter>. <parameter>just</parameter> should be one of 'right, 'left, or 'center. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 94 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-viewport-position!</refname>
    <refpurpose>Position the upper left corner of the viewport at coordinates X, Y</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-viewport-position! x y)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Position the upper left corner of the viewport at coordinates <parameter>x</parameter>, <parameter>y</parameter>
(in pixels) on the current desk. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>deskpage.c</filename> at line 88 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-window-background!</refname>
    <refpurpose>Set the foreground color of WIN to BG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-background! bg #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the foreground color of <parameter>win</parameter> to <parameter>bg</parameter>. This color is used to
draw most of the window decorations, along with the relief colors
generated from it, which are used to draw the window's 3-D bevels.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2919 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-window-button!</refname>
    <refpurpose>Set the visibility of button number N on window WIN according</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-button! n flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the visibility of button number <parameter>n</parameter> on window <parameter>win</parameter> according
to the boolean value <parameter>flag</parameter>. <parameter>win</parameter> defaults to the window context in the
usual way if not specified. (<parameter>n</parameter>ote: this code may be broken right now.) 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2977 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-window-decor!</refname>
    <refpurpose>Set WIN's decor to DECOR.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-decor! decor #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set <parameter>win</parameter>'s decor to <parameter>decor</parameter>. If <parameter>win</parameter> is not given, it defaults to
the window context in the usual way. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>decor.c</filename> at line 312 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-window-focus!</refname>
    <refpurpose>Set the focus style of WIN to SYM.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-focus! sym #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the focus style of <parameter>win</parameter> to <parameter>sym</parameter>. <parameter>sym</parameter> may be 'click, 'mouse,
'sloppy or 'none. <parameter>win</parameter> defaults to the window context in the usual way
if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2859 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-window-font!</refname>
    <refpurpose>In the current decor, set the font used for drawing window</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-font! font)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  In the current decor, set the font used for drawing window
titles to <parameter>font</parameter>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>font.c</filename> at line 286 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-window-foreground!</refname>
    <refpurpose>Set the foreground color of WIN to FG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-foreground! fg #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the foreground color of <parameter>win</parameter> to <parameter>fg</parameter>. This color is used to
draw the title text currently. In the future, it may have other uses
as well. <parameter>win</parameter> defaults to the window context in the usual way
if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2895 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-window-text-property</refname>
    <refpurpose>Set a text property named PROPNAME on WIN, with format 8 and type</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-text-property win propname value)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set a text property named <parameter>propname</parameter> on <parameter>win</parameter>, with format 8 and type
"XA_STRING", and <parameter>value</parameter> as the data. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>xproperty.c</filename> at line 138 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>shadow-factor</refname>
    <refpurpose>Return the current shadow factor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(shadow-factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current shadow factor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 495 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>show-titlebar</refname>
    <refpurpose>Cause WIN to be decorated with a titlebar.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(show-titlebar  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter> to be decorated with a titlebar. <parameter>win</parameter> defaults to
the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2561 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>smart-place-window</refname>
    <refpurpose>Places WIN just as if being placed by fvwm2's SmartPlacement,</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(smart-place-window win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Places <parameter>win</parameter> just as if being placed by fvwm2's SmartPlacement,
	 as if SmartPlacementIsReallySmart were not in effect. That
	 is, it tries to place the window so that it does not overlap
	 any other. If it fails to do so, it returns <literal>#f</literal>; otherwise it
	 returns <literal>#t</literal>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>placement.c</filename> at line 431 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>stick</refname>
    <refpurpose>Cause WIN to become "sticky".</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(stick  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter> to become "sticky". A sticky window will appear on
all desktops, and will remain at the same screen position regardless
of scrolling within the current desktop. <parameter>win</parameter> defaults to the window
context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1591 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>stick-icon</refname>
    <refpurpose>Cause WIN's icon to become "sticky".</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(stick-icon  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter>'s icon to become "sticky". See <function>stick</function>. <parameter>win</parameter>
defaults to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2747 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>sticky?</refname>
    <refpurpose>Return a boolean value indicating whether or not WIN is</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(sticky?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a boolean value indicating whether or not <parameter>win</parameter> is
 "sticky". See <function>stick</function> for an explanation. <parameter>win</parameter> defaults to the
 window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1632 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>string->xproperty</refname>
    <refpurpose>Create an xproperty object from STR.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(string->xproperty str)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Create an xproperty object from <parameter>str</parameter>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>xproperty.c</filename> at line 234 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>titlebar-shown?</refname>
    <refpurpose>Return a boolean value indicating whether or not WIN is</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(titlebar-shown?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a boolean value indicating whether or not <parameter>win</parameter> is
currently decorated with a titlebar . <parameter>win</parameter> defaults to the window
context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2623 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>transient?</refname>
    <refpurpose>Return a boolean value indicating whether or not WIN is</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(transient?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a boolean value indicating whether or not <parameter>win</parameter> is
transient. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1493 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>un-keep-on-top</refname>
    <refpurpose>Remove the on-top property from WIN, if it has it.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(un-keep-on-top  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Remove the on-top property from <parameter>win</parameter>, if it has it. See
<function>keep-on-top</function>. <parameter>win</parameter> defaults to the window context in the usual way if
not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2525 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>un-window-shade</refname>
    <refpurpose>Reverse the effect of `window-shade' on WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(un-window-shade  #&amp;optional win animated?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Reverse the effect of <function>window-shade</function> on <parameter>win</parameter>. By default, the
 change takes place instantaneously. However, if the optional
 <parameter>animated?</parameter> argument is true, the window will be animated as it rolls
 down, producing a pleasing visual effect. <parameter>win</parameter> defaults to the window
 context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1727 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>unbind-key</refname>
    <refpurpose>Remove any bindings attached to KEY in given CONTEXTS.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unbind-key contexts key)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Remove any bindings attached to <parameter>key</parameter> in given <parameter>contexts</parameter>.
<parameter>contexts</parameter> is a list of event-contexts (e.g., '(button1 sidebar))
<parameter>key</parameter> is a string giving the key-specifier (e.g., M-Delete for Meta+Delete) 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>binding.c</filename> at line 329 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>unbind-mouse</refname>
    <refpurpose>Remove any bindings attached to mouse BUTTON in given CONTEXTS.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unbind-mouse contexts button)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Remove any bindings attached to mouse <parameter>button</parameter> in given <parameter>contexts</parameter>.
<parameter>contexts</parameter> is a list of event-contexts (e.g., '(button1 sidebar))
<parameter>button</parameter> is a string or integer giving the mouse button number 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>binding.c</filename> at line 390 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>unfocus</refname>
    <refpurpose>Remove the input focus from any window that may have it.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unfocus)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Remove the input focus from any window that may have it. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1313 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>unregister-image-loader</refname>
    <refpurpose>Unregister the loader, if any, for images ending in</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unregister-image-loader extension)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Unregister the loader, if any, for images ending in
<parameter>extension</parameter>. <parameter>extension</parameter> must be a string beginning with a period, the
empty string (for files with no extension), or the strting "default"
(for files that no other image loader succeeds in loading). 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>image.c</filename> at line 334 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>unstick</refname>
    <refpurpose>Cuase a window to no longer be "sticky", if it is.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unstick  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cuase a window to no longer be "sticky", if it is. See
<function>stick</function> for an explanation. <parameter>win</parameter> defaults to the window context in the
usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1612 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>unstick-icon</refname>
    <refpurpose>Cause WIN's icon to no longer by "sticky".</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unstick-icon  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter>'s icon to no longer by "sticky". See <function>stick-icon</function>
and <function>stick</function>. <parameter>win</parameter> defaults to the window context in the usual way if
not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2767 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>viewport-position</refname>
    <refpurpose>Returns the current position of the viewport in pixels, as a</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(viewport-position)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the current position of the viewport in pixels, as a
list of the x and y positions. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>deskpage.c</filename> at line 263 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>wait-for-window</refname>
    <refpurpose>Wait until a window appears which satisfies PREDICATE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(wait-for-window predicate)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Wait until a window appears which satisfies <parameter>predicate</parameter>. Given
the existence of before-new-window-hook, this is of questionable
usefulness. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 330 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>warp-to-window</refname>
    <refpurpose>Move the mouse pointer to the upper left corner of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(warp-to-window  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move the mouse pointer to the upper left corner of <parameter>win</parameter>.  If
<parameter>win</parameter> is on a different desk or in a different viewport, these will be
changed appropriately so that the window is visible. <parameter>win</parameter> defaults to
the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1329 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-class</refname>
    <refpurpose>Return the window resource class of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-class  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window resource class of <parameter>win</parameter>. <parameter>win</parameter> defaults to the
window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2461 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-deletable?</refname>
    <refpurpose>Return a boolean value indicating whether or not WIN</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-deletable?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a boolean value indicating whether or not <parameter>win</parameter>
may be deleted with <function>delete-window</function>. <parameter>win</parameter> defaults to the window
context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1283 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-desk</refname>
    <refpurpose>Return the desk that WIN is currently on.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-desk  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the desk that <parameter>win</parameter> is currently on. <parameter>win</parameter> defaults to the
window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2426 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-frame-id</refname>
    <refpurpose>Return the X window id for the outermost frame window of</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-frame-id  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the X window id for the outermost frame window of
<parameter>win</parameter>. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2371 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-icon</refname>
    <refpurpose>Get the icon image being used for WIN, or #f if none is being</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-icon win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Get the icon image being used for <parameter>win</parameter>, or <literal>#f</literal> if none is being
used. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3142 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-icon-title</refname>
    <refpurpose>Return the icon window title of WIN, as requested by the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-icon-title  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the icon window title of <parameter>win</parameter>, as requested by the
app. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2450 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-id</refname>
    <refpurpose>Return the X window id for WIN, specifically the X id for the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-id  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the X window id for <parameter>win</parameter>, specifically the X id for the
actual application window. <parameter>win</parameter> defaults to the window context in the
usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2358 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-mini-icon</refname>
    <refpurpose>Get the mini-icon image being used for WIN, or #f if none is</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-mini-icon win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Get the mini-icon image being used for <parameter>win</parameter>, or <literal>#f</literal> if none is
being used. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3194 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-position</refname>
    <refpurpose>Return the position of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-position  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the position of <parameter>win</parameter>. The position is returned as a
list of the x coordinate and the y coordinate in pixels. <parameter>win</parameter> defaults
to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2320 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-resource</refname>
    <refpurpose>Return the window resource instance of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-resource  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window resource instance of <parameter>win</parameter>. <parameter>win</parameter> defaults to
the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2473 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-shade</refname>
    <refpurpose>Cuase WIN to become "window-shaded", that is, to roll up into</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-shade  #&amp;optional win animated?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cuase <parameter>win</parameter> to become "window-shaded", that is, to roll up into
 just a titlebar. By default, the change takes place
 instantaneously. However, if the optional <parameter>animated?</parameter> argument is true,
 the window will be animated as it rolls up, producing a pleasing
 visual effect. <parameter>win</parameter> defaults to the window context in the usual way if
 not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1659 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-shaded?</refname>
    <refpurpose>Return a boolean value indicating whether or not WIN is</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-shaded?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a boolean value indicating whether or not <parameter>win</parameter> is
 currently under the effects of <function>window-shade</function>. <parameter>win</parameter> defaults to the
 window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1770 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-size</refname>
    <refpurpose>Return the size of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-size  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the size of <parameter>win</parameter>. The position is returned as a list of
the width and the height in pixels. <parameter>win</parameter> defaults to the window context
in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2339 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-title</refname>
    <refpurpose>Return the window title of WIN, as requested by the app.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-title  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window title of <parameter>win</parameter>, as requested by the app. <parameter>win</parameter>
defaults to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2438 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-transient-for</refname>
    <refpurpose>If WIN is transient, and the window it is transient for is</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-transient-for  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  If <parameter>win</parameter> is transient, and the window it is transient for is
not the root window and is being managed by scwm, return the window
object of the window that <parameter>win</parameter> is transient for, otherwise return
<literal>#f</literal>. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1510 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-xproperty</refname>
    <refpurpose>Get the property called NAME from WIN if the boolean value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-xproperty win name #&amp;optional consume)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Get the property called <parameter>name</parameter> from <parameter>win</parameter> if the boolean value
<parameter>consume</parameter> is specified and true, the property is also delted in one
atomic operation. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>xproperty.c</filename> at line 171 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window?</refname>
    <refpurpose>Returns #t if OBJ is a window object, otherwise returns #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window? obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns <literal>#t</literal> if <parameter>obj</parameter> is a window object, otherwise returns <literal>#f</literal>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 418 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>X-display-information</refname>
    <refpurpose>Return some information about the screen.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-display-information)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return some information about the screen. In particular,
return a list of the horizontal resolution, the vertical resolution,
the number of planes on the current screen (i.e. the bit depth), the
bits per color supported by the hadware, the visual class (one of
"StaticGray", "GrayScale", "StaticColor", "PseudoColor", "DirectColor"
or "TrueColor") and a boolean indicating wether the display is color.
The resolutions mentioned above should in theory be pixels per
centimeter, rounded to the nearest integer. These parameters can be
used for various workarounds or conditional decisions in a scwmrc to
be shared anmong multiple machines. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 482 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>X-pointer-mapping</refname>
    <refpurpose>Return the mapping of physical->logical pointer buttons as a list.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-pointer-mapping)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the mapping of physical-&lt;logical pointer buttons as a list.
The length of the returned list is the number of buttons available.  Each
element in the list is an integer.  E.g., '(1 2 3) is a normally mapped
3-button mouse, whereas '(3 2 1) is a 3-button mouse where the rightmost
physical button acts as logical button 1, and the leftmost acts as button 3. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>binding.c</filename> at line 792 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>X-version-information</refname>
    <refpurpose>Return some information about the version of the running X</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-version-information)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return some information about the version of the running X
server.  In particular, return a list of the X protocol version, the X
protocol revision, the X server vendor, and the vendor release
number. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 455 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>xproperty->string</refname>
    <refpurpose>Convert that data portion of xproperty object PROP to a string.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(xproperty->string prop)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Convert that data portion of xproperty object <parameter>prop</parameter> to a string. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>xproperty.c</filename> at line 221 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>xproperty?</refname>
    <refpurpose>Return #t if OBJ is an xproperty object, otherwise #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(xproperty? obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>obj</parameter> is an xproperty object, otherwise <literal>#f</literal>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>xproperty.c</filename> at line 107 </para> </refsect1>
</refentry>

  </chapter>
  <chapter>
    <title>Primitives By Defined-in File</title>
    <sect1><title>binding.c</title>
<refentry>
  <refnamediv>
    <refname>unbind-key</refname>
    <refpurpose>Remove any bindings attached to KEY in given CONTEXTS.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unbind-key contexts key)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Remove any bindings attached to <parameter>key</parameter> in given <parameter>contexts</parameter>.
<parameter>contexts</parameter> is a list of event-contexts (e.g., '(button1 sidebar))
<parameter>key</parameter> is a string giving the key-specifier (e.g., M-Delete for Meta+Delete) 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>binding.c</filename> at line 329 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>unbind-mouse</refname>
    <refpurpose>Remove any bindings attached to mouse BUTTON in given CONTEXTS.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unbind-mouse contexts button)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Remove any bindings attached to mouse <parameter>button</parameter> in given <parameter>contexts</parameter>.
<parameter>contexts</parameter> is a list of event-contexts (e.g., '(button1 sidebar))
<parameter>button</parameter> is a string or integer giving the mouse button number 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>binding.c</filename> at line 390 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>bind-key</refname>
    <refpurpose>Bind the given KEY within the CONTEXTS to invoke PROC.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(bind-key contexts key proc)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Bind the given <parameter>key</parameter> within the <parameter>contexts</parameter> to invoke <parameter>proc</parameter>.
<parameter>contexts</parameter> is a list of event-contexts (e.g., '(button1 sidebar))
<parameter>key</parameter> is a string giving the key-specifier (e.g., M-Delete for Meta+Delete)
<parameter>proc</parameter> is a procedure (possibly a thunk) that should be invoked 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>binding.c</filename> at line 464 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>bind-mouse</refname>
    <refpurpose>Bind the given mouse BUTTON within the CONTEXTS to invoke PROC.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(bind-mouse contexts button proc)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Bind the given mouse <parameter>button</parameter> within the <parameter>contexts</parameter> to invoke <parameter>proc</parameter>.
<parameter>contexts</parameter> is a list of event-contexts (e.g., '(button1 sidebar))
<parameter>button</parameter> is a string or integer giving the mouse button number
<parameter>proc</parameter> is a procedure (possibly a thunk) that should be invoked 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>binding.c</filename> at line 565 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>mouse-event-type</refname>
    <refpurpose>Return a mouse-event-type corresponding to the most recent mouse event.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(mouse-event-type)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a mouse-event-type corresponding to the most recent mouse event.
Return value is one of 'motion, 'click, 'one-and-a-half-clicks, 'double-clicks 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>binding.c</filename> at line 744 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>mod-mask-meta</refname>
    <refpurpose>Return the bitmask for the Meta modifier key, or #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(mod-mask-meta)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the bitmask for the Meta modifier key, or <literal>#f</literal>.
Returns <literal>#f</literal> iff there is no key bound to act as Meta, otherwise
returns a power of two corresponding to the bitmask of the modifier 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>binding.c</filename> at line 755 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>mod-mask-alt</refname>
    <refpurpose>Return the bitmask for the Alt modifier key, or #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(mod-mask-alt)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the bitmask for the Alt modifier key, or <literal>#f</literal>.
Returns <literal>#f</literal> iff there is no key bound to act as Alt, otherwise
returns a power of two corresponding to the bitmask of the modifier 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>binding.c</filename> at line 763 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>mod-mask-hyper</refname>
    <refpurpose>Return the bitmask for the Hyper modifier key, or #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(mod-mask-hyper)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the bitmask for the Hyper modifier key, or <literal>#f</literal>.
Returns <literal>#f</literal> iff there is no key bound to act as Hyper, otherwise
returns a power of two corresponding to the bitmask of the modifier 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>binding.c</filename> at line 771 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>mod-mask-super</refname>
    <refpurpose>Return the bitmask for the Super modifier key, or #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(mod-mask-super)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the bitmask for the Super modifier key, or <literal>#f</literal>.
Returns <literal>#f</literal> iff there is no key bound to act as Super, otherwise
returns a power of two corresponding to the bitmask of the modifier 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>binding.c</filename> at line 780 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>X-pointer-mapping</refname>
    <refpurpose>Return the mapping of physical->logical pointer buttons as a list.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-pointer-mapping)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the mapping of physical-&lt;logical pointer buttons as a list.
The length of the returned list is the number of buttons available.  Each
element in the list is an integer.  E.g., '(1 2 3) is a normally mapped
3-button mouse, whereas '(3 2 1) is a 3-button mouse where the rightmost
physical button acts as logical button 1, and the leftmost acts as button 3. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>binding.c</filename> at line 792 </para> </refsect1>
</refentry>

    </sect1>
    <sect1><title>callbacks.c</title>
<refentry>
  <refnamediv>
    <refname>safe-load</refname>
    <refpurpose>Load file FNAME, trapping and displaying errors on each</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(safe-load fname)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Load file <parameter>fname</parameter>, trapping and displaying errors on each
	 individual top-level expression. Should be used if you need
	 to make sure most of a file loads, even if it may contain
	 errors. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>callbacks.c</filename> at line 250 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>add-timer-hook!</refname>
    <refpurpose>Add a timer hook;</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(add-timer-hook! usec proc)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Add a timer hook; when at least <parameter>usec</parameter> microseconds have
passed, procedure <parameter>proc</parameter> will be called with no arguments. A
handle suitable for passing to <function>remove-timer-hook!</function> is
returned. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>callbacks.c</filename> at line 428 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>remove-timer-hook!</refname>
    <refpurpose>Remove a timer hook identified by HANDLE, which should be an</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(remove-timer-hook! handle)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Remove a timer hook identified by <parameter>handle</parameter>, which should be an
object that was returned by <function>add-timer-hook!</function>. No warning or
error will occur if <parameter>handle</parameter> is for a timer hook that has
already been triggered. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>callbacks.c</filename> at line 470 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>add-input-hook!</refname>
    <refpurpose>Add a timer hook;</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(add-input-hook! port proc)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Add a timer hook; whenever input becomes availabe on <parameter>port</parameter>,
procedure <parameter>proc</parameter> will be called with no arguments repeatedly until no
unprocessed input remains on <parameter>port</parameter>. <parameter>port</parameter> must be open, it must be an
input port, and it must be a file port (this includes pipes and
sockets, but not string ports or soft ports). A handle suitable for
passing to <function>remove-input-hook!</function> is returned. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>callbacks.c</filename> at line 567 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>remove-input-hook!</refname>
    <refpurpose>Remove an input hook identified by HANDLE, which should be an</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(remove-input-hook! handle)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Remove an input hook identified by <parameter>handle</parameter>, which should be an
object that was returned by <function>add-input-hook!</function>. An input hook may
safely remove itself. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>callbacks.c</filename> at line 594 </para> </refsect1>
</refentry>

    </sect1>
    <sect1><title>color.c</title>
<refentry>
  <refnamediv>
    <refname>color?</refname>
    <refpurpose>Returns #t if OBJ is a color object, otherwise #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(color? obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns <literal>#t</literal> if <parameter>obj</parameter> is a color object, otherwise <literal>#f</literal>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 84 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>color-properties</refname>
    <refpurpose>Return an association list giving some properties of</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(color-properties color)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return an association list giving some properties of
<parameter>color</parameter>. Currently defined properties are 'name, the string name of the
color, and 'pixel, the X pixel value it uses. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 98 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>make-color</refname>
    <refpurpose>Return the color object corresponding to the X color</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-color cname)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the color object corresponding to the X color
specifier <parameter>cname</parameter>. If <parameter>cname</parameter> is not a valid X color name, or cannot be
allocated, an error results. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 116 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>clear-color-cache-entry</refname>
    <refpurpose>Colors are cached by name.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(clear-color-cache-entry name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Colors are cached by name. It is remotely possible that the
meaning of a particular string as a color will change in your X
server, if you try hard enough. For this unlikely eventuality,
<function>clear-color-cache-entry</function> is provided - it removes the color
associated with <parameter>name</parameter> from the color cache.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 186 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>make-relief-color</refname>
    <refpurpose>Multiply the luminosity and saturation of COLOR by the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-relief-color color factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Multiply the luminosity and saturation of <parameter>color</parameter> by the
positive floating point number <parameter>factor</parameter>. Using a <parameter>factor</parameter> smaller than 1
will result in a dimmer color, suitable for use as a darker
relief. Using a factor greater than 1 will result in a brighter color
which is suitable for use as a hilight. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 371 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-hilight-factor!</refname>
    <refpurpose>Use positive floating point number FACTOR to generate hilight</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-hilight-factor! factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use positive floating point number <parameter>factor</parameter> to generate hilight
colors in the current decor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 435 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>hilight-factor</refname>
    <refpurpose>Return the current hilight factor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(hilight-factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current hilight factor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 457 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-shadow-factor!</refname>
    <refpurpose>Use positive floating point number FACTOR to generate shadow</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-shadow-factor! factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use positive floating point number <parameter>factor</parameter> to generate shadow
colors in the current decor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 472 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>shadow-factor</refname>
    <refpurpose>Return the current shadow factor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(shadow-factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current shadow factor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 495 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-menu-hilight-factor!</refname>
    <refpurpose>Use positive floating point number FACTOR to generate hilight</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-hilight-factor! factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use positive floating point number <parameter>factor</parameter> to generate hilight
colors for menus. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 514 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>menu-hilight-factor</refname>
    <refpurpose>Return the current menu hilight factor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menu-hilight-factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current menu hilight factor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 532 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-menu-shadow-factor!</refname>
    <refpurpose>Use positive floating point number FACTOR to generate shadow</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-shadow-factor! factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use positive floating point number <parameter>factor</parameter> to generate shadow
colors for menus. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 543 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>menu-shadow-factor</refname>
    <refpurpose>Return the current menu shadow factor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menu-shadow-factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current menu shadow factor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 561 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-hilight-foreground!</refname>
    <refpurpose>Use FG as the foreground color for the window with focus in</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-hilight-foreground! fg)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>fg</parameter> as the foreground color for the window with focus in
the current decor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 589 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>hilight-foreground</refname>
    <refpurpose>Return the foreground color being used for windows with the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(hilight-foreground)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the foreground color being used for windows with the
input focus in the current decor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 613 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-hilight-background!</refname>
    <refpurpose>Use BG as the background color for the window with focus in</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-hilight-background! bg)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>bg</parameter> as the background color for the window with focus in
the current decor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 632 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>hilight-background</refname>
    <refpurpose>Return the background color being used for windows with the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(hilight-background)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the background color being used for windows with the
input focus in the current decor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 686 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-menu-foreground!</refname>
    <refpurpose>Use FG as the default foreground color for menus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-foreground! fg)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>fg</parameter> as the default foreground color for menus. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 699 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-menu-background!</refname>
    <refpurpose>Use BG as the default foreground color for menus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-background! bg)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>bg</parameter> as the default foreground color for menus. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 726 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-menu-stipple!</refname>
    <refpurpose>Use ST as the default stipple color for menus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-stipple! st)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>st</parameter> as the default stipple color for menus. 
(GJBFIX: I am not sure this is used for anything any more. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>color.c</filename> at line 781 </para> </refsect1>
</refentry>

    </sect1>
    <sect1><title>decor.c</title>
<refentry>
  <refnamediv>
    <refname>make-decor</refname>
    <refpurpose>Create a new decor object.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-decor  #&amp;optional name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Create a new decor object. <parameter>name</parameter> optionally provides a string
that is used to name the decor, and is displayed when the decor is
printed. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>decor.c</filename> at line 231 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>default-decor</refname>
    <refpurpose>Return the default decor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(default-decor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the default decor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>decor.c</filename> at line 257 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-current-decor!</refname>
    <refpurpose>Set the current decor to DECOR.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-current-decor! decor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the current decor to <parameter>decor</parameter>. Operations described as
setting options "in the current decor" will now operate on this
one. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>decor.c</filename> at line 269 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>current-decor</refname>
    <refpurpose>Return the current decor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(current-decor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current decor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>decor.c</filename> at line 297 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-window-decor!</refname>
    <refpurpose>Set WIN's decor to DECOR.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-decor! decor #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set <parameter>win</parameter>'s decor to <parameter>decor</parameter>. If <parameter>win</parameter> is not given, it defaults to
the window context in the usual way. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>decor.c</filename> at line 312 </para> </refsect1>
</refentry>

    </sect1>
    <sect1><title>deskpage.c</title>
<refentry>
  <refnamediv>
    <refname>set-current-desk!</refname>
    <refpurpose>Change the current desk to DESK.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-current-desk! desk)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Change the current desk to <parameter>desk</parameter>. <parameter>desk</parameter> should be an integer
small enough to fit in one machine word. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>deskpage.c</filename> at line 63 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-viewport-position!</refname>
    <refpurpose>Position the upper left corner of the viewport at coordinates X, Y</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-viewport-position! x y)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Position the upper left corner of the viewport at coordinates <parameter>x</parameter>, <parameter>y</parameter>
(in pixels) on the current desk. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>deskpage.c</filename> at line 88 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-edge-scroll!</refname>
    <refpurpose>Set the amount, in pixels, by which the viewport will scroll</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-edge-scroll! sx sy)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the amount, in pixels, by which the viewport will scroll
when the mouse hits the edge. <parameter>sx</parameter> gives the amount at a time to scroll
horizontally, while <parameter>sy</parameter> gives the amount to scroll vertically. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>deskpage.c</filename> at line 111 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-edge-wrap!</refname>
    <refpurpose>Set wether or not the pointer will wrap around to the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-edge-wrap! wx wy)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set wether or not the pointer will wrap around to the
opposite edge of the desk when it hits the very edge. <parameter>wx</parameter> is a boolean
value indicating wether horizontal wraparound is in effect, while <parameter>wy</parameter>
indicates wether vertical wraparound is in effect. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>deskpage.c</filename> at line 138 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-edge-resistance!</refname>
    <refpurpose>Set two parameters indicating how much resistance should be</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-edge-resistance! sr mr)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set two parameters indicating how much resistance should be
offered when scrolling things past the edge, in two different
senses. <parameter>sr</parameter> is an amount in microseconds that indicates how long the
mouse pointer must stay at the edge of the screen before the viewport
scrolls. If this paramenter is greater than 10,000, the viewport will
not scroll at all at the screen edge (FIXMS: that's a bogus way to
indicate that.) <parameter>mr</parameter> is an amount in pixels that indicates how many
pixels past the edge of the screen a window must be moved before it
will really go past the edge. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>deskpage.c</filename> at line 178 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-desk-size!</refname>
    <refpurpose>Sets the desk size to WIDTH, HEIGHT (in units of the physical</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-desk-size! width height)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Sets the desk size to <parameter>width</parameter>, <parameter>height</parameter> (in units of the physical
screen size) 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>deskpage.c</filename> at line 203 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>display-size</refname>
    <refpurpose>Returns the size of the physical screen, in pixels, as a list of </refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(display-size)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the size of the physical screen, in pixels, as a list of 
the width and the height. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>deskpage.c</filename> at line 237 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>desk-size</refname>
    <refpurpose>Returns the size of the current desk, in units of the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(desk-size)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the size of the current desk, in units of the
physical screen size, as a list of the width and the height. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>deskpage.c</filename> at line 250 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>viewport-position</refname>
    <refpurpose>Returns the current position of the viewport in pixels, as a</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(viewport-position)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the current position of the viewport in pixels, as a
list of the x and y positions. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>deskpage.c</filename> at line 263 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>current-desk</refname>
    <refpurpose>Returns the integer identifying the current desk.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(current-desk)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the integer identifying the current desk. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>deskpage.c</filename> at line 275 </para> </refsect1>
</refentry>

    </sect1>
    <sect1><title>events.c</title>
<refentry>
  <refnamediv>
    <refname>send-button-press</refname>
    <refpurpose>Send a synthetic press of mouse button BUTTON, with modifier</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(send-button-press button modifier #&amp;optional win button-press? button-release? propagate?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Send a synthetic press of mouse button <parameter>button</parameter>, with modifier
<parameter>modifier</parameter>. The event is sent to window <parameter>win</parameter> if specified; otherwise the
window to be used defaults to the window context in the usual way. By
default, both a press and a release are sent. However, the boolean
parameters <parameter>button-press?</parameter> and <parameter>button-release?</parameter> allow you to specify
which are sent individually. <parameter>propagate?</parameter> indicates wether the propagate
flag is set on the event; the default is <literal>#f</literal>. You shouldn't have to
worry about this unless you know what it means. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>events.c</filename> at line 1717 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>send-key-press</refname>
    <refpurpose>Send a synthetic press of KEY.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(send-key-press key #&amp;optional win key-press? key-release? propagate?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Send a synthetic press of <parameter>key</parameter>. The usual key specification
format (with modifiers) is used. The event is sent to window <parameter>win</parameter> if
specified; otherwise the window to be used defaults to the window
context in the usual way. By default, both a press and a release are
sent. However, the boolean parameters <parameter>key-press?</parameter> and <parameter>key-release?</parameter>
allow you to specify which are sent individually. <parameter>propagate?</parameter> indicates
wether the propagate flag is set on the event; the default is <literal>#f</literal>. You
shouldn't have to worry about this unless you know what it means. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>events.c</filename> at line 1804 </para> </refsect1>
</refentry>

    </sect1>
    <sect1><title>face.c</title>
<refentry>
  <refnamediv>
    <refname>make-face</refname>
    <refpurpose>Create a new face using FLAGS, a list of face flags and</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-face flags specs)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Create a new face using <parameter>flags</parameter>, a list of face flags and
<parameter>specs</parameter>, a list of face specs. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>face.c</filename> at line 327 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-title-face!</refname>
    <refpurpose>In the current decor, use ACTIVE-UP as the face for the title</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-title-face! active-up #&amp;optional active-down inactive)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  In the current decor, use <parameter>active-up</parameter> as the face for the title
bar when active and not pressed in. Use <parameter>active-down</parameter> when the title bar
is active and pressed in, and <parameter>inactive</parameter> when the window is
inactive. Both <parameter>inactive</parameter> and <parameter>active-down</parameter> default to <parameter>active-up</parameter> when not
specified. Note that <parameter>active-down</parameter> will magically reverse the sense of
the relief flag, so if your titlebar bar is raised in the <parameter>active-up</parameter>
state, it will be sunk in the <parameter>active-down</parameter> state by default.  
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>face.c</filename> at line 812 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-button-face!</refname>
    <refpurpose>In the current decor, use ACTIVE-UP as the face for the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-button-face! button active-up #&amp;optional active-down inactive)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  In the current decor, use <parameter>active-up</parameter> as the face for the
button specified by the integer <parameter>button</parameter> when active and not pressed
in. Use <parameter>active-down</parameter> when <parameter>button</parameter> is active and pressed in, and <parameter>inactive</parameter>
when the window is inactive. Both <parameter>inactive</parameter> and <parameter>active-down</parameter> default to
<parameter>active-up</parameter> when not specified. Note that <parameter>active-down</parameter> will magically
reverse the sense of the relief flag, so if the button is raised in
the <parameter>active-up</parameter> state, it will be sunk in the <parameter>active-down</parameter> state by
default.  
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>face.c</filename> at line 852 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-button-mwm-flag!</refname>
    <refpurpose>Specify the Mwm flag for BUTTON, that is, specify wether or</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-button-mwm-flag! button flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Specify the Mwm flag for <parameter>button</parameter>, that is, specify wether or
not it's relief pattern (if any) should reverse in depth sense when
the window is maximized. This is specified by the boolean value <parameter>flag</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>face.c</filename> at line 907 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-border-face!</refname>
    <refpurpose>In the current decor, use ACTIVE as the face for the border</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-border-face! active #&amp;optional inactive)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  In the current decor, use <parameter>active</parameter> as the face for the border
when the window is active. Use <parameter>inactive</parameter> when the window is
inactive. <parameter>inactive</parameter> defaults to the same as <parameter>active</parameter> when not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>face.c</filename> at line 940 </para> </refsect1>
</refentry>

    </sect1>
    <sect1><title>font.c</title>
<refentry>
  <refnamediv>
    <refname>make-font</refname>
    <refpurpose>Return the font object corresponding to the X color</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-font fname)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the font object corresponding to the X color
specifier <parameter>fname</parameter>. If <parameter>fname</parameter> is not a valid X font name, or cannot be
allocated, an error results. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>font.c</filename> at line 106 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>font?</refname>
    <refpurpose>Returns #t if OBJ is a font object, otherwise #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(font? obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns <literal>#t</literal> if <parameter>obj</parameter> is a font object, otherwise <literal>#f</literal>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>font.c</filename> at line 236 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>font-properties</refname>
    <refpurpose>Return an association list giving some properties of</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(font-properties font)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return an association list giving some properties of
<parameter>font</parameter>. Currently defined properties are 'name, the string name of the
color, and 'height, it's total height in pixels. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>font.c</filename> at line 248 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-icon-font!</refname>
    <refpurpose>Set the font used for drawing icon titles to FONT.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-icon-font! font)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the font used for drawing icon titles to <parameter>font</parameter>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>font.c</filename> at line 263 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-window-font!</refname>
    <refpurpose>In the current decor, set the font used for drawing window</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-font! font)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  In the current decor, set the font used for drawing window
titles to <parameter>font</parameter>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>font.c</filename> at line 286 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-menu-font!</refname>
    <refpurpose>Set the default font used for drawing menus to FONT.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-font! font)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the default font used for drawing menus to <parameter>font</parameter>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>font.c</filename> at line 350 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>clear-font-cache-entry</refname>
    <refpurpose>Fonts are cached by name.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(clear-font-cache-entry name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Fonts are cached by name. It is remotely possible that the
meaning of a particular string as a fonts will change in your X
server, if you try hard enough (perhaps if you add or remove font
servers). For this unlikely eventuality, <function>clear-font-cache-entry</function> is
provided - it removes the font associated with <parameter>name</parameter> from the font
cache.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>font.c</filename> at line 378 </para> </refsect1>
</refentry>

    </sect1>
    <sect1><title>image.c</title>
<refentry>
  <refnamediv>
    <refname>image?</refname>
    <refpurpose>Returns #t if OBJ is an image object, otherwise #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(image? obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns <literal>#t</literal> if <parameter>obj</parameter> is an image object, otherwise <literal>#f</literal>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>image.c</filename> at line 153 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>image-properties</refname>
    <refpurpose>Return an association list giving some properties of IMAGE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(image-properties image)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return an association list giving some properties of <parameter>image</parameter>.
Currently defined properties are 'filename, the fully expanded
pathname of the image, 'width, it's width, 'height, it's height, and
depth, it's color depth. 

  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>image.c</filename> at line 167 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>load-xbm</refname>
    <refpurpose>Load an X Bitmap file identified by the pathname FULL-PATH.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(load-xbm full-path)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Load an X Bitmap file identified by the pathname <parameter>full-path</parameter>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>image.c</filename> at line 223 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>load-xpm</refname>
    <refpurpose>Load an X Pixmap file identified by the pathname FULL-PATH.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(load-xpm full-path)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Load an X Pixmap file identified by the pathname <parameter>full-path</parameter>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>image.c</filename> at line 257 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>register-image-loader</refname>
    <refpurpose>Register PROC as the loader to use for images ending in</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(register-image-loader extension proc)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Register <parameter>proc</parameter> as the loader to use for images ending in
<parameter>extension</parameter>. <parameter>extension</parameter> must be a string beginning with a period, the
empty string (for files with no extension), or the strting "default"
(for files that no other image loader succeeds in loading). <parameter>proc</parameter> will
be called with the full pathname of the image and should return an
image object, or <literal>#f</literal> if it succeeds. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>image.c</filename> at line 310 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>unregister-image-loader</refname>
    <refpurpose>Unregister the loader, if any, for images ending in</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unregister-image-loader extension)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Unregister the loader, if any, for images ending in
<parameter>extension</parameter>. <parameter>extension</parameter> must be a string beginning with a period, the
empty string (for files with no extension), or the strting "default"
(for files that no other image loader succeeds in loading). 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>image.c</filename> at line 334 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>make-image</refname>
    <refpurpose>Loads an image from the file NAME, invoking appropriate image</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-image name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Loads an image from the file <parameter>name</parameter>, invoking appropriate image
loaders. If <parameter>name</parameter> starts with "/", "./" or "../", it is treated as a
fully qulified pathname; otherwise, the image path is searched for an
appropriate file. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>image.c</filename> at line 482 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>clear-image-cache-entry</refname>
    <refpurpose>Images are cached by both name and full pathnme.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(clear-image-cache-entry name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Images are cached by both name and full pathnme. It is
remotely possible that the file that should be used for a particular
name will change, for example if you alter the image file or change
your image path. For this unlikely eventuality,
<function>clear-image-cache-entry</function> is provided - it removes the image
associated with <parameter>name</parameter> from the image cache.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>image.c</filename> at line 552 </para> </refsect1>
</refentry>

    </sect1>
    <sect1><title>menuitem.c</title>
<refentry>
  <refnamediv>
    <refname>menuitem-properties</refname>
    <refpurpose>Return a list of the properties of the given MENU-ITEM.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menuitem-properties menu-item)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a list of the properties of the given <parameter>menu-item</parameter>.
<parameter>menu-item</parameter> is a menuitem object, created by <function>make-menuitem</function>.  The
returned list contains the following, in this order:
'(label action extra-label picture-above picture-left hover-action
  unhover-action hotkey-prefs)
Note that this is the same as the arguments to the <function>make-menuitem</function>
primitive 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>menuitem.c</filename> at line 103 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>make-menuitem</refname>
    <refpurpose>Return a newly created menuitem object using the given arguments.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-menuitem label action #&amp;optional extra-label picture-above picture-left hover-action unhover-action hotkey-prefs)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a newly created menuitem object using the given arguments.
<parameter>label</parameter> is a string giving the main text label of the menu item;
<parameter>action</parameter> is a procedure or menu object -- if it is a procedure, it gets
invoked when the menuitem is selected, if it is a menu object, that
menu is attached as a submenu from the enclosing menu that the created 
menuitem is put in.
<parameter>extra-label</parameter> is extra text describing the menu item -- often this
contains a shortcut key description, or some other descriptive text.
<parameter>picture-above</parameter> and <parameter>picture-left</parameter> are picture objects which correspond to 
images to display within the bounding region of the menuitem.
<parameter>hover-action</parameter> and <parameter>unhover-action</parameter> are procedures to be invoked when the
mouse pointer hovers over the item and is moved away after hovering
over the item, respectively.
<parameter>hotkey-prefs</parameter> is a string listing preferred alphanumeric shortcut-keys
for the given menu-item; the menu creation routine uses these as hints 
for assigning shortcut keys to the various menuitems. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>menuitem.c</filename> at line 142 </para> </refsect1>
</refentry>

    </sect1>
    <sect1><title>miscprocs.c</title>
<refentry>
  <refnamediv>
    <refname>set-menu-mwm-style!</refname>
    <refpurpose>Set the menu mwm style according to the boolean FLAG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-mwm-style!  #&amp;optional flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the menu mwm style according to the boolean <parameter>flag</parameter>. This
         option is currently ignored. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 37 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-rubber-band-mask!</refname>
    <refpurpose>Set the rubber band mask, the value XORed with the background</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-rubber-band-mask! value)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the rubber band mask, the value XORed with the background
when dragging non-opaque move or resize frames to <parameter>value</parameter>. <parameter>value</parameter> should
be an integer. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 64 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-title-justify!</refname>
    <refpurpose>Set the justification used for the title in the current decor</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-title-justify! just)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the justification used for the title in the current decor
to <parameter>just</parameter>. <parameter>just</parameter> should be one of 'right, 'left, or 'center. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 94 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-title-height!</refname>
    <refpurpose>Set the height of the titlebar in pixels to HEIGHT in the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-title-height! height)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the height of the titlebar in pixels to <parameter>height</parameter> in the
current decor. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 128 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>restarted?</refname>
    <refpurpose>Returns true if scwm is being restarted by itself.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(restarted?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns true if scwm is being restarted by itself. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 167 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>capturing?</refname>
    <refpurpose>Returns true when the windows are being caputured, either</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(capturing?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns true when the windows are being caputured, either
during initial startup, or during a recapture operation. In either
case, placement procedures should probably avoid interaction and
perhaps avoid moving the window being placed at all. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 179 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>refresh</refname>
    <refpurpose>Make sure all decorations for all windows are up to date.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(refresh)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Make sure all decorations for all windows are up to date. In theory,
this should not be needed. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 190 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-click-time!</refname>
    <refpurpose>Set the delay before a mouse-down as considered a drag, and</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-click-time! ctime)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the delay before a mouse-down as considered a drag, and
before a single click is definitively identified as not a double
click, to <parameter>ctime</parameter> microseconds. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 203 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-colormap-focus!</refname>
    <refpurpose>Set the colormap focus policy to FTYPE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-colormap-focus! ftype)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the colormap focus policy to <parameter>ftype</parameter>. <parameter>ftype</parameter> can either be
'mouse, indicating that the window under the mouse pointer should
always have it's colormap installed, or 'focus to indicate that the
window with the input focus should also get the colormap focus. This
makes a difference onl when using focus policies other than 'mouse. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 224 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-opaque-move-size!</refname>
    <refpurpose>Set the opaque move size limit to SIZE, which is given as a</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-opaque-move-size! size)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the opaque move size limit to <parameter>size</parameter>, which is given as a
percentage of the screen area. If the area of a window is greater than
this percentage, the window will be moved with a rubber band
instead. (FIXGJB: this should be determined more flexibly) 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 251 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>pointer-position</refname>
    <refpurpose>Return the current position of the mouse pointer in pixels.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(pointer-position)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current position of the mouse pointer in pixels.
The return value is a two-element list of the x and y coordinates. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 269 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>move-pointer-to</refname>
    <refpurpose>Move the mouse pointer to SX, SY (given in pixels).</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(move-pointer-to sx sy)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move the mouse pointer to <parameter>sx</parameter>, <parameter>sy</parameter> (given in pixels). 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 284 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>recapture</refname>
    <refpurpose>Recapture all the windows, in other words, destroy all the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(recapture)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Recapture all the windows, in other words, destroy all the
current frame windows and recreate them from scratch. This is
hopefully not necessary during normal operation. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 313 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>wait-for-window</refname>
    <refpurpose>Wait until a window appears which satisfies PREDICATE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(wait-for-window predicate)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Wait until a window appears which satisfies <parameter>predicate</parameter>. Given
the existence of before-new-window-hook, this is of questionable
usefulness. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 330 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>beep</refname>
    <refpurpose>Ring the standard X bell.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(beep)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Ring the standard X bell. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 359 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-smart-placement-is-really-smart!</refname>
    <refpurpose>Determine wether or not clever-place-window will be used in</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-smart-placement-is-really-smart! flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine wether or not clever-place-window will be used in
place of smart-place-window when the default placement procedure is
used, and the window's smart-placement flag is on, according to the
boolean value <parameter>flag</parameter>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 373 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-click-to-focus-passes-click!</refname>
    <refpurpose>Determine wether or not a click-to-focus window will actually</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-click-to-focus-passes-click! flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine wether or not a click-to-focus window will actually
receive the click event that causes it to gain focus, according to the
boolean value <parameter>flag</parameter>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 391 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-click-to-focus-raises!</refname>
    <refpurpose>Determine whether a click to focus raises the clicked-on window</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-click-to-focus-raises! flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine whether a click to focus raises the clicked-on window
accoring to the boolean value <parameter>flag</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 407 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-mouse-focus-click-raises!</refname>
    <refpurpose>Determine wether or not a mouse-focus window will always be</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-mouse-focus-click-raises! flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine wether or not a mouse-focus window will always be
raised by a click on the frame according to the boolean value <parameter>flag</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 428 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>scwm-version</refname>
    <refpurpose>Return the version of scwm running.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(scwm-version)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the version of scwm running. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 442 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>X-version-information</refname>
    <refpurpose>Return some information about the version of the running X</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-version-information)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return some information about the version of the running X
server.  In particular, return a list of the X protocol version, the X
protocol revision, the X server vendor, and the vendor release
number. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 455 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>X-display-information</refname>
    <refpurpose>Return some information about the screen.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-display-information)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return some information about the screen. In particular,
return a list of the horizontal resolution, the vertical resolution,
the number of planes on the current screen (i.e. the bit depth), the
bits per color supported by the hadware, the visual class (one of
"StaticGray", "GrayScale", "StaticColor", "PseudoColor", "DirectColor"
or "TrueColor") and a boolean indicating wether the display is color.
The resolutions mentioned above should in theory be pixels per
centimeter, rounded to the nearest integer. These parameters can be
used for various workarounds or conditional decisions in a scwmrc to
be shared anmong multiple machines. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>miscprocs.c</filename> at line 482 </para> </refsect1>
</refentry>

    </sect1>
    <sect1><title>module-interface.c</title>
<refentry>
  <refnamediv>
    <refname>marshal-fvwm2-config-info</refname>
    <refpurpose>This procedure constructs the contents of a BroadcastInfo fvwm</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(marshal-fvwm2-config-info win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  This procedure constructs the contents of a BroadcastInfo fvwm
module packet for <parameter>win</parameter> and returns it as a Scheme string. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>module-interface.c</filename> at line 88 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>marshal-fvwm2-iconify-info</refname>
    <refpurpose>This procedure constructs the contents of an "M_ICONIFY" fvwm</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(marshal-fvwm2-iconify-info win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  This procedure constructs the contents of an "M_ICONIFY" fvwm
module packet for <parameter>win</parameter> and returns it as a Scheme string. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>module-interface.c</filename> at line 131 </para> </refsect1>
</refentry>

    </sect1>
    <sect1><title>placement.c</title>
<refentry>
  <refnamediv>
    <refname>smart-place-window</refname>
    <refpurpose>Places WIN just as if being placed by fvwm2's SmartPlacement,</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(smart-place-window win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Places <parameter>win</parameter> just as if being placed by fvwm2's SmartPlacement,
	 as if SmartPlacementIsReallySmart were not in effect. That
	 is, it tries to place the window so that it does not overlap
	 any other. If it fails to do so, it returns <literal>#f</literal>; otherwise it
	 returns <literal>#t</literal>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>placement.c</filename> at line 431 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>clever-place-window</refname>
    <refpurpose>Places WIN just as if being placed by fvwm2's SmartPlacement,</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(clever-place-window win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Places <parameter>win</parameter> just as if being placed by fvwm2's SmartPlacement,
	 as if SmartPlacementIsReallySmart were in effect. That is, it
	 tries to place the window so as to minimize its area of
	 overlap with other windows. Several parameters give different
	 weight to various kinds of windows, but they are not tunable
	 at runtime currently. If it fails to place the window, it
	 returns <literal>#f</literal>; otherwise it returns <literal>#t</literal>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>placement.c</filename> at line 478 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>random-place-window</refname>
    <refpurpose>Places WIN just as if being placed by fvwm2's</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(random-place-window win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Places <parameter>win</parameter> just as if being placed by fvwm2's
	 RandomPlacement.  This placement is not truly random; it is
	 based on two state variables which are incremented for the x
	 and y coordinates, and which wrap around once a window would
	 be forced off the screen. The placement is fairly arbitrary,
	 but always succeeds, and so avoids user interaction. <literal>#t</literal> is
	 always returned. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>placement.c</filename> at line 515 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>default-placement-proc</refname>
    <refpurpose>This is the default placement procedure for non-transient</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(default-placement-proc win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  This is the default placement procedure for non-transient
	 windows. It tries <function>smart-place-window</function>,
	 <function>clever-place-window</function>, <function>random-place-window</function>, or
	 <function>interactive-move</function> (to achieve interactive placement) on <parameter>win</parameter>
	 depending on several settable style flags. However, if one of
	 the following factors holds, the window will instead be
	 placed exactly as requested by the program: the position was
	 specified by the user, the position was specified by the
	 program, and #:no-PPosition-hint is not set, or the window
	 starts iconic. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>placement.c</filename> at line 556 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>default-transient-placement-proc</refname>
    <refpurpose>This is the default placement procedure for transient</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(default-transient-placement-proc win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  This is the default placement procedure for transient
	 windows. It simply leaves the window <parameter>win</parameter> in place, exactly as
	 requested. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>placement.c</filename> at line 602 </para> </refsect1>
</refentry>

    </sect1>
    <sect1><title>scwmmenu.c</title>
<refentry>
  <refnamediv>
    <refname>menu?</refname>
    <refpurpose>Return true if OBJ is a menu object </refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menu? obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return true if <parameter>obj</parameter> is a menu object 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>scwmmenu.c</filename> at line 119 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>menu-properties</refname>
    <refpurpose>Returns the a list of the menu properties of MENU, a menu object.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menu-properties menu)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the a list of the menu properties of <parameter>menu</parameter>, a menu object.
The properties returned are: 
'(menu-items side-image side-bg-color bg-color text-color image-bg
font extra-options used-shortcutkeys) 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>scwmmenu.c</filename> at line 180 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>make-menu</refname>
    <refpurpose>Make and return a menu object from the given arguments.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-menu list-of-menuitems #&amp;optional picture-side side-bg-color bg-color text-color picture-bg font extra-options)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Make and return a menu object from the given arguments.
<parameter>list-of-menuitems</parameter> is a scheme list of menu items -- see <function>make-menuitem</function>;
<parameter>picture-side</parameter> is an image object;
<parameter>side-bg-color</parameter>, <parameter>bg-color</parameter>, <parameter>text-color</parameter>, <parameter>picture-bg</parameter> are color objects;
<parameter>font</parameter> is a font object;
<parameter>extra-options</parameter> can be anything understood by the menu-specific
drawing code (not used currently).

  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>scwmmenu.c</filename> at line 213 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>popup-menu</refname>
    <refpurpose>Popup MENU, a menu object, and warp to the first item if WARP-TO-FIRST? is #t.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(popup-menu menu #&amp;optional warp-to-first?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Popup <parameter>menu</parameter>, a menu object, and warp to the first item if <parameter>warp-to-first?</parameter> is <literal>#t</literal>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>scwmmenu.c</filename> at line 1243 </para> </refsect1>
</refentry>

    </sect1>
    <sect1><title>shutdown.c</title>
<refentry>
  <refnamediv>
    <refname>restart</refname>
    <refpurpose>Restart the window manager.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(restart  #&amp;optional command)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Restart the window manager. If <parameter>command</parameter> is specified, use
that, as the new window manager to run. If <parameter>command</parameter> is not specified or
is exactly equal to "scwm", restart scwm with the same command-line
arguments as given previously. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>shutdown.c</filename> at line 130 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>scwm-quit</refname>
    <refpurpose>Exit scwm cleanly.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(scwm-quit  . args)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Exit scwm cleanly. <function>quit</function> is redefined as this within
scwm. <parameter>args</parameter> is ignored.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>shutdown.c</filename> at line 154 </para> </refsect1>
</refentry>

    </sect1>
    <sect1><title>window.c</title>
<refentry>
  <refnamediv>
    <refname>window?</refname>
    <refpurpose>Returns #t if OBJ is a window object, otherwise returns #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window? obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns <literal>#t</literal> if <parameter>obj</parameter> is a window object, otherwise returns <literal>#f</literal>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 418 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>get-window</refname>
    <refpurpose>Retrieve the context window or, if none is set, possible</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(get-window  #&amp;optional kill? select? release?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Retrieve the context window or, if none is set, possible
select a window interactively. The optional boolean argument <parameter>kill?</parameter>
(default <literal>#f</literal>) determines whether to use the "kill" cursor when
selecting interactively. The boolean <parameter>select?</parameter> argument (default <literal>#t</literal>)
determines whether or not a window should be selected interactively if
there is no current context window. And finally the <parameter>release?</parameter> argument
(default <literal>#t</literal>) determines wether or not interactive selection (if any)
should wait for a mouse release event or just a press. The latter
behavior is useful if the action being performed on the window is an
interactive one involving mouse drags. (FIXMS: that's probably a bad
order for the optional arguments) 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 450 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>current-window-with-focus</refname>
    <refpurpose>Return the window that currently has the input focus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(current-window-with-focus)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window that currently has the input focus. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 481 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>current-window-with-pointer</refname>
    <refpurpose>Return the window that currently contains the mouse pointer.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(current-window-with-pointer)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window that currently contains the mouse pointer. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 491 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>select-window-interactively</refname>
    <refpurpose>Should return a window selected interactively - unimplemented.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(select-window-interactively)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Should return a window selected interactively - unimplemented. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 502 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>select-window</refname>
    <refpurpose>Select a window interactively, by using a special cursor and</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(select-window  #&amp;optional kill? release?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Select a window interactively, by using a special cursor and
letting the user click to select the window. The optional arguments
<parameter>kill?</parameter> and <parameter>release?</parameter> indicate whether to use the "skull and crossbones"
kill cursor (reccomended for destructive operations like delete-window
and destroy-window), and whether to wait for a mouse release or act
immediately on the click. The former is a placeholder until we have
proper cursor support in scwm. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 868 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>delete-window</refname>
    <refpurpose>Request that WIN remove itself from the display.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(delete-window  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Request that <parameter>win</parameter> remove itself from the display. This is the
friendly way of closing a window, but it will not work if the
application does not cooperate. <parameter>win</parameter> defaults to the window context in
the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1223 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>destroy-window</refname>
    <refpurpose>Forcibly remove WIN from the screen.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(destroy-window  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Forcibly remove <parameter>win</parameter> from the screen. This will kill the
application without giving it a chance to save its state or do any
other shutdown, but is guaranteed to work. <parameter>win</parameter> defaults to the window
context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1253 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-deletable?</refname>
    <refpurpose>Return a boolean value indicating whether or not WIN</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-deletable?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a boolean value indicating whether or not <parameter>win</parameter>
may be deleted with <function>delete-window</function>. <parameter>win</parameter> defaults to the window
context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1283 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>focus</refname>
    <refpurpose>Give WIN the input focus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(focus  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Give <parameter>win</parameter> the input focus. This will typically result in
drawing <parameter>win</parameter>'s frame in a special style as well. <parameter>win</parameter> defaults to the
window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1296 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>unfocus</refname>
    <refpurpose>Remove the input focus from any window that may have it.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unfocus)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Remove the input focus from any window that may have it. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1313 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>warp-to-window</refname>
    <refpurpose>Move the mouse pointer to the upper left corner of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(warp-to-window  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move the mouse pointer to the upper left corner of <parameter>win</parameter>.  If
<parameter>win</parameter> is on a different desk or in a different viewport, these will be
changed appropriately so that the window is visible. <parameter>win</parameter> defaults to
the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1329 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>raise-window</refname>
    <refpurpose>Raise WIN to the top of the window stack (excluding on-top</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(raise-window  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Raise <parameter>win</parameter> to the top of the window stack (excluding on-top
windows). <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1345 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>lower-window</refname>
    <refpurpose>Lower WIN to the bottom of the window stack.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(lower-window  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Lower <parameter>win</parameter> to the bottom of the window stack. <parameter>win</parameter> defaults to
the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1371 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>restack-windows</refname>
    <refpurpose>WINLIST is a list of windows.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(restack-windows winlist)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  <parameter>winlist</parameter> is a list of windows. The first element of <parameter>winlist</parameter>
will be kept in its current stacking order, the remainder will be
stacked immediately below it in the order given. (Note: This will
currently confuse the heck out of the pager and possibly other lagacy
fvwm2 modules). 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1390 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>raised?</refname>
    <refpurpose>Return a boolean value indicating whether or not WIN is</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(raised?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a boolean value indicating whether or not <parameter>win</parameter> is
currently raised. <parameter>win</parameter> defaults to the window context in the usual way
if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1476 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>transient?</refname>
    <refpurpose>Return a boolean value indicating whether or not WIN is</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(transient?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a boolean value indicating whether or not <parameter>win</parameter> is
transient. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1493 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-transient-for</refname>
    <refpurpose>If WIN is transient, and the window it is transient for is</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-transient-for  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  If <parameter>win</parameter> is transient, and the window it is transient for is
not the root window and is being managed by scwm, return the window
object of the window that <parameter>win</parameter> is transient for, otherwise return
<literal>#f</literal>. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1510 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>iconify</refname>
    <refpurpose>Iconify WIN - unmap its regular window, and map its icon</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(iconify  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Iconify <parameter>win</parameter> - unmap its regular window, and map its icon
window. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1536 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>deiconify</refname>
    <refpurpose>Deiconify WIN - unmap its icon window, and map its regular</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(deiconify  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Deiconify <parameter>win</parameter> - unmap its icon window, and map its regular
window. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1561 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>iconified?</refname>
    <refpurpose>Return a boolean value indicating whether or not WIN is</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(iconified?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a boolean value indicating whether or not <parameter>win</parameter> is
iconified. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1577 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>stick</refname>
    <refpurpose>Cause WIN to become "sticky".</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(stick  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter> to become "sticky". A sticky window will appear on
all desktops, and will remain at the same screen position regardless
of scrolling within the current desktop. <parameter>win</parameter> defaults to the window
context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1591 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>unstick</refname>
    <refpurpose>Cuase a window to no longer be "sticky", if it is.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unstick  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cuase a window to no longer be "sticky", if it is. See
<function>stick</function> for an explanation. <parameter>win</parameter> defaults to the window context in the
usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1612 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>sticky?</refname>
    <refpurpose>Return a boolean value indicating whether or not WIN is</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(sticky?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a boolean value indicating whether or not <parameter>win</parameter> is
 "sticky". See <function>stick</function> for an explanation. <parameter>win</parameter> defaults to the
 window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1632 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-shade</refname>
    <refpurpose>Cuase WIN to become "window-shaded", that is, to roll up into</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-shade  #&amp;optional win animated?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cuase <parameter>win</parameter> to become "window-shaded", that is, to roll up into
 just a titlebar. By default, the change takes place
 instantaneously. However, if the optional <parameter>animated?</parameter> argument is true,
 the window will be animated as it rolls up, producing a pleasing
 visual effect. <parameter>win</parameter> defaults to the window context in the usual way if
 not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1659 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>un-window-shade</refname>
    <refpurpose>Reverse the effect of `window-shade' on WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(un-window-shade  #&amp;optional win animated?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Reverse the effect of <function>window-shade</function> on <parameter>win</parameter>. By default, the
 change takes place instantaneously. However, if the optional
 <parameter>animated?</parameter> argument is true, the window will be animated as it rolls
 down, producing a pleasing visual effect. <parameter>win</parameter> defaults to the window
 context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1727 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-shaded?</refname>
    <refpurpose>Return a boolean value indicating whether or not WIN is</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-shaded?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a boolean value indicating whether or not <parameter>win</parameter> is
 currently under the effects of <function>window-shade</function>. <parameter>win</parameter> defaults to the
 window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1770 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-animation!</refname>
    <refpurpose>Set the animation parameters to VECTOR.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-animation! vector)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the animation parameters to <parameter>vector</parameter>. <parameter>vector</parameter> is a vector of
floats which give the fractions of the final position that the window
should appear at. For intance, #(0.0 0.25 0.5 0.75 1.0 1.1 1.0) would
make the window appear at the initial positon, 1/4 of the way, 1/2 of
the way, 3/4 of the way, overshoot the finall position slightly, and
finally slide back into place. This parameter is used for both
animated window shades and animated moves. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1829 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>move-to</refname>
    <refpurpose>Move WIN to coordinates X, Y.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(move-to x y #&amp;optional win animated? move-pointer-too?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move <parameter>win</parameter> to coordinates <parameter>x</parameter>, <parameter>y</parameter>. If <parameter>animated?</parameter> is specified and
 true, animate the motion of the window, otherwise the move is
 instantaneous. If <parameter>move-pointer-too?</parameter> is specified and true, move the
 mouse pointer by the same amount as the window, animating the motion
 of the pointer along with the window if <parameter>animated?</parameter> is true. <parameter>win</parameter>
 defaults to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1875 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>interactive-move</refname>
    <refpurpose>Move WIN interactively, allowing the user to drag a rubber</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(interactive-move  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move <parameter>win</parameter> interactively, allowing the user to drag a rubber
band frame or the window itself around the screen (depending on the
setting of <function>set-opaque-move-size!</function> and drop it where desired). <parameter>win</parameter>
defaults to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1960 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>resize-to</refname>
    <refpurpose>Resize WIN to a size of W by H in pixels.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(resize-to w h #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Resize <parameter>win</parameter> to a size of <parameter>w</parameter> by <parameter>h</parameter> in pixels. The size includes
the window decorations. <parameter>win</parameter> defaults to the window context in the
usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 1999 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>interactive-resize</refname>
    <refpurpose>Resize WIN interactively, allowing the user to drag a rubber</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(interactive-resize  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Resize <parameter>win</parameter> interactively, allowing the user to drag a rubber
band frame to set the size of the window. <parameter>win</parameter> defaults to the window
context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2063 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>refresh-window</refname>
    <refpurpose>Refresh the window WIN, ensuring that everything, including</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(refresh-window  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Refresh the window <parameter>win</parameter>, ensuring that everything, including
the decorations is up to date. <function>refresh</function> does this in a more efficient
way for all windows, as well as the root. <parameter>win</parameter> defaults to the window
context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2251 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>move-window-to-desk</refname>
    <refpurpose>Move WIN to DESK.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(move-window-to-desk desk #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move <parameter>win</parameter> to <parameter>desk</parameter>. <parameter>desk</parameter> is an integer desk identifier. <parameter>win</parameter>
defaults to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2272 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-position</refname>
    <refpurpose>Return the position of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-position  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the position of <parameter>win</parameter>. The position is returned as a
list of the x coordinate and the y coordinate in pixels. <parameter>win</parameter> defaults
to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2320 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-size</refname>
    <refpurpose>Return the size of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-size  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the size of <parameter>win</parameter>. The position is returned as a list of
the width and the height in pixels. <parameter>win</parameter> defaults to the window context
in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2339 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-id</refname>
    <refpurpose>Return the X window id for WIN, specifically the X id for the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-id  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the X window id for <parameter>win</parameter>, specifically the X id for the
actual application window. <parameter>win</parameter> defaults to the window context in the
usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2358 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-frame-id</refname>
    <refpurpose>Return the X window id for the outermost frame window of</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-frame-id  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the X window id for the outermost frame window of
<parameter>win</parameter>. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2371 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>id->window</refname>
    <refpurpose>Return the window object, if any, corresponding to the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(id->window window-id)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window object, if any, corresponding to the
application window id <parameter>window-id</parameter>. If there is no such window object,
return <literal>#f</literal>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2384 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>frame-id->window</refname>
    <refpurpose>Return the window object, if any, corresponding to the frame</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(frame-id->window window-id)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window object, if any, corresponding to the frame
window id <parameter>window-id</parameter>. If there is no such window object, return <literal>#f</literal>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2404 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-desk</refname>
    <refpurpose>Return the desk that WIN is currently on.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-desk  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the desk that <parameter>win</parameter> is currently on. <parameter>win</parameter> defaults to the
window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2426 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-title</refname>
    <refpurpose>Return the window title of WIN, as requested by the app.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-title  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window title of <parameter>win</parameter>, as requested by the app. <parameter>win</parameter>
defaults to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2438 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-icon-title</refname>
    <refpurpose>Return the icon window title of WIN, as requested by the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-icon-title  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the icon window title of <parameter>win</parameter>, as requested by the
app. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2450 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-class</refname>
    <refpurpose>Return the window resource class of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-class  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window resource class of <parameter>win</parameter>. <parameter>win</parameter> defaults to the
window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2461 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-resource</refname>
    <refpurpose>Return the window resource instance of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-resource  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window resource instance of <parameter>win</parameter>. <parameter>win</parameter> defaults to
the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2473 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>list-all-windows</refname>
    <refpurpose>Return a Scheme list of all of the windows.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(list-all-windows)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a Scheme list of all of the windows. The list is in a
semi-arbitrary order that is convenient for the sake of circulation.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2485 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>keep-on-top</refname>
    <refpurpose>Ensure that WIN is kept on top of all other windows, except</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(keep-on-top  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Ensure that <parameter>win</parameter> is kept on top of all other windows, except
possibly other windows that are also on-top. <parameter>win</parameter> defaults to
the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2503 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>un-keep-on-top</refname>
    <refpurpose>Remove the on-top property from WIN, if it has it.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(un-keep-on-top  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Remove the on-top property from <parameter>win</parameter>, if it has it. See
<function>keep-on-top</function>. <parameter>win</parameter> defaults to the window context in the usual way if
not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2525 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>kept-on-top?</refname>
    <refpurpose>Return a boolean value indicating whether or not WIN is is</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(kept-on-top?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a boolean value indicating whether or not <parameter>win</parameter> is is
currently being kept on top. <parameter>win</parameter> defaults to the window context in the
usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2546 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>show-titlebar</refname>
    <refpurpose>Cause WIN to be decorated with a titlebar.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(show-titlebar  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter> to be decorated with a titlebar. <parameter>win</parameter> defaults to
the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2561 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>hide-titlebar</refname>
    <refpurpose>Cause WIN not to be decorated with a titlebar.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(hide-titlebar  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter> not to be decorated with a titlebar. <parameter>win</parameter> defaults
to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2592 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>titlebar-shown?</refname>
    <refpurpose>Return a boolean value indicating whether or not WIN is</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(titlebar-shown?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a boolean value indicating whether or not <parameter>win</parameter> is
currently decorated with a titlebar . <parameter>win</parameter> defaults to the window
context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2623 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>normal-border</refname>
    <refpurpose>Cause WIN to be decorated with a normal border.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(normal-border  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter> to be decorated with a normal border. This means
that there will be resize handles in the corners. <parameter>win</parameter> defaults to the
window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2636 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>plain-border</refname>
    <refpurpose>Cause WIN to be decorated with a plain border.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(plain-border  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter> to be decorated with a plain border. This means
that there will be no resize handles in the corners, and the
window . <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2670 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>border-normal?</refname>
    <refpurpose>Return a boolean value indicating whether or not WIN</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(border-normal?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a boolean value indicating whether or not <parameter>win</parameter>
currently has a normal border. <parameter>win</parameter> defaults to the window context in
the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2700 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-border-width!</refname>
    <refpurpose>Set the border width of WIN's border to WIDTH pixels.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-border-width! width #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the border width of <parameter>win</parameter>'s border to <parameter>width</parameter> pixels. <parameter>win</parameter>
defaults to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2713 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>stick-icon</refname>
    <refpurpose>Cause WIN's icon to become "sticky".</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(stick-icon  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter>'s icon to become "sticky". See <function>stick</function>. <parameter>win</parameter>
defaults to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2747 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>unstick-icon</refname>
    <refpurpose>Cause WIN's icon to no longer by "sticky".</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unstick-icon  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter>'s icon to no longer by "sticky". See <function>stick-icon</function>
and <function>stick</function>. <parameter>win</parameter> defaults to the window context in the usual way if
not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2767 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>icon-sticky?</refname>
    <refpurpose>Return a boolean value indicating whether or not WIN</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(icon-sticky?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a boolean value indicating whether or not <parameter>win</parameter>
currently has a "sticky" icon. See <function>stick-icon</function> and <function>stick</function>. <parameter>win</parameter>
defaults to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2787 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-icon-box!</refname>
    <refpurpose>Set the icon box in which WIN's icon will be placed to the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-icon-box! x y w h #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the icon box in which <parameter>win</parameter>'s icon will be placed to the
box at coordinates <parameter>x</parameter>, <parameter>y</parameter> with width <parameter>w</parameter> and height <parameter>h</parameter>. <parameter>win</parameter> defaults to the
window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2800 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-window-focus!</refname>
    <refpurpose>Set the focus style of WIN to SYM.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-focus! sym #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the focus style of <parameter>win</parameter> to <parameter>sym</parameter>. <parameter>sym</parameter> may be 'click, 'mouse,
'sloppy or 'none. <parameter>win</parameter> defaults to the window context in the usual way
if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2859 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-window-foreground!</refname>
    <refpurpose>Set the foreground color of WIN to FG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-foreground! fg #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the foreground color of <parameter>win</parameter> to <parameter>fg</parameter>. This color is used to
draw the title text currently. In the future, it may have other uses
as well. <parameter>win</parameter> defaults to the window context in the usual way
if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2895 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-window-background!</refname>
    <refpurpose>Set the foreground color of WIN to BG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-background! bg #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the foreground color of <parameter>win</parameter> to <parameter>bg</parameter>. This color is used to
draw most of the window decorations, along with the relief colors
generated from it, which are used to draw the window's 3-D bevels.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2919 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-random-placement!</refname>
    <refpurpose>Set the random-placement flag of WIN to the boolean value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-random-placement! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the random-placement flag of <parameter>win</parameter> to the boolean value
<parameter>flag</parameter>. This flag only matters if the default placement procedure is
being used. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2948 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-smart-placement!</refname>
    <refpurpose>Set the smart-placement flag of WIN to the boolean value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-smart-placement! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the smart-placement flag of <parameter>win</parameter> to the boolean value
<parameter>flag</parameter>. This flag only matters if the default placement procedure is
being used. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2963 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-window-button!</refname>
    <refpurpose>Set the visibility of button number N on window WIN according</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-button! n flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the visibility of button number <parameter>n</parameter> on window <parameter>win</parameter> according
to the boolean value <parameter>flag</parameter>. <parameter>win</parameter> defaults to the window context in the
usual way if not specified. (<parameter>n</parameter>ote: this code may be broken right now.) 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 2977 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-mwm-buttons!</refname>
    <refpurpose>Set the mwm-buttons flag of WIN according to the boolean</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-mwm-buttons! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the mwm-buttons flag of <parameter>win</parameter> according to the boolean
value <parameter>flag</parameter>. The mwm-buttons flag controls whether any of this window's
flags obey their mwm-flags. See <function>set-button-mwm-flag!</function>. <parameter>win</parameter> defaults
to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3002 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-mwm-border!</refname>
    <refpurpose>Set wether or not the decorations of WIN will be drawn in the</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-mwm-border! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set wether or not the decorations of <parameter>win</parameter> will be drawn in the
Mwm style rather than the Fvwm style according to the boolean value
<parameter>flag</parameter>. The Mwm style has shallower bevels. <parameter>win</parameter> defaults to the window
context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3018 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-icon-title!</refname>
    <refpurpose>Set the visibility of WIN's icon title according to FLAG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-icon-title! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the visibility of <parameter>win</parameter>'s icon title according to <parameter>flag</parameter>. <parameter>win</parameter>
defaults to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3046 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-force-icon!</refname>
    <refpurpose>Set wether or not the icon spcified for WIN will override an</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-force-icon! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set wether or not the icon spcified for <parameter>win</parameter> will override an
app-provided icon, if any, according to the boolean value <parameter>flag</parameter>. <parameter>win</parameter>
defaults to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3064 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-show-icon!</refname>
    <refpurpose>Set whether or not the icon of WIN as a whole will be visible</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-show-icon! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set whether or not the icon of <parameter>win</parameter> as a whole will be visible
or not, according to the boolean value <parameter>flag</parameter>. <parameter>win</parameter> defaults to the
window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3090 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-icon!</refname>
    <refpurpose>Set the image to use for the icon of WIN to IMAGE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-icon! image #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the image to use for the icon of <parameter>win</parameter> to <parameter>image</parameter>. As usual,
an image object or a filename string may be given. <literal>#f</literal> May also be
specified, ndicating no icon image. <parameter>win</parameter> defaults to the window context
in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3108 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-icon</refname>
    <refpurpose>Get the icon image being used for WIN, or #f if none is being</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-icon win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Get the icon image being used for <parameter>win</parameter>, or <literal>#f</literal> if none is being
used. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3142 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-mini-icon!</refname>
    <refpurpose>Set the image to use for the mini-icon of WIN to IMAGE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-mini-icon! image #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the image to use for the mini-icon of <parameter>win</parameter> to <parameter>image</parameter>. As
usual, an image object or a filename string may be given. <parameter>win</parameter> defaults
to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3159 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-mini-icon</refname>
    <refpurpose>Get the mini-icon image being used for WIN, or #f if none is</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-mini-icon win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Get the mini-icon image being used for <parameter>win</parameter>, or <literal>#f</literal> if none is
being used. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3194 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-hint-override!</refname>
    <refpurpose>Set wether or not Mwm and Open Look function hints, which</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-hint-override! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set wether or not Mwm and Open Look function hints, which
indicate what operations should be allowed on a window, should be
ignored, according to the boolean value <parameter>flag</parameter>. <parameter>win</parameter> defaults to the
window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3212 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-decorate-transient!</refname>
    <refpurpose>Determine wether or not to decorate WIN fully if it is a</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-decorate-transient! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine wether or not to decorate <parameter>win</parameter> fully if it is a
transient window according to the boolean value <parameter>flag</parameter>. Transient
windows that are not fully decorated will be given only a border and
no titlebar regardless of other settings. <parameter>win</parameter> defaults to the
window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3229 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-mwm-decor-hint!</refname>
    <refpurpose>Determine wether or not to respect Motif decoration hints for</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-mwm-decor-hint! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine wether or not to respect Motif decoration hints for
<parameter>win</parameter> according to the boolean value <parameter>flag</parameter>. <parameter>win</parameter> defaults to the window
context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3243 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-mwm-func-hint!</refname>
    <refpurpose>Determine wether or not to respect Motif function hints for</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-mwm-func-hint! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine wether or not to respect Motif function hints for
<parameter>win</parameter> according to the boolean value <parameter>flag</parameter>. <parameter>win</parameter> defaults to the window
context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3257 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-PPosition-hint!</refname>
    <refpurpose>Determine wether or not to respect the program-specified</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-PPosition-hint! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine wether or not to respect the program-specified
position hint for <parameter>win</parameter> according to the boolean value <parameter>flag</parameter>. This only
matters when using the default placement procedure. Some programs
allegedly set this hint to a useless value like (0,0) always, so
ignoring it is reccomended. <parameter>win</parameter> defaults to the window context in the
usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3274 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-OL-decor-hint!</refname>
    <refpurpose>Determine wether or not to respect Open Look decoration hints</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-OL-decor-hint! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine wether or not to respect Open Look decoration hints
for <parameter>win</parameter> according to the boolean value <parameter>flag</parameter>. <parameter>win</parameter> defaults to the
window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3288 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-start-on-desk!</refname>
    <refpurpose>Make WIN start on DESK when first mapped.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-start-on-desk! desk #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Make <parameter>win</parameter> start on <parameter>desk</parameter> when first mapped. <parameter>win</parameter> defaults to the
window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3301 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-skip-mapping!</refname>
    <refpurpose>Determine wether or not to skip changing to WIN's desktop</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-skip-mapping! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine wether or not to skip changing to <parameter>win</parameter>'s desktop
when first mapping <parameter>win</parameter> according to the boolean value <parameter>flag</parameter>. <parameter>win</parameter>
defaults to the window context in the usual way if not specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3326 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-lenience!</refname>
    <refpurpose>Determine wether or not to try to give WIN the input focus</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-lenience! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine wether or not to try to give <parameter>win</parameter> the input focus
when asked, even if the window claims according to hints that it
cannot receive the input focus, according to the boolean value
<parameter>flag</parameter>. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>window.c</filename> at line 3342 </para> </refsect1>
</refentry>

    </sect1>
    <sect1><title>xproperty.c</title>
<refentry>
  <refnamediv>
    <refname>xproperty?</refname>
    <refpurpose>Return #t if OBJ is an xproperty object, otherwise #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(xproperty? obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>obj</parameter> is an xproperty object, otherwise <literal>#f</literal>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>xproperty.c</filename> at line 107 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>set-window-text-property</refname>
    <refpurpose>Set a text property named PROPNAME on WIN, with format 8 and type</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-text-property win propname value)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set a text property named <parameter>propname</parameter> on <parameter>win</parameter>, with format 8 and type
"XA_STRING", and <parameter>value</parameter> as the data. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>xproperty.c</filename> at line 138 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>window-xproperty</refname>
    <refpurpose>Get the property called NAME from WIN if the boolean value</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-xproperty win name #&amp;optional consume)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Get the property called <parameter>name</parameter> from <parameter>win</parameter> if the boolean value
<parameter>consume</parameter> is specified and true, the property is also delted in one
atomic operation. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>xproperty.c</filename> at line 171 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>xproperty->string</refname>
    <refpurpose>Convert that data portion of xproperty object PROP to a string.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(xproperty->string prop)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Convert that data portion of xproperty object <parameter>prop</parameter> to a string. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>xproperty.c</filename> at line 221 </para> </refsect1>
</refentry>

<refentry>
  <refnamediv>
    <refname>string->xproperty</refname>
    <refpurpose>Create an xproperty object from STR.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(string->xproperty str)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Create an xproperty object from <parameter>str</parameter>. 
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <filename>xproperty.c</filename> at line 234 </para> </refsect1>
</refentry>

    </sect1>
</chapter>
</book>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
fill-column: 10000
sgml-omittag:nil
sgml-shorttag:t
End:
-->
