<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V3.0//EN">
<book>
  <bookinfo>
    <title>
      <productname>SCWM Reference Manual</productname>
    </title>
    <authorgroup>
      <author>
  	<firstname>Maciej</firstname>
  	<surname>Stachowiak</surname>
  	<affiliation>
  	  <shortaffil>MIT</shortaffil>
  	  <jobtitle>M.S. Degree Recipient</jobtitle>
  	  <orgname>Massachusetts Institute of Technology</orgname>
  	  <orgdiv>Department of Computer Science</orgdiv>
  	  <address>
  	    <city>Cambridge</city>
  	    <state>Massachusetts</state>
  	    <postcode>12345</postcode>
  	    <country>U.S.A.</country>
  	    <email>mstachow@mit.edu</email>
  	  </address>
  	</affiliation>
      </author>
      <author>
  	<firstname>Greg</firstname>
  	<surname>Badros</surname>
  	<affiliation>
  	  <shortaffil>UWashington</shortaffil>
  	  <jobtitle>Graduate Research Assistant</jobtitle>
  	  <orgname>University of Washington</orgname>
  	  <orgdiv>Department of Computer Science and Engineering</orgdiv>
  	  <address>
  	    <city>Seattle</city>
  	    <state>Washington</state>
  	    <postcode>98195</postcode>
  	    <country>U.S.A.</country>
  	    <email>gjb@cs.washington.edu</email>
  	  </address>
  	</affiliation>
      </author>
    </authorgroup>
    <releaseinfo>Release pre-0.8</releaseinfo>
    <pubdate>25 July 1998</pubdate>
    <copyright>
      <year>1997&ndash;1998</year>
      <holder>Maciej Stachowiak and Greg J. Badros</holder>
    </copyright>
  </bookinfo>
  <chapter>
    <title>Primitives in Alphabetical Order</title>
<refentry id="add-input-hook-x">
  <refnamediv>
    <refname>add-input-hook!</refname>
    <refpurpose>Add an input hook to run PROC on input from PORT.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(add-input-hook! port proc)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Add an input hook to run <parameter>proc</parameter> on input from <parameter>port</parameter>.
Whenever input becomes available on <parameter>port</parameter>, procedure <parameter>proc</parameter> will be called
with no arguments repeatedly until no unprocessed input remains on
<parameter>port</parameter>. <parameter>port</parameter> must be open, it must be an input port, and it must be a
file port (this includes pipes and sockets, but not string ports or
soft ports). A handle suitable for passing to <link linkend="remove-input-hook-x"><function>remove-input-hook!</function></link> is
returned.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/callbacks.c"><filename>scwm/callbacks.c</filename></ulink>
  at line 559 </para> </refsect1>
</refentry>

<refentry id="add-timer-hook-x">
  <refnamediv>
    <refname>add-timer-hook!</refname>
    <refpurpose>Add a timer hook to call PROC once sometime after USEC microseconds.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(add-timer-hook! usec proc)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Add a timer hook to call <parameter>proc</parameter> once sometime after <parameter>usec</parameter> microseconds.
When at least <parameter>usec</parameter> microseconds have passed, procedure <parameter>proc</parameter> will be
called with no arguments. A handle suitable for passing to
<link linkend="remove-timer-hook-x"><function>remove-timer-hook!</function></link> is returned.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/callbacks.c"><filename>scwm/callbacks.c</filename></ulink>
  at line 422 </para> </refsect1>
</refentry>

<refentry id="beep">
  <refnamediv>
    <refname>beep</refname>
    <refpurpose>Ring the standard X bell.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(beep)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Ring the standard X bell.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 360 </para> </refsect1>
</refentry>

<refentry id="bind-key">
  <refnamediv>
    <refname>bind-key</refname>
    <refpurpose>Bind the given KEY within the CONTEXTS to invoke PROC.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(bind-key contexts key proc)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Bind the given <parameter>key</parameter> within the <parameter>contexts</parameter> to invoke <parameter>proc</parameter>.
<parameter>contexts</parameter> is a list of event-contexts (e.g., '(button1 sidebar))
<parameter>key</parameter> is a string giving the key-specifier (e.g., M-Delete for Meta+Delete)
<parameter>proc</parameter> is a procedure (possibly a thunk) that should be invoked
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/binding.c"><filename>scwm/binding.c</filename></ulink>
  at line 465 </para> </refsect1>
</refentry>

<refentry id="bind-mouse">
  <refnamediv>
    <refname>bind-mouse</refname>
    <refpurpose>Bind the given mouse BUTTON within the CONTEXTS to invoke PROC.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(bind-mouse contexts button proc)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Bind the given mouse <parameter>button</parameter> within the <parameter>contexts</parameter> to invoke <parameter>proc</parameter>.
<parameter>contexts</parameter> is a list of event-contexts (e.g., '(button1 sidebar))
<parameter>button</parameter> is a string or integer giving the mouse button number
<parameter>proc</parameter> is a procedure (possibly a thunk) that should be invoked
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/binding.c"><filename>scwm/binding.c</filename></ulink>
  at line 566 </para> </refsect1>
</refentry>

<refentry id="border-normal-p">
  <refnamediv>
    <refname>border-normal?</refname>
    <refpurpose>Return #t if WIN has a normal border, #f otherwise.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(border-normal?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>win</parameter> has a normal border, <literal>#f</literal> otherwise.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2589 </para> </refsect1>
</refentry>

<refentry id="capturing-p">
  <refnamediv>
    <refname>capturing?</refname>
    <refpurpose>Returns #t when the windows are being captured.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(capturing?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns <literal>#t</literal> when the windows are being captured.
This happens at two times: both during initial startup, or during a
recapture operation. In either case, placement procedures should
probably avoid interaction and perhaps avoid moving the window being
placed at all.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 174 </para> </refsect1>
</refentry>

<refentry id="clear-color-cache-entry">
  <refnamediv>
    <refname>clear-color-cache-entry</refname>
    <refpurpose>Colors are cached by name.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(clear-color-cache-entry name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Colors are cached by name. It is remotely possible that the
meaning of a particular string as a color will change in your X
server, if you try hard enough. For this unlikely eventuality,
<link linkend="clear-color-cache-entry"><function>clear-color-cache-entry</function></link> is provided - it removes the color
associated with <parameter>name</parameter> from the color cache.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 178 </para> </refsect1>
</refentry>

<refentry id="clear-font-cache-entry">
  <refnamediv>
    <refname>clear-font-cache-entry</refname>
    <refpurpose>Fonts are cached by name.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(clear-font-cache-entry name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Fonts are cached by name. It is remotely possible that the
meaning of a particular string as a fonts will change in your X
server, if you try hard enough (perhaps if you add or remove font
servers). For this unlikely eventuality, <link linkend="clear-font-cache-entry"><function>clear-font-cache-entry</function></link> is
provided - it removes the font associated with <parameter>name</parameter> from the font
cache.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/font.c"><filename>scwm/font.c</filename></ulink>
  at line 357 </para> </refsect1>
</refentry>

<refentry id="clear-image-cache-entry">
  <refnamediv>
    <refname>clear-image-cache-entry</refname>
    <refpurpose>Images are cached by both name and full pathname.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(clear-image-cache-entry name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Images are cached by both name and full pathname. It is
remotely possible that the file that should be used for a particular
name will change, for example if you alter the image file or change
your image path. For this unlikely eventuality,
<link linkend="clear-image-cache-entry"><function>clear-image-cache-entry</function></link> is provided - it removes the image
associated with <parameter>name</parameter> from the image cache.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/image.c"><filename>scwm/image.c</filename></ulink>
  at line 544 </para> </refsect1>
</refentry>

<refentry id="clever-place-window">
  <refnamediv>
    <refname>clever-place-window</refname>
    <refpurpose>Places WIN using fvwm2's "ReallySmart" algorithm.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(clever-place-window win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Places <parameter>win</parameter> using fvwm2's "ReallySmart" algorithm.
The placement is just as if being placed by fvwm2's SmartPlacement,
as if SmartPlacementIsReallySmart were in effect. That is, it
tries to place the window so as to minimize its area of
overlap with other windows. Several parameters give different
weight to various kinds of windows, but they are not tunable
at runtime currently. If it fails to place the window, it
returns <literal>#f</literal>; otherwise it returns <literal>#t</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/placement.c"><filename>scwm/placement.c</filename></ulink>
  at line 468 </para> </refsect1>
</refentry>

<refentry id="color-properties">
  <refnamediv>
    <refname>color-properties</refname>
    <refpurpose>Return an association list giving some properties of COLOR.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(color-properties color)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return an association list giving some properties of <parameter>color</parameter>.
Currently defined properties are 'name, the string name of the
color, and 'pixel, the X pixel value it uses.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 92 </para> </refsect1>
</refentry>

<refentry id="color-p">
  <refnamediv>
    <refname>color?</refname>
    <refpurpose>Returns #t if OBJ is a color object, otherwise #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(color? obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns <literal>#t</literal> if <parameter>obj</parameter> is a color object, otherwise <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 80 </para> </refsect1>
</refentry>

<refentry id="current-decor">
  <refnamediv>
    <refname>current-decor</refname>
    <refpurpose>Return the current decor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(current-decor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current decor.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/decor.c"><filename>scwm/decor.c</filename></ulink>
  at line 294 </para> </refsect1>
</refentry>

<refentry id="current-desk">
  <refnamediv>
    <refname>current-desk</refname>
    <refpurpose>Returns the integer identifying the current desk.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(current-desk)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the integer identifying the current desk.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 279 </para> </refsect1>
</refentry>

<refentry id="current-window-with-focus">
  <refnamediv>
    <refname>current-window-with-focus</refname>
    <refpurpose>Return the window that currently has the input focus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(current-window-with-focus)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window that currently has the input focus.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 485 </para> </refsect1>
</refentry>

<refentry id="current-window-with-pointer">
  <refnamediv>
    <refname>current-window-with-pointer</refname>
    <refpurpose>Return the window that currently contains the mouse pointer.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(current-window-with-pointer)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window that currently contains the mouse pointer.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 495 </para> </refsect1>
</refentry>

<refentry id="default-decor">
  <refnamediv>
    <refname>default-decor</refname>
    <refpurpose>Return the default decor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(default-decor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the default decor.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/decor.c"><filename>scwm/decor.c</filename></ulink>
  at line 254 </para> </refsect1>
</refentry>

<refentry id="default-placement-proc">
  <refnamediv>
    <refname>default-placement-proc</refname>
    <refpurpose>Use various flags to call an appropriate placement function.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(default-placement-proc win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use various flags to call an appropriate placement function.
This is the default placement procedure for non-transient windows. It
tries <link linkend="smart-place-window"><function>smart-place-window</function></link>, <link linkend="clever-place-window"><function>clever-place-window</function></link>,
<link linkend="random-place-window"><function>random-place-window</function></link>, or <link linkend="interactive-move"><function>interactive-move</function></link> (to achieve interactive
placement) on <parameter>win</parameter> depending on several style flags. However,
if one of the following factors holds, the window will instead be
placed exactly as requested by the program: the position was specified
by the user, the position was specified by the program, and
#:no-PPosition-hint is not set, or the window starts iconic.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/placement.c"><filename>scwm/placement.c</filename></ulink>
  at line 543 </para> </refsect1>
</refentry>

<refentry id="default-transient-placement-proc">
  <refnamediv>
    <refname>default-transient-placement-proc</refname>
    <refpurpose>This is the default placement procedure for transient windows.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(default-transient-placement-proc win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  This is the default placement procedure for transient windows.
It simply leaves the window <parameter>win</parameter> in place, exactly as requested.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/placement.c"><filename>scwm/placement.c</filename></ulink>
  at line 595 </para> </refsect1>
</refentry>

<refentry id="deiconify">
  <refnamediv>
    <refname>deiconify</refname>
    <refpurpose>Deiconify WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(deiconify  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Deiconify <parameter>win</parameter>.
Unmap its icon window, and map its regular
window. <parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1586 </para> </refsect1>
</refentry>

<refentry id="delete-window">
  <refnamediv>
    <refname>delete-window</refname>
    <refpurpose>Request that WIN remove itself from the display.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(delete-window  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Request that <parameter>win</parameter> remove itself from the display. This is the
friendly way of closing a window, but it will not work if the
application does not cooperate. <parameter>win</parameter> defaults to the window context in
the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1244 </para> </refsect1>
</refentry>

<refentry id="desk-size">
  <refnamediv>
    <refname>desk-size</refname>
    <refpurpose>Returns the size of the current desk.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(desk-size)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the size of the current desk.
The returned value is in units of the physical screen size, as a list
of the width and the height.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 252 </para> </refsect1>
</refentry>

<refentry id="destroy-window">
  <refnamediv>
    <refname>destroy-window</refname>
    <refpurpose>Forcibly remove WIN from the screen.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(destroy-window  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Forcibly remove <parameter>win</parameter> from the screen. This will kill the
application without giving it a chance to save its state or do any
other shutdown, but is guaranteed to work. <parameter>win</parameter> defaults to the window
context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1274 </para> </refsect1>
</refentry>

<refentry id="display-size">
  <refnamediv>
    <refname>display-size</refname>
    <refpurpose>Returns the size of the physical screen in pixels.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(display-size)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the size of the physical screen in pixels.
The return value is list of the width and the height. The
width is the <link linkend="car"><function>car</function></link>, the height is the <link linkend="cadr"><function>cadr</function></link> of the returned list.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 238 </para> </refsect1>
</refentry>

<refentry id="focus">
  <refnamediv>
    <refname>focus</refname>
    <refpurpose>Give WIN the input focus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(focus  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Give <parameter>win</parameter> the input focus. This will typically result in
drawing <parameter>win</parameter>'s frame in a special style as well. <parameter>win</parameter> defaults to the
window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1319 </para> </refsect1>
</refentry>

<refentry id="font-properties">
  <refnamediv>
    <refname>font-properties</refname>
    <refpurpose>Return an association list giving some properties of FONT.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(font-properties font)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return an association list giving some properties of <parameter>font</parameter>.
Currently defined properties are 'name, the string name of the
color, and 'height, it's total height in pixels.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/font.c"><filename>scwm/font.c</filename></ulink>
  at line 241 </para> </refsect1>
</refentry>

<refentry id="font-p">
  <refnamediv>
    <refname>font?</refname>
    <refpurpose>Returns #t if OBJ is a font object, otherwise #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(font? obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns <literal>#t</literal> if <parameter>obj</parameter> is a font object, otherwise <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/font.c"><filename>scwm/font.c</filename></ulink>
  at line 231 </para> </refsect1>
</refentry>

<refentry id="frame-id-to-window">
  <refnamediv>
    <refname>frame-id->window</refname>
    <refpurpose>Return the window object corresponding to a frame WINDOW-ID.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(frame-id->window window-id)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window object corresponding to a frame <parameter>window-id</parameter>.
<parameter>window-id</parameter> should be the X id of a scwm frame window. If there is no
such window object, return <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2291 </para> </refsect1>
</refentry>

<refentry id="get-window">
  <refnamediv>
    <refname>get-window</refname>
    <refpurpose>Retrieve the context window or select interactively.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(get-window  #&amp;optional kill? select? release?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Retrieve the context window or select interactively.
If there is no context window, a window is selected interactively.
The optional boolean argument <parameter>kill?</parameter>  (default <literal>#f</literal>) determines whether
to use the "kill" cursor when selecting interactively. The boolean
<parameter>select?</parameter> argument (default <literal>#t</literal>) determines whether or not a window
should be selected interactively if there is no current context
window. And finally the <parameter>release?</parameter> argument (default <literal>#t</literal>) determines
whether or not interactive selection (if any) should wait for a mouse
release event or just a press. The latter behavior is useful if the
action being performed on the window is an interactive one involving
mouse drags. (FIXMS: that's probably a bad order for the optional
arguments)
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 443 </para> </refsect1>
</refentry>

<refentry id="hide-titlebar">
  <refnamediv>
    <refname>hide-titlebar</refname>
    <refpurpose>Cause WIN not to be decorated with a titlebar.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(hide-titlebar  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter> not to be decorated with a titlebar. <parameter>win</parameter> defaults
to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2482 </para> </refsect1>
</refentry>

<refentry id="hilight-background">
  <refnamediv>
    <refname>hilight-background</refname>
    <refpurpose>Return the background color for windows with the input focus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(hilight-background)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the background color for windows with the input focus.
Applies to the current decor.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 682 </para> </refsect1>
</refentry>

<refentry id="hilight-factor">
  <refnamediv>
    <refname>hilight-factor</refname>
    <refpurpose>Return the current hilight factor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(hilight-factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current hilight factor.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 454 </para> </refsect1>
</refentry>

<refentry id="hilight-foreground">
  <refnamediv>
    <refname>hilight-foreground</refname>
    <refpurpose>Return the foreground color of the window with the input focus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(hilight-foreground)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the foreground color of the window with the input focus.
Applies to the focus in the current decor.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 609 </para> </refsect1>
</refentry>

<refentry id="icon-sticky-p">
  <refnamediv>
    <refname>icon-sticky?</refname>
    <refpurpose>Return #t if WIN is "sticky", #f otherwise.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(icon-sticky?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>win</parameter> is "sticky", <literal>#f</literal> otherwise.
See <link linkend="stick-icon"><function>stick-icon</function></link> and <link linkend="stick"><function>stick</function></link>. <parameter>win</parameter> defaults to the window context in
the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2676 </para> </refsect1>
</refentry>

<refentry id="iconified-p">
  <refnamediv>
    <refname>iconified?</refname>
    <refpurpose>Return #t if WIN is iconified, otherwise return #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(iconified?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>win</parameter> is iconified, otherwise return <literal>#f</literal>.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1603 </para> </refsect1>
</refentry>

<refentry id="iconify">
  <refnamediv>
    <refname>iconify</refname>
    <refpurpose>Iconify WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(iconify  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Iconify <parameter>win</parameter>.
Iconifying unmaps the regular window, and map the window's icon
window. <parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1560 </para> </refsect1>
</refentry>

<refentry id="id-to-window">
  <refnamediv>
    <refname>id->window</refname>
    <refpurpose>Return the window object corresponding to an application WINDOW-ID.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(id->window window-id)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window object corresponding to an application <parameter>window-id</parameter>.
<parameter>window-id</parameter> should be the X id of the application window. If there is no
such window object, return <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2270 </para> </refsect1>
</refentry>

<refentry id="image-properties">
  <refnamediv>
    <refname>image-properties</refname>
    <refpurpose>Return an association list giving some properties of IMAGE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(image-properties image)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return an association list giving some properties of <parameter>image</parameter>.
Currently defined properties are 'filename, the fully expanded
pathname of the image, 'width, it's width, 'height, it's height, and
depth, it's color depth.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/image.c"><filename>scwm/image.c</filename></ulink>
  at line 159 </para> </refsect1>
</refentry>

<refentry id="image-p">
  <refnamediv>
    <refname>image?</refname>
    <refpurpose>Returns #t if OBJ is an image object, otherwise #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(image? obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns <literal>#t</literal> if <parameter>obj</parameter> is an image object, otherwise <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/image.c"><filename>scwm/image.c</filename></ulink>
  at line 149 </para> </refsect1>
</refentry>

<refentry id="interactive-move">
  <refnamediv>
    <refname>interactive-move</refname>
    <refpurpose>Move WIN interactively.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(interactive-move  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move <parameter>win</parameter> interactively.
This allows the user to drag a rubber band frame or the window itself
around the screen (depending on the setting of <link linkend="set-opaque-move-size-x"><function>set-opaque-move-size!</function></link>
and drop it where desired). <parameter>win</parameter> defaults to the window context in the
usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2046 </para> </refsect1>
</refentry>

<refentry id="interactive-resize">
  <refnamediv>
    <refname>interactive-resize</refname>
    <refpurpose>Resize WIN interactively.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(interactive-resize  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Resize <parameter>win</parameter> interactively.
This allows the user to drag a rubber band frame to set the size of
the window. <parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/resize.c"><filename>scwm/resize.c</filename></ulink>
  at line 351 </para> </refsect1>
</refentry>

<refentry id="keep-on-top">
  <refnamediv>
    <refname>keep-on-top</refname>
    <refpurpose>Ensure that WIN is kept on top of all other windows.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(keep-on-top  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Ensure that <parameter>win</parameter> is kept on top of all other windows.
Obviously, other windows that are also on-top may obscure <parameter>win</parameter>.
<parameter>win</parameter> defaults to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2391 </para> </refsect1>
</refentry>

<refentry id="kept-on-top-p">
  <refnamediv>
    <refname>kept-on-top?</refname>
    <refpurpose>Return #t if WIN is an on-top window, #f otherwise.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(kept-on-top?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>win</parameter> is an on-top window, <literal>#f</literal> otherwise.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2434 </para> </refsect1>
</refentry>

<refentry id="list-all-windows">
  <refnamediv>
    <refname>list-all-windows</refname>
    <refpurpose>Return a Scheme list of all of the windows.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(list-all-windows)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a Scheme list of all of the windows. The list is in a
semi-arbitrary order that is convenient for the sake of circulation.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2374 </para> </refsect1>
</refentry>

<refentry id="load-xbm">
  <refnamediv>
    <refname>load-xbm</refname>
    <refpurpose>Load an X Bitmap file identified by the pathname FULL-PATH.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(load-xbm full-path)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Load an X Bitmap file identified by the pathname <parameter>full-path</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/image.c"><filename>scwm/image.c</filename></ulink>
  at line 219 </para> </refsect1>
</refentry>

<refentry id="load-xpm">
  <refnamediv>
    <refname>load-xpm</refname>
    <refpurpose>Load an X Pixmap file identified by the pathname FULL-PATH.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(load-xpm full-path)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Load an X Pixmap file identified by the pathname <parameter>full-path</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/image.c"><filename>scwm/image.c</filename></ulink>
  at line 253 </para> </refsect1>
</refentry>

<refentry id="lower-window">
  <refnamediv>
    <refname>lower-window</refname>
    <refpurpose>Lower WIN to the bottom of the window stack.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(lower-window  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Lower <parameter>win</parameter> to the bottom of the window stack. <parameter>win</parameter> defaults to
the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1394 </para> </refsect1>
</refentry>

<refentry id="make-color">
  <refnamediv>
    <refname>make-color</refname>
    <refpurpose>Return the color object corresponding to the X color specifier CNAME.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-color cname)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the color object corresponding to the X color specifier <parameter>cname</parameter>.
If <parameter>cname</parameter> is not a valid X color name, or cannot be
allocated, an error results.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 110 </para> </refsect1>
</refentry>

<refentry id="make-decor">
  <refnamediv>
    <refname>make-decor</refname>
    <refpurpose>Create a new decor object.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-decor  #&amp;optional name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Create a new decor object. <parameter>name</parameter> optionally provides a string
that is used to name the decor, and is displayed when the decor is
printed.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/decor.c"><filename>scwm/decor.c</filename></ulink>
  at line 226 </para> </refsect1>
</refentry>

<refentry id="make-face">
  <refnamediv>
    <refname>make-face</refname>
    <refpurpose>Create a new face.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-face flags specs)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Create a new face.
<parameter>flags</parameter> is a list of face flags (see concept) and
<parameter>specs</parameter> is a list of face specifiers.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/face.c"><filename>scwm/face.c</filename></ulink>
  at line 322 </para> </refsect1>
</refentry>

<refentry id="make-font">
  <refnamediv>
    <refname>make-font</refname>
    <refpurpose>Return the font object for the X font specifier FNAME.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-font fname)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the font object for the X font specifier <parameter>fname</parameter>.
If <parameter>fname</parameter> is not a valid X font name, or cannot be
allocated, an error results.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/font.c"><filename>scwm/font.c</filename></ulink>
  at line 99 </para> </refsect1>
</refentry>

<refentry id="make-image">
  <refnamediv>
    <refname>make-image</refname>
    <refpurpose>Loads an image from the file NAME.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-image name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Loads an image from the file <parameter>name</parameter>.
To load the image, the appropriate image loaders will be invoked as
needed. If <parameter>name</parameter> starts with "/", "./" or "../", it is treated as a
fully qualified pathname; otherwise, the image path is searched for an
appropriate file.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/image.c"><filename>scwm/image.c</filename></ulink>
  at line 475 </para> </refsect1>
</refentry>

<refentry id="make-menu">
  <refnamediv>
    <refname>make-menu</refname>
    <refpurpose>Make and return a menu object from the given arguments.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-menu list-of-menuitems #&amp;optional picture-side side-bg-color bg-color text-color picture-bg font extra-options)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Make and return a menu object from the given arguments.
<parameter>list-of-menuitems</parameter> is a scheme list of menu items -- see <link linkend="make-menuitem"><function>make-menuitem</function></link>;
<parameter>picture-side</parameter> is an image object;
<parameter>side-bg-color</parameter>, <parameter>bg-color</parameter>, <parameter>text-color</parameter>, <parameter>picture-bg</parameter> are color objects;
<parameter>font</parameter> is a font object;
<parameter>extra-options</parameter> can be anything understood by the menu-specific
drawing code (not used currently).
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/menu.c"><filename>scwm/menu.c</filename></ulink>
  at line 196 </para> </refsect1>
</refentry>

<refentry id="make-menuitem">
  <refnamediv>
    <refname>make-menuitem</refname>
    <refpurpose>Return a newly created menuitem object using the given arguments.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-menuitem label action #&amp;optional extra-label picture-above picture-left hover-action unhover-action hotkey-prefs)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a newly created menuitem object using the given arguments.
<parameter>label</parameter> is a string giving the main text label of the menu item;
<parameter>action</parameter> is a procedure or menu object -- if it is a procedure, it gets
invoked when the menuitem is selected, if it is a menu object, that
menu is attached as a submenu from the enclosing menu that the created
menuitem is put in.
<parameter>extra-label</parameter> is extra text describing the menu item -- often this
contains a shortcut key description, or some other descriptive text.
<parameter>picture-above</parameter> and <parameter>picture-left</parameter> are picture objects which correspond to
images to display within the bounding region of the menuitem.
<parameter>hover-action</parameter> and <parameter>unhover-action</parameter> are procedures to be invoked when the
mouse pointer hovers over the item and is moved away after hovering
over the item, respectively.
<parameter>hotkey-prefs</parameter> is a string listing preferred alphanumeric shortcut-keys
for the given menu-item; the menu creation routine uses these as hints
for assigning shortcut keys to the various menuitems.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/menuitem.c"><filename>scwm/menuitem.c</filename></ulink>
  at line 118 </para> </refsect1>
</refentry>

<refentry id="make-relief-color">
  <refnamediv>
    <refname>make-relief-color</refname>
    <refpurpose>Convert a color into a new color appropriate for a relief.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-relief-color color factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Convert a color into a new color appropriate for a relief.
Multiplies the luminosity and saturation of <parameter>color</parameter> by the
positive floating point number <parameter>factor</parameter>. Using a <parameter>factor</parameter> smaller than 1
will result in a dimmer color, suitable for use as a darker
relief. Using a factor greater than 1 will result in a brighter color
which is suitable for use as a hilight.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 363 </para> </refsect1>
</refentry>

<refentry id="marshal-fvwm2-config-info">
  <refnamediv>
    <refname>marshal-fvwm2-config-info</refname>
    <refpurpose>Constructs a fvwm2 BroadcastInfo module packet.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(marshal-fvwm2-config-info win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Constructs a fvwm2 BroadcastInfo module packet.
The return value is the contents of a BroadcastInfo fvwm2
module packet for <parameter>win</parameter> as a Scheme string.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/module-interface.c"><filename>scwm/module-interface.c</filename></ulink>
  at line 83 </para> </refsect1>
</refentry>

<refentry id="marshal-fvwm2-iconify-info">
  <refnamediv>
    <refname>marshal-fvwm2-iconify-info</refname>
    <refpurpose>Constructs a fvwm2 "M_ICONIFY" module packet.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(marshal-fvwm2-iconify-info win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Constructs a fvwm2 "M_ICONIFY" module packet.
The return value is the contents of an "M_ICONIFY" fvwm
module packet for <parameter>win</parameter> as a Scheme string.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/module-interface.c"><filename>scwm/module-interface.c</filename></ulink>
  at line 127 </para> </refsect1>
</refentry>

<refentry id="menu-hilight-factor">
  <refnamediv>
    <refname>menu-hilight-factor</refname>
    <refpurpose>Return the current menu hilight factor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menu-hilight-factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current menu hilight factor.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 529 </para> </refsect1>
</refentry>

<refentry id="menu-properties">
  <refnamediv>
    <refname>menu-properties</refname>
    <refpurpose>Returns the a list of the menu properties of MENU, a menu object.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menu-properties menu)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the a list of the menu properties of <parameter>menu</parameter>, a menu object.
The properties returned are:
'(menu-items side-image side-bg-color bg-color text-color image-bg
font extra-options used-shortcut-keys)
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/menu.c"><filename>scwm/menu.c</filename></ulink>
  at line 170 </para> </refsect1>
</refentry>

<refentry id="menu-shadow-factor">
  <refnamediv>
    <refname>menu-shadow-factor</refname>
    <refpurpose>Return the current menu shadow factor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menu-shadow-factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current menu shadow factor.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 558 </para> </refsect1>
</refentry>

<refentry id="menu-p">
  <refnamediv>
    <refname>menu?</refname>
    <refpurpose>Return #t if and only if OBJ is a menu object.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menu? obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if and only if <parameter>obj</parameter> is a menu object.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/menu.c"><filename>scwm/menu.c</filename></ulink>
  at line 112 </para> </refsect1>
</refentry>

<refentry id="menuitem-properties">
  <refnamediv>
    <refname>menuitem-properties</refname>
    <refpurpose>Return a list of the properties of the given MENU-ITEM.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menuitem-properties menu-item)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a list of the properties of the given <parameter>menu-item</parameter>.
<parameter>menu-item</parameter> is a menuitem object, created by <link linkend="make-menuitem"><function>make-menuitem</function></link>.  The
returned list contains the following, in this order:
'(label action extra-label picture-above picture-left hover-action
unhover-action hotkey-preferences)
Note that this is the same as the arguments to the <link linkend="make-menuitem"><function>make-menuitem</function></link>
primitive
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/menuitem.c"><filename>scwm/menuitem.c</filename></ulink>
  at line 90 </para> </refsect1>
</refentry>

<refentry id="mod-mask-alt">
  <refnamediv>
    <refname>mod-mask-alt</refname>
    <refpurpose>Return the bit-mask for the Alt modifier key, or #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(mod-mask-alt)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the bit-mask for the Alt modifier key, or <literal>#f</literal>.
Returns <literal>#f</literal> if and only if there is no key bound to act as Alt, otherwise
returns a power of two corresponding to the bit-mask of the modifier
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/binding.c"><filename>scwm/binding.c</filename></ulink>
  at line 764 </para> </refsect1>
</refentry>

<refentry id="mod-mask-hyper">
  <refnamediv>
    <refname>mod-mask-hyper</refname>
    <refpurpose>Return the bit-mask for the Hyper modifier key, or #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(mod-mask-hyper)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the bit-mask for the Hyper modifier key, or <literal>#f</literal>.
Returns <literal>#f</literal> if and only if there is no key bound to act as Hyper, otherwise
returns a power of two corresponding to the bit-mask of the modifier
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/binding.c"><filename>scwm/binding.c</filename></ulink>
  at line 772 </para> </refsect1>
</refentry>

<refentry id="mod-mask-meta">
  <refnamediv>
    <refname>mod-mask-meta</refname>
    <refpurpose>Return the bit-mask for the Meta modifier key, or #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(mod-mask-meta)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the bit-mask for the Meta modifier key, or <literal>#f</literal>.
Returns <literal>#f</literal> if and only if there is no key bound to act as Meta, otherwise
returns a power of two corresponding to the bit-mask of the modifier
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/binding.c"><filename>scwm/binding.c</filename></ulink>
  at line 756 </para> </refsect1>
</refentry>

<refentry id="mod-mask-super">
  <refnamediv>
    <refname>mod-mask-super</refname>
    <refpurpose>Return the bit-mask for the Super modifier key, or #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(mod-mask-super)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the bit-mask for the Super modifier key, or <literal>#f</literal>.
Returns <literal>#f</literal> if and only if there is no key bound to act as Super, otherwise
returns a power of two corresponding to the bit-mask of the modifier
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/binding.c"><filename>scwm/binding.c</filename></ulink>
  at line 781 </para> </refsect1>
</refentry>

<refentry id="mouse-event-type">
  <refnamediv>
    <refname>mouse-event-type</refname>
    <refpurpose>Return a mouse-event-type corresponding to the most recent mouse event.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(mouse-event-type)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a mouse-event-type corresponding to the most recent mouse event.
Return value is one of 'motion, 'click, 'one-and-a-half-clicks, 'double-clicks
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/binding.c"><filename>scwm/binding.c</filename></ulink>
  at line 745 </para> </refsect1>
</refentry>

<refentry id="move-pointer-to">
  <refnamediv>
    <refname>move-pointer-to</refname>
    <refpurpose>Move the mouse pointer to SX, SY (given in pixels).</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(move-pointer-to sx sy)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move the mouse pointer to <parameter>sx</parameter>, <parameter>sy</parameter> (given in pixels).
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 285 </para> </refsect1>
</refentry>

<refentry id="move-to">
  <refnamediv>
    <refname>move-to</refname>
    <refpurpose>Move WIN to coordinates X, Y.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(move-to x y #&amp;optional win animated? move-pointer-too?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move <parameter>win</parameter> to coordinates <parameter>x</parameter>, <parameter>y</parameter>.
If <parameter>animated?</parameter> is specified and true, animate the motion of the window,
otherwise the move is instantaneous. If <parameter>move-pointer-too?</parameter> is specified
and true, move the mouse pointer by the same amount as the window,
animating the motion of the pointer along with the window if <parameter>animated?</parameter>
is true. <parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1958 </para> </refsect1>
</refentry>

<refentry id="move-window-to-desk">
  <refnamediv>
    <refname>move-window-to-desk</refname>
    <refpurpose>Move WIN to DESK.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(move-window-to-desk desk #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move <parameter>win</parameter> to <parameter>desk</parameter>. <parameter>desk</parameter> is an integer desk identifier. <parameter>win</parameter>
defaults to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2159 </para> </refsect1>
</refentry>

<refentry id="normal-border">
  <refnamediv>
    <refname>normal-border</refname>
    <refpurpose>Cause WIN to be decorated with a normal border.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(normal-border  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter> to be decorated with a normal border. This means
that there will be resize handles in the corners. <parameter>win</parameter> defaults to the
window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2525 </para> </refsect1>
</refentry>

<refentry id="plain-border">
  <refnamediv>
    <refname>plain-border</refname>
    <refpurpose>Cause WIN to be decorated with a plain border.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(plain-border  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter> to be decorated with a plain border. This means
that there will be no resize handles in the corners, and the
window . <parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2556 </para> </refsect1>
</refentry>

<refentry id="pointer-position">
  <refnamediv>
    <refname>pointer-position</refname>
    <refpurpose>Return the current position of the mouse pointer in pixels.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(pointer-position)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current position of the mouse pointer in pixels.
The return value is a two-element list of the x and y coordinates.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 269 </para> </refsect1>
</refentry>

<refentry id="popup-menu">
  <refnamediv>
    <refname>popup-menu</refname>
    <refpurpose>Popup MENU, a menu object, and warp to the first item if WARP-TO-FIRST? is #t.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(popup-menu menu #&amp;optional warp-to-first?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Popup <parameter>menu</parameter>, a menu object, and warp to the first item if <parameter>warp-to-first?</parameter> is <literal>#t</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/menu.c"><filename>scwm/menu.c</filename></ulink>
  at line 1236 </para> </refsect1>
</refentry>

<refentry id="raise-window">
  <refnamediv>
    <refname>raise-window</refname>
    <refpurpose>Raise WIN to the top of the window stack.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(raise-window  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Raise <parameter>win</parameter> to the top of the window stack.
Stays-on-top windows still take priority. <parameter>win</parameter> defaults to the window
context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1368 </para> </refsect1>
</refentry>

<refentry id="raised-p">
  <refnamediv>
    <refname>raised?</refname>
    <refpurpose>Return #t if WIN is currently raised, #f if not.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(raised?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>win</parameter> is currently raised, <literal>#f</literal> if not.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1499 </para> </refsect1>
</refentry>

<refentry id="random-place-window">
  <refnamediv>
    <refname>random-place-window</refname>
    <refpurpose>Places WIN just as if being placed by fvwm2's RandomPlacement.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(random-place-window win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Places <parameter>win</parameter> just as if being placed by fvwm2's RandomPlacement.
This placement is not truly random; it is based on two state variables
which are incremented for the x and y coordinates, and which wrap
around once a window would be forced off the screen. The placement is
fairly arbitrary, but always succeeds, and so avoids user
interaction. <literal>#t</literal> is always returned.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/placement.c"><filename>scwm/placement.c</filename></ulink>
  at line 506 </para> </refsect1>
</refentry>

<refentry id="recapture">
  <refnamediv>
    <refname>recapture</refname>
    <refpurpose>Recapture all the windows.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(recapture)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Recapture all the windows.
This destroys all the current frame windows and recreate them from
scratch. This is hopefully not necessary during normal operation.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 312 </para> </refsect1>
</refentry>

<refentry id="refresh">
  <refnamediv>
    <refname>refresh</refname>
    <refpurpose>Make sure all decorations for all windows are up to date.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(refresh)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Make sure all decorations for all windows are up to date. In theory,
this should not be needed.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 188 </para> </refsect1>
</refentry>

<refentry id="refresh-window">
  <refnamediv>
    <refname>refresh-window</refname>
    <refpurpose>Refresh the decorations on window WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(refresh-window  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Refresh the decorations on window <parameter>win</parameter>.
Refreshing ensuring that everything, including the decorations is up
to date. <link linkend="refresh"><function>refresh</function></link> does this in a more efficient way for all windows,
as well as the root. <parameter>win</parameter> defaults to the window context in the usual
way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2135 </para> </refsect1>
</refentry>

<refentry id="register-image-loader">
  <refnamediv>
    <refname>register-image-loader</refname>
    <refpurpose>Register PROC as the loader to use for images ending in EXTENSION.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(register-image-loader extension proc)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Register <parameter>proc</parameter> as the loader to use for images ending in <parameter>extension</parameter>.
<parameter>extension</parameter> must be a string beginning with a period, the
empty string (for files with no extension), or the string "default"
(for files that no other image loader succeeds in loading). <parameter>proc</parameter> will
be called with the full pathname of the image and should return an
image object, or <literal>#f</literal> if it succeeds.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/image.c"><filename>scwm/image.c</filename></ulink>
  at line 301 </para> </refsect1>
</refentry>

<refentry id="remove-input-hook-x">
  <refnamediv>
    <refname>remove-input-hook!</refname>
    <refpurpose>Remove an input hook identified by HANDLE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(remove-input-hook! handle)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Remove an input hook identified by <parameter>handle</parameter>.
<parameter>handle</parameter> should be an object that was returned by <link linkend="add-input-hook-x"><function>add-input-hook!</function></link>. An
input hook may safely remove itself.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/callbacks.c"><filename>scwm/callbacks.c</filename></ulink>
  at line 589 </para> </refsect1>
</refentry>

<refentry id="remove-timer-hook-x">
  <refnamediv>
    <refname>remove-timer-hook!</refname>
    <refpurpose>Remove a timer hook identified by HANDLE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(remove-timer-hook! handle)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Remove a timer hook identified by <parameter>handle</parameter>.
The <parameter>handle</parameter> should be an object that was returned by
<link linkend="add-timer-hook-x"><function>add-timer-hook!</function></link>. No warning or error will occur if <parameter>handle</parameter> is for a
timer hook that has already been triggered.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/callbacks.c"><filename>scwm/callbacks.c</filename></ulink>
  at line 464 </para> </refsect1>
</refentry>

<refentry id="reset-scwmexec-protocol">
  <refnamediv>
    <refname>reset-scwmexec-protocol</refname>
    <refpurpose>Reset the scwmexec protocol.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(reset-scwmexec-protocol)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Reset the scwmexec protocol.
This procedure removes the "XA_SCWMEXEC_REQUEST" property on the
root window.  It should not be necessary but may be useful in case
your X server goes awry (and otherwise you would have to restart your
X server).  Use if scwmexec or scwmrepl are not returning (e.g.,
if your Emacs hangs when you try evaluating a scwm expression).
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/events.c"><filename>scwm/events.c</filename></ulink>
  at line 459 </para> </refsect1>
</refentry>

<refentry id="resize-to">
  <refnamediv>
    <refname>resize-to</refname>
    <refpurpose>Resize WIN to a size of W by H in pixels.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(resize-to w h #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Resize <parameter>win</parameter> to a size of <parameter>w</parameter> by <parameter>h</parameter> in pixels. The size includes
the window decorations. <parameter>win</parameter> defaults to the window context in the
usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2089 </para> </refsect1>
</refentry>

<refentry id="restack-windows">
  <refnamediv>
    <refname>restack-windows</refname>
    <refpurpose>WINLIST is a list of windows.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(restack-windows winlist)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  <parameter>winlist</parameter> is a list of windows. The first element of <parameter>winlist</parameter>
will be kept in its current stacking order, the remainder will be
stacked immediately below it in the order given. (Note: This will
currently confuse the heck out of the pager and possibly other legacy
fvwm2 modules).
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1411 </para> </refsect1>
</refentry>

<refentry id="restart">
  <refnamediv>
    <refname>restart</refname>
    <refpurpose>Restart the window manager.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(restart  #&amp;optional command)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Restart the window manager. If <parameter>command</parameter> is specified, use
that, as the new window manager to run. If <parameter>command</parameter> is not specified or
is exactly equal to "scwm", restart scwm with the same command-line
arguments as given previously.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/shutdown.c"><filename>scwm/shutdown.c</filename></ulink>
  at line 126 </para> </refsect1>
</refentry>

<refentry id="restarted-p">
  <refnamediv>
    <refname>restarted?</refname>
    <refpurpose>Returns true if scwm is being restarted by itself.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(restarted?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns true if scwm is being restarted by itself.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 165 </para> </refsect1>
</refentry>

<refentry id="safe-load">
  <refnamediv>
    <refname>safe-load</refname>
    <refpurpose>Load file FNAME while trapping and displaying errors.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(safe-load fname)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Load file <parameter>fname</parameter> while trapping and displaying errors.
Each individual top-level-expression is evaluated separately and all
errors are trapped and displayed.  You Should use this procedure if
you need to make sure most of a file loads, even if it may contain
errors.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/callbacks.c"><filename>scwm/callbacks.c</filename></ulink>
  at line 243 </para> </refsect1>
</refentry>

<refentry id="scwm-path-exec-prefix">
  <refnamediv>
    <refname>scwm-path-exec-prefix</refname>
    <refpurpose>Return the <envar>$EXECPREFIX</envar> directory path that scwm was installed with.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(scwm-path-exec-prefix)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the <envar>$EXECPREFIX</envar> directory path that scwm was installed with.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 464 </para> </refsect1>
</refentry>

<refentry id="scwm-path-prefix">
  <refnamediv>
    <refname>scwm-path-prefix</refname>
    <refpurpose>Return the <envar>$PREFIX</envar> directory path that scwm was installed with.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(scwm-path-prefix)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the <envar>$PREFIX</envar> directory path that scwm was installed with.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 455 </para> </refsect1>
</refentry>

<refentry id="scwm-quit">
  <refnamediv>
    <refname>scwm-quit</refname>
    <refpurpose>Exit scwm cleanly.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(scwm-quit  . args)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Exit scwm cleanly. <link linkend="quit"><function>quit</function></link> is redefined as this within
scwm. <parameter>args</parameter> is ignored.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/shutdown.c"><filename>scwm/shutdown.c</filename></ulink>
  at line 152 </para> </refsect1>
</refentry>

<refentry id="scwm-version">
  <refnamediv>
    <refname>scwm-version</refname>
    <refpurpose>Return the version of scwm running.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(scwm-version)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the version of scwm running.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 446 </para> </refsect1>
</refentry>

<refentry id="select-window">
  <refnamediv>
    <refname>select-window</refname>
    <refpurpose>Select a window interactively.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(select-window  #&amp;optional kill? release?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Select a window interactively.
Use a special cursor and let the user click to select the window. The
optional arguments <parameter>kill?</parameter> and <parameter>release?</parameter> indicate whether to use the
"skull and cross-bones" kill cursor (recommended for destructive
operations like delete-window and destroy-window), and whether to wait
for a mouse release or act immediately on the click. The former is a
place-holder until we have proper cursor support in scwm.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 886 </para> </refsect1>
</refentry>

<refentry id="select-window-interactively">
  <refnamediv>
    <refname>select-window-interactively</refname>
    <refpurpose>Returns a window selected interactively while displaying MSG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(select-window-interactively  #&amp;optional msg)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns a window selected interactively while displaying <parameter>msg</parameter>.
Returns <literal>#f</literal> if no window was selected. Display no message if <parameter>msg</parameter> not given.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 506 </para> </refsect1>
</refentry>

<refentry id="send-button-press">
  <refnamediv>
    <refname>send-button-press</refname>
    <refpurpose>Send a synthetic mouse press event.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(send-button-press button modifier #&amp;optional win button-press? button-release? propagate?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Send a synthetic mouse press event.
Create a synthetic event of a press of mouse button <parameter>button</parameter>, with modifier
<parameter>modifier</parameter> and send the event to window <parameter>win</parameter> if specified; otherwise the
window to be used defaults to the window context in the usual way. By
default, both a press and a release are sent. However, the boolean
parameters <parameter>button-press?</parameter> and <parameter>button-release?</parameter> allow you to specify
which are sent individually. <parameter>propagate?</parameter> indicates whether the propagate
flag is set on the event; the default is <literal>#f</literal>. You should not have to
worry about this unless you know what it means.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/events.c"><filename>scwm/events.c</filename></ulink>
  at line 1745 </para> </refsect1>
</refentry>

<refentry id="send-key-press">
  <refnamediv>
    <refname>send-key-press</refname>
    <refpurpose>Send a synthetic press of KEY.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(send-key-press key #&amp;optional win key-press? key-release? propagate?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Send a synthetic press of <parameter>key</parameter>. The usual key specification
format (with modifiers) is used. The event is sent to window <parameter>win</parameter> if
specified; otherwise the window to be used defaults to the window
context in the usual way. By default, both a press and a release are
sent. However, the boolean parameters <parameter>key-press?</parameter> and <parameter>key-release?</parameter>
allow you to specify which are sent individually. <parameter>propagate?</parameter> indicates
whether the propagate flag is set on the event; the default is <literal>#f</literal>. You
should not have to worry about this unless you know what it means.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/events.c"><filename>scwm/events.c</filename></ulink>
  at line 1833 </para> </refsect1>
</refentry>

<refentry id="set-animation-x">
  <refnamediv>
    <refname>set-animation!</refname>
    <refpurpose>Set the animation parameters to VECTOR.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-animation! vector)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the animation parameters to <parameter>vector</parameter>. <parameter>vector</parameter> is a vector of
floats which give the fractions of the final position that the window
should appear at. For instance, #(0.0 0.25 0.5 0.75 1.0 1.1 1.0) would
make the window appear at the initial position, 1/4 of the way, 1/2 of
the way, 3/4 of the way, overshoot the final position slightly, and
finally slide back into place. This parameter is used for both
animated window shades and animated moves.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1911 </para> </refsect1>
</refentry>

<refentry id="set-border-face-x">
  <refnamediv>
    <refname>set-border-face!</refname>
    <refpurpose>Set the face for the border In the current decor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-border-face! active #&amp;optional inactive)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the face for the border In the current decor.
Use <parameter>active</parameter> as the face for the border when the window is active. Use
<parameter>inactive</parameter> when the window is inactive. <parameter>inactive</parameter> defaults to the same as
<parameter>active</parameter> when not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/face.c"><filename>scwm/face.c</filename></ulink>
  at line 957 </para> </refsect1>
</refentry>

<refentry id="set-border-width-x">
  <refnamediv>
    <refname>set-border-width!</refname>
    <refpurpose>Set the border width of WIN's border to WIDTH pixels.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-border-width! width #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the border width of <parameter>win</parameter>'s border to <parameter>width</parameter> pixels.
<parameter>win</parameter> defaults to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2603 </para> </refsect1>
</refentry>

<refentry id="set-button-face-x">
  <refnamediv>
    <refname>set-button-face!</refname>
    <refpurpose>Set the button faces for the various window states.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-button-face! button active-up #&amp;optional active-down inactive)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the button faces for the various window states.
In the current decor, use <parameter>active-up</parameter> as the face for the
button specified by the integer <parameter>button</parameter> when active and not pressed
in. Use <parameter>active-down</parameter> when <parameter>button</parameter> is active and pressed in, and <parameter>inactive</parameter>
when the window is inactive. Both <parameter>inactive</parameter> and <parameter>active-down</parameter> default to
<parameter>active-up</parameter> when not specified. Note that <parameter>active-down</parameter> will magically
reverse the sense of the relief flag, so if the button is raised in
the <parameter>active-up</parameter> state, it will be sunk in the <parameter>active-down</parameter> state by
default.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/face.c"><filename>scwm/face.c</filename></ulink>
  at line 863 </para> </refsect1>
</refentry>

<refentry id="set-button-mwm-flag-x">
  <refnamediv>
    <refname>set-button-mwm-flag!</refname>
    <refpurpose>Specify the Mwm flag for BUTTON.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-button-mwm-flag! button flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Specify the Mwm flag for <parameter>button</parameter>.
If <parameter>flag</parameter> is <literal>#t</literal>, the button's relief pattern (if any) will appear to
reverse in depth sense (i.e., flip from sunken in to extruding out)
when the window is maximized.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/face.c"><filename>scwm/face.c</filename></ulink>
  at line 924 </para> </refsect1>
</refentry>

<refentry id="set-click-time-x">
  <refnamediv>
    <refname>set-click-time!</refname>
    <refpurpose>Set the delay used in identifying mouse clicks and drags.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-click-time! ctime)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the delay used in identifying mouse clicks and drags.
<parameter>ctime</parameter> is specified in microseconds. After <parameter>ctime</parameter> microseconds, a mouse-down
without a mouse-up is considered a drag.  Also, after <parameter>ctime</parameter> microseconds, a
single click is definitively identified as not a double click.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 200 </para> </refsect1>
</refentry>

<refentry id="set-click-to-focus-passes-click-x">
  <refnamediv>
    <refname>set-click-to-focus-passes-click!</refname>
    <refpurpose>Determine whether a click-to-focus window receives the click.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-click-to-focus-passes-click! flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine whether a click-to-focus window receives the click.
If <parameter>flag</parameter> is <literal>#t</literal>, the window will receive the event, if <literal>#f</literal>, scwm
will not pass the event on to the client.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 391 </para> </refsect1>
</refentry>

<refentry id="set-click-to-focus-raises-x">
  <refnamediv>
    <refname>set-click-to-focus-raises!</refname>
    <refpurpose>Determine whether a click to focus raises the clicked-on window.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-click-to-focus-raises! flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine whether a click to focus raises the clicked-on window.
If <parameter>flag</parameter> is <literal>#t</literal>, clicks which transfer focus will also raise the target
window
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 408 </para> </refsect1>
</refentry>

<refentry id="set-colormap-focus-x">
  <refnamediv>
    <refname>set-colormap-focus!</refname>
    <refpurpose>Set the colormap focus policy to FTYPE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-colormap-focus! ftype)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the colormap focus policy to <parameter>ftype</parameter>. <parameter>ftype</parameter> can either be
'mouse, indicating that the window under the mouse pointer should
always have it's colormap installed, or 'focus to indicate that the
window with the input focus should also get the colormap focus. This
makes a difference only when using focus policies other than 'mouse.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 220 </para> </refsect1>
</refentry>

<refentry id="set-current-decor-x">
  <refnamediv>
    <refname>set-current-decor!</refname>
    <refpurpose>Set the current decor to DECOR.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-current-decor! decor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the current decor to <parameter>decor</parameter>. Operations described as
setting options "in the current decor" will now operate on this
one.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/decor.c"><filename>scwm/decor.c</filename></ulink>
  at line 264 </para> </refsect1>
</refentry>

<refentry id="set-current-desk-x">
  <refnamediv>
    <refname>set-current-desk!</refname>
    <refpurpose>Change the current desk to DESK.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-current-desk! desk)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Change the current desk to <parameter>desk</parameter>. <parameter>desk</parameter> should be an integer
small enough to fit in one machine word.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 58 </para> </refsect1>
</refentry>

<refentry id="set-decorate-transient-x">
  <refnamediv>
    <refname>set-decorate-transient!</refname>
    <refpurpose>Set decoration of transients property on WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-decorate-transient! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set decoration of transients property on <parameter>win</parameter>.
If <parameter>flag</parameter> is <literal>#t</literal>, then if <parameter>win</parameter> is transient it will be fully
decorated. Transient windows that are not fully decorated will be
given only a border and no titlebar regardless of other settings. <parameter>win</parameter>
defaults to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3122 </para> </refsect1>
</refentry>

<refentry id="set-desk-size-x">
  <refnamediv>
    <refname>set-desk-size!</refname>
    <refpurpose>Sets the desk size to WIDTH, HEIGHT.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-desk-size! width height)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Sets the desk size to <parameter>width</parameter>, <parameter>height</parameter>.
Both numbers are given in units of the physical screen size.
For example <code>(set-desk-size 3 3)</code> creates a
virtual world 9 times the size of the physical display.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 202 </para> </refsect1>
</refentry>

<refentry id="set-edge-resistance-x">
  <refnamediv>
    <refname>set-edge-resistance!</refname>
    <refpurpose>Set the edge resistance parameters.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-edge-resistance! sr mr)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the edge resistance parameters.
Sets two parameters indicating how much resistance should be
offered when scrolling things past the edge, in two different
senses. <parameter>sr</parameter> is an amount in microseconds that indicates how long the
mouse pointer must stay at the edge of the screen before the viewport
scrolls. If this parameter is greater than 10,000, the viewport will
not scroll at all at the screen edge (FIXMS: that's a bogus way to
indicate that.) <parameter>mr</parameter> is an amount in pixels that indicates how many
pixels past the edge of the screen a window must be moved before it
will really go past the edge.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 169 </para> </refsect1>
</refentry>

<refentry id="set-edge-scroll-x">
  <refnamediv>
    <refname>set-edge-scroll!</refname>
    <refpurpose>Set the edge scroll amount in pixels.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-edge-scroll! sx sy)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the edge scroll amount in pixels.
The edge scroll setting is the amount by which the viewport will scroll
when the mouse hits the edge. <parameter>sx</parameter> gives the amount at a time to scroll
horizontally, while <parameter>sy</parameter> gives the amount to scroll vertically. Use `%x'
and `%y' to convert from a percent of screen size to pixels.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 105 </para> </refsect1>
</refentry>

<refentry id="set-edge-wrap-x">
  <refnamediv>
    <refname>set-edge-wrap!</refname>
    <refpurpose>Set whether to wrap pointer around edges.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-edge-wrap! wx wy)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set whether to wrap pointer around edges.
If <parameter>wx</parameter> is <literal>#t</literal>, the pointer will wrap from the right edge of the
display to the left of the display as it moves off the right edge,
and vice-versa.  <parameter>wy</parameter> indicates whether the analogous vertical
wraparound is in effect
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 133 </para> </refsect1>
</refentry>

<refentry id="set-force-icon-x">
  <refnamediv>
    <refname>set-force-icon!</refname>
    <refpurpose>Set the window-manager-overriding property for WIN to boolean FLAG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-force-icon! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the window-manager-overriding property for <parameter>win</parameter> to boolean <parameter>flag</parameter>.
If <literal>#t</literal>, the icon specified for <parameter>win</parameter> by the user through scwm will override an
application-provided icon.  <parameter>win</parameter> defaults to the window context in the usual
way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2955 </para> </refsect1>
</refentry>

<refentry id="set-hilight-background-x">
  <refnamediv>
    <refname>set-hilight-background!</refname>
    <refpurpose>Use BG as the background color for the window with input focus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-hilight-background! bg)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>bg</parameter> as the background color for the window with input focus.
Applies to the current decor.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 628 </para> </refsect1>
</refentry>

<refentry id="set-hilight-factor-x">
  <refnamediv>
    <refname>set-hilight-factor!</refname>
    <refpurpose>Use FACTOR to generate highlight colors for the current decor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-hilight-factor! factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>factor</parameter> to generate highlight colors for the current decor.
<parameter>factor</parameter> is a positive floating point number.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 431 </para> </refsect1>
</refentry>

<refentry id="set-hilight-foreground-x">
  <refnamediv>
    <refname>set-hilight-foreground!</refname>
    <refpurpose>Use FG for foreground color of the window with the input focus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-hilight-foreground! fg)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>fg</parameter> for foreground color of the window with the input focus.
Applies to the current decor.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 585 </para> </refsect1>
</refentry>

<refentry id="set-hint-override-x">
  <refnamediv>
    <refname>set-hint-override!</refname>
    <refpurpose>Set whether or not Mwm and Open Look function hints are used.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-hint-override! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set whether or not Mwm and Open Look function hints are used.
If <parameter>flag</parameter> is <literal>#t</literal>, the hints, which indicate what operations should be
allowed on a window, will be ignored for <parameter>win</parameter>.  If <parameter>flag</parameter> is <literal>#f</literal>, the hints will
be honoured. <parameter>win</parameter> defaults to the window context in the usual way if
not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3105 </para> </refsect1>
</refentry>

<refentry id="set-icon-x">
  <refnamediv>
    <refname>set-icon!</refname>
    <refpurpose>Set the image to use for the icon of WIN to IMAGE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-icon! image #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the image to use for the icon of <parameter>win</parameter> to <parameter>image</parameter>.
As usual, an image object or a filename string may be given. <literal>#f</literal> May
also be specified, indicating no icon image. <parameter>win</parameter> defaults to the window
context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3001 </para> </refsect1>
</refentry>

<refentry id="set-icon-box-x">
  <refnamediv>
    <refname>set-icon-box!</refname>
    <refpurpose>Set the icon box in which WIN's icon will be placed.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-icon-box! x y w h #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the icon box in which <parameter>win</parameter>'s icon will be placed.
This set the box to the rectangle at coordinates <parameter>x</parameter>, <parameter>y</parameter> with width <parameter>w</parameter> and
height <parameter>h</parameter>. <parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2689 </para> </refsect1>
</refentry>

<refentry id="set-icon-font-x">
  <refnamediv>
    <refname>set-icon-font!</refname>
    <refpurpose>Set the font used for drawing icon titles to FONT.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-icon-font! font)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the font used for drawing icon titles to <parameter>font</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/font.c"><filename>scwm/font.c</filename></ulink>
  at line 258 </para> </refsect1>
</refentry>

<refentry id="set-icon-title-x">
  <refnamediv>
    <refname>set-icon-title!</refname>
    <refpurpose>Set the visibility of WIN's icon title according to FLAG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-icon-title! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the visibility of <parameter>win</parameter>'s icon title according to <parameter>flag</parameter>. <parameter>win</parameter>
defaults to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2938 </para> </refsect1>
</refentry>

<refentry id="set-lenience-x">
  <refnamediv>
    <refname>set-lenience!</refname>
    <refpurpose>Set or reset the input focus lenience flag.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-lenience! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set or reset the input focus lenience flag.
Determine whether or not to try to give <parameter>win</parameter> the input focus
when asked, even if the window claims according to hints that it
cannot receive the input focus, according to the boolean value
<parameter>flag</parameter>. <parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3237 </para> </refsect1>
</refentry>

<refentry id="set-menu-background-x">
  <refnamediv>
    <refname>set-menu-background!</refname>
    <refpurpose>Use BG as the default foreground color for menus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-background! bg)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>bg</parameter> as the default foreground color for menus.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 723 </para> </refsect1>
</refentry>

<refentry id="set-menu-font-x">
  <refnamediv>
    <refname>set-menu-font!</refname>
    <refpurpose>Set the default font used for drawing menus to FONT.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-font! font)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the default font used for drawing menus to <parameter>font</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/font.c"><filename>scwm/font.c</filename></ulink>
  at line 334 </para> </refsect1>
</refentry>

<refentry id="set-menu-foreground-x">
  <refnamediv>
    <refname>set-menu-foreground!</refname>
    <refpurpose>Use FG as the default foreground color for menus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-foreground! fg)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>fg</parameter> as the default foreground color for menus.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 696 </para> </refsect1>
</refentry>

<refentry id="set-menu-hilight-factor-x">
  <refnamediv>
    <refname>set-menu-hilight-factor!</refname>
    <refpurpose>Use FACTOR to generate hilight colors for menus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-hilight-factor! factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>factor</parameter> to generate hilight colors for menus.
<parameter>factor</parameter> is a positive floating point number
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 510 </para> </refsect1>
</refentry>

<refentry id="set-menu-mwm-style-x">
  <refnamediv>
    <refname>set-menu-mwm-style!</refname>
    <refpurpose>Set the menu mwm style according to the boolean FLAG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-mwm-style!  #&amp;optional flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the menu mwm style according to the boolean <parameter>flag</parameter>.
This option is currently ignored.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 33 </para> </refsect1>
</refentry>

<refentry id="set-menu-shadow-factor-x">
  <refnamediv>
    <refname>set-menu-shadow-factor!</refname>
    <refpurpose>Use FACTOR to generate shadow colors for menus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-shadow-factor! factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>factor</parameter> to generate shadow colors for menus.
<parameter>factor</parameter> is a positive floating point number
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 539 </para> </refsect1>
</refentry>

<refentry id="set-menu-stipple-x">
  <refnamediv>
    <refname>set-menu-stipple!</refname>
    <refpurpose>Use ST as the default stipple color for menus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-stipple! st)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>st</parameter> as the default stipple color for menus.
May not be used any longer.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 778 </para> </refsect1>
</refentry>

<refentry id="set-message-window-attributes-x">
  <refnamediv>
    <refname>set-message-window-attributes!</refname>
    <refpurpose>Set the attributes to be used for the message window.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-message-window-attributes! font fg-color bg-color)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the attributes to be used for the message window.
The font will be <parameter>font</parameter>, foreground color <parameter>fg-color</parameter>, and background color <parameter>bg-color</parameter>.
This the window which is used to display the current size or position of the window
being moved or resized interactively.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/resize.c"><filename>scwm/resize.c</filename></ulink>
  at line 56 </para> </refsect1>
</refentry>

<refentry id="set-mini-icon-x">
  <refnamediv>
    <refname>set-mini-icon!</refname>
    <refpurpose>Set the image to use for the mini-icon of WIN to IMAGE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-mini-icon! image #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the image to use for the mini-icon of <parameter>win</parameter> to <parameter>image</parameter>. As
usual, an image object or a filename string may be given. <parameter>win</parameter> defaults
to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3053 </para> </refsect1>
</refentry>

<refentry id="set-mouse-focus-click-raises-x">
  <refnamediv>
    <refname>set-mouse-focus-click-raises!</refname>
    <refpurpose>Determine whether a mouse-focus-click will raise the window.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-mouse-focus-click-raises! flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine whether a mouse-focus-click will raise the window.
If <parameter>flag</parameter> is <literal>#t</literal> it will raise the window. Not sure if this function
makes sense any more.  FIXDOC.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 430 </para> </refsect1>
</refentry>

<refentry id="set-mwm-border-x">
  <refnamediv>
    <refname>set-mwm-border!</refname>
    <refpurpose>Set the mwm-border style flag of WIN to boolean FLAG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-mwm-border! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the mwm-border style flag of <parameter>win</parameter> to boolean <parameter>flag</parameter>.
The Mwm style has shallower bevels than the default scwm/fvwm2 style.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2908 </para> </refsect1>
</refentry>

<refentry id="set-mwm-buttons-x">
  <refnamediv>
    <refname>set-mwm-buttons!</refname>
    <refpurpose>Set the mwm-buttons flag of WIN to boolean FLAG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-mwm-buttons! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the mwm-buttons flag of <parameter>win</parameter> to boolean <parameter>flag</parameter>.
The mwm-buttons flag controls whether any of this window's
flags obey their mwm-flags. See <link linkend="set-button-mwm-flag-x"><function>set-button-mwm-flag!</function></link>. <parameter>win</parameter> defaults
to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2892 </para> </refsect1>
</refentry>

<refentry id="set-mwm-decor-hint-x">
  <refnamediv>
    <refname>set-mwm-decor-hint!</refname>
    <refpurpose>Set whether or not Motif decoration hints are used for WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-mwm-decor-hint! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set whether or not Motif decoration hints are used for <parameter>win</parameter>.
If <parameter>flag</parameter> is <literal>#t</literal>, the Mwm decor hint will be given for <parameter>win</parameter>.  <parameter>win</parameter> defaults
to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3138 </para> </refsect1>
</refentry>

<refentry id="set-mwm-func-hint-x">
  <refnamediv>
    <refname>set-mwm-func-hint!</refname>
    <refpurpose>Set whether or not Motif function hints are used for WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-mwm-func-hint! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set whether or not Motif function hints are used for <parameter>win</parameter>.
If <parameter>flag</parameter> is <literal>#t</literal>, the Motif function hints are respected for <parameter>win</parameter>.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3152 </para> </refsect1>
</refentry>

<refentry id="set-OL-decor-hint-x">
  <refnamediv>
    <refname>set-OL-decor-hint!</refname>
    <refpurpose>Determine whether or not to respect Open Look decoration hints.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-OL-decor-hint! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine whether or not to respect Open Look decoration hints.
If <parameter>flag</parameter> is <literal>#t</literal>, the decoration hints will be respected for <parameter>win</parameter>. <parameter>win</parameter>
defaults to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3184 </para> </refsect1>
</refentry>

<refentry id="set-opaque-move-size-x">
  <refnamediv>
    <refname>set-opaque-move-size!</refname>
    <refpurpose>Set the opaque move size limit to SIZE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-opaque-move-size! size)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the opaque move size limit to <parameter>size</parameter>.
<parameter>size</parameter> is given as a percentage of the screen area. If the area of a
window is greater than this percentage, the window will be moved with
a rubber band instead.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 249 </para> </refsect1>
</refentry>

<refentry id="set-PPosition-hint-x">
  <refnamediv>
    <refname>set-PPosition-hint!</refname>
    <refpurpose>Set or reset the program-specified position hint for WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-PPosition-hint! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set or reset the program-specified position hint for <parameter>win</parameter>.
If <parameter>flag</parameter> is <literal>#t</literal>, the hint will be set, otherwise reset.  This only
matters when using the default placement procedure. Some programs
allegedly set this hint to a useless value like (0,0) always, so
ignoring it is recommended. <parameter>win</parameter> defaults to the window context in the
usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3167 </para> </refsect1>
</refentry>

<refentry id="set-random-placement-x">
  <refnamediv>
    <refname>set-random-placement!</refname>
    <refpurpose>Set the random-placement flag of WIN to boolean FLAG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-random-placement! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the random-placement flag of <parameter>win</parameter> to boolean <parameter>flag</parameter>.
This flag only matters if the default placement procedure is
being used. <parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2837 </para> </refsect1>
</refentry>

<refentry id="set-rubber-band-mask-x">
  <refnamediv>
    <refname>set-rubber-band-mask!</refname>
    <refpurpose>Set the rubber band mask used when dragging or resizing.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-rubber-band-mask! value)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the rubber band mask used when dragging or resizing.
<parameter>value</parameter> is XORed with the background when dragging non-opaque move or
resize frames. <parameter>value</parameter> should be an integer.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 59 </para> </refsect1>
</refentry>

<refentry id="set-shadow-factor-x">
  <refnamediv>
    <refname>set-shadow-factor!</refname>
    <refpurpose>Use FACTOR to generate shadow colors in the current decor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-shadow-factor! factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>factor</parameter> to generate shadow colors in the current decor.
<parameter>factor</parameter> is a positive floating point number
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 468 </para> </refsect1>
</refentry>

<refentry id="set-show-icon-x">
  <refnamediv>
    <refname>set-show-icon!</refname>
    <refpurpose>Set whether or not the icon of WIN will be visible.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-show-icon! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set whether or not the icon of <parameter>win</parameter> will be visible.  If <parameter>flag</parameter>
is <literal>#t</literal>, the icon will be displayed, if <literal>#f</literal>, it will not appear when the
window is iconified (it will still be in the window list, of course).
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2982 </para> </refsect1>
</refentry>

<refentry id="set-skip-mapping-x">
  <refnamediv>
    <refname>set-skip-mapping!</refname>
    <refpurpose>Set or reset whether scwm should not change desktops on a map.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-skip-mapping! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set or reset whether scwm should not change desktops on a map.
This only affect the behaviour upon initial mapping of <parameter>win</parameter>. If <parameter>flag</parameter> is
<literal>#t</literal>, the virtual desktop will not be changed when <parameter>win</parameter> is mapped.  <parameter>win</parameter>
defaults to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3222 </para> </refsect1>
</refentry>

<refentry id="set-smart-placement-x">
  <refnamediv>
    <refname>set-smart-placement!</refname>
    <refpurpose>Set the smart-placement flag of WIN to boolean FLAG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-smart-placement! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the smart-placement flag of <parameter>win</parameter> to boolean <parameter>flag</parameter>.
This flag only matters if the default placement procedure is
being used. <parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2852 </para> </refsect1>
</refentry>

<refentry id="set-smart-placement-is-really-smart-x">
  <refnamediv>
    <refname>set-smart-placement-is-really-smart!</refname>
    <refpurpose>Determine whether or not clever-place-window will be used.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-smart-placement-is-really-smart! flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine whether or not clever-place-window will be used.  If
<parameter>flag</parameter> is <literal>#t</literal>, then clever-place-window will be used instead of
smart-place-window when the default placement procedure is used, and
the window's smart-placement flag is on, according to the boolean
value <parameter>flag</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 371 </para> </refsect1>
</refentry>

<refentry id="set-start-on-desk-x">
  <refnamediv>
    <refname>set-start-on-desk!</refname>
    <refpurpose>Make WIN start on DESK when first mapped.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-start-on-desk! desk #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Make <parameter>win</parameter> start on <parameter>desk</parameter> when first mapped. <parameter>win</parameter> defaults to the
window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3198 </para> </refsect1>
</refentry>

<refentry id="set-title-face-x">
  <refnamediv>
    <refname>set-title-face!</refname>
    <refpurpose>Set the titlebar faces for the various window states.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-title-face! active-up #&amp;optional active-down inactive)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the titlebar faces for the various window states.
In the current decor, use <parameter>active-up</parameter> as the face for the title
bar when active and not pressed in. Use <parameter>active-down</parameter> when the title bar
is active and pressed in, and <parameter>inactive</parameter> when the window is
inactive. Both <parameter>inactive</parameter> and <parameter>active-down</parameter> default to <parameter>active-up</parameter> when not
specified. Note that <parameter>active-down</parameter> will magically reverse the sense of
the relief flag, so if your titlebar bar is raised in the <parameter>active-up</parameter>
state, it will be sunk in the <parameter>active-down</parameter> state by default.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/face.c"><filename>scwm/face.c</filename></ulink>
  at line 823 </para> </refsect1>
</refentry>

<refentry id="set-title-height-x">
  <refnamediv>
    <refname>set-title-height!</refname>
    <refpurpose>Set the height of the titlebar in pixels to HEIGHT.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-title-height! height)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the height of the titlebar in pixels to <parameter>height</parameter>.
Applies to the current decor.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 125 </para> </refsect1>
</refentry>

<refentry id="set-title-justify-x">
  <refnamediv>
    <refname>set-title-justify!</refname>
    <refpurpose>Set the justification for the title to JUST.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-title-justify! just)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the justification for the title to <parameter>just</parameter>.
<parameter>just</parameter> should be one of 'right, 'left, or 'center. Applies to the
current decor
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 90 </para> </refsect1>
</refentry>

<refentry id="set-viewport-position-x">
  <refnamediv>
    <refname>set-viewport-position!</refname>
    <refpurpose>Position the upper left corner of the viewport at coordinates X, Y.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-viewport-position! x y)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Position the upper left corner of the viewport at coordinates <parameter>x</parameter>, <parameter>y</parameter>.
<parameter>x</parameter> and <parameter>y</parameter> are given in pixels.  Does not affect the current desk.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 83 </para> </refsect1>
</refentry>

<refentry id="set-window-background-x">
  <refnamediv>
    <refname>set-window-background!</refname>
    <refpurpose>Set the foreground color of WIN to BG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-background! bg #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the foreground color of <parameter>win</parameter> to <parameter>bg</parameter>. This color is used to
draw most of the window decorations, along with the relief colors
generated from it, which are used to draw the window's 3-D bevels.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2807 </para> </refsect1>
</refentry>

<refentry id="set-window-button-x">
  <refnamediv>
    <refname>set-window-button!</refname>
    <refpurpose>Set the visibility of button number N on window WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-button! n flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the visibility of button number <parameter>n</parameter> on window <parameter>win</parameter>.
If <parameter>flag</parameter> is <literal>#t</literal>, the button will be visible, otherwise it won't be
drawn.  <parameter>win</parameter> defaults to the window context in the usual way if not
specified. (<parameter>n</parameter>ote: this code may be broken right now.)
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2867 </para> </refsect1>
</refentry>

<refentry id="set-window-decor-x">
  <refnamediv>
    <refname>set-window-decor!</refname>
    <refpurpose>Set WIN's decor to DECOR.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-decor! decor #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set <parameter>win</parameter>'s decor to <parameter>decor</parameter>. If <parameter>win</parameter> is not given, it defaults to
the window context in the usual way.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/decor.c"><filename>scwm/decor.c</filename></ulink>
  at line 308 </para> </refsect1>
</refentry>

<refentry id="set-window-focus-x">
  <refnamediv>
    <refname>set-window-focus!</refname>
    <refpurpose>Set the focus style of WIN to SYM.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-focus! sym #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the focus style of <parameter>win</parameter> to <parameter>sym</parameter>. <parameter>sym</parameter> may be 'click, 'mouse,
'sloppy or 'none. <parameter>win</parameter> defaults to the window context in the usual way
if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2749 </para> </refsect1>
</refentry>

<refentry id="set-window-font-x">
  <refnamediv>
    <refname>set-window-font!</refname>
    <refpurpose>Set the font for window titles In the current decor to FONT.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-font! font)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the font for window titles In the current decor to <parameter>font</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/font.c"><filename>scwm/font.c</filename></ulink>
  at line 280 </para> </refsect1>
</refentry>

<refentry id="set-window-foreground-x">
  <refnamediv>
    <refname>set-window-foreground!</refname>
    <refpurpose>Set the foreground color of WIN to FG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-foreground! fg #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the foreground color of <parameter>win</parameter> to <parameter>fg</parameter>. This color is used to
draw the title text currently. In the future, it may have other uses
as well. <parameter>win</parameter> defaults to the window context in the usual way
if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2784 </para> </refsect1>
</refentry>

<refentry id="set-window-text-property">
  <refnamediv>
    <refname>set-window-text-property</refname>
    <refpurpose>Set a text property named PROPNAME on WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-text-property win propname value)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set a text property named <parameter>propname</parameter> on <parameter>win</parameter>.
Uses format 8 (byte) and type "XA_STRING", and <parameter>value</parameter> as the data.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/xproperty.c"><filename>scwm/xproperty.c</filename></ulink>
  at line 131 </para> </refsect1>
</refentry>

<refentry id="shadow-factor">
  <refnamediv>
    <refname>shadow-factor</refname>
    <refpurpose>Return the current shadow factor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(shadow-factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current shadow factor.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 492 </para> </refsect1>
</refentry>

<refentry id="show-titlebar">
  <refnamediv>
    <refname>show-titlebar</refname>
    <refpurpose>Cause WIN to be decorated with a titlebar.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(show-titlebar  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter> to be decorated with a titlebar.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2450 </para> </refsect1>
</refentry>

<refentry id="smart-place-window">
  <refnamediv>
    <refname>smart-place-window</refname>
    <refpurpose>Places WIN using fvwm2's SmartPlacement algorithm.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(smart-place-window win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Places <parameter>win</parameter> using fvwm2's SmartPlacement algorithm.
The placement is just as if SmartPlacementIsReallySmart were not in
effect. That is, it tries to place the window so that it does not
overlap any other. If it fails to do so, it returns <literal>#f</literal>; otherwise it
returns <literal>#t</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/placement.c"><filename>scwm/placement.c</filename></ulink>
  at line 423 </para> </refsect1>
</refentry>

<refentry id="stick">
  <refnamediv>
    <refname>stick</refname>
    <refpurpose>Cause WIN to become "sticky".</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(stick  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter> to become "sticky".
A sticky window will appear on all desktops, and will remain at the
same screen position regardless of scrolling within the current
desktop. <parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1616 </para> </refsect1>
</refentry>

<refentry id="stick-icon">
  <refnamediv>
    <refname>stick-icon</refname>
    <refpurpose>Cause WIN's icon to become "sticky".</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(stick-icon  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter>'s icon to become "sticky". See <link linkend="stick"><function>stick</function></link>. <parameter>win</parameter>
defaults to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2637 </para> </refsect1>
</refentry>

<refentry id="sticky-p">
  <refnamediv>
    <refname>sticky?</refname>
    <refpurpose>Return #t if WIN is "sticky", #f otherwise.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(sticky?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>win</parameter> is "sticky", <literal>#f</literal> otherwise.
See <link linkend="stick"><function>stick</function></link> for an explanation. <parameter>win</parameter> defaults to the
window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1659 </para> </refsect1>
</refentry>

<refentry id="string-to-xproperty">
  <refnamediv>
    <refname>string->xproperty</refname>
    <refpurpose>Create an xproperty object from STR.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(string->xproperty str)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Create an xproperty object from <parameter>str</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/xproperty.c"><filename>scwm/xproperty.c</filename></ulink>
  at line 227 </para> </refsect1>
</refentry>

<refentry id="titlebar-shown-p">
  <refnamediv>
    <refname>titlebar-shown?</refname>
    <refpurpose>Return #t if WIN is decorated with a titlebar, #f otherwise.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(titlebar-shown?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>win</parameter> is decorated with a titlebar, <literal>#f</literal> otherwise.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2512 </para> </refsect1>
</refentry>

<refentry id="transient-p">
  <refnamediv>
    <refname>transient?</refname>
    <refpurpose>Return #t if WIN is transient, #f if not.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(transient?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>win</parameter> is transient, <literal>#f</literal> if not.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1516 </para> </refsect1>
</refentry>

<refentry id="un-keep-on-top">
  <refnamediv>
    <refname>un-keep-on-top</refname>
    <refpurpose>Remove the on-top property from WIN, if it has it.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(un-keep-on-top  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Remove the on-top property from <parameter>win</parameter>, if it has it.
See <link linkend="keep-on-top"><function>keep-on-top</function></link>. <parameter>win</parameter> defaults to the window context in the usual
way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2413 </para> </refsect1>
</refentry>

<refentry id="un-window-shade">
  <refnamediv>
    <refname>un-window-shade</refname>
    <refpurpose>Reverse the effect of `window-shade' on WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(un-window-shade  #&amp;optional win animated?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Reverse the effect of <link linkend="window-shade"><function>window-shade</function></link> on <parameter>win</parameter>.
By default, the change takes place instantaneously. However, if the
optional <parameter>animated?</parameter> argument is true, the window will be animated as it
rolls down, producing a pleasing visual effect. <parameter>win</parameter> defaults to the
window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1754 </para> </refsect1>
</refentry>

<refentry id="unbind-key">
  <refnamediv>
    <refname>unbind-key</refname>
    <refpurpose>Remove any bindings attached to KEY in given CONTEXTS.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unbind-key contexts key)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Remove any bindings attached to <parameter>key</parameter> in given <parameter>contexts</parameter>.
<parameter>contexts</parameter> is a list of event-contexts (e.g., '(button1 sidebar))
<parameter>key</parameter> is a string giving the key-specifier (e.g., M-Delete for Meta+Delete)
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/binding.c"><filename>scwm/binding.c</filename></ulink>
  at line 331 </para> </refsect1>
</refentry>

<refentry id="unbind-mouse">
  <refnamediv>
    <refname>unbind-mouse</refname>
    <refpurpose>Remove any bindings attached to mouse BUTTON in given CONTEXTS.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unbind-mouse contexts button)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Remove any bindings attached to mouse <parameter>button</parameter> in given <parameter>contexts</parameter>.
<parameter>contexts</parameter> is a list of event-contexts (e.g., '(button1 sidebar))
<parameter>button</parameter> is a string or integer giving the mouse button number
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/binding.c"><filename>scwm/binding.c</filename></ulink>
  at line 392 </para> </refsect1>
</refentry>

<refentry id="unfocus">
  <refnamediv>
    <refname>unfocus</refname>
    <refpurpose>Remove the input focus from any window that may have it.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unfocus)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Remove the input focus from any window that may have it.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1338 </para> </refsect1>
</refentry>

<refentry id="unregister-image-loader">
  <refnamediv>
    <refname>unregister-image-loader</refname>
    <refpurpose>Unregister the loader, if any, for images ending in EXTENSION.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unregister-image-loader extension)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Unregister the loader, if any, for images ending in <parameter>extension</parameter>.
<parameter>extension</parameter> must be a string beginning with a period, the
empty string (for files with no extension), or the string "default"
(for files that no other image loader succeeds in loading).
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/image.c"><filename>scwm/image.c</filename></ulink>
  at line 327 </para> </refsect1>
</refentry>

<refentry id="unstick">
  <refnamediv>
    <refname>unstick</refname>
    <refpurpose>Cause a window to no longer be "sticky", if it is.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unstick  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause a window to no longer be "sticky", if it is.
See <link linkend="stick"><function>stick</function></link> for an explanation. <parameter>win</parameter> defaults to the window context in
the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1639 </para> </refsect1>
</refentry>

<refentry id="unstick-icon">
  <refnamediv>
    <refname>unstick-icon</refname>
    <refpurpose>Cause WIN's icon to no longer by "sticky".</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unstick-icon  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter>'s icon to no longer by "sticky". See <link linkend="stick-icon"><function>stick-icon</function></link>
and <link linkend="stick"><function>stick</function></link>. <parameter>win</parameter> defaults to the window context in the usual way if
not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2656 </para> </refsect1>
</refentry>

<refentry id="viewport-position">
  <refnamediv>
    <refname>viewport-position</refname>
    <refpurpose>Returns the current position of the viewport in pixels.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(viewport-position)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the current position of the viewport in pixels.
The returned value is a list of the x and y positions.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 266 </para> </refsect1>
</refentry>

<refentry id="wait-for-window">
  <refnamediv>
    <refname>wait-for-window</refname>
    <refpurpose>Wait until a window appears which satisfies PREDICATE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(wait-for-window predicate)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Wait until a window appears which satisfies <parameter>predicate</parameter>. Given
the existence of before-new-window-hook, this is of questionable
usefulness.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 329 </para> </refsect1>
</refentry>

<refentry id="warp-to-window">
  <refnamediv>
    <refname>warp-to-window</refname>
    <refpurpose>Move the mouse pointer to the upper left corner of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(warp-to-window  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move the mouse pointer to the upper left corner of <parameter>win</parameter>.  If
<parameter>win</parameter> is on a different desk or in a different viewport, these will be
changed appropriately so that the window is visible. <parameter>win</parameter> defaults to
the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1351 </para> </refsect1>
</refentry>

<refentry id="window-class">
  <refnamediv>
    <refname>window-class</refname>
    <refpurpose>Return the window resource class of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-class  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window resource class of <parameter>win</parameter>.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2349 </para> </refsect1>
</refentry>

<refentry id="window-deletable-p">
  <refnamediv>
    <refname>window-deletable?</refname>
    <refpurpose>Return #t if WIN is able to be deleted, #f otherwise.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-deletable?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>win</parameter> is able to be deleted, <literal>#f</literal> otherwise.
Scwm may call <link linkend="delete-window"><function>delete-window</function></link> on <parameter>win</parameter> only if this procedure returns
<literal>#t</literal>. <parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1305 </para> </refsect1>
</refentry>

<refentry id="window-desk">
  <refnamediv>
    <refname>window-desk</refname>
    <refpurpose>Return the desk that WIN is currently on.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-desk  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the desk that <parameter>win</parameter> is currently on. <parameter>win</parameter> defaults to the
window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2314 </para> </refsect1>
</refentry>

<refentry id="window-frame-id">
  <refnamediv>
    <refname>window-frame-id</refname>
    <refpurpose>Return the X window id for the outermost frame window of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-frame-id  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the X window id for the outermost frame window of <parameter>win</parameter>.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2257 </para> </refsect1>
</refentry>

<refentry id="window-icon">
  <refnamediv>
    <refname>window-icon</refname>
    <refpurpose>Get the icon image being used for WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-icon win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Get the icon image being used for <parameter>win</parameter>.
Returns <literal>#f</literal> if none is being used. <parameter>win</parameter> defaults to the window context
in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3036 </para> </refsect1>
</refentry>

<refentry id="window-icon-title">
  <refnamediv>
    <refname>window-icon-title</refname>
    <refpurpose>Return the icon window title of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-icon-title  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the icon window title of <parameter>win</parameter>.
This is the title as requested by the application . <parameter>win</parameter> defaults to
the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2337 </para> </refsect1>
</refentry>

<refentry id="window-id">
  <refnamediv>
    <refname>window-id</refname>
    <refpurpose>Return the X window id for WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-id  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the X window id for <parameter>win</parameter>.
This is the X id for the actual application window. <parameter>win</parameter> defaults to
the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2244 </para> </refsect1>
</refentry>

<refentry id="window-mini-icon">
  <refnamediv>
    <refname>window-mini-icon</refname>
    <refpurpose>Get the mini-icon image being used for WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-mini-icon win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Get the mini-icon image being used for <parameter>win</parameter>.
Returns <literal>#f</literal> if none is being used. <parameter>win</parameter> defaults to the window context
in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3088 </para> </refsect1>
</refentry>

<refentry id="window-position">
  <refnamediv>
    <refname>window-position</refname>
    <refpurpose>Return the position of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-position  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the position of <parameter>win</parameter>. The position is returned as a
list of the x coordinate and the y coordinate in pixels. <parameter>win</parameter> defaults
to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2206 </para> </refsect1>
</refentry>

<refentry id="window-resource">
  <refnamediv>
    <refname>window-resource</refname>
    <refpurpose>Return the window resource instance of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-resource  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window resource instance of <parameter>win</parameter>. <parameter>win</parameter> defaults to
the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2362 </para> </refsect1>
</refentry>

<refentry id="window-shade">
  <refnamediv>
    <refname>window-shade</refname>
    <refpurpose>Cause WIN to become "window-shaded".</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-shade  #&amp;optional win animated?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter> to become "window-shaded".
That is, to roll up into just a titlebar. By default, the change takes
place instantaneously. However, if the optional <parameter>animated?</parameter> argument is
true, the window will be animated as it rolls up, producing a pleasing
visual effect. <parameter>win</parameter> defaults to the window context in the usual way if
not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1685 </para> </refsect1>
</refentry>

<refentry id="window-shaded-p">
  <refnamediv>
    <refname>window-shaded?</refname>
    <refpurpose>Return #t if WIN is shaded.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-shaded?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>win</parameter> is shaded.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1799 </para> </refsect1>
</refentry>

<refentry id="window-size">
  <refnamediv>
    <refname>window-size</refname>
    <refpurpose>Return the size of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-size  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the size of <parameter>win</parameter>. The position is returned as a list of
the width and the height in pixels. <parameter>win</parameter> defaults to the window context
in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2225 </para> </refsect1>
</refentry>

<refentry id="window-title">
  <refnamediv>
    <refname>window-title</refname>
    <refpurpose>Return the window title of WIN, as requested by the application.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-title  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window title of <parameter>win</parameter>, as requested by the application.
<parameter>win</parameter> defaults to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2326 </para> </refsect1>
</refentry>

<refentry id="window-transient-for">
  <refnamediv>
    <refname>window-transient-for</refname>
    <refpurpose>Return the window for which WIN is transient.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-transient-for  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window for which <parameter>win</parameter> is transient.
If <parameter>win</parameter> is transient, and the window it is transient for is
not the root window and is being managed by scwm, this returns the window
object of the window that <parameter>win</parameter> is transient for, otherwise return
<literal>#f</literal>. <parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1531 </para> </refsect1>
</refentry>

<refentry id="window-xproperty">
  <refnamediv>
    <refname>window-xproperty</refname>
    <refpurpose>Get and maybe delete the property called NAME from WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-xproperty win name #&amp;optional consume)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Get and maybe delete the property called <parameter>name</parameter> from <parameter>win</parameter>.
The property will be deleted upon getting (in an atomic operation)
if the boolean value <parameter>consume</parameter> is <literal>#t</literal>
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/xproperty.c"><filename>scwm/xproperty.c</filename></ulink>
  at line 162 </para> </refsect1>
</refentry>

<refentry id="window-p">
  <refnamediv>
    <refname>window?</refname>
    <refpurpose>Returns #t if OBJ is a window object, otherwise returns #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window? obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns <literal>#t</literal> if <parameter>obj</parameter> is a window object, otherwise returns <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 421 </para> </refsect1>
</refentry>

<refentry id="X-display-information">
  <refnamediv>
    <refname>X-display-information</refname>
    <refpurpose>Return some information about the screen.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-display-information)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return some information about the screen. In particular,
return a list of the horizontal resolution, the vertical resolution,
the number of planes on the current screen (i.e. the bit depth), the
bits per color supported by the hardware, the visual class (one of
"StaticGray", "GrayScale", "StaticColor", "PseudoColor", "DirectColor"
or "TrueColor") and a boolean indicating whether the display is color.
The resolutions mentioned above should in theory be pixels per
centimeter, rounded to the nearest integer. These parameters can be
used for various workarounds or conditional decisions in a scwmrc to
be shared among multiple machines.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 496 </para> </refsect1>
</refentry>

<refentry id="X-pointer-mapping">
  <refnamediv>
    <refname>X-pointer-mapping</refname>
    <refpurpose>Return the mapping of physical->logical pointer buttons as a list.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-pointer-mapping)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the mapping of physical->logical pointer buttons as a list.
The length of the returned list is the number of buttons available.  Each
element in the list is an integer.  E.g., '(1 2 3) is a normally mapped
3-button mouse, whereas '(3 2 1) is a 3-button mouse where the rightmost
physical button acts as logical button 1, and the leftmost acts as button 3.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/binding.c"><filename>scwm/binding.c</filename></ulink>
  at line 790 </para> </refsect1>
</refentry>

<refentry id="X-version-information">
  <refnamediv>
    <refname>X-version-information</refname>
    <refpurpose>Return some information about the version of the running X server.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-version-information)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return some information about the version of the running X server.
Return value is a list of the X protocol version, the X protocol
revision, the X server vendor, and the vendor release number.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 476 </para> </refsect1>
</refentry>

<refentry id="xproperty-to-string">
  <refnamediv>
    <refname>xproperty->string</refname>
    <refpurpose>Convert that data portion of xproperty object PROP to a string.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(xproperty->string prop)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Convert that data portion of xproperty object <parameter>prop</parameter> to a string.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/xproperty.c"><filename>scwm/xproperty.c</filename></ulink>
  at line 214 </para> </refsect1>
</refentry>

<refentry id="xproperty-p">
  <refnamediv>
    <refname>xproperty?</refname>
    <refpurpose>Return #t if OBJ is an xproperty object, otherwise #f.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(xproperty? obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>obj</parameter> is an xproperty object, otherwise <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Implemenation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/xproperty.c"><filename>scwm/xproperty.c</filename></ulink>
  at line 101 </para> </refsect1>
</refentry>

  </chapter>
  <chapter>
    <title>Primitives By Defined-in File</title>
    <sect1><title>scwm/binding.c</title> <itemizedlist>
      <listitem><para><link linkend="unbind-key"><function>unbind-key</function></link> &mdash; Remove any bindings attached to KEY in given CONTEXTS.</para></listitem>
      <listitem><para><link linkend="unbind-mouse"><function>unbind-mouse</function></link> &mdash; Remove any bindings attached to mouse BUTTON in given CONTEXTS.</para></listitem>
      <listitem><para><link linkend="bind-key"><function>bind-key</function></link> &mdash; Bind the given KEY within the CONTEXTS to invoke PROC.</para></listitem>
      <listitem><para><link linkend="bind-mouse"><function>bind-mouse</function></link> &mdash; Bind the given mouse BUTTON within the CONTEXTS to invoke PROC.</para></listitem>
      <listitem><para><link linkend="mouse-event-type"><function>mouse-event-type</function></link> &mdash; Return a mouse-event-type corresponding to the most recent mouse event.</para></listitem>
      <listitem><para><link linkend="mod-mask-meta"><function>mod-mask-meta</function></link> &mdash; Return the bit-mask for the Meta modifier key, or #f.</para></listitem>
      <listitem><para><link linkend="mod-mask-alt"><function>mod-mask-alt</function></link> &mdash; Return the bit-mask for the Alt modifier key, or #f.</para></listitem>
      <listitem><para><link linkend="mod-mask-hyper"><function>mod-mask-hyper</function></link> &mdash; Return the bit-mask for the Hyper modifier key, or #f.</para></listitem>
      <listitem><para><link linkend="mod-mask-super"><function>mod-mask-super</function></link> &mdash; Return the bit-mask for the Super modifier key, or #f.</para></listitem>
      <listitem><para><link linkend="X-pointer-mapping"><function>X-pointer-mapping</function></link> &mdash; Return the mapping of physical->logical pointer buttons as a list.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/callbacks.c</title> <itemizedlist>
      <listitem><para><link linkend="safe-load"><function>safe-load</function></link> &mdash; Load file FNAME while trapping and displaying errors.</para></listitem>
      <listitem><para><link linkend="add-timer-hook-x"><function>add-timer-hook!</function></link> &mdash; Add a timer hook to call PROC once sometime after USEC microseconds.</para></listitem>
      <listitem><para><link linkend="remove-timer-hook-x"><function>remove-timer-hook!</function></link> &mdash; Remove a timer hook identified by HANDLE.</para></listitem>
      <listitem><para><link linkend="add-input-hook-x"><function>add-input-hook!</function></link> &mdash; Add an input hook to run PROC on input from PORT.</para></listitem>
      <listitem><para><link linkend="remove-input-hook-x"><function>remove-input-hook!</function></link> &mdash; Remove an input hook identified by HANDLE.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/color.c</title> <itemizedlist>
      <listitem><para><link linkend="color-p"><function>color?</function></link> &mdash; Returns #t if OBJ is a color object, otherwise #f.</para></listitem>
      <listitem><para><link linkend="color-properties"><function>color-properties</function></link> &mdash; Return an association list giving some properties of COLOR.</para></listitem>
      <listitem><para><link linkend="make-color"><function>make-color</function></link> &mdash; Return the color object corresponding to the X color specifier CNAME.</para></listitem>
      <listitem><para><link linkend="clear-color-cache-entry"><function>clear-color-cache-entry</function></link> &mdash; Colors are cached by name.</para></listitem>
      <listitem><para><link linkend="make-relief-color"><function>make-relief-color</function></link> &mdash; Convert a color into a new color appropriate for a relief.</para></listitem>
      <listitem><para><link linkend="set-hilight-factor-x"><function>set-hilight-factor!</function></link> &mdash; Use FACTOR to generate highlight colors for the current decor.</para></listitem>
      <listitem><para><link linkend="hilight-factor"><function>hilight-factor</function></link> &mdash; Return the current hilight factor.</para></listitem>
      <listitem><para><link linkend="set-shadow-factor-x"><function>set-shadow-factor!</function></link> &mdash; Use FACTOR to generate shadow colors in the current decor.</para></listitem>
      <listitem><para><link linkend="shadow-factor"><function>shadow-factor</function></link> &mdash; Return the current shadow factor.</para></listitem>
      <listitem><para><link linkend="set-menu-hilight-factor-x"><function>set-menu-hilight-factor!</function></link> &mdash; Use FACTOR to generate hilight colors for menus.</para></listitem>
      <listitem><para><link linkend="menu-hilight-factor"><function>menu-hilight-factor</function></link> &mdash; Return the current menu hilight factor.</para></listitem>
      <listitem><para><link linkend="set-menu-shadow-factor-x"><function>set-menu-shadow-factor!</function></link> &mdash; Use FACTOR to generate shadow colors for menus.</para></listitem>
      <listitem><para><link linkend="menu-shadow-factor"><function>menu-shadow-factor</function></link> &mdash; Return the current menu shadow factor.</para></listitem>
      <listitem><para><link linkend="set-hilight-foreground-x"><function>set-hilight-foreground!</function></link> &mdash; Use FG for foreground color of the window with the input focus.</para></listitem>
      <listitem><para><link linkend="hilight-foreground"><function>hilight-foreground</function></link> &mdash; Return the foreground color of the window with the input focus.</para></listitem>
      <listitem><para><link linkend="set-hilight-background-x"><function>set-hilight-background!</function></link> &mdash; Use BG as the background color for the window with input focus.</para></listitem>
      <listitem><para><link linkend="hilight-background"><function>hilight-background</function></link> &mdash; Return the background color for windows with the input focus.</para></listitem>
      <listitem><para><link linkend="set-menu-foreground-x"><function>set-menu-foreground!</function></link> &mdash; Use FG as the default foreground color for menus.</para></listitem>
      <listitem><para><link linkend="set-menu-background-x"><function>set-menu-background!</function></link> &mdash; Use BG as the default foreground color for menus.</para></listitem>
      <listitem><para><link linkend="set-menu-stipple-x"><function>set-menu-stipple!</function></link> &mdash; Use ST as the default stipple color for menus.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/decor.c</title> <itemizedlist>
      <listitem><para><link linkend="make-decor"><function>make-decor</function></link> &mdash; Create a new decor object.</para></listitem>
      <listitem><para><link linkend="default-decor"><function>default-decor</function></link> &mdash; Return the default decor.</para></listitem>
      <listitem><para><link linkend="set-current-decor-x"><function>set-current-decor!</function></link> &mdash; Set the current decor to DECOR.</para></listitem>
      <listitem><para><link linkend="current-decor"><function>current-decor</function></link> &mdash; Return the current decor.</para></listitem>
      <listitem><para><link linkend="set-window-decor-x"><function>set-window-decor!</function></link> &mdash; Set WIN's decor to DECOR.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/deskpage.c</title> <itemizedlist>
      <listitem><para><link linkend="set-current-desk-x"><function>set-current-desk!</function></link> &mdash; Change the current desk to DESK.</para></listitem>
      <listitem><para><link linkend="set-viewport-position-x"><function>set-viewport-position!</function></link> &mdash; Position the upper left corner of the viewport at coordinates X, Y.</para></listitem>
      <listitem><para><link linkend="set-edge-scroll-x"><function>set-edge-scroll!</function></link> &mdash; Set the edge scroll amount in pixels.</para></listitem>
      <listitem><para><link linkend="set-edge-wrap-x"><function>set-edge-wrap!</function></link> &mdash; Set whether to wrap pointer around edges.</para></listitem>
      <listitem><para><link linkend="set-edge-resistance-x"><function>set-edge-resistance!</function></link> &mdash; Set the edge resistance parameters.</para></listitem>
      <listitem><para><link linkend="set-desk-size-x"><function>set-desk-size!</function></link> &mdash; Sets the desk size to WIDTH, HEIGHT.</para></listitem>
      <listitem><para><link linkend="display-size"><function>display-size</function></link> &mdash; Returns the size of the physical screen in pixels.</para></listitem>
      <listitem><para><link linkend="desk-size"><function>desk-size</function></link> &mdash; Returns the size of the current desk.</para></listitem>
      <listitem><para><link linkend="viewport-position"><function>viewport-position</function></link> &mdash; Returns the current position of the viewport in pixels.</para></listitem>
      <listitem><para><link linkend="current-desk"><function>current-desk</function></link> &mdash; Returns the integer identifying the current desk.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/events.c</title> <itemizedlist>
      <listitem><para><link linkend="reset-scwmexec-protocol"><function>reset-scwmexec-protocol</function></link> &mdash; Reset the scwmexec protocol.</para></listitem>
      <listitem><para><link linkend="send-button-press"><function>send-button-press</function></link> &mdash; Send a synthetic mouse press event.</para></listitem>
      <listitem><para><link linkend="send-key-press"><function>send-key-press</function></link> &mdash; Send a synthetic press of KEY.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/face.c</title> <itemizedlist>
      <listitem><para><link linkend="make-face"><function>make-face</function></link> &mdash; Create a new face.</para></listitem>
      <listitem><para><link linkend="set-title-face-x"><function>set-title-face!</function></link> &mdash; Set the titlebar faces for the various window states.</para></listitem>
      <listitem><para><link linkend="set-button-face-x"><function>set-button-face!</function></link> &mdash; Set the button faces for the various window states.</para></listitem>
      <listitem><para><link linkend="set-button-mwm-flag-x"><function>set-button-mwm-flag!</function></link> &mdash; Specify the Mwm flag for BUTTON.</para></listitem>
      <listitem><para><link linkend="set-border-face-x"><function>set-border-face!</function></link> &mdash; Set the face for the border In the current decor.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/font.c</title> <itemizedlist>
      <listitem><para><link linkend="make-font"><function>make-font</function></link> &mdash; Return the font object for the X font specifier FNAME.</para></listitem>
      <listitem><para><link linkend="font-p"><function>font?</function></link> &mdash; Returns #t if OBJ is a font object, otherwise #f.</para></listitem>
      <listitem><para><link linkend="font-properties"><function>font-properties</function></link> &mdash; Return an association list giving some properties of FONT.</para></listitem>
      <listitem><para><link linkend="set-icon-font-x"><function>set-icon-font!</function></link> &mdash; Set the font used for drawing icon titles to FONT.</para></listitem>
      <listitem><para><link linkend="set-window-font-x"><function>set-window-font!</function></link> &mdash; Set the font for window titles In the current decor to FONT.</para></listitem>
      <listitem><para><link linkend="set-menu-font-x"><function>set-menu-font!</function></link> &mdash; Set the default font used for drawing menus to FONT.</para></listitem>
      <listitem><para><link linkend="clear-font-cache-entry"><function>clear-font-cache-entry</function></link> &mdash; Fonts are cached by name.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/image.c</title> <itemizedlist>
      <listitem><para><link linkend="image-p"><function>image?</function></link> &mdash; Returns #t if OBJ is an image object, otherwise #f.</para></listitem>
      <listitem><para><link linkend="image-properties"><function>image-properties</function></link> &mdash; Return an association list giving some properties of IMAGE.</para></listitem>
      <listitem><para><link linkend="load-xbm"><function>load-xbm</function></link> &mdash; Load an X Bitmap file identified by the pathname FULL-PATH.</para></listitem>
      <listitem><para><link linkend="load-xpm"><function>load-xpm</function></link> &mdash; Load an X Pixmap file identified by the pathname FULL-PATH.</para></listitem>
      <listitem><para><link linkend="register-image-loader"><function>register-image-loader</function></link> &mdash; Register PROC as the loader to use for images ending in EXTENSION.</para></listitem>
      <listitem><para><link linkend="unregister-image-loader"><function>unregister-image-loader</function></link> &mdash; Unregister the loader, if any, for images ending in EXTENSION.</para></listitem>
      <listitem><para><link linkend="make-image"><function>make-image</function></link> &mdash; Loads an image from the file NAME.</para></listitem>
      <listitem><para><link linkend="clear-image-cache-entry"><function>clear-image-cache-entry</function></link> &mdash; Images are cached by both name and full pathname.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/menu.c</title> <itemizedlist>
      <listitem><para><link linkend="menu-p"><function>menu?</function></link> &mdash; Return #t if and only if OBJ is a menu object.</para></listitem>
      <listitem><para><link linkend="menu-properties"><function>menu-properties</function></link> &mdash; Returns the a list of the menu properties of MENU, a menu object.</para></listitem>
      <listitem><para><link linkend="make-menu"><function>make-menu</function></link> &mdash; Make and return a menu object from the given arguments.</para></listitem>
      <listitem><para><link linkend="popup-menu"><function>popup-menu</function></link> &mdash; Popup MENU, a menu object, and warp to the first item if WARP-TO-FIRST? is #t.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/menuitem.c</title> <itemizedlist>
      <listitem><para><link linkend="menuitem-properties"><function>menuitem-properties</function></link> &mdash; Return a list of the properties of the given MENU-ITEM.</para></listitem>
      <listitem><para><link linkend="make-menuitem"><function>make-menuitem</function></link> &mdash; Return a newly created menuitem object using the given arguments.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/miscprocs.c</title> <itemizedlist>
      <listitem><para><link linkend="set-menu-mwm-style-x"><function>set-menu-mwm-style!</function></link> &mdash; Set the menu mwm style according to the boolean FLAG.</para></listitem>
      <listitem><para><link linkend="set-rubber-band-mask-x"><function>set-rubber-band-mask!</function></link> &mdash; Set the rubber band mask used when dragging or resizing.</para></listitem>
      <listitem><para><link linkend="set-title-justify-x"><function>set-title-justify!</function></link> &mdash; Set the justification for the title to JUST.</para></listitem>
      <listitem><para><link linkend="set-title-height-x"><function>set-title-height!</function></link> &mdash; Set the height of the titlebar in pixels to HEIGHT.</para></listitem>
      <listitem><para><link linkend="restarted-p"><function>restarted?</function></link> &mdash; Returns true if scwm is being restarted by itself.</para></listitem>
      <listitem><para><link linkend="capturing-p"><function>capturing?</function></link> &mdash; Returns #t when the windows are being captured.</para></listitem>
      <listitem><para><link linkend="refresh"><function>refresh</function></link> &mdash; Make sure all decorations for all windows are up to date.</para></listitem>
      <listitem><para><link linkend="set-click-time-x"><function>set-click-time!</function></link> &mdash; Set the delay used in identifying mouse clicks and drags.</para></listitem>
      <listitem><para><link linkend="set-colormap-focus-x"><function>set-colormap-focus!</function></link> &mdash; Set the colormap focus policy to FTYPE.</para></listitem>
      <listitem><para><link linkend="set-opaque-move-size-x"><function>set-opaque-move-size!</function></link> &mdash; Set the opaque move size limit to SIZE.</para></listitem>
      <listitem><para><link linkend="pointer-position"><function>pointer-position</function></link> &mdash; Return the current position of the mouse pointer in pixels.</para></listitem>
      <listitem><para><link linkend="move-pointer-to"><function>move-pointer-to</function></link> &mdash; Move the mouse pointer to SX, SY (given in pixels).</para></listitem>
      <listitem><para><link linkend="recapture"><function>recapture</function></link> &mdash; Recapture all the windows.</para></listitem>
      <listitem><para><link linkend="wait-for-window"><function>wait-for-window</function></link> &mdash; Wait until a window appears which satisfies PREDICATE.</para></listitem>
      <listitem><para><link linkend="beep"><function>beep</function></link> &mdash; Ring the standard X bell.</para></listitem>
      <listitem><para><link linkend="set-smart-placement-is-really-smart-x"><function>set-smart-placement-is-really-smart!</function></link> &mdash; Determine whether or not clever-place-window will be used.</para></listitem>
      <listitem><para><link linkend="set-click-to-focus-passes-click-x"><function>set-click-to-focus-passes-click!</function></link> &mdash; Determine whether a click-to-focus window receives the click.</para></listitem>
      <listitem><para><link linkend="set-click-to-focus-raises-x"><function>set-click-to-focus-raises!</function></link> &mdash; Determine whether a click to focus raises the clicked-on window.</para></listitem>
      <listitem><para><link linkend="set-mouse-focus-click-raises-x"><function>set-mouse-focus-click-raises!</function></link> &mdash; Determine whether a mouse-focus-click will raise the window.</para></listitem>
      <listitem><para><link linkend="scwm-version"><function>scwm-version</function></link> &mdash; Return the version of scwm running.</para></listitem>
      <listitem><para><link linkend="scwm-path-prefix"><function>scwm-path-prefix</function></link> &mdash; Return the <envar>$PREFIX</envar> directory path that scwm was installed with.</para></listitem>
      <listitem><para><link linkend="scwm-path-exec-prefix"><function>scwm-path-exec-prefix</function></link> &mdash; Return the <envar>$EXECPREFIX</envar> directory path that scwm was installed with.</para></listitem>
      <listitem><para><link linkend="X-version-information"><function>X-version-information</function></link> &mdash; Return some information about the version of the running X server.</para></listitem>
      <listitem><para><link linkend="X-display-information"><function>X-display-information</function></link> &mdash; Return some information about the screen.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/module-interface.c</title> <itemizedlist>
      <listitem><para><link linkend="marshal-fvwm2-config-info"><function>marshal-fvwm2-config-info</function></link> &mdash; Constructs a fvwm2 BroadcastInfo module packet.</para></listitem>
      <listitem><para><link linkend="marshal-fvwm2-iconify-info"><function>marshal-fvwm2-iconify-info</function></link> &mdash; Constructs a fvwm2 "M_ICONIFY" module packet.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/placement.c</title> <itemizedlist>
      <listitem><para><link linkend="smart-place-window"><function>smart-place-window</function></link> &mdash; Places WIN using fvwm2's SmartPlacement algorithm.</para></listitem>
      <listitem><para><link linkend="clever-place-window"><function>clever-place-window</function></link> &mdash; Places WIN using fvwm2's "ReallySmart" algorithm.</para></listitem>
      <listitem><para><link linkend="random-place-window"><function>random-place-window</function></link> &mdash; Places WIN just as if being placed by fvwm2's RandomPlacement.</para></listitem>
      <listitem><para><link linkend="default-placement-proc"><function>default-placement-proc</function></link> &mdash; Use various flags to call an appropriate placement function.</para></listitem>
      <listitem><para><link linkend="default-transient-placement-proc"><function>default-transient-placement-proc</function></link> &mdash; This is the default placement procedure for transient windows.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/resize.c</title> <itemizedlist>
      <listitem><para><link linkend="set-message-window-attributes-x"><function>set-message-window-attributes!</function></link> &mdash; Set the attributes to be used for the message window.</para></listitem>
      <listitem><para><link linkend="interactive-resize"><function>interactive-resize</function></link> &mdash; Resize WIN interactively.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/shutdown.c</title> <itemizedlist>
      <listitem><para><link linkend="restart"><function>restart</function></link> &mdash; Restart the window manager.</para></listitem>
      <listitem><para><link linkend="scwm-quit"><function>scwm-quit</function></link> &mdash; Exit scwm cleanly.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/window.c</title> <itemizedlist>
      <listitem><para><link linkend="window-p"><function>window?</function></link> &mdash; Returns #t if OBJ is a window object, otherwise returns #f.</para></listitem>
      <listitem><para><link linkend="get-window"><function>get-window</function></link> &mdash; Retrieve the context window or select interactively.</para></listitem>
      <listitem><para><link linkend="current-window-with-focus"><function>current-window-with-focus</function></link> &mdash; Return the window that currently has the input focus.</para></listitem>
      <listitem><para><link linkend="current-window-with-pointer"><function>current-window-with-pointer</function></link> &mdash; Return the window that currently contains the mouse pointer.</para></listitem>
      <listitem><para><link linkend="select-window-interactively"><function>select-window-interactively</function></link> &mdash; Returns a window selected interactively while displaying MSG.</para></listitem>
      <listitem><para><link linkend="select-window"><function>select-window</function></link> &mdash; Select a window interactively.</para></listitem>
      <listitem><para><link linkend="delete-window"><function>delete-window</function></link> &mdash; Request that WIN remove itself from the display.</para></listitem>
      <listitem><para><link linkend="destroy-window"><function>destroy-window</function></link> &mdash; Forcibly remove WIN from the screen.</para></listitem>
      <listitem><para><link linkend="window-deletable-p"><function>window-deletable?</function></link> &mdash; Return #t if WIN is able to be deleted, #f otherwise.</para></listitem>
      <listitem><para><link linkend="focus"><function>focus</function></link> &mdash; Give WIN the input focus.</para></listitem>
      <listitem><para><link linkend="unfocus"><function>unfocus</function></link> &mdash; Remove the input focus from any window that may have it.</para></listitem>
      <listitem><para><link linkend="warp-to-window"><function>warp-to-window</function></link> &mdash; Move the mouse pointer to the upper left corner of WIN.</para></listitem>
      <listitem><para><link linkend="raise-window"><function>raise-window</function></link> &mdash; Raise WIN to the top of the window stack.</para></listitem>
      <listitem><para><link linkend="lower-window"><function>lower-window</function></link> &mdash; Lower WIN to the bottom of the window stack.</para></listitem>
      <listitem><para><link linkend="restack-windows"><function>restack-windows</function></link> &mdash; WINLIST is a list of windows.</para></listitem>
      <listitem><para><link linkend="raised-p"><function>raised?</function></link> &mdash; Return #t if WIN is currently raised, #f if not.</para></listitem>
      <listitem><para><link linkend="transient-p"><function>transient?</function></link> &mdash; Return #t if WIN is transient, #f if not.</para></listitem>
      <listitem><para><link linkend="window-transient-for"><function>window-transient-for</function></link> &mdash; Return the window for which WIN is transient.</para></listitem>
      <listitem><para><link linkend="iconify"><function>iconify</function></link> &mdash; Iconify WIN.</para></listitem>
      <listitem><para><link linkend="deiconify"><function>deiconify</function></link> &mdash; Deiconify WIN.</para></listitem>
      <listitem><para><link linkend="iconified-p"><function>iconified?</function></link> &mdash; Return #t if WIN is iconified, otherwise return #f.</para></listitem>
      <listitem><para><link linkend="stick"><function>stick</function></link> &mdash; Cause WIN to become "sticky".</para></listitem>
      <listitem><para><link linkend="unstick"><function>unstick</function></link> &mdash; Cause a window to no longer be "sticky", if it is.</para></listitem>
      <listitem><para><link linkend="sticky-p"><function>sticky?</function></link> &mdash; Return #t if WIN is "sticky", #f otherwise.</para></listitem>
      <listitem><para><link linkend="window-shade"><function>window-shade</function></link> &mdash; Cause WIN to become "window-shaded".</para></listitem>
      <listitem><para><link linkend="un-window-shade"><function>un-window-shade</function></link> &mdash; Reverse the effect of `window-shade' on WIN.</para></listitem>
      <listitem><para><link linkend="window-shaded-p"><function>window-shaded?</function></link> &mdash; Return #t if WIN is shaded.</para></listitem>
      <listitem><para><link linkend="set-animation-x"><function>set-animation!</function></link> &mdash; Set the animation parameters to VECTOR.</para></listitem>
      <listitem><para><link linkend="move-to"><function>move-to</function></link> &mdash; Move WIN to coordinates X, Y.</para></listitem>
      <listitem><para><link linkend="interactive-move"><function>interactive-move</function></link> &mdash; Move WIN interactively.</para></listitem>
      <listitem><para><link linkend="resize-to"><function>resize-to</function></link> &mdash; Resize WIN to a size of W by H in pixels.</para></listitem>
      <listitem><para><link linkend="refresh-window"><function>refresh-window</function></link> &mdash; Refresh the decorations on window WIN.</para></listitem>
      <listitem><para><link linkend="move-window-to-desk"><function>move-window-to-desk</function></link> &mdash; Move WIN to DESK.</para></listitem>
      <listitem><para><link linkend="window-position"><function>window-position</function></link> &mdash; Return the position of WIN.</para></listitem>
      <listitem><para><link linkend="window-size"><function>window-size</function></link> &mdash; Return the size of WIN.</para></listitem>
      <listitem><para><link linkend="window-id"><function>window-id</function></link> &mdash; Return the X window id for WIN.</para></listitem>
      <listitem><para><link linkend="window-frame-id"><function>window-frame-id</function></link> &mdash; Return the X window id for the outermost frame window of WIN.</para></listitem>
      <listitem><para><link linkend="id-to-window"><function>id->window</function></link> &mdash; Return the window object corresponding to an application WINDOW-ID.</para></listitem>
      <listitem><para><link linkend="frame-id-to-window"><function>frame-id->window</function></link> &mdash; Return the window object corresponding to a frame WINDOW-ID.</para></listitem>
      <listitem><para><link linkend="window-desk"><function>window-desk</function></link> &mdash; Return the desk that WIN is currently on.</para></listitem>
      <listitem><para><link linkend="window-title"><function>window-title</function></link> &mdash; Return the window title of WIN, as requested by the application.</para></listitem>
      <listitem><para><link linkend="window-icon-title"><function>window-icon-title</function></link> &mdash; Return the icon window title of WIN.</para></listitem>
      <listitem><para><link linkend="window-class"><function>window-class</function></link> &mdash; Return the window resource class of WIN.</para></listitem>
      <listitem><para><link linkend="window-resource"><function>window-resource</function></link> &mdash; Return the window resource instance of WIN.</para></listitem>
      <listitem><para><link linkend="list-all-windows"><function>list-all-windows</function></link> &mdash; Return a Scheme list of all of the windows.</para></listitem>
      <listitem><para><link linkend="keep-on-top"><function>keep-on-top</function></link> &mdash; Ensure that WIN is kept on top of all other windows.</para></listitem>
      <listitem><para><link linkend="un-keep-on-top"><function>un-keep-on-top</function></link> &mdash; Remove the on-top property from WIN, if it has it.</para></listitem>
      <listitem><para><link linkend="kept-on-top-p"><function>kept-on-top?</function></link> &mdash; Return #t if WIN is an on-top window, #f otherwise.</para></listitem>
      <listitem><para><link linkend="show-titlebar"><function>show-titlebar</function></link> &mdash; Cause WIN to be decorated with a titlebar.</para></listitem>
      <listitem><para><link linkend="hide-titlebar"><function>hide-titlebar</function></link> &mdash; Cause WIN not to be decorated with a titlebar.</para></listitem>
      <listitem><para><link linkend="titlebar-shown-p"><function>titlebar-shown?</function></link> &mdash; Return #t if WIN is decorated with a titlebar, #f otherwise.</para></listitem>
      <listitem><para><link linkend="normal-border"><function>normal-border</function></link> &mdash; Cause WIN to be decorated with a normal border.</para></listitem>
      <listitem><para><link linkend="plain-border"><function>plain-border</function></link> &mdash; Cause WIN to be decorated with a plain border.</para></listitem>
      <listitem><para><link linkend="border-normal-p"><function>border-normal?</function></link> &mdash; Return #t if WIN has a normal border, #f otherwise.</para></listitem>
      <listitem><para><link linkend="set-border-width-x"><function>set-border-width!</function></link> &mdash; Set the border width of WIN's border to WIDTH pixels.</para></listitem>
      <listitem><para><link linkend="stick-icon"><function>stick-icon</function></link> &mdash; Cause WIN's icon to become "sticky".</para></listitem>
      <listitem><para><link linkend="unstick-icon"><function>unstick-icon</function></link> &mdash; Cause WIN's icon to no longer by "sticky".</para></listitem>
      <listitem><para><link linkend="icon-sticky-p"><function>icon-sticky?</function></link> &mdash; Return #t if WIN is "sticky", #f otherwise.</para></listitem>
      <listitem><para><link linkend="set-icon-box-x"><function>set-icon-box!</function></link> &mdash; Set the icon box in which WIN's icon will be placed.</para></listitem>
      <listitem><para><link linkend="set-window-focus-x"><function>set-window-focus!</function></link> &mdash; Set the focus style of WIN to SYM.</para></listitem>
      <listitem><para><link linkend="set-window-foreground-x"><function>set-window-foreground!</function></link> &mdash; Set the foreground color of WIN to FG.</para></listitem>
      <listitem><para><link linkend="set-window-background-x"><function>set-window-background!</function></link> &mdash; Set the foreground color of WIN to BG.</para></listitem>
      <listitem><para><link linkend="set-random-placement-x"><function>set-random-placement!</function></link> &mdash; Set the random-placement flag of WIN to boolean FLAG.</para></listitem>
      <listitem><para><link linkend="set-smart-placement-x"><function>set-smart-placement!</function></link> &mdash; Set the smart-placement flag of WIN to boolean FLAG.</para></listitem>
      <listitem><para><link linkend="set-window-button-x"><function>set-window-button!</function></link> &mdash; Set the visibility of button number N on window WIN.</para></listitem>
      <listitem><para><link linkend="set-mwm-buttons-x"><function>set-mwm-buttons!</function></link> &mdash; Set the mwm-buttons flag of WIN to boolean FLAG.</para></listitem>
      <listitem><para><link linkend="set-mwm-border-x"><function>set-mwm-border!</function></link> &mdash; Set the mwm-border style flag of WIN to boolean FLAG.</para></listitem>
      <listitem><para><link linkend="set-icon-title-x"><function>set-icon-title!</function></link> &mdash; Set the visibility of WIN's icon title according to FLAG.</para></listitem>
      <listitem><para><link linkend="set-force-icon-x"><function>set-force-icon!</function></link> &mdash; Set the window-manager-overriding property for WIN to boolean FLAG.</para></listitem>
      <listitem><para><link linkend="set-show-icon-x"><function>set-show-icon!</function></link> &mdash; Set whether or not the icon of WIN will be visible.</para></listitem>
      <listitem><para><link linkend="set-icon-x"><function>set-icon!</function></link> &mdash; Set the image to use for the icon of WIN to IMAGE.</para></listitem>
      <listitem><para><link linkend="window-icon"><function>window-icon</function></link> &mdash; Get the icon image being used for WIN.</para></listitem>
      <listitem><para><link linkend="set-mini-icon-x"><function>set-mini-icon!</function></link> &mdash; Set the image to use for the mini-icon of WIN to IMAGE.</para></listitem>
      <listitem><para><link linkend="window-mini-icon"><function>window-mini-icon</function></link> &mdash; Get the mini-icon image being used for WIN.</para></listitem>
      <listitem><para><link linkend="set-hint-override-x"><function>set-hint-override!</function></link> &mdash; Set whether or not Mwm and Open Look function hints are used.</para></listitem>
      <listitem><para><link linkend="set-decorate-transient-x"><function>set-decorate-transient!</function></link> &mdash; Set decoration of transients property on WIN.</para></listitem>
      <listitem><para><link linkend="set-mwm-decor-hint-x"><function>set-mwm-decor-hint!</function></link> &mdash; Set whether or not Motif decoration hints are used for WIN.</para></listitem>
      <listitem><para><link linkend="set-mwm-func-hint-x"><function>set-mwm-func-hint!</function></link> &mdash; Set whether or not Motif function hints are used for WIN.</para></listitem>
      <listitem><para><link linkend="set-PPosition-hint-x"><function>set-PPosition-hint!</function></link> &mdash; Set or reset the program-specified position hint for WIN.</para></listitem>
      <listitem><para><link linkend="set-OL-decor-hint-x"><function>set-OL-decor-hint!</function></link> &mdash; Determine whether or not to respect Open Look decoration hints.</para></listitem>
      <listitem><para><link linkend="set-start-on-desk-x"><function>set-start-on-desk!</function></link> &mdash; Make WIN start on DESK when first mapped.</para></listitem>
      <listitem><para><link linkend="set-skip-mapping-x"><function>set-skip-mapping!</function></link> &mdash; Set or reset whether scwm should not change desktops on a map.</para></listitem>
      <listitem><para><link linkend="set-lenience-x"><function>set-lenience!</function></link> &mdash; Set or reset the input focus lenience flag.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/xproperty.c</title> <itemizedlist>
      <listitem><para><link linkend="xproperty-p"><function>xproperty?</function></link> &mdash; Return #t if OBJ is an xproperty object, otherwise #f.</para></listitem>
      <listitem><para><link linkend="set-window-text-property"><function>set-window-text-property</function></link> &mdash; Set a text property named PROPNAME on WIN.</para></listitem>
      <listitem><para><link linkend="window-xproperty"><function>window-xproperty</function></link> &mdash; Get and maybe delete the property called NAME from WIN.</para></listitem>
      <listitem><para><link linkend="xproperty-to-string"><function>xproperty->string</function></link> &mdash; Convert that data portion of xproperty object PROP to a string.</para></listitem>
      <listitem><para><link linkend="string-to-xproperty"><function>string->xproperty</function></link> &mdash; Create an xproperty object from STR.</para></listitem>
    </itemizedlist> </sect1>
  </chapter>
  <chapter>
    <title>Hooks</title>
    <sect1 id="after-new-window-hook"><title>after-new-window-hook</title><para>
  This hook is invoked when a new window has been completely created
and placed on the screen. Any window operations may be performed at
this time. However, it is recommended that placement-related
operations, such as setting the position, desk, viewport location and
z-ordering of a window be done in the placement procedure instead.

This hook does not typically need to be used directly by the user;
<link linkend="window-style"><function>window-style</function></link> from the (app scwm style) module provides a convenient
interface to setting the relevant parameters when a new window is
created. 
    </para></sect1>
    <sect1 id="before-new-window-hook"><title>before-new-window-hook</title><para>
  This hook is invoked when a new window structure is first starting
to be created. Only a subset of the usual window parameters should be
set here, in particular, those that control what hints will be
respected for this window, and those that control how the window will
be placed.

This hook does not typically need to be used directly by the user;
<link linkend="window-style"><function>window-style</function></link> from the "(app scwm style)" module provides a convenient
interface to setting the relevant parameters when a new window is
created. 
    </para></sect1>
    <sect1 id="boradcast-mini-icon-hook"><title>boradcast-mini-icon-hook</title><para>
  This hook is invoked whenever BroadcastMiniIcon would be called in
fvwm2. This hook is principally of use in implementing the fvwm2
module interface and for stuff that needs to be notified in ways that
can't be done with the proper hooks that have been included so
far. The procedures The procedures in this hook are passed a window
structure as the sole argument.  
    </para></sect1>
    <sect1 id="boradcast-name-hook"><title>boradcast-name-hook</title><para>
  This hook is invoked whenever BroadcastName would be called in
fvwm2. This hook is principally of use in implementing the fvwm2
module interface and for stuff that needs to be notified in ways
that can't be done with the proper hooks that have been included so
far. The procedures in this hook are passed an event type, three
numeric data arguments, and a string.  
  
    </para></sect1>
    <sect1 id="broadcast-config-hook"><title>broadcast-config-hook</title><para>
  This hook is invoked whenever BroadcastConfig would be called in
fvwm2. This hook is principally of use in implementing the fvwm2
module interface and for stuff that needs to be notified in ways that
can't be done with the proper hooks that have been included so
far. The procedures in this hook are passed a window structure as the
sole argument.
  
    </para></sect1>
    <sect1 id="broadcast-hook"><title>broadcast-hook</title><para>
  This hook is invoked whenever Broadcast would be called in
fvwm2. This hook is principally of use in implementing the fvwm2
module interface and for stuff that needs to be notified in ways that
can't be done with the proper hooks that have been included so
far. The procedures in this hook are passed a numerical code
representing the event type, a number that indicates how many of the
following data arguments are meaningful, and 7 numeric data arguments.
  
    </para></sect1>
    <sect1 id="cannot-grab-hook"><title>cannot-grab-hook</title><para>
  This hook is invoked with no arguments whenever scwm cannot
successfully grab the X server. <link linkend="beep"><function>beep</function></link> is one example of a procedure
to use here.  
    </para></sect1>
    <sect1 id="error-hook"><title>error-hook</title><para>
  Whenever an error or other uncaught throw occurs on any callback,
whether a hook, a mouse binding, a key binding, a menu entry, a file
being processed, or anything else, error-hook will be invoked. Each
procedure in the hook will be called with the throw arguments; these
will generally include information about the nature of the error. 

    </para></sect1>
    <sect1 id="invalid-interaction-hook"><title>invalid-interaction-hook</title><para>
This hook is invoked with no arguments when the user hits an invalid
key or performs an invalid mouse action during an interactive
operation like <link linkend="interactive-resize"><function>interactive-resize</function></link> or <link linkend="interactive-move"><function>interactive-move</function></link>. <link linkend="beep"><function>beep</function></link> is
one example of a procedure to use here.
  
    </para></sect1>
    <sect1 id="shutdown-hook"><title>shutdown-hook</title><para>
The procedures in shutdown-hook are called with no arguments right
before scwm quits or restarts. 
  
    </para></sect1>
    <sect1 id="startup-hook"><title>startup-hook</title><para>
The procedures in startup-hook are called with no arguments after scwm
has processed the scwmrc and captured all application windows, and
right before it enters the main event loop.
 
    </para></sect1>
    <sect1 id="X-MappingNotify-hook"><title>X-MappingNotify-hook</title><para>
  This hook is invoked whenever a MappingNotify X even is received. A
MappingNotify event indicates a change of keymapping - in particular,
it may indicate a change of available modifiers or mouse buttons. The hook procedures are invoked with no arguments.

    </para></sect1>
    <sect1 id="X-PropertyNotify-hook"><title>X-PropertyNotify-hook</title><para>
  This hook is invoked whenever a PropertyNotify event is received for
a window scwm is managing. This indicates that an X window property
has changed. Watching for window property changes can be used to
construct your own custom window manager protocols. The hook
procedures are invoked with two arguments, the name of the property
that changed (as a string) and the window that it changed for.

    </para></sect1>
  </chapter>
  <chapter>
    <title>Concepts</title>
    <sect1 id="Colors"><title>Colors</title><para>
  Colors are first-class objects. However, anywhere that a color is
taken as an argument, a string containing an X color specification
will also be accepted, and will be automatically converted to the
proper color object. Using the same color specifier string more than
once is not inefficient, as caching ensures that color objects are
shared.

    </para></sect1>
    <sect1 id="Decors"><title>Decors</title><para>

  Decors are a means of managing the abundance of visual appearance
options for windows. In the original Fvwm code, there were many
options that could only be set globally, although they affected window
appearance. Decors are a compromise between leaving them global and
making them fully settable per window. These quasi-global options may
be set in a particular decor, and a decor may be attached to one or
more windows.

  Having to use decors to change certain aspects of the look and feel
is confusing. Scwm will probably move to some way of making these
options directly settable per-window at some point, especially if we
can figure out a way to not increase the memory overhead much.

    </para></sect1>
    <sect1 id="Desks"><title>Desks</title><para>

  Multiple virtual desktops are supported. A virtual desktop may be
bigger than the physical screen, in which case the current viewport on
the desktop may be moved around, as described in the Viewports entry.
Desks are identified by integers. There is currently an arbitrary
limit on the number of desks, but it should be much higher than anyone
will ever need. You can change the current desk with
<link linkend="set-current-desk-x"><function>set-current-desk!</function></link>; find out what the current desk is with
<link linkend="current-desk"><function>current-desk</function></link>; and set the desk a window is on with
<link linkend="set-window-desk-x"><function>set-window-desk!</function></link>.

    </para></sect1>
    <sect1 id="Face-Flags"><title>Face Flags</title><para>
   Face flags are two-element lists that specify certain properties
that are set once and only once for a give face (as opposed to specs,
which may be chained arbitrarily). Nearly all flags may be used for
button faces. Exceptions, as well as the flags that may be used for
title and border faces, are indicated below.


  Key               | Possible values      | Explanation
  ------------------|----------------------|----------------
  'justify          | 'left 'right 'center | How should the contents of the
                    |                      | face (pixmap, relief pattern, etc)
                    |                      | be justified?
  'vertical-justify | 'top 'bottom 'center | How should the contents of the
                    |                      | face (pixmap, relief pattern, etc)
                    |                      | be justified vertically?
  'relief           | 'flat 'sunk 'raised  | Should the face appear flat, 
                    |                      | raised or sunk? This is the only
                    |                      | face flag that may be used for 
                    |                      | titles. It may be used for buttons
                    |                      | as well, of course.
  'use-style-of     | 'title 'border <literal>#f</literal>    | Before handling this faces specs,
                    |                      | possibly apply the faces of the
                    |                      | title or the border first.
  'hidden-handles   | <literal>#t</literal> <literal>#f</literal>                | This flag may only be used for
                    |                      | border faces; it indicates that
                    |                      | the corner <link linkend="handles"><function>handles</function></link> of a window
                    |                      | should not be visually separated.
  'no-inset         | <literal>#t</literal> <literal>#f</literal>                | This flag may only be used for
                    |                      | border faces; it indicates that
                    |                      | the border should be relieved only
                    |                      | on the outside, not on the inside.
                    |                      | This gives a Win9x-like effect.

    </para></sect1>
    <sect1 id="Face-Specification-flags"><title>Face Specification flags</title><para>
  Face specification flags are two-element lists that specify certain
properties that may be chained to indicate how a face is drawn. Face
specs may be fully or partially destructive. A fully destructive spec
indicates how the whole area of the element is to be drawn, making
previous specs irrelevant. A partially destructive spec overlays part,
but not all, of the drawing area.

  All specs may be used for button faces. All but non-tiled pixmaps may
be used for titlebars, and only tiled pixmaps may be used for borders.

  Format                                    : Explanation
  ------------------------------------------:----------------------------
 '(relief-pattern ((X Y BOOL) ...))   : Draw a relief pattern using
                                            : the list of triples, each of 
                                            : which indicates a pair of X,Y
                                            : coordinates given as a 
                                            : percentage of the button size,
                                            : and a boolean value indicating
                                            : whether to use the lighter or
                                            : darker color. This spec is 
                                            : partially destructive.
 '(solid COLOR)                             : Use COLOR as the color for 
                                            : this element; fully destructive.
 '(gradient (horizontal|vertical            : Draw a gradient in this element.
    NCOLORS (COLOR PERCENT)* FINAL))        : The gradient may be horizontal
                                            : or vertical. The number of colors
                                            : is specified, followed by a 
                                            : number of colors with percentages
                                            : and a final color. The 
                                            : percentages must add to 100.
                                            : Fully destructive.
 '(pixmap mini-icon|IMAGE|                  : Specify a pixmap to use, either
   (tiled IMAGE))                           : the window's mini-icon, an image
                                            : object or image specifier string,
                                            : or a list of tiled and an image,
                                            : indicating the image should be
                                            : tiled. Partially destructive, 
                                            : except when tiled, which makes 
                                            : it fully destructive.  

    </para></sect1>
    <sect1 id="Faces"><title>Faces</title><para>
  Faces are a data type used to specify in detail the way in which
window decorations like the titlebar, the border and titlebar buttons
will be drawn. They are currently somewhat kludgey and
ad-hoc. However, they offer a great deal of flexibility. All faces are
set in the current decor, so multiple decors must be used to use
different faces for different windows. The low-level functionality
offered in the face primitives will rarely be needed; the
<link linkend="button-style"><function>button-style</function></link>, <link linkend="title-style"><function>title-style</function></link> and <link linkend="border-style"><function>border-style</function></link> procedures in the
(app scwm face) module provide a more convenient interface to this
functionality.

    </para></sect1>
    <sect1 id="Focus-Styles"><title>Focus Styles</title><para>

   Scwm supports several focus styles, which are settable
per-window. A window with the 'click focus style is click-to-focus: it
requires that the user click on it before it will receive the input
focus, and will not lose it again until some other window gains
focus. The 'mouse focus style is mouse-focus in the traditional sense
- the window will gain and lose focus as the mouse enters and leaves
it. 

  'sloppy indicates the sloppy-focus style. This is like mouse-focus,
but the window will not lose the focus until another gains it. So if
you focus the window with the mouse and then let the pointer slide
into the root window or a window that has focus styles of 'click or
'none, the window will not lose the focus. This style of focus was
first introduced in fvwm.

  A focus style of 'none indicates that the window should never gain
the input focus, no matter what. This can be used for clocks,
mailboxes, and other desktop gadgets that never need keyboard input.

    </para></sect1>
    <sect1 id="Fonts"><title>Fonts</title><para>
  Fonts are first-class objects. However, anywhere that a font is
taken as an argument, a string containing an X font specification
will also be accepted, and will be automatically converted to the
proper font object. Using the same font specifier string more than
once is not inefficient, as caching ensures that font objects are
shared.

    </para></sect1>
    <sect1 id="Hooks"><title>Hooks</title><para>
  Hooks are used throughout scwm to provide a convenient mechanism for
user callbacks on particular events. Fundamentally, a hook is just a
variable that contains a list of procedures that are called in order
when the relevant event occurs. However, several convenience macros
are provided for manipulating hooks; see <link linkend="add-hook-x"><function>add-hook!</function></link>, <link linkend="remove-hook-x"><function>remove-hook!</function></link>
and <link linkend="reset-hook-x"><function>reset-hook!</function></link>. 

    </para></sect1>
    <sect1 id="Image-Loaders"><title>Image Loaders</title><para>
  Different loaders are available for various images types. <link linkend="load-xbm"><function>load-xbm</function></link>
and <link linkend="load-xpm"><function>load-xpm</function></link> load X pixmaps and X bitmaps respectively. The user may
register other image loaders using the extension or the special string
"default" for the loader to be tried for an image that cannot be
loaded any other way.

    </para></sect1>
    <sect1 id="Images"><title>Images</title><para>
  Images are first-class objects. However, anywhere that a font is
taken as an argument, a string containing an filename will also be
accepted, and will be automatically converted to the proper image
object by loading the image. Using the same image filename more than
once is not inefficient, as caching ensures that image objects are
shared.

    </para></sect1>
    <sect1 id="Input-Hooks"><title>Input Hooks</title><para>
  Input hooks are a special form of hook that is called whenever input
is available on a particular port. They are treated differently than
normal hooks - use <link linkend="add-input-hook-x"><function>add-input-hook!</function></link> and <link linkend="remove-input-hook-x"><function>remove-input-hook!</function></link> to
manipulate them. Like regular hooks and unlike timer hooks, input
hooks are not one-shot - they trigger every time input is made
available on the particular port, and do not go away until explicitly
removed. An input hook may safely remove itself from within it's own
invocation.

    </para></sect1>
    <sect1 id="Key-Specifier"><title>Key Specifier</title><para>
   A key specifier is a string denoting a keystroke, perhaps including
modifiers.  The available modifiers include S-, C-, M-, A-, H-, and s-
for Shift, Control, Meta, Alt, Hyper, and Super, respectively.  They
can be combined arbitrarily, and in any order, but should precede the 

    </para></sect1>
    <sect1 id="SCWMEXEC-Protocol"><title>SCWMEXEC Protocol</title><para>
  Scwm supports a protocol for other programs to send commands to the
window manager. Programs send ordinary configuration language
expressions and are returned a string representation of the return
value, and the output and error output generated, if any.

  For more information on how to make use of this protocol, see the
documentation for the scwmexec and scwmrepl programs, the scwm.el
emacs interaction mode, the libscwmexec library, and the details of
the SCWMEXEC protocol.  Also see <filename>doc/scwmexec.proto</filename>.
FIXDOC: Link to file!

    </para></sect1>
    <sect1 id="The-Window-Context"><title>The Window Context</title><para>

  When actions are triggered by mouse or keyboard events, or menu
actions from menus originally popped up by mouse or keyboard events, a
context window is saved, which is used as the default for window
operations that are not passed their optional window argument. This
allows the user to easily bind actions to events without worrying
about passing around the window argument. 

  However, it is unclear whether behind-the-scenes magic like this is
a good idea.  The merit of this approach is still under consideration;
it may be changed entirely. 
    </para></sect1>
    <sect1 id="Timer-Hooks"><title>Timer Hooks</title><para>
  Timer hooks are a special form of hook that is called after a
specified amount of time has passed. They are treated differently than
normal hooks - use <link linkend="add-timer-hook-x"><function>add-timer-hook!</function></link> and <link linkend="remove-timer-hook-x"><function>remove-timer-hook!</function></link> to
manipulate them. Timer hooks, unlike regular hooks, are one-shot -
once the time limit expires and the timer hook is triggered, it is
removed.

    </para></sect1>
    <sect1 id="Viewports"><title>Viewports</title><para>
  The current viewport is the area of the current desk that may be
seen on the physical screen. Since a desk can be larger than the
physical screen size, the viewport can move around the desk.

    </para></sect1>
    <sect1 id="Windows"><title>Windows</title><para>
  Windows are the most important scwm data type. A window object
represents an on-screen window that scwm is managing, and is used to
perform window management operations on the window, as well as to set
options and retrieve information about the window.
 
    </para></sect1>
    <sect1 id="X-Properties"><title>X Properties</title><para>
   X windows has a notion of window properties, which live in the X
server. X window properties are often used to implement protocols
between applications and the window manager, which can have several
levels of standardization, from official X standard, to standardized
by some other organization, to made up informally by groups of
programmers, to specific to one window manager, to specific to an
individual, or installation.

  Scwm already internally implements many of these protocols,
including all X standard protocols, as well as the Motif and Open Look
protocols. However, the user should be able to implement any of these
he likes, including making up his own for personal use.

  This is possible through the low-level xproperty interface. Scwm has
(for now) distinguished Scheme objects representing X properties, and
several procedures to get, set and manipulate them.
 
    </para></sect1>
  </chapter>
</chapter>
</book>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
fill-column: 10000
sgml-omittag:nil
sgml-shorttag:t
End:
-->
