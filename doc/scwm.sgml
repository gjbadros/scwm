<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V3.0//EN">
<book>
  <bookinfo>
    <title>
      <productname>SCWM Reference Manual</productname>
    </title>
    <authorgroup>
      <author>
  	<firstname>Maciej</firstname>
  	<surname>Stachowiak</surname>
  	<affiliation>
  	  <shortaffil>MIT</shortaffil>
  	  <jobtitle>M.S. Degree Recipient</jobtitle>
  	  <orgname>Massachusetts Institute of Technology</orgname>
  	  <orgdiv>Department of Computer Science</orgdiv>
  	  <address>
  	    <city>Cambridge</city>
  	    <state>Massachusetts</state>
  	    <postcode>12345</postcode>
  	    <country>U.S.A.</country>
  	    <email>mstachow@mit.edu</email>
  	  </address>
  	</affiliation>
      </author>
      <author>
  	<firstname>Greg</firstname>
  	<surname>Badros</surname>
  	<affiliation>
  	  <shortaffil>UWashington</shortaffil>
  	  <jobtitle>Graduate Research Assistant</jobtitle>
  	  <orgname>University of Washington</orgname>
  	  <orgdiv>Department of Computer Science and Engineering</orgdiv>
  	  <address>
  	    <city>Seattle</city>
  	    <state>Washington</state>
  	    <postcode>98195</postcode>
  	    <country>U.S.A.</country>
  	    <email>gjb@cs.washington.edu</email>
  	  </address>
  	</affiliation>
      </author>
    </authorgroup>
    <releaseinfo>Release post-0.8</releaseinfo>
    <pubdate>18 January 1999</pubdate>
    <copyright>
      <year>1997&ndash;1999</year>
      <holder>Maciej Stachowiak and Greg J. Badros</holder>
    </copyright>
  </bookinfo>
  <chapter>
    <title>Procedures in Alphabetical Order</title>
<refentry id="pctx">
  <refnamediv>
    <refname>%x</refname>
    <refpurpose>Return the number of pixels that is X percent of the display width.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(%x x)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the number of pixels that is X percent of the display width.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 56 </para> </refsect1>
</refentry>

<refentry id="pctx-">
  <refnamediv>
    <refname>%x-</refname>
    <refpurpose>Return the pixel coordinate X percent of the width away from the right edge.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(%x- x)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the pixel coordinate X percent of the width away from the right edge.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 100 </para> </refsect1>
</refentry>

<refentry id="pcty">
  <refnamediv>
    <refname>%y</refname>
    <refpurpose>Return the number of pixels that is Y percent of the display height.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(%y y)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the number of pixels that is Y percent of the display height.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 60 </para> </refsect1>
</refentry>

<refentry id="pcty-">
  <refnamediv>
    <refname>%y-</refname>
    <refpurpose>Return the pixel coordinate Y percent of the height away from the bottom edge.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(%y- y)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the pixel coordinate Y percent of the height away from the bottom edge.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 104 </para> </refsect1>
</refentry>

<refentry id="accumulate">
  <refnamediv>
    <refname>accumulate</refname>
    <refpurpose>Repeatedly apply PROC to a current value and a member of L.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(accumulate proc init l)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Repeatedly apply PROC to a current value and a member of L. 
The initial current value is INIT. The list is processed from left to
right. The final result is returned. Compare to <link linkend="reduce"><function>reduce</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm listops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/listops.scm"><filename>scheme/listops.scm</filename></ulink>
  at line 53 </para> </refsect1>
</refentry>

<refentry id="add-boolean-hint-option">
  <refnamediv>
    <refname>add-boolean-hint-option</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(add-boolean-hint-option key th fh #&amp;optional (cumulative? #f))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm style-options)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/style-options.scm"><filename>scheme/style-options.scm</filename></ulink>
  at line 45 </para> </refsect1>
</refentry>

<refentry id="add-boolean-style-option">
  <refnamediv>
    <refname>add-boolean-style-option</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(add-boolean-style-option key th fh #&amp;optional (cumulative? #f))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm style-options)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/style-options.scm"><filename>scheme/style-options.scm</filename></ulink>
  at line 40 </para> </refsect1>
</refentry>

<refentry id="add-input-hook-x">
  <refnamediv>
    <refname>add-input-hook!</refname>
    <refpurpose>Add an input hook to run PROC on input from PORT.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(add-input-hook! port proc)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Add an input hook to run <parameter>proc</parameter> on input from <parameter>port</parameter>.
Whenever input becomes available on <parameter>port</parameter>, procedure <parameter>proc</parameter> will be called
with no arguments repeatedly until no unprocessed input remains on
<parameter>port</parameter>. <parameter>port</parameter> must be open, it must be an input port, and it must be a
file port (this includes pipes and sockets, but not string ports or
soft ports). A handle suitable for passing to <link linkend="remove-input-hook-x"><function>remove-input-hook!</function></link> is
returned.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/callbacks.c"><filename>scwm/callbacks.c</filename></ulink>
  at line 585 </para> </refsect1>
</refentry>

<refentry id="add-timer-hook-x">
  <refnamediv>
    <refname>add-timer-hook!</refname>
    <refpurpose>Add a timer hook to call PROC once sometime after USEC microseconds.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(add-timer-hook! usec proc)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Add a timer hook to call <parameter>proc</parameter> once sometime after <parameter>usec</parameter> microseconds.
When at least <parameter>usec</parameter> microseconds have passed, procedure <parameter>proc</parameter> will be
called with no arguments. A handle suitable for passing to
<link linkend="remove-timer-hook-x"><function>remove-timer-hook!</function></link> is returned.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/callbacks.c"><filename>scwm/callbacks.c</filename></ulink>
  at line 446 </para> </refsect1>
</refentry>

<refentry id="add-window-hint-option">
  <refnamediv>
    <refname>add-window-hint-option</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(add-window-hint-option key handler #&amp;optional (cumulative? #f))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm style-options)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/style-options.scm"><filename>scheme/style-options.scm</filename></ulink>
  at line 43 </para> </refsect1>
</refentry>

<refentry id="add-window-style-option">
  <refnamediv>
    <refname>add-window-style-option</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(add-window-style-option key handler #&amp;optional 
					 (type 'normal) (cumulative? #f))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm style-options)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/style-options.scm"><filename>scheme/style-options.scm</filename></ulink>
  at line 31 </para> </refsect1>
</refentry>

<refentry id="align-viewport">
  <refnamediv>
    <refname>align-viewport</refname>
    <refpurpose>Set the viewport position to the nearest multiple of the desk size.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(align-viewport)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the viewport position to the nearest multiple of the desk size.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm virtual)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/virtual.scm"><filename>scheme/virtual.scm</filename></ulink>
  at line 125 </para> </refsect1>
</refentry>

<refentry id="and-map">
  <refnamediv>
    <refname>and-map</refname>
    <refpurpose>Apply PROC repeatedly, returning the first false value.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(and-map proc first . rest)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Apply PROC repeatedly, returning the first false value.
PROC is applied to elements of FIRST and the lists comprising REST
much as <link linkend="map"><function>map</function></link> would do it. If proc never returns a false value, return
<literal>#t</literal> instead. If all the lists are empty, return <literal>#t</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm listops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/listops.scm"><filename>scheme/listops.scm</filename></ulink>
  at line 110 </para> </refsect1>
</refentry>

<refentry id="animated-move-to">
  <refnamediv>
    <refname>animated-move-to</refname>
    <refpurpose>Move WIN to viewport coordinates X, Y with animation.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(animated-move-to x y #&amp;optional (win (get-window))
				  (move-pointer-too? #t))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move WIN to viewport coordinates X, Y with animation. 
If X or Y is <literal>#f</literal>, then do not change that coordinate during 
the move. At least one of X and Y must be a number. This 
moves the pointer with the window unless MOVE-POINTER-TOO? 
is <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/animation.scm"><filename>scheme/animation.scm</filename></ulink>
  at line 42 </para> </refsect1>
</refentry>

<refentry id="animated-move-window">
  <refnamediv>
    <refname>animated-move-window</refname>
    <refpurpose>Move WIN to virtual coordinates X, Y with animation.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(animated-move-window x y #&amp;optional win move-pointer-too?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move <parameter>win</parameter> to virtual coordinates <parameter>x</parameter>, <parameter>y</parameter> with animation.
If <parameter>x</parameter> or <parameter>y</parameter> is <literal>#f</literal>, then do not change that coordinate during the move.
If <parameter>move-pointer-too?</parameter> is specified and true, move the mouse pointer by
the same amount as the window, animating the motion of the pointer
along with the window. <parameter>win</parameter> defaults to the window context in the usual
way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/modules/c-animation/c-animation.c"><filename>modules/c-animation/c-animation.c</filename></ulink>
  at line 313 </para> </refsect1>
</refentry>

<refentry id="animated-window-shade">
  <refnamediv>
    <refname>animated-window-shade</refname>
    <refpurpose>Cause WIN to become "window-shaded".</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(animated-window-shade  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter> to become "window-shaded".
That is, to roll up into just a titlebar.  The window will be animated
as it rolls up, producing a pleasing visual effect. <parameter>win</parameter> defaults to
the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/modules/c-animation/c-animation.c"><filename>modules/c-animation/c-animation.c</filename></ulink>
  at line 234 </para> </refsect1>
</refentry>

<refentry id="animated-window-unshade">
  <refnamediv>
    <refname>animated-window-unshade</refname>
    <refpurpose>Reverse the effect of <link linkend="window-shade"><function>window-shade</function></link> on WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(animated-window-unshade  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Reverse the effect of <link linkend="window-shade"><function>window-shade</function></link> on <parameter>win</parameter>.
The window will be animated as it rolls down, producing a pleasing
visual effect. <parameter>win</parameter> defaults to the window context in the usual way if
not specified. See also <link linkend="window-unshade"><function>window-unshade</function></link>, <link linkend="animated-window-shade"><function>animated-window-shade</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/modules/c-animation/c-animation.c"><filename>modules/c-animation/c-animation.c</filename></ulink>
  at line 288 </para> </refsect1>
</refentry>

<refentry id="append-fvwm2-module-config">
  <refnamediv>
    <refname>append-fvwm2-module-config</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(append-fvwm2-module-config module-type . args)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm fvwm-module)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/fvwm-module.scm"><filename>scheme/fvwm-module.scm</filename></ulink>
  at line 366 </para> </refsect1>
</refentry>

<refentry id="append-map">
  <refnamediv>
    <refname>append-map</refname>
    <refpurpose>Do the same thing as map, but collect results with <link linkend="append"><function>append</function></link>,  not <link linkend="cons"><function>cons</function></link>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(append-map proc first . rest)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Do the same thing as map, but collect results with <link linkend="append"><function>append</function></link>,  not <link linkend="cons"><function>cons</function></link>.
In particular, PROC is applied in succession to each member of FIRST and
the corresponding members of REST if any, and is expected to return a
list. These lists are concatenated together with <link linkend="append"><function>append</function></link>. In effect,
this is a version of map that allows the mapping function to return
any number of elements to be inserted into the result list, including
possibly none.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm listops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/listops.scm"><filename>scheme/listops.scm</filename></ulink>
  at line 73 </para> </refsect1>
</refentry>

<refentry id="apply-style">
  <refnamediv>
    <refname>apply-style</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(apply-style style win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm style)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/style.scm"><filename>scheme/style.scm</filename></ulink>
  at line 111 </para> </refsect1>
</refentry>

<refentry id="ask-string">
  <refnamediv>
    <refname>ask-string</refname>
    <refpurpose>Ask for a string with PROMPT.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(ask-string prompt)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Ask for a string with PROMPT.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm prefs-menu)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/prefs-menu.scm"><filename>scheme/prefs-menu.scm</filename></ulink>
  at line 110 </para> </refsect1>
</refentry>

<refentry id="at-point-placement">
  <refnamediv>
    <refname>at-point-placement</refname>
    <refpurpose>Return a procedure that places a window it at the pointer position.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(at-point-placement #&amp;key (offset '(0 0)) 
			       (proportional-offset '(-0.5 -0.5))
			       (switch #t) (return #f))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a procedure that places a window it at the pointer position.

If the keyword argument OFFSET is specified, it is interpreted as a
list of x and y offsets to add to the pointer position. If the keyword
argument PROPORTIONAL-OFFSET is specified, it is interpreted as a list
of numbers to multiply by the window's width and height, and is
treated as an extra offset.The defaults are (0 0) for OFFSET and (-0.5
-0.5) for PROPORTIONAL-OFFSET, with the result that by default the
window is centered at the mouse pointer position by the returned
procedure.

If SWITCH is true, the returned procedure will switch to the virtual
desk and viewport of its window argument before placing it. This is
the default. If RETURN is false, the returned procedure will switch
back to the previous desk and viewport after placing the window. The
default is false. 

See also the related <link linkend="place-at-point"><function>place-at-point</function></link> procedure which directly places
a window at the pointer position.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm placement)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/placement.scm"><filename>scheme/placement.scm</filename></ulink>
  at line 108 </para> </refsect1>
</refentry>

<refentry id="beep">
  <refnamediv>
    <refname>beep</refname>
    <refpurpose>Ring the standard X bell.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(beep)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Ring the standard X bell.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 326 </para> </refsect1>
</refentry>

<refentry id="binary-read">
  <refnamediv>
    <refname>binary-read</refname>
    <refpurpose>Reads LENGTH bytes of binary data from PORT and return it as a string.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(binary-read length #&amp;optional (port (current-input-port)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Reads LENGTH bytes of binary data from PORT and return it as a string.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm bincomm)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/bincomm.scm"><filename>scheme/bincomm.scm</filename></ulink>
  at line 167 </para> </refsect1>
</refentry>

<refentry id="binary-read-long">
  <refnamediv>
    <refname>binary-read-long</refname>
    <refpurpose>Reads a binary representation of a C long and return as a scheme number.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(binary-read-long #&amp;optional (port (current-input-port)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Reads a binary representation of a C long and return as a scheme number.
The value is read from PORT, or the current-input-port.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/bincomm.scm"><filename>scheme/bincomm.scm</filename></ulink>
  at line 177 </para> </refsect1>
</refentry>

<refentry id="binary-write">
  <refnamediv>
    <refname>binary-write</refname>
    <refpurpose>Writes STR as binary data to PORT.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(binary-write str #&amp;optional (port (current-output-port)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Writes STR as binary data to PORT.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm bincomm)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/bincomm.scm"><filename>scheme/bincomm.scm</filename></ulink>
  at line 162 </para> </refsect1>
</refentry>

<refentry id="bind-key">
  <refnamediv>
    <refname>bind-key</refname>
    <refpurpose>Bind the given KEY within the CONTEXTS to invoke PROC.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(bind-key contexts key proc)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Bind the given <parameter>key</parameter> within the <parameter>contexts</parameter> to invoke <parameter>proc</parameter>.
<parameter>contexts</parameter> is a list of event-contexts (e.g., '(button1 sidebar))
<parameter>key</parameter> is a string giving the key-specifier (e.g., M-Delete for Meta+Delete)
<parameter>proc</parameter> is a procedure that will be invoked (with no arguments) when the
specified key is pressed in the specified context.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/binding.c"><filename>scwm/binding.c</filename></ulink>
  at line 675 </para> </refsect1>
</refentry>

<refentry id="bind-keycode">
  <refnamediv>
    <refname>bind-keycode</refname>
    <refpurpose>Bind the given KEYCODE within the CONTEXTS to invoke PROC.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(bind-keycode contexts keycode modifier-mask proc #&amp;optional release-proc)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Bind the given <parameter>keycode</parameter> within the <parameter>contexts</parameter> to invoke <parameter>proc</parameter>.
<parameter>contexts</parameter> is a list of event-contexts (e.g., '(button1 sidebar))
<parameter>keycode</parameter> is an X/11 key code, <parameter>modifier-mask</parameter> is the bitmask of modifiers,
<parameter>proc</parameter> is a procedure that will be invoked (with no arguments) when the
specified key is pressed in the specified context.
<parameter>release-proc</parameter> is a procedure that will be invoked (with no arguments) when the
specified key is released in the specified context, or <literal>#f</literal> or omitted if
nothing should be done on key release.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/binding.c"><filename>scwm/binding.c</filename></ulink>
  at line 735 </para> </refsect1>
</refentry>

<refentry id="bind-mouse">
  <refnamediv>
    <refname>bind-mouse</refname>
    <refpurpose>Bind the given mouse BUTTON within the CONTEXTS to invoke PROC.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(bind-mouse contexts button proc)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Bind the given mouse <parameter>button</parameter> within the <parameter>contexts</parameter> to invoke <parameter>proc</parameter>.
<parameter>contexts</parameter> is a list of event-contexts (e.g., '(button1 sidebar))
<parameter>button</parameter> is a string or integer giving the mouse button number
<parameter>proc</parameter> is a procedure that will be invoked (with no arguments) when the
specified button is pressed in the specified context.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/binding.c"><filename>scwm/binding.c</filename></ulink>
  at line 798 </para> </refsect1>
</refentry>

<refentry id="bool-to-str">
  <refnamediv>
    <refname>bool->str</refname>
    <refpurpose>Return the string \"false\" if ARG is <literal>#f</literal>, \"true\" otherwise.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(bool->str arg)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the string \"false\" if ARG is <literal>#f</literal>, \"true\" otherwise.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 146 </para> </refsect1>
</refentry>

<refentry id="border-normal-p">
  <refnamediv>
    <refname>border-normal?</refname>
    <refpurpose>Return <literal>#t</literal> if WIN has a normal border, <literal>#f</literal> if it has a plain border.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(border-normal?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>win</parameter> has a normal border, <literal>#f</literal> if it has a plain border.
<parameter>win</parameter> defaults to the window context in the
usual way if not specified.  See <link linkend="normal-border"><function>normal-border</function></link> and
<link linkend="plain-border"><function>plain-border</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2938 </para> </refsect1>
</refentry>

<refentry id="border-style">
  <refnamediv>
    <refname>border-style</refname>
    <refpurpose>Set the border style in the current decor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(border-style #&amp;key (active '())  
			      (inactive '()) #&allow-other-keys . rest)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the border style in the current decor.
This function takes the keyword arguments #:hidden-handles, 
#:no-inset, and #:pixmap, with effects as described under the
`Face Flags' and `Face Specification Flags' concepts (except
that #:pixmap is always tiled).  These keyword arguments can
either be included in the main argument list, or lists of these
arguments can be used as the ACTIVE or INACTIVE arguments.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm face)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/face.scm"><filename>scheme/face.scm</filename></ulink>
  at line 61 </para> </refsect1>
</refentry>

<refentry id="button-style">
  <refnamediv>
    <refname>button-style</refname>
    <refpurpose>Set the button style for button number BUTTON in the current decor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(button-style button #&amp;key mwm
			      (active-up '()) 
			      (active-down '()) 
			      (inactive '()) #&allow-other-keys . rest)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the button style for button number BUTTON in the current decor.
MWM sets the button's mwm flag (see <link linkend="set-button-mwm-flag-x"><function>set-button-mwm-flag!</function></link>.
This function also takes the keyword arguments #:justify, #:relief,
#:vertical-justify, #:use-style-of, #:solid, #:gradient, #:h-gradient,
#:v-gradient, #:relief-pattern, #:vector, #:pixmap, and #:tiled-pixmap,
with effects as described under the `Face Flags' and `Face
Specification Flags' concepts (with the additions that #:tiled-pixmap
is an always-tiled pixmap, #:vector is a synonym for #:relief-pattern,
and #:h-gradient and #:v-gradient are horizontal and vertical
gradients).  These extra keyword arguments can either be included
in the main argument list, or lists of these arguments can be used
as the ACTIVE-UP, ACTIVE-DOWN, or INACTIVE arguments.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm face)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/face.scm"><filename>scheme/face.scm</filename></ulink>
  at line 78 </para> </refsect1>
</refentry>

<refentry id="cached-program-exists-p">
  <refnamediv>
    <refname>cached-program-exists?</refname>
    <refpurpose>Return <literal>#t</literal> if PROGRAM-NAME is in the cache of programs that exist.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(cached-program-exists? program-name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if PROGRAM-NAME is in the cache of programs that exist.
Returns <literal>#f</literal> otherwise.  If <link linkend="debug-program-cache"><function>debug-program-cache</function></link> is true, a message will 
print to stdout on hits and misses.  You must call 
<link linkend="initialize-programs-that-exist"><function>initialize-programs-that-exist</function></link> before calling this function; otherwise,
it reverts to the (inefficient) implementation of <link linkend="program-exists-p"><function>program-exists?</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/cached-program-exists.scm"><filename>scheme/cached-program-exists.scm</filename></ulink>
  at line 31 </para> </refsect1>
</refentry>

<refentry id="call-with-decor">
  <refnamediv>
    <refname>call-with-decor</refname>
    <refpurpose>Eval THUNK using DECOR as the current decor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(call-with-decor decor thunk)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Eval THUNK using DECOR as the current decor.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm decor)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/decor.scm"><filename>scheme/decor.scm</filename></ulink>
  at line 27 </para> </refsect1>
</refentry>

<refentry id="capturing-p">
  <refnamediv>
    <refname>capturing?</refname>
    <refpurpose>Returns <literal>#t</literal> when the windows are being captured.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(capturing?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns <literal>#t</literal> when the windows are being captured.
This happens at two times: during initial startup, or during a
recapture operation. In either case, placement procedures should
probably avoid interaction and perhaps avoid moving the window being
placed at all.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 145 </para> </refsect1>
</refentry>

<refentry id="cascade">
  <refnamediv>
    <refname>cascade</refname>
    <refpurpose>Cascade the windows on the specified desk.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(cascade #&amp;key (only ()) (except ()) 
			 (by-stacking #f) (by-focus #f)
			 (reverse #f)
			 (all-viewports #f) (desk (current-desk))
			 (ignore-default-exceptions #f)
			 (start-pos '(0 0)) (max-size (display-size))
			 (resize #f) (raise #t) 
			 (x-increment (meta-apply + window-title-height
						  window-frame-border-width))
			 (y-increment (meta-apply + window-title-height
						  window-frame-border-width)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cascade the windows on the specified desk.
The DESK option, defaulting to the current desk, specifies which desk;
ALL-VIEWPORTS, when true indicates that the windows in all viewports
of this desk should be cascaded, otherwise only the current viewport
is cascaded. 

The options ONLY, EXCEPT, BY-STACKING, BY-FOCUS and REVERSE indicate
the windows to use and the order to use them in, as with
<link linkend="list-windows"><function>list-windows</function></link>. However, unless IGNORE-DEFAULT-EXCEPTIONS is <literal>#t</literal>,
transient, maximized, sticky and iconified windows will be always be
excluded.

START-POS, MAX-SIZE, RESIZE, RAISE, X-INCREMENT and Y-INCREMENT
control the cascading options as for <link linkend="cascade-windows"><function>cascade-windows</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/cascade.scm"><filename>scheme/cascade.scm</filename></ulink>
  at line 98 </para> </refsect1>
</refentry>

<refentry id="cascade-windows">
  <refnamediv>
    <refname>cascade-windows</refname>
    <refpurpose>Cascade WINDOWS according to several parameters.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(cascade-windows 
		 windows #&amp;key (start-pos '(0 0)) 
		 (max-size (display-size)) (resize 'shrink-only)
		 (raise 'restack-only)
		 (x-increment (meta-apply + window-title-height
					  window-frame-border-width))
		 (y-increment (meta-apply + window-title-height
					  window-frame-border-width)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cascade WINDOWS according to several parameters.  
Cascading places the windows in a diagonal order starting at
START-POS, (0 0) by default. Each window's size is limited to
MAX-SIZE, by default the display size.

RESIZE may be <literal>#f</literal>, 'shrink-only or 'always, indicating that the windows
should never be resized, that they should be resized to the max-size
only if they are bigger, or that they should always be resized to the
max size. The default is 'shrink-only.

RAISE may be <literal>#f</literal>, <literal>#t</literal>, or 'restack-only, indicating that the windows
should not be moved in the stacking order; that they should be raised
on top of other windows and placed in the cascade order with the upper
left window lowest in the stacking order; or that they should be
restacked as for <literal>#t</literal> but not raised above other windows,
respectively. The default is 'restack-only.

X-INCREMENT may be an integer or a procedure that takes a window and
returns an integer, and which will be applied to a window to get the
horizontal offset for the next in the cascade order. The default is
the sum of the window's border width and title height.

Y-INCREMENT may be an integer or a procedure that takes a window and
returns an integer, and which will be applied to a window to get the
vertical offset for the next in the cascade order. The default is the
sum of the window's border width and title height.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm cascade)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/cascade.scm"><filename>scheme/cascade.scm</filename></ulink>
  at line 39 </para> </refsect1>
</refentry>

<refentry id="circulate-hit">
  <refnamediv>
    <refname>circulate-hit</refname>
    <refpurpose>Include WIN among the windows in the circulate list.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(circulate-hit #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Include WIN among the windows in the circulate list.
This resets the 'circulate-skip property of WIN.  See also <link linkend="circulate-skip"><function>circulate-skip</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winlist)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winlist.scm"><filename>scheme/winlist.scm</filename></ulink>
  at line 181 </para> </refsect1>
</refentry>

<refentry id="circulate-hit-icon">
  <refnamediv>
    <refname>circulate-hit-icon</refname>
    <refpurpose>Include WIN's icon among the windows in the circulate list.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(circulate-hit-icon #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Include WIN's icon among the windows in the circulate list.
This resets the 'circulate-skip-icon property of WIN.  
See also <link linkend="circulate-skip-icon"><function>circulate-skip-icon</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winlist)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winlist.scm"><filename>scheme/winlist.scm</filename></ulink>
  at line 196 </para> </refsect1>
</refentry>

<refentry id="circulate-skip">
  <refnamediv>
    <refname>circulate-skip</refname>
    <refpurpose>Do not include WIN among the windows in the circulate list.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(circulate-skip #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Do not include WIN among the windows in the circulate list.
This sets the 'circulate-skip property of WIN.  See also <link linkend="circulate-hit"><function>circulate-hit</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winlist)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winlist.scm"><filename>scheme/winlist.scm</filename></ulink>
  at line 186 </para> </refsect1>
</refentry>

<refentry id="circulate-skip-icon">
  <refnamediv>
    <refname>circulate-skip-icon</refname>
    <refpurpose>Do not include WIN's icon among the windows in the circulate list.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(circulate-skip-icon #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Do not include WIN's icon among the windows in the circulate list.
This sets the 'circulate-skip-icon property of WIN.  
See also <link linkend="circulate-hit-icon"><function>circulate-hit-icon</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winlist)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winlist.scm"><filename>scheme/winlist.scm</filename></ulink>
  at line 202 </para> </refsect1>
</refentry>

<refentry id="circulate-skip-icon-p">
  <refnamediv>
    <refname>circulate-skip-icon?</refname>
    <refpurpose>Return <literal>#t</literal> if WIN's icon is not among the windows in the circulate list.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(circulate-skip-icon? #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if WIN's icon is not among the windows in the circulate list.
Otherwise return <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winlist)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winlist.scm"><filename>scheme/winlist.scm</filename></ulink>
  at line 208 </para> </refsect1>
</refentry>

<refentry id="circulate-skip-p">
  <refnamediv>
    <refname>circulate-skip?</refname>
    <refpurpose>Return <literal>#t</literal> if WIN is not among the windows in the circulate list.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(circulate-skip? #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if WIN is not among the windows in the circulate list.
Otherwise return <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winlist)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winlist.scm"><filename>scheme/winlist.scm</filename></ulink>
  at line 191 </para> </refsect1>
</refentry>

<refentry id="clear-color-cache-entry">
  <refnamediv>
    <refname>clear-color-cache-entry</refname>
    <refpurpose>Colors are cached by name.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(clear-color-cache-entry name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Colors are cached by name. It is remotely possible that the
meaning of a particular string as a color will change in your X
server, if you try hard enough. For this unlikely eventuality,
<link linkend="clear-color-cache-entry"><function>clear-color-cache-entry</function></link> is provided - it removes the color
associated with <parameter>name</parameter> from the color cache.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 200 </para> </refsect1>
</refentry>

<refentry id="clear-font-cache-entry">
  <refnamediv>
    <refname>clear-font-cache-entry</refname>
    <refpurpose>Fonts are cached by name.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(clear-font-cache-entry name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Fonts are cached by name. It is remotely possible that the
meaning of a particular string as a fonts will change in your X
server, if you try hard enough (perhaps if you add or remove font
servers). For this unlikely eventuality, <link linkend="clear-font-cache-entry"><function>clear-font-cache-entry</function></link> is
provided - it removes the font associated with <parameter>name</parameter> from the font
cache.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/font.c"><filename>scwm/font.c</filename></ulink>
  at line 328 </para> </refsect1>
</refentry>

<refentry id="clear-fvwm2-module-config">
  <refnamediv>
    <refname>clear-fvwm2-module-config</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(clear-fvwm2-module-config module-type)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm fvwm-module)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/fvwm-module.scm"><filename>scheme/fvwm-module.scm</filename></ulink>
  at line 370 </para> </refsect1>
</refentry>

<refentry id="clear-image-cache-entry">
  <refnamediv>
    <refname>clear-image-cache-entry</refname>
    <refpurpose>Images are cached by both name and full pathname.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(clear-image-cache-entry name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Images are cached by both name and full pathname. It is
remotely possible that the file that should be used for a particular
name will change, for example if you alter the image file or change
your image path. For this unlikely eventuality,
<link linkend="clear-image-cache-entry"><function>clear-image-cache-entry</function></link> is provided - it removes the image
associated with <parameter>name</parameter> from the image cache.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/image.c"><filename>scwm/image.c</filename></ulink>
  at line 534 </para> </refsect1>
</refentry>

<refentry id="clear-window-style">
  <refnamediv>
    <refname>clear-window-style</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(clear-window-style)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm style)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/style.scm"><filename>scheme/style.scm</filename></ulink>
  at line 47 </para> </refsect1>
</refentry>

<refentry id="clever-place-window">
  <refnamediv>
    <refname>clever-place-window</refname>
    <refpurpose>Places WIN using fvwm2's "ReallySmart" algorithm.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(clever-place-window win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Places <parameter>win</parameter> using fvwm2's "ReallySmart" algorithm.
The placement is just as if being placed by fvwm2's SmartPlacement,
as if SmartPlacementIsReallySmart were in effect. That is, it
tries to place the window so as to minimize its area of
overlap with other windows. Several parameters give different
weight to various kinds of windows, but they are not tunable
at runtime currently. If it fails to place the window, it
returns <literal>#f</literal>; otherwise it returns <literal>#t</literal>.
This is called as part of <link linkend="default-placement-proc"><function>default-placement-proc</function></link>.  It could also be
used in user-defined placement procedures (see
<link linkend="set-window-placement-proc-x"><function>set-window-placement-proc!</function></link>).
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/placement.c"><filename>scwm/placement.c</filename></ulink>
  at line 461 </para> </refsect1>
</refentry>

<refentry id="click-delay">
  <refnamediv>
    <refname>click-delay</refname>
    <refpurpose>Returns the delay used in identifying mouse clicks and drags, in milliseconds.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(click-delay)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the delay used in identifying mouse clicks and drags, in milliseconds.
See also <link linkend="set-click-delay-x"><function>set-click-delay!</function></link>
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 189 </para> </refsect1>
</refentry>

<refentry id="click-to-focus-passes-click-p">
  <refnamediv>
    <refname>click-to-focus-passes-click?</refname>
    <refpurpose>Returns a boolean valude indicating whether a click-to-focus window receives the click.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(click-to-focus-passes-click?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns a boolean valude indicating whether a click-to-focus window receives the click.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 381 </para> </refsect1>
</refentry>

<refentry id="click-to-focus-raises-p">
  <refnamediv>
    <refname>click-to-focus-raises?</refname>
    <refpurpose>Returns a boolean valude indicating whether a click-to-focus window gets raised on focus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(click-to-focus-raises?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns a boolean valude indicating whether a click-to-focus window gets raised on focus.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 408 </para> </refsect1>
</refentry>

<refentry id="close-all-xlogo-windows">
  <refnamediv>
    <refname>close-all-xlogo-windows</refname>
    <refpurpose>Close each window with class == XLogo.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(close-all-xlogo-windows)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Close each window with class == XLogo.
Greg uses XLogo windows as a sample window, so this
is useful for clearing the xlogos away when there get to
be more than desired.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 551 </para> </refsect1>
</refentry>

<refentry id="close--cwmClock">
  <refnamediv>
    <refname>close-ScwmClock</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(close-ScwmClock sc)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/ScwmClock.scm"><filename>scheme/ScwmClock.scm</filename></ulink>
  at line 59 </para> </refsect1>
</refentry>

<refentry id="close--cwmDeskButtons">
  <refnamediv>
    <refname>close-ScwmDeskButtons</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(close-ScwmDeskButtons sdb)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/ScwmDeskButtons.scm"><filename>scheme/ScwmDeskButtons.scm</filename></ulink>
  at line 65 </para> </refsect1>
</refentry>

<refentry id="close-window">
  <refnamediv>
    <refname>close-window</refname>
    <refpurpose>Close WIN either by deleting it or destroying it.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(close-window #&amp;optional (win (get-window #t)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Close WIN either by deleting it or destroying it.
WIN is only destroyed if it is not deleteable.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winops.scm"><filename>scheme/winops.scm</filename></ulink>
  at line 43 </para> </refsect1>
</refentry>

<refentry id="color-to-string">
  <refnamediv>
    <refname>color->string</refname>
    <refpurpose>Convert scwm color object COLOR into an X11 name of that color.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(color->string color)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Convert scwm color object COLOR into an X11 name of that color.
The resulting string can, e.g., be used in command lines for executing
other applications.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 417 </para> </refsect1>
</refentry>

<refentry id="color-properties">
  <refnamediv>
    <refname>color-properties</refname>
    <refpurpose>Return an association list giving some properties of COLOR.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(color-properties color)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return an association list giving some properties of <parameter>color</parameter>.
Currently defined properties are 'name, the string name of the
color, and 'pixel, the X pixel value it uses.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 118 </para> </refsect1>
</refentry>

<refentry id="color-property">
  <refnamediv>
    <refname>color-property</refname>
    <refpurpose>Return the KEY property of COLOR.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(color-property color key)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the KEY property of COLOR.
See <link linkend="color-properties"><function>color-properties</function></link> for a list of the keys.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 383 </para> </refsect1>
</refentry>

<refentry id="color-p">
  <refnamediv>
    <refname>color?</refname>
    <refpurpose>Returns <literal>#t</literal> if OBJ is a color object, otherwise <literal>#f</literal>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(color? obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns <literal>#t</literal> if <parameter>obj</parameter> is a color object, otherwise <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 106 </para> </refsect1>
</refentry>

<refentry id="colormap-focus">
  <refnamediv>
    <refname>colormap-focus</refname>
    <refpurpose>Return the colormap focus policy, as set by <link linkend="set-colormap-focus-x"><function>set-colormap-focus!</function></link>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(colormap-focus)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the colormap focus policy, as set by <link linkend="set-colormap-focus-x"><function>set-colormap-focus!</function></link>.
The value can be either be 'mouse, indicating that the window under
the mouse pointer will always colormap installed, or 'focus to
indicate that the window with the input focus should also get the
colormap focus.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 224 </para> </refsect1>
</refentry>

<refentry id="containing-aligned-viewport">
  <refnamediv>
    <refname>containing-aligned-viewport</refname>
    <refpurpose>Compute the viewport-position of the viewport that contains POS.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(containing-aligned-viewport pos)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Compute the viewport-position of the viewport that contains POS.
POS is a list of x and y virtual coordinates in that order. The
viewport coordinates returned will be in the same format and will be a
integral multiples of the desk size. If POS is not contained in any
valid viewport, for instance if it includes coordinates greater than
zero or greater than the desk size times the display size, the nearest
viewport will be returned instead.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm virtual)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/virtual.scm"><filename>scheme/virtual.scm</filename></ulink>
  at line 34 </para> </refsect1>
</refentry>

<refentry id="copy-menu-look">
  <refnamediv>
    <refname>copy-menu-look</refname>
    <refpurpose>Copy menu look ORIGINAL-MENU-LOOK with a new NAME and optional EXTRA.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(copy-menu-look original-menu-look name #&amp;optional extra)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Copy menu look <parameter>original-menu-look</parameter> with a new <parameter>name</parameter> and optional <parameter>extra</parameter>.
If <parameter>extra</parameter> is not given, the <parameter>extra</parameter> information from the original menu is
used. The form and purpose of the <parameter>extra</parameter> information varies with the
menu look, and is documented with the original menu looks; currently,
only the XPM menu look uses the <parameter>extra</parameter> information.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/menulook.c"><filename>scwm/menulook.c</filename></ulink>
  at line 91 </para> </refsect1>
</refentry>

<refentry id="current-decor">
  <refnamediv>
    <refname>current-decor</refname>
    <refpurpose>Return the current decor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(current-decor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current decor.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/decor.c"><filename>scwm/decor.c</filename></ulink>
  at line 281 </para> </refsect1>
</refentry>

<refentry id="current-desk">
  <refnamediv>
    <refname>current-desk</refname>
    <refpurpose>Returns the integer identifying the current desk.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(current-desk)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the integer identifying the current desk.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 76 </para> </refsect1>
</refentry>

<refentry id="current-window-with-focus">
  <refnamediv>
    <refname>current-window-with-focus</refname>
    <refpurpose>Return the window that currently has the input focus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(current-window-with-focus)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window that currently has the input focus.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 880 </para> </refsect1>
</refentry>

<refentry id="current-window-with-pointer">
  <refnamediv>
    <refname>current-window-with-pointer</refname>
    <refpurpose>Return the window that currently contains the mouse pointer.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(current-window-with-pointer)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window that currently contains the mouse pointer.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 890 </para> </refsect1>
</refentry>

<refentry id="default-decor">
  <refnamediv>
    <refname>default-decor</refname>
    <refpurpose>Return the default decor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(default-decor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the default decor.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/decor.c"><filename>scwm/decor.c</filename></ulink>
  at line 241 </para> </refsect1>
</refentry>

<refentry id="default-move-opaquely-p">
  <refnamediv>
    <refname>default-move-opaquely?</refname>
    <refpurpose>Return <literal>#t</literal> if WIN has area &lt; opaque-move-percent of the screen, else <literal>#f</literal>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(default-move-opaquely? win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if WIN has area &lt; opaque-move-percent of the screen, else <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winops.scm"><filename>scheme/winops.scm</filename></ulink>
  at line 200 </para> </refsect1>
</refentry>

<refentry id="default-placement-proc">
  <refnamediv>
    <refname>default-placement-proc</refname>
    <refpurpose>Use various flags to call an appropriate placement function.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(default-placement-proc win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use various flags to call an appropriate placement function.
This is the default placement procedure for non-transient windows. It
tries <link linkend="smart-place-window"><function>smart-place-window</function></link>, <link linkend="clever-place-window"><function>clever-place-window</function></link>,
<link linkend="random-place-window"><function>random-place-window</function></link>, or <link linkend="interactive-move"><function>interactive-move</function></link> (to achieve interactive
placement) on <parameter>win</parameter> depending on several style flags. (See
<link linkend="set-smart-placement-is-really-smart-x"><function>set-smart-placement-is-really-smart!</function></link>, <link linkend="set-smart-placement-x"><function>set-smart-placement!</function></link>,
and <link linkend="set-random-placement-x"><function>set-random-placement!</function></link>.) However, if one of the following
factors holds, the window will instead be placed exactly as
requested by the program: the position was specified by the user,
the position was specified by the program and #:no-PPosition-hint
is not set, or the window starts iconic.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/placement.c"><filename>scwm/placement.c</filename></ulink>
  at line 541 </para> </refsect1>
</refentry>

<refentry id="default-resize-opaquely-p">
  <refnamediv>
    <refname>default-resize-opaquely?</refname>
    <refpurpose>Return <literal>#t</literal> if WIN has area &lt; opaque-resize-percent of the screen, else <literal>#f</literal>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(default-resize-opaquely? win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if WIN has area &lt; opaque-resize-percent of the screen, else <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winops.scm"><filename>scheme/winops.scm</filename></ulink>
  at line 195 </para> </refsect1>
</refentry>

<refentry id="default-transient-placement-proc">
  <refnamediv>
    <refname>default-transient-placement-proc</refname>
    <refpurpose>This is the default placement procedure for transient windows.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(default-transient-placement-proc win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  This is the default placement procedure for transient windows.
It simply leaves the window <parameter>win</parameter> in place, exactly as requested.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/placement.c"><filename>scwm/placement.c</filename></ulink>
  at line 606 </para> </refsect1>
</refentry>

<refentry id="default-winlist-proc">
  <refnamediv>
    <refname>default-winlist-proc</refname>
    <refpurpose>The default behaviour when WIN is selected from the window list.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(default-winlist-proc #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  The default behaviour when WIN is selected from the window list.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winlist)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winlist.scm"><filename>scheme/winlist.scm</filename></ulink>
  at line 31 </para> </refsect1>
</refentry>

<refentry id="deiconify">
  <refnamediv>
    <refname>deiconify</refname>
    <refpurpose>Deiconify WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(deiconify  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Deiconify <parameter>win</parameter>.
Hides its icon, and shows its regular window.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1918 </para> </refsect1>
</refentry>

<refentry id="delete-duplicates">
  <refnamediv>
    <refname>delete-duplicates</refname>
    <refpurpose>Return a list that has the elements of L with duplicates omitted.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(delete-duplicates l)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a list that has the elements of L with duplicates omitted.
The first instance of any alement that appears more than once is retained,
all other instances are removed.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/listops.scm"><filename>scheme/listops.scm</filename></ulink>
  at line 212 </para> </refsect1>
</refentry>

<refentry id="delete-window">
  <refnamediv>
    <refname>delete-window</refname>
    <refpurpose>Request that WIN remove itself from the display.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(delete-window  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Request that <parameter>win</parameter> remove itself from the display.
This is the friendly way of closing a window, but it will not work if
the application does not cooperate. <parameter>win</parameter> defaults to the window context
in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1563 </para> </refsect1>
</refentry>

<refentry id="delta-position">
  <refnamediv>
    <refname>delta-position</refname>
    <refpurpose>Return a new coordinate list that is DX,DY offset from XY-LIST.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(delta-position xy-list dx dy)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a new coordinate list that is DX,DY offset from XY-LIST.
E.g., if XY-LIST is (2 10) and DX is 5, DY is 7, returns (7 17).
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 561 </para> </refsect1>
</refentry>

<refentry id="desk-background">
  <refnamediv>
    <refname>desk-background</refname>
    <refpurpose>Set the background to use on desk DESK.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(desk-background desk #&amp;key
				 (reset #f) 
				 (color #f) 
				 (image #f)
				 (image-style 'centered))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the background to use on desk DESK.
RESET determines whether to reset the background to the standard X 
crosshatch before enacting any other settings.
COLOR is a background color to set, either a color name or a color object.
IMAGE is a background image, either an image name or an image object.
IMAGE-STYLE is either 'tiled or 'centered.
The default may be set by setting the background for DESK <literal>#t</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm desk-background)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/desk-background.scm"><filename>scheme/desk-background.scm</filename></ulink>
  at line 25 </para> </refsect1>
</refentry>

<refentry id="desk-size">
  <refnamediv>
    <refname>desk-size</refname>
    <refpurpose>Returns the size of the current desk.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(desk-size)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the size of the current desk.
The returned value is in units of the physical screen size, as a list
of the width and the height.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 343 </para> </refsect1>
</refentry>

<refentry id="destroy-window">
  <refnamediv>
    <refname>destroy-window</refname>
    <refpurpose>Forcibly remove WIN from the screen.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(destroy-window  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Forcibly remove <parameter>win</parameter> from the screen.
This will kill the application without giving it a chance to save its
state or do any other shutdown, but is guaranteed to work. <parameter>win</parameter>
defaults to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1594 </para> </refsect1>
</refentry>

<refentry id="display-message-briefly">
  <refnamediv>
    <refname>display-message-briefly</refname>
    <refpurpose>Display MSG in the message window for SEC-TIMEOUT seconds.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(display-message-briefly msg #&amp;optional (sec-timeout 3))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Display MSG in the message window for SEC-TIMEOUT seconds.
See <link linkend="display-message"><function>display-message</function></link> for details about MSG.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 543 </para> </refsect1>
</refentry>

<refentry id="display-size">
  <refnamediv>
    <refname>display-size</refname>
    <refpurpose>Returns the size of the physical screen in pixels.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(display-size)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the size of the physical screen in pixels.
The return value is list of the width and the height. The
width is the <link linkend="car"><function>car</function></link>, the height is the <link linkend="cadr"><function>cadr</function></link> of the returned list.
See also the variables "display-width" and "display-height".
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 357 </para> </refsect1>
</refentry>

<refentry id="documentation">
  <refnamediv>
    <refname>documentation</refname>
    <refpurpose>Print the documentation for the string or symbol.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(documentation func #&amp;optional (port (current-output-port)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Print the documentation for the string or symbol.
Works by searching through the files listed in <link linkend="doc-files"><function>doc-files</function></link>.
Returns <literal>#t</literal> if any documentation was found, <literal>#f</literal> otherwise.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm doc)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/doc.scm"><filename>scheme/doc.scm</filename></ulink>
  at line 24 </para> </refsect1>
</refentry>

<refentry id="draw-overlay-plane">
  <refnamediv>
    <refname>draw-overlay-plane</refname>
    <refpurpose>Draw a box in the overlay plane.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(draw-overlay-plane)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Draw a box in the overlay plane.
This is just for demonstration and testing purposes for now.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/modules/overlay-plane/overlay-plane.c"><filename>modules/overlay-plane/overlay-plane.c</filename></ulink>
  at line 99 </para> </refsect1>
</refentry>

<refentry id="edge-move-threshold">
  <refnamediv>
    <refname>edge-move-threshold</refname>
    <refpurpose>Return the edge move threshold as set by <link linkend="set-edge-move-threshold-x"><function>set-edge-move-threshold!</function></link>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(edge-move-threshold)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the edge move threshold as set by <link linkend="set-edge-move-threshold-x"><function>set-edge-move-threshold!</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 295 </para> </refsect1>
</refentry>

<refentry id="edge-scroll-delay">
  <refnamediv>
    <refname>edge-scroll-delay</refname>
    <refpurpose>Return the edge scroll delay as set by <link linkend="set-edge-scroll-delay-x"><function>set-edge-scroll-delay!</function></link>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(edge-scroll-delay)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the edge scroll delay as set by <link linkend="set-edge-scroll-delay-x"><function>set-edge-scroll-delay!</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 264 </para> </refsect1>
</refentry>

<refentry id="edge-x-scroll">
  <refnamediv>
    <refname>edge-x-scroll</refname>
    <refpurpose>Return the horizontal edge scroll increment as set by <link linkend="set-edge-x-scroll-x"><function>set-edge-x-scroll!</function></link>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(edge-x-scroll)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the horizontal edge scroll increment as set by <link linkend="set-edge-x-scroll-x"><function>set-edge-x-scroll!</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 147 </para> </refsect1>
</refentry>

<refentry id="edge-x-wrap">
  <refnamediv>
    <refname>edge-x-wrap</refname>
    <refpurpose>Return the current horizonatal edge wrap setting as set by <link linkend="set-edge-x-wrap-x"><function>set-edge-x-wrap!</function></link>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(edge-x-wrap)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current horizonatal edge wrap setting as set by <link linkend="set-edge-x-wrap-x"><function>set-edge-x-wrap!</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 201 </para> </refsect1>
</refentry>

<refentry id="edge-y-scroll">
  <refnamediv>
    <refname>edge-y-scroll</refname>
    <refpurpose>Return the vertical edge scroll increment as set by <link linkend="set-edge-y-scroll-x"><function>set-edge-y-scroll!</function></link>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(edge-y-scroll)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the vertical edge scroll increment as set by <link linkend="set-edge-y-scroll-x"><function>set-edge-y-scroll!</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 176 </para> </refsect1>
</refentry>

<refentry id="edge-y-wrap">
  <refnamediv>
    <refname>edge-y-wrap</refname>
    <refpurpose>Return the current vertical edge wrap setting as set by <link linkend="set-edge-y-wrap-x"><function>set-edge-y-wrap!</function></link>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(edge-y-wrap)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current vertical edge wrap setting as set by <link linkend="set-edge-y-wrap-x"><function>set-edge-y-wrap!</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 226 </para> </refsect1>
</refentry>

<refentry id="elapsed-time">
  <refnamediv>
    <refname>elapsed-time</refname>
    <refpurpose>Return the elapsed time in milliseconds since O.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(elapsed-time)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the elapsed time in milliseconds since O.S. has been up.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 476 </para> </refsect1>
</refentry>

<refentry id="eval-fvwm-command">
  <refnamediv>
    <refname>eval-fvwm-command</refname>
    <refpurpose>Evaluate an fvwm2 command.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(eval-fvwm-command command #&amp;optional (fmod #f) 
				   (window #f))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Evaluate an fvwm2 command.
Implemented for compatibility with fvwm2 modules, which can send
commands back to the window manager for evaluation.  Not all fvwm2
commands are implemented; see the end of fvwm-eval.scm for a list of
working commands.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/fvwm-eval.scm"><filename>scheme/fvwm-eval.scm</filename></ulink>
  at line 514 </para> </refsect1>
</refentry>

<refentry id="exe">
  <refnamediv>
    <refname>exe</refname>
    <refpurpose>Return a procedure that, when invoked, executes COMMAND in the background.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(exe command)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a procedure that, when invoked, executes COMMAND in the background.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 415 </para> </refsect1>
</refentry>

<refentry id="exe-on-selection">
  <refnamediv>
    <refname>exe-on-selection</refname>
    <refpurpose>Return a procedure that runs COMMAND in the background on the X selection.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(exe-on-selection command)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a procedure that runs COMMAND in the background on the X selection.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 672 </para> </refsect1>
</refentry>

<refentry id="execute">
  <refnamediv>
    <refname>execute</refname>
    <refpurpose>Execute COMMAND in the background.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(execute command)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Execute COMMAND in the background.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 558 </para> </refsect1>
</refentry>

<refentry id="execute-on-selection">
  <refnamediv>
    <refname>execute-on-selection</refname>
    <refpurpose>Run COMMAND in the background, with arguments supplied by the X selection.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(execute-on-selection command)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Run COMMAND in the background, with arguments supplied by the X selection.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 668 </para> </refsect1>
</refentry>

<refentry id="extreme">
  <refnamediv>
    <refname>extreme</refname>
    <refpurpose>Find extreme value e of PRED in LST.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(extreme pred lst)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Find extreme value e of PRED in LST.
If PRED defines a semi-ordering, `(PRED e x)' will hold for all members x
of LST not equal to e. E.g. `(extreme &lt; ...)' returns the lowest number.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 684 </para> </refsect1>
</refentry>

<refentry id="filename-is-complete-p">
  <refnamediv>
    <refname>filename-is-complete?</refname>
    <refpurpose>Return true if FNAME is a fully qualified pathname.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(filename-is-complete? fname)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return true if FNAME is a fully qualified pathname.
This is considered to be the case if the string FNAME starts with \"/\",
\"./\" or \"../\", following the convention of many Unix programs.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm file)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/file.scm"><filename>scheme/file.scm</filename></ulink>
  at line 30 </para> </refsect1>
</refentry>

<refentry id="filter">
  <refnamediv>
    <refname>filter</refname>
    <refpurpose>Return a list of those elements of L for which PRED is true.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(filter pred l)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a list of those elements of L for which PRED is true.
The elements appear in the result list in the same order in which they
appeared in L.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm listops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/listops.scm"><filename>scheme/listops.scm</filename></ulink>
  at line 84 </para> </refsect1>
</refentry>

<refentry id="filter-map">
  <refnamediv>
    <refname>filter-map</refname>
    <refpurpose>Process FIRST and the lists comprising REST as <link linkend="map"><function>map</function></link> would.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(filter-map proc first . rest)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Process FIRST and the lists comprising REST as <link linkend="map"><function>map</function></link> would.
However, do not include any false returns from PROC in the result
list.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm listops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/listops.scm"><filename>scheme/listops.scm</filename></ulink>
  at line 189 </para> </refsect1>
</refentry>

<refentry id="find-file-in-path">
  <refnamediv>
    <refname>find-file-in-path</refname>
    <refpurpose>Search for file named FNAME in PATH.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(find-file-in-path fname path)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Search for file named FNAME in PATH.
FNAME is a string specifying a file; if it is a fully qualified filename,
as indicated by <link linkend="filename-is-complete-p"><function>filename-is-complete?</function></link>, it is checked for as is. Otherwise,
each element of the list PATH is used as a directory name to check for the
file. If the file is found, the full pathname to it is returned; if not,
<literal>#f</literal> is returned.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/file.scm"><filename>scheme/file.scm</filename></ulink>
  at line 44 </para> </refsect1>
</refentry>

<refentry id="find-window-by">
  <refnamediv>
    <refname>find-window-by</refname>
    <refpurpose>Return a window satisfying predicate PRED.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(find-window-by pred)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a window satisfying predicate PRED.
If there are multiple such windows, an unspecified one of them
will be returned.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 317 </para> </refsect1>
</refentry>

<refentry id="find-window-by-class-resource">
  <refnamediv>
    <refname>find-window-by-class-resource</refname>
    <refpurpose>Return a window by its CLASS and RESOURCE names (as strings).</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(find-window-by-class-resource class resource)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a window by its CLASS and RESOURCE names (as strings).
If there are multiple such windows, an unspecified one of them
will be returned.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 333 </para> </refsect1>
</refentry>

<refentry id="find-window-by-name">
  <refnamediv>
    <refname>find-window-by-name</refname>
    <refpurpose>Return a window with name WINDOW-NAME.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(find-window-by-name window-name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a window with name WINDOW-NAME.
If there are multiple such windows, an unspecified one of them
will be returned.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 326 </para> </refsect1>
</refentry>

<refentry id="flash-window">
  <refnamediv>
    <refname>flash-window</refname>
    <refpurpose>Flash WIN's titlebar and boundary color to COLOR for UNFLASH-DELAY seconds.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(flash-window #&amp;optional (win (get-window)) #&amp;key
			      (color (make-color "red"))
			      (unflash-delay .5))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Flash WIN's titlebar and boundary color to COLOR for UNFLASH-DELAY seconds.
UNFLASH-DELAY may be <literal>#f</literal> to not automatically revert back to the original
color.  See <link linkend="unflash-window"><function>unflash-window</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 460 </para> </refsect1>
</refentry>

<refentry id="focus">
  <refnamediv>
    <refname>focus</refname>
    <refpurpose>Give WIN the input focus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(focus  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Give <parameter>win</parameter> the input focus.
This will typically result in drawing <parameter>win</parameter>'s frame in a special style
as well. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. Note that <parameter>win</parameter> is not raised by giving it the focus;  see
<link linkend="raise-window"><function>raise-window</function></link> if that is your intent.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1639 </para> </refsect1>
</refentry>

<refentry id="fold-menu-list">
  <refnamediv>
    <refname>fold-menu-list</refname>
    <refpurpose>Split ML into chained menus of no more than MAX-LINES items.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(fold-menu-list
		ml #&amp;optional (max-lines default-menu-max-fold-lines))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Split ML into chained menus of no more than MAX-LINES items.
ML is a list of menuitem objects. MAX-LINES is a number, which
defaults to <link linkend="default-menu-max-fold-lines"><function>default-menu-max-fold-lines</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 406 </para> </refsect1>
</refentry>

<refentry id="font-properties">
  <refnamediv>
    <refname>font-properties</refname>
    <refpurpose>Return an association list giving some properties of FONT.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(font-properties font)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return an association list giving some properties of <parameter>font</parameter>.
Currently defined properties are 'name, the string name of the
color, and 'height, its total height in pixels.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/font.c"><filename>scwm/font.c</filename></ulink>
  at line 238 </para> </refsect1>
</refentry>

<refentry id="font-property">
  <refnamediv>
    <refname>font-property</refname>
    <refpurpose>Return the KEY property of FONT.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(font-property font key)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the KEY property of FONT.
See <link linkend="font-properties"><function>font-properties</function></link> for a list of the keys.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 378 </para> </refsect1>
</refentry>

<refentry id="font-p">
  <refnamediv>
    <refname>font?</refname>
    <refpurpose>Returns <literal>#t</literal> if OBJ is a font object, otherwise <literal>#f</literal>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(font? obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns <literal>#t</literal> if <parameter>obj</parameter> is a font object, otherwise <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/font.c"><filename>scwm/font.c</filename></ulink>
  at line 228 </para> </refsect1>
</refentry>

<refentry id="for-all-p">
  <refnamediv>
    <refname>for-all?</refname>
    <refpurpose>Return true if PRED is true for all elements of L, otherwise false.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(for-all? l pred)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return true if PRED is true for all elements of L, otherwise false.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm listops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/listops.scm"><filename>scheme/listops.scm</filename></ulink>
  at line 102 </para> </refsect1>
</refentry>

<refentry id="frame-id-to-window">
  <refnamediv>
    <refname>frame-id->window</refname>
    <refpurpose>Return the window object corresponding to a frame WINDOW-ID.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(frame-id->window window-id)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window object corresponding to a frame <parameter>window-id</parameter>.
<parameter>window-id</parameter> should be the X id of a scwm frame window. If there is no
such window object, return <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2553 </para> </refsect1>
</refentry>

<refentry id="fvwm-exec">
  <refnamediv>
    <refname>fvwm-exec</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(fvwm-exec command)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm fvwm-compat)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/fvwm-compat.scm"><filename>scheme/fvwm-compat.scm</filename></ulink>
  at line 41 </para> </refsect1>
</refentry>

<refentry id="fvwm-exec-use-shell">
  <refnamediv>
    <refname>fvwm-exec-use-shell</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(fvwm-exec-use-shell #&amp;optional (shell #f))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm fvwm-compat)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/fvwm-compat.scm"><filename>scheme/fvwm-compat.scm</filename></ulink>
  at line 32 </para> </refsect1>
</refentry>

<refentry id="fvwm-none">
  <refnamediv>
    <refname>fvwm-none</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(fvwm-none thunk #&amp;key (only '()) (except '()))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm fvwm-compat)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/fvwm-compat.scm"><filename>scheme/fvwm-compat.scm</filename></ulink>
  at line 49 </para> </refsect1>
</refentry>

<refentry id="fvwm-nop">
  <refnamediv>
    <refname>fvwm-nop</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(fvwm-nop . args)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm fvwm-compat)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/fvwm-compat.scm"><filename>scheme/fvwm-compat.scm</filename></ulink>
  at line 73 </para> </refsect1>
</refentry>

<refentry id="fvwm-pipe-read">
  <refnamediv>
    <refname>fvwm-pipe-read</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(fvwm-pipe-read command)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm fvwm-compat)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/fvwm-compat.scm"><filename>scheme/fvwm-compat.scm</filename></ulink>
  at line 53 </para> </refsect1>
</refentry>

<refentry id="fvwm2-module-send-window-list">
  <refnamediv>
    <refname>fvwm2-module-send-window-list</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(fvwm2-module-send-window-list port)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm fvwm-module)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/fvwm-module.scm"><filename>scheme/fvwm-module.scm</filename></ulink>
  at line 212 </para> </refsect1>
</refentry>

<refentry id="get-fvwm2-module-config">
  <refnamediv>
    <refname>get-fvwm2-module-config</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(get-fvwm2-module-config module-type)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm fvwm-module)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/fvwm-module.scm"><filename>scheme/fvwm-module.scm</filename></ulink>
  at line 358 </para> </refsect1>
</refentry>

<refentry id="get-window">
  <refnamediv>
    <refname>get-window</refname>
    <refpurpose>Retrieve the window context or select interactively.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(get-window  #&amp;optional kill? select? release?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Retrieve the window context or select interactively.
If there is no window context, a window is selected interactively.
The optional boolean argument <parameter>kill?</parameter>  (default <literal>#f</literal>) determines whether
to use the "kill" cursor when selecting interactively. The boolean
<parameter>select?</parameter> argument (default <literal>#t</literal>) determines whether or not a window
should be selected interactively if there is no current window
context. And finally the <parameter>release?</parameter> argument (default <literal>#t</literal>) determines
whether or not interactive selection (if any) should wait for a mouse
release event or just a press. The latter behavior is useful if the
action being performed on the window is an interactive one involving
mouse drags.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 803 </para> </refsect1>
</refentry>

<refentry id="get-window-colors">
  <refnamediv>
    <refname>get-window-colors</refname>
    <refpurpose>Return a two-element list, "(fg bg)", the colors for WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(get-window-colors  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a two-element list, "(fg bg)", the colors for <parameter>win</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3166 </para> </refsect1>
</refentry>

<refentry id="get-window-focus">
  <refnamediv>
    <refname>get-window-focus</refname>
    <refpurpose>Get the focus style of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(get-window-focus  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Get the focus style of <parameter>win</parameter>.
Returns one of 'mouse, 'click, 'sloppy, or 'none.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3143 </para> </refsect1>
</refentry>

<refentry id="get-window-highlight-colors">
  <refnamediv>
    <refname>get-window-highlight-colors</refname>
    <refpurpose>Return a two-element list, "(fg bg)", the highlight colors for WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(get-window-highlight-colors  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a two-element list, "(fg bg)", the highlight colors for <parameter>win</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3180 </para> </refsect1>
</refentry>

<refentry id="get-wm-command">
  <refnamediv>
    <refname>get-wm-command</refname>
    <refpurpose>Get the \"WM_COMMAND\" X-Property of WIN and return that string.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(get-wm-command win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Get the \"WM_COMMAND\" X-Property of WIN and return that string.
WIN is a Scwm window object. The \"WM_COMMAND\" X-Property is the application's
notion of what the command line was used to run the application.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 429 </para> </refsect1>
</refentry>

<refentry id="gravity-to-alignments">
  <refnamediv>
    <refname>gravity->alignments</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(gravity->alignments gravity)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm message-window)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/message-window.scm"><filename>scheme/message-window.scm</filename></ulink>
  at line 16 </para> </refsect1>
</refentry>

<refentry id="has-overlay-plane-p">
  <refnamediv>
    <refname>has-overlay-plane?</refname>
    <refpurpose>Return <literal>#t</literal> if the current screen has an overlay plane, <literal>#f</literal> otherwise.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(has-overlay-plane?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if the current screen has an overlay plane, <literal>#f</literal> otherwise.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/modules/overlay-plane/overlay-plane.c"><filename>modules/overlay-plane/overlay-plane.c</filename></ulink>
  at line 41 </para> </refsect1>
</refentry>

<refentry id="help">
  <refnamediv>
    <refname>help</refname>
    <refpurpose>Print all possible documentation for string or symbol.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(help obj #&amp;optional (port (current-output-port)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Print all possible documentation for string or symbol.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/doc.scm"><filename>scheme/doc.scm</filename></ulink>
  at line 58 </para> </refsect1>
</refentry>

<refentry id="help-mesg">
  <refnamediv>
    <refname>help-mesg</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(help-mesg . funcs)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm prefs-menu)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/prefs-menu.scm"><filename>scheme/prefs-menu.scm</filename></ulink>
  at line 65 </para> </refsect1>
</refentry>

<refentry id="hide-overlay-plane">
  <refnamediv>
    <refname>hide-overlay-plane</refname>
    <refpurpose>Draw a box in the overlay plane.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(hide-overlay-plane)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Draw a box in the overlay plane.
This is just for demonstration and testing purposes for now.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/modules/overlay-plane/overlay-plane.c"><filename>modules/overlay-plane/overlay-plane.c</filename></ulink>
  at line 112 </para> </refsect1>
</refentry>

<refentry id="hide-titlebar">
  <refnamediv>
    <refname>hide-titlebar</refname>
    <refpurpose>Cause WIN not to be decorated with a titlebar.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(hide-titlebar  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter> not to be decorated with a titlebar.
See also <link linkend="show-titlebar"><function>show-titlebar</function></link>.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2839 </para> </refsect1>
</refentry>

<refentry id="hilight-background">
  <refnamediv>
    <refname>hilight-background</refname>
    <refpurpose>Return the default background color for windows with the input focus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(hilight-background)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the default background color for windows with the input focus.
Applies to the current decor. This is used only for windows that don't
have their own background color.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 725 </para> </refsect1>
</refentry>

<refentry id="hilight-factor">
  <refnamediv>
    <refname>hilight-factor</refname>
    <refpurpose>Return the current hilight factor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(hilight-factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current hilight factor.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 508 </para> </refsect1>
</refentry>

<refentry id="hilight-foreground">
  <refnamediv>
    <refname>hilight-foreground</refname>
    <refpurpose>Return the default foreground color for windows with the input focus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(hilight-foreground)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the default foreground color for windows with the input focus.
Applies to the current decor. This is used only for windows that don't
have their own foreground color.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 650 </para> </refsect1>
</refentry>

<refentry id="icon-font">
  <refnamediv>
    <refname>icon-font</refname>
    <refpurpose>Return the font used for drawing icon titles.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(icon-font)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the font used for drawing icon titles.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/font.c"><filename>scwm/font.c</filename></ulink>
  at line 276 </para> </refsect1>
</refentry>

<refentry id="icon-position">
  <refnamediv>
    <refname>icon-position</refname>
    <refpurpose>Return the position of the icon for WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(icon-position  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the position of the icon for <parameter>win</parameter>.
The position is returned as a list of the x coordinate and the y
coordinate in pixels.  If the icon is sticky, the position will
always be in the 0,0 viewport. <parameter>win</parameter> defaults to the window context in the usual
way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2396 </para> </refsect1>
</refentry>

<refentry id="icon-sticky-p">
  <refnamediv>
    <refname>icon-sticky?</refname>
    <refpurpose>Return <literal>#t</literal> if WIN is "sticky", <literal>#f</literal> otherwise.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(icon-sticky?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>win</parameter> is "sticky", <literal>#f</literal> otherwise.
See <link linkend="stick-icon"><function>stick-icon</function></link> and <link linkend="stick"><function>stick</function></link>. <parameter>win</parameter> defaults to the window context in
the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3036 </para> </refsect1>
</refentry>

<refentry id="icon-viewport-position">
  <refnamediv>
    <refname>icon-viewport-position</refname>
    <refpurpose>Return the position of WIN's icon in pixels within the viewport.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(icon-viewport-position #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the position of WIN's icon in pixels within the viewport.
The position is returned as a list of the x coordinate and the y
coordinate in pixels. WIN defaults to the window context in the usual
way if not specified.  See also <link linkend="icon-position"><function>icon-position</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 219 </para> </refsect1>
</refentry>

<refentry id="iconified-p">
  <refnamediv>
    <refname>iconified?</refname>
    <refpurpose>Return <literal>#t</literal> if WIN is iconified, otherwise return <literal>#f</literal>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(iconified?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>win</parameter> is iconified, otherwise return <literal>#f</literal>.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1937 </para> </refsect1>
</refentry>

<refentry id="iconify">
  <refnamediv>
    <refname>iconify</refname>
    <refpurpose>Iconify WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(iconify  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Iconify <parameter>win</parameter>.
Iconifying hides the regular window, and shows the window's icon.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1892 </para> </refsect1>
</refentry>

<refentry id="id-to-window">
  <refnamediv>
    <refname>id->window</refname>
    <refpurpose>Return the window object corresponding to an application WINDOW-ID.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(id->window window-id)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window object corresponding to an application <parameter>window-id</parameter>.
<parameter>window-id</parameter> should be the X id of the application window. If there is no
such window object, return <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2532 </para> </refsect1>
</refentry>

<refentry id="image-properties">
  <refnamediv>
    <refname>image-properties</refname>
    <refpurpose>Return an association list giving some properties of IMAGE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(image-properties image)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return an association list giving some properties of <parameter>image</parameter>.
Currently defined properties are 'filename, the fully expanded
pathname of the image, 'width, its width, 'height, its height, and
depth, its color depth.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/image.c"><filename>scwm/image.c</filename></ulink>
  at line 159 </para> </refsect1>
</refentry>

<refentry id="image-property">
  <refnamediv>
    <refname>image-property</refname>
    <refpurpose>Return the KEY property of IMAGE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(image-property image key)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the KEY property of IMAGE.
See <link linkend="image-properties"><function>image-properties</function></link> for a list of the keys.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 373 </para> </refsect1>
</refentry>

<refentry id="image-p">
  <refnamediv>
    <refname>image?</refname>
    <refpurpose>Returns <literal>#t</literal> if OBJ is an image object, otherwise <literal>#f</literal>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(image? obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns <literal>#t</literal> if <parameter>obj</parameter> is an image object, otherwise <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/image.c"><filename>scwm/image.c</filename></ulink>
  at line 149 </para> </refsect1>
</refentry>

<refentry id="ImageMagick-loader">
  <refnamediv>
    <refname>ImageMagick-loader</refname>
    <refpurpose>Tries to load an arbitrary image using ImageMagick's <link linkend="convert"><function>convert</function></link>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(ImageMagick-loader fname)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Tries to load an arbitrary image using ImageMagick's <link linkend="convert"><function>convert</function></link>.
Uses <link linkend="convert"><function>convert</function></link> to try to convert the file to an xpm, then
attempts to load it as such.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm image-loaders)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/image-loaders.scm"><filename>scheme/image-loaders.scm</filename></ulink>
  at line 28 </para> </refsect1>
</refentry>

<refentry id="in-viewport-any-desk-p">
  <refnamediv>
    <refname>in-viewport-any-desk?</refname>
    <refpurpose>Return <literal>#t</literal> if WIN is in the current viewport ignoring the desk, else <literal>#f</literal>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(in-viewport-any-desk? #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if WIN is in the current viewport ignoring the desk, else <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm wininfo)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/wininfo.scm"><filename>scheme/wininfo.scm</filename></ulink>
  at line 66 </para> </refsect1>
</refentry>

<refentry id="in-viewport-placement">
  <refnamediv>
    <refname>in-viewport-placement</refname>
    <refpurpose>Return a procedure that takes a window and places it in viewport (XX, YY).</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(in-viewport-placement xx yy)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a procedure that takes a window and places it in viewport (XX, YY).
The procedure will act just like calling <link linkend="place-in-viewport"><function>place-in-viewport</function></link> on the
window with the same XX and YY arguments.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm placement)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/placement.scm"><filename>scheme/placement.scm</filename></ulink>
  at line 78 </para> </refsect1>
</refentry>

<refentry id="initialize-programs-that-exist">
  <refnamediv>
    <refname>initialize-programs-that-exist</refname>
    <refpurpose>Initializes the cache with programs that exist in the current $PATH.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(initialize-programs-that-exist)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Initializes the cache with programs that exist in the current $PATH.
This creates a list that <link linkend="cached-program-exists-p"><function>cached-program-exists?</function></link> then checks when
queried whether a program exists or not.  Currently, this procedure
spawns a zsh process to get the list of files in the $PATH very quickly.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm cached-program-exists)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/cached-program-exists.scm"><filename>scheme/cached-program-exists.scm</filename></ulink>
  at line 12 </para> </refsect1>
</refentry>

<refentry id="interactive-move">
  <refnamediv>
    <refname>interactive-move</refname>
    <refpurpose>Move WINDOW interactively and possibly opaquely.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(interactive-move #&amp;optional (win (get-window #f #t #f))
				  (opaquely? (if win (move-opaquely? win))))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move WINDOW interactively and possibly opaquely. 
If OPAQUELY? is specified, it is used to determine if the window
should be moved opaquely, or using a rubber-band. If it is not
spcified, <link linkend="interactive-move"><function>interactive-move</function></link> calls <link linkend="move-opaquely-p"><function>move-opaquely?</function></link> on WIN and moves
opaquely if that returns <literal>#t</literal> and uses a rubber-band if it returns <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winops.scm"><filename>scheme/winops.scm</filename></ulink>
  at line 216 </para> </refsect1>
</refentry>

<refentry id="interactive-move-window-with-focus">
  <refnamediv>
    <refname>interactive-move-window-with-focus</refname>
    <refpurpose>Interactively move the window which currently has the focus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(interactive-move-window-with-focus)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Interactively move the window which currently has the focus.
<link linkend="move-opaquely-p"><function>move-opaquely?</function></link> is used to control whether a rubberband
outline or the window itself is moved.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 29 </para> </refsect1>
</refentry>

<refentry id="interactive-move-window-with-pointer">
  <refnamediv>
    <refname>interactive-move-window-with-pointer</refname>
    <refpurpose>Interactively move the window which currently contains the pointer.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(interactive-move-window-with-pointer)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Interactively move the window which currently contains the pointer.
<link linkend="move-opaquely-p"><function>move-opaquely?</function></link> is used to control whether a rubberband
outline or the window itself is moved.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 41 </para> </refsect1>
</refentry>

<refentry id="interactive-place">
  <refnamediv>
    <refname>interactive-place</refname>
    <refpurpose>Place WIN interactively.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(interactive-place win #&amp;key (resize #f))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Place WIN interactively.

Firts WIN is moved interactively with a rubber-band style move, then,
if the optional RESIZE argument is provided, it is resized
interactively immediately after it is placed.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm placement)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/placement.scm"><filename>scheme/placement.scm</filename></ulink>
  at line 48 </para> </refsect1>
</refentry>

<refentry id="interactive-placement">
  <refnamediv>
    <refname>interactive-placement</refname>
    <refpurpose>Return a procedure that takes a window and places it interactively.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(interactive-placement #&amp;key (resize #f) (switch #t)
  (return #f))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a procedure that takes a window and places it interactively.

If the RESIZE argument is true, the resulting procedure will
interactively resize the window immediately after placing it. If
SWITCH is true, the returned procedure will switch to the virtual desk
and viewport of its window argument before placing it. This is the
default. If RETURN is false, the returned procedure will switch back
to the previous desk and viewport after placing the window. The
default is false.

See also the related <link linkend="interactive-place"><function>interactive-place</function></link> procedure which directly
places a window interactively.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm placement)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/placement.scm"><filename>scheme/placement.scm</filename></ulink>
  at line 91 </para> </refsect1>
</refentry>

<refentry id="interactive-resize">
  <refnamediv>
    <refname>interactive-resize</refname>
    <refpurpose>Resize WINDOW interactively and possibly opaquely.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(interactive-resize #&amp;optional (win (get-window #f #t #f))
				    (opaquely? (if win 
						   (resize-opaquely? win))))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Resize WINDOW interactively and possibly opaquely. 
If OPAQUELY? is specified, it is used to determine if the window
should be resized opaquely, or using a rubber-band. If it is not
spcified, <link linkend="interactive-resize"><function>interactive-resize</function></link> calls <link linkend="resize-opaquely-p"><function>resize-opaquely?</function></link> on WIN and
moves opaquely if that returns <literal>#t</literal> and uses a rubber-band if it returns
<literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winops.scm"><filename>scheme/winops.scm</filename></ulink>
  at line 225 </para> </refsect1>
</refentry>

<refentry id="interactive-resize-window-with-focus">
  <refnamediv>
    <refname>interactive-resize-window-with-focus</refname>
    <refpurpose>Interactively resize the window which currently has the focus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(interactive-resize-window-with-focus)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Interactively resize the window which currently has the focus.
<link linkend="resize-opaquely-p"><function>resize-opaquely?</function></link> is used to control whether a rubberband
outline or the window itself is resized.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 35 </para> </refsect1>
</refentry>

<refentry id="interactive-resize-window-with-pointer">
  <refnamediv>
    <refname>interactive-resize-window-with-pointer</refname>
    <refpurpose>Interactively resize the window which currently contains the pointer.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(interactive-resize-window-with-pointer)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Interactively resize the window which currently contains the pointer.
<link linkend="resize-opaquely-p"><function>resize-opaquely?</function></link> is used to control whether a rubberband
outline or the window itself is resized.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 47 </para> </refsect1>
</refentry>

<refentry id="iota">
  <refnamediv>
    <refname>iota</refname>
    <refpurpose>Generate a list of the integers from 1 to N in order.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(iota n)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Generate a list of the integers from 1 to N in order.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm listops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/listops.scm"><filename>scheme/listops.scm</filename></ulink>
  at line 41 </para> </refsect1>
</refentry>

<refentry id="keep-on-top">
  <refnamediv>
    <refname>keep-on-top</refname>
    <refpurpose>Ensure that WIN is kept on top of all other windows.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(keep-on-top  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Ensure that <parameter>win</parameter> is kept on top of all other windows.
Obviously, other windows that are also on-top may obscure <parameter>win</parameter>.
<parameter>win</parameter> defaults to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2734 </para> </refsect1>
</refentry>

<refentry id="kept-on-top-p">
  <refnamediv>
    <refname>kept-on-top?</refname>
    <refpurpose>Return <literal>#t</literal> if WIN is an on-top window, <literal>#f</literal> otherwise.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(kept-on-top?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>win</parameter> is an on-top window, <literal>#f</literal> otherwise.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2777 </para> </refsect1>
</refentry>

<refentry id="key-mouse-moves">
  <refnamediv>
    <refname>key-mouse-moves</refname>
    <refpurpose>Bind four keys to move the mouse in compass directions by PCT-OF-SCREEN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(key-mouse-moves modifiers pct-of-screen left down up right)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Bind four keys to move the mouse in compass directions by PCT-OF-SCREEN.
MODIFIERS specifies which modifiers must be depressed for the bindings
to be active.
LEFT, DOWN, UP, and RIGHT are the four keysym names to use for each
of the directions.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 211 </para> </refsect1>
</refentry>

<refentry id="key-viewport-moves">
  <refnamediv>
    <refname>key-viewport-moves</refname>
    <refpurpose>Bind four keys to move the viewport in compass directions by PCT-OF-SCREEN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(key-viewport-moves modifiers pct-of-screen left down up right)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Bind four keys to move the viewport in compass directions by PCT-OF-SCREEN.
MODIFIERS specifies which modifiers must be depressed for the bindings
to be active.
LEFT, DOWN, UP, and RIGHT are the four keysym names to use for each
of the directions.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 226 </para> </refsect1>
</refentry>

<refentry id="keysym-to-keycode">
  <refnamediv>
    <refname>keysym->keycode</refname>
    <refpurpose>Returns a list of X/11 keycodes that generate the keysym, KEYSYM-NAME.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(keysym->keycode keysym-name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns a list of X/11 keycodes that generate the keysym, <parameter>keysym-name</parameter>.
<parameter>keysym-name</parameter> should be a string.  E.g., "Control_L".
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/binding.c"><filename>scwm/binding.c</filename></ulink>
  at line 622 </para> </refsect1>
</refentry>

<refentry id="kill-all-fvwm2-modules">
  <refnamediv>
    <refname>kill-all-fvwm2-modules</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(kill-all-fvwm2-modules)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm fvwm-module)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/fvwm-module.scm"><filename>scheme/fvwm-module.scm</filename></ulink>
  at line 516 </para> </refsect1>
</refentry>

<refentry id="kill-fvwm2-module">
  <refnamediv>
    <refname>kill-fvwm2-module</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(kill-fvwm2-module fmod)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm fvwm-module)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/fvwm-module.scm"><filename>scheme/fvwm-module.scm</filename></ulink>
  at line 513 </para> </refsect1>
</refentry>

<refentry id="kill-fvwm2-modules-by-name">
  <refnamediv>
    <refname>kill-fvwm2-modules-by-name</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(kill-fvwm2-modules-by-name module-name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm fvwm-module)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/fvwm-module.scm"><filename>scheme/fvwm-module.scm</filename></ulink>
  at line 519 </para> </refsect1>
</refentry>

<refentry id="list-all-windows">
  <refnamediv>
    <refname>list-all-windows</refname>
    <refpurpose>Return a list of all of the top-level window objects.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(list-all-windows)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a list of all of the top-level window objects.
The list is in a semi-arbitrary order that is convenient for the sake
of circulation.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2650 </para> </refsect1>
</refentry>

<refentry id="list-focus-order">
  <refnamediv>
    <refname>list-focus-order</refname>
    <refpurpose>Return a list of all the top-level window objects in focus order.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(list-focus-order)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a list of all the top-level window objects in focus order.
The order is from most recently focussed to least recently focussed.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2703 </para> </refsect1>
</refentry>

<refentry id="list-index">
  <refnamediv>
    <refname>list-index</refname>
    <refpurpose>Return the integer position of OBJ in list L.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(list-index l obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the integer position of OBJ in list L.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm listops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/listops.scm"><filename>scheme/listops.scm</filename></ulink>
  at line 145 </para> </refsect1>
</refentry>

<refentry id="list-stacking-order">
  <refnamediv>
    <refname>list-stacking-order</refname>
    <refpurpose>Return a list of all the top-level window objects, from top to bottom.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(list-stacking-order)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a list of all the top-level window objects, from top to bottom.
The order is the stacking order of the windows. The first element is
the topmost window, the last is the bottommost
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2669 </para> </refsect1>
</refentry>

<refentry id="list-windows">
  <refnamediv>
    <refname>list-windows</refname>
    <refpurpose>Return the list of windows matching ONLY and not matching EXCEPT.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(list-windows #&amp;key (only '()) (except '())
			      (by-stacking #f)
			      (by-focus #f)
			      (reverse #f))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the list of windows matching ONLY and not matching EXCEPT.
The windows are returned their stacking order (top first) if
BY-STACKING is <literal>#t</literal>.  They are returned sorted by their last focussed
time (most recently focussed first) if BY-FOCUS is <literal>#t</literal>. If REVERSE is
true, they are returned in the reverse of the usual order. ONLY and
EXCEPT each are procedures which take a single window argument and
returns <literal>#t</literal> if the window should be included (for ONLY) or 
excluded (for EXCEPT), or <literal>#f</literal> otherwise.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winlist)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winlist.scm"><filename>scheme/winlist.scm</filename></ulink>
  at line 56 </para> </refsect1>
</refentry>

<refentry id="list-windows-above">
  <refnamediv>
    <refname>list-windows-above</refname>
    <refpurpose>List the windows above w from bottom to top.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(list-windows-above w #&amp;key (only ()) (except()))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  List the windows above w from bottom to top.
Returns a list in the reverse of the stacking order of the windows
above W, in other words, from the one immediately above, to the topmost
window; the ONLY and EXCEPT keyword arguments operate as is usual for
procedures that deal with the window list.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm stacking)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/stacking.scm"><filename>scheme/stacking.scm</filename></ulink>
  at line 30 </para> </refsect1>
</refentry>

<refentry id="list-windows-below">
  <refnamediv>
    <refname>list-windows-below</refname>
    <refpurpose>List the windows below w from top to bottom.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(list-windows-below w #&amp;key (only ()) (except()))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  List the windows below w from top to bottom.
Returns a list in the stacking order of the windows below in, in other
words, from the one immediately below, to the bottommost window; the
ONLY and EXCEPT keyword arguments operate as is usual for procedures
that deal with the window list.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm stacking)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/stacking.scm"><filename>scheme/stacking.scm</filename></ulink>
  at line 42 </para> </refsect1>
</refentry>

<refentry id="load-theme">
  <refnamediv>
    <refname>load-theme</refname>
    <refpurpose>Returns a theme FNAME which is loaded from <link linkend="theme-path"><function>theme-path</function></link>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(load-theme fname)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns a theme FNAME which is loaded from <link linkend="theme-path"><function>theme-path</function></link>.
The theme should be either a directory, or a (possibly gzipped)
tar file with extension .tar, .tar.gz, or .tgz.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm themes)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/themes.scm"><filename>scheme/themes.scm</filename></ulink>
  at line 72 </para> </refsect1>
</refentry>

<refentry id="load-theme-image">
  <refnamediv>
    <refname>load-theme-image</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(load-theme-image fname)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm theme-impl)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/theme-impl.scm"><filename>scheme/theme-impl.scm</filename></ulink>
  at line 56 </para> </refsect1>
</refentry>

<refentry id="load-xbm">
  <refnamediv>
    <refname>load-xbm</refname>
    <refpurpose>Load an X Bitmap file identified by the pathname FULL-PATH.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(load-xbm full-path)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Load an X Bitmap file identified by the pathname <parameter>full-path</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/image.c"><filename>scwm/image.c</filename></ulink>
  at line 217 </para> </refsect1>
</refentry>

<refentry id="load-xpm">
  <refnamediv>
    <refname>load-xpm</refname>
    <refpurpose>Load an X Pixmap file identified by the pathname FULL-PATH.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(load-xpm full-path)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Load an X Pixmap file identified by the pathname <parameter>full-path</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/image.c"><filename>scwm/image.c</filename></ulink>
  at line 251 </para> </refsect1>
</refentry>

<refentry id="lower-by-one">
  <refnamediv>
    <refname>lower-by-one</refname>
    <refpurpose>Lower window W below the next window down that overlaps it.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(lower-by-one #&amp;optional (w (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Lower window W below the next window down that overlaps it.
W defaults to the window context in the usual way.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm stacking)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/stacking.scm"><filename>scheme/stacking.scm</filename></ulink>
  at line 69 </para> </refsect1>
</refentry>

<refentry id="lower-window">
  <refnamediv>
    <refname>lower-window</refname>
    <refpurpose>Lower WIN to the bottom of the window stack.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(lower-window  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Lower <parameter>win</parameter> to the bottom of the window stack. <parameter>win</parameter> defaults to
the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1721 </para> </refsect1>
</refentry>

<refentry id="lower-window-below">
  <refnamediv>
    <refname>lower-window-below</refname>
    <refpurpose>Restack window W immediately below W2.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(lower-window-below w w2)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Restack window W immediately below W2.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm stacking)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/stacking.scm"><filename>scheme/stacking.scm</filename></ulink>
  at line 58 </para> </refsect1>
</refentry>

<refentry id="make-color">
  <refnamediv>
    <refname>make-color</refname>
    <refpurpose>Return the color object corresponding to the X color specifier CNAME.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-color cname)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the color object corresponding to the X color specifier <parameter>cname</parameter>.
If <parameter>cname</parameter> is not a valid X color name, or cannot be
allocated, an error results.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 136 </para> </refsect1>
</refentry>

<refentry id="make-conditional-style">
  <refnamediv>
    <refname>make-conditional-style</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-conditional-style condition . args)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm style)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/style.scm"><filename>scheme/style.scm</filename></ulink>
  at line 108 </para> </refsect1>
</refentry>

<refentry id="make-context-menu">
  <refnamediv>
    <refname>make-context-menu</refname>
    <refpurpose>Create a menu of actions applicable to the filename in the X selection.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-context-menu)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Create a menu of actions applicable to the filename in the X selection.
The selection must contain a single full pathname.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/std-menus.scm"><filename>scheme/std-menus.scm</filename></ulink>
  at line 113 </para> </refsect1>
</refentry>

<refentry id="make-decor">
  <refnamediv>
    <refname>make-decor</refname>
    <refpurpose>Create a new decor object.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-decor  #&amp;optional name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Create a new decor object. <parameter>name</parameter> optionally provides a string
that is used to name the decor, and is displayed when the decor is
printed.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/decor.c"><filename>scwm/decor.c</filename></ulink>
  at line 213 </para> </refsect1>
</refentry>

<refentry id="make-face">
  <refnamediv>
    <refname>make-face</refname>
    <refpurpose>Create a new face.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-face flags specs)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Create a new face.
<parameter>flags</parameter> is a list of face flags (see concept) and
<parameter>specs</parameter> is a list of face specifiers.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/face.c"><filename>scwm/face.c</filename></ulink>
  at line 448 </para> </refsect1>
</refentry>

<refentry id="make-file-menu">
  <refnamediv>
    <refname>make-file-menu</refname>
    <refpurpose>Return a menu-object for viewing or editing FILE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-file-menu file . rest)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a menu-object for viewing or editing FILE.
REST is a list of other menu-items to include in the returned menu.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 112 </para> </refsect1>
</refentry>

<refentry id="make-font">
  <refnamediv>
    <refname>make-font</refname>
    <refpurpose>Return the font object for the X font specifier FNAME.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-font fname)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the font object for the X font specifier <parameter>fname</parameter>.
If <parameter>fname</parameter> is not a valid X font name, or cannot be
allocated, an error results.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/font.c"><filename>scwm/font.c</filename></ulink>
  at line 98 </para> </refsect1>
</refentry>

<refentry id="make-hosts-menu">
  <refnamediv>
    <refname>make-hosts-menu</refname>
    <refpurpose>Create a telnet menu.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-hosts-menu host-list #&amp;optional (user (user-name)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Create a telnet menu.
To use this, add the following to the menu of your choice:
  (menuitem \"telnet\" #:action (make-hosts-menu '(\"host1\" \"host2\" ...)))
An optional USER argument specifies the user to telnet as.
The element of the list of hosts can be a host (in which case telnet is
used) or a cons of (host . command).
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm std-menus)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/std-menus.scm"><filename>scheme/std-menus.scm</filename></ulink>
  at line 77 </para> </refsect1>
</refentry>

<refentry id="make-image">
  <refnamediv>
    <refname>make-image</refname>
    <refpurpose>Loads an image from the file NAME.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-image name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Loads an image from the file <parameter>name</parameter>.
To load the image, the appropriate image loaders will be invoked as
needed. If <parameter>name</parameter> starts with "/", "./" or "../", it is treated as a
fully qualified pathname; otherwise, the image path is searched for an
appropriate file.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/image.c"><filename>scwm/image.c</filename></ulink>
  at line 465 </para> </refsect1>
</refentry>

<refentry id="make-list">
  <refnamediv>
    <refname>make-list</refname>
    <refpurpose>Return a list containing N elements equal to the optional second argument.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-list n . init)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a list containing N elements equal to the optional second argument.
If INIT is empty indicating the optional argument was not provided,
use the empty list as the element.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm listops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/listops.scm"><filename>scheme/listops.scm</filename></ulink>
  at line 157 </para> </refsect1>
</refentry>

<refentry id="make-menu">
  <refnamediv>
    <refname>make-menu</refname>
    <refpurpose>Make and return a menu object from the given arguments.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-menu list-of-menuitems bg-color text-color stipple-color font #&amp;optional picture-side side-picture-align side-bg-color picture-bg extra-options)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Make and return a menu object from the given arguments.
<parameter>list-of-menuitems</parameter> is a non-empty scheme list of menu items -- see <link linkend="make-menuitem"><function>make-menuitem</function></link>;
<parameter>bg-color</parameter>, <parameter>text-color</parameter> and <parameter>stipple-color</parameter> are color objects or symbols;
<parameter>font</parameter> is a font object or symbol;
<parameter>picture-side</parameter> is an image object to draw on the left side of the menu;
<parameter>side-picture-align</parameter> is one of 'top, 'center, or 'bottom;
<parameter>side-bg-color</parameter> is a color object or symbol;
<parameter>picture-bg</parameter> is an image object;
<parameter>extra-options</parameter> can be anything understood by the menu-look
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/menu.c"><filename>scwm/menu.c</filename></ulink>
  at line 261 </para> </refsect1>
</refentry>

<refentry id="make-menuitem">
  <refnamediv>
    <refname>make-menuitem</refname>
    <refpurpose>Return a newly created menuitem object using the given arguments.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-menuitem label action #&amp;optional extra-label picture-above picture-left hover-action unhover-action hotkey-prefs)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a newly created menuitem object using the given arguments.
<parameter>label</parameter> is a string giving the main text label of the menu item;
<parameter>action</parameter> is a procedure or menu object -- if it is a procedure, it gets
invoked when the menuitem is selected, if it is a menu object, that
menu is attached as a submenu from the enclosing menu that the created
menuitem is put in.
<parameter>extra-label</parameter> is extra text describing the menu item -- often this
contains a shortcut key description, or some other descriptive text.
<parameter>picture-above</parameter> and <parameter>picture-left</parameter> are picture objects which correspond to
images to display within the bounding region of the menuitem.
<parameter>hover-action</parameter> and <parameter>unhover-action</parameter> are procedures to be invoked when the
mouse pointer hovers over the item and is moved away after hovering
over the item, respectively.
<parameter>hotkey-prefs</parameter> is a string listing preferred alphanumeric shortcut-keys
for the given menu-item; the menu creation routine uses these as hints
for assigning shortcut keys to the various menuitems.
For a higher-level interface to this function, see <link linkend="menuitem"><function>menuitem</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/menuitem.c"><filename>scwm/menuitem.c</filename></ulink>
  at line 119 </para> </refsect1>
</refentry>

<refentry id="make-menuitems-from-menu-information-list">
  <refnamediv>
    <refname>make-menuitems-from-menu-information-list</refname>
    <refpurpose>Return a list of menu-items from a list of detailed programs list.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-menuitems-from-menu-information-list menu-info-list)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a list of menu-items from a list of detailed programs list.
The format is subject to change.  See sample.scwmrc/gjb.scwmrc for
example usage.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 190 </para> </refsect1>
</refentry>

<refentry id="make-message-window">
  <refnamediv>
    <refname>make-message-window</refname>
    <refpurpose>Returns a newly created message window object with string MESSAGE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-message-window message)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns a newly created message window object with string <parameter>message</parameter>.
<parameter>message</parameter> is the initial string for the message window.
GJB:FIXME:: Uses defaults from the ScreenInfo struct for the other values.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/message-window.c"><filename>scwm/message-window.c</filename></ulink>
  at line 237 </para> </refsect1>
</refentry>

<refentry id="make-relief-color">
  <refnamediv>
    <refname>make-relief-color</refname>
    <refpurpose>Convert a color into a new color appropriate for a relief.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-relief-color color factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Convert a color into a new color appropriate for a relief.
Multiplies the luminosity and saturation of <parameter>color</parameter> by the
positive floating point number <parameter>factor</parameter>. Using a <parameter>factor</parameter> smaller than 1
will result in a dimmer color, suitable for use as a darker
relief. Using a factor greater than 1 will result in a brighter color
which is suitable for use as a hilight.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 414 </para> </refsect1>
</refentry>

<refentry id="make-resized-image">
  <refnamediv>
    <refname>make-resized-image</refname>
    <refpurpose>Makes a new image from IMAGE of the given WIDTH and HEIGHT.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-resized-image image width height #&amp;optional bgcolor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Makes a new image from <parameter>image</parameter> of the given <parameter>width</parameter> and <parameter>height</parameter>.
It does not scale <parameter>image</parameter>.  If the resized image is smaller than the
original, it is cropped; if larger, the extra space in the new image
is filled with <parameter>bgcolor</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/modules/background/background.c"><filename>modules/background/background.c</filename></ulink>
  at line 83 </para> </refsect1>
</refentry>

<refentry id="make-reversed-color">
  <refnamediv>
    <refname>make-reversed-color</refname>
    <refpurpose>Return a new color that is opposite COLOR.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-reversed-color color)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a new color that is opposite <parameter>color</parameter>.
Note that the returned color will not necessarily contrast with
<parameter>color</parameter>; (make-reversed-color "gray50") is almost indistinguishable
from "gray50".
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 437 </para> </refsect1>
</refentry>

<refentry id="make-rhosts-menu">
  <refnamediv>
    <refname>make-rhosts-menu</refname>
    <refpurpose>Returns a menu which lets you rlogin to each host mentioned in your .</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-rhosts-menu)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns a menu which lets you rlogin to each host mentioned in your .rhosts
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 501 </para> </refsect1>
</refentry>

<refentry id="make-string-usable-for-resource-key">
  <refnamediv>
    <refname>make-string-usable-for-resource-key</refname>
    <refpurpose>Return a converted string from STRING that can be used as an X resource key.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-string-usable-for-resource-key string)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a converted string from STRING that can be used as an X resource key.
The returned string will have all non-alphanumeric characters replaced with
underscores, so that the resulting string can be used as a key for
<link linkend="X-resource-get"><function>X-resource-get</function></link> and <link linkend="X-resource-put"><function>X-resource-put</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 484 </para> </refsect1>
</refentry>

<refentry id="make-style">
  <refnamediv>
    <refname>make-style</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-style . args)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm style)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/style.scm"><filename>scheme/style.scm</filename></ulink>
  at line 50 </para> </refsect1>
</refentry>

<refentry id="make-theme">
  <refnamediv>
    <refname>make-theme</refname>
    <refpurpose>Creates a theme object with the given NAME, WINDOW-STYLE, and BACKGROUND-STYLE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-theme name #&amp;key (window-style (make-style #t))
			   (background-style (lambda () ())))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Creates a theme object with the given NAME, WINDOW-STYLE, and BACKGROUND-STYLE.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm theme-impl)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/theme-impl.scm"><filename>scheme/theme-impl.scm</filename></ulink>
  at line 62 </para> </refsect1>
</refentry>

<refentry id="make-toggling-winop">
  <refnamediv>
    <refname>make-toggling-winop</refname>
    <refpurpose>Returns a procedure which takes a window WIN and toggles a property of it.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>((make-toggling-winop pred neg pos) 
		 #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns a procedure which takes a window WIN and toggles a property of it.
PRED, NEG, and POS should be functions which take a window and
check whether the property holds for the window, reset the property
on the window, and set the property on the window, respectively.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winops.scm"><filename>scheme/winops.scm</filename></ulink>
  at line 33 </para> </refsect1>
</refentry>

<refentry id="make-wmconfig-menu">
  <refnamediv>
    <refname>make-wmconfig-menu</refname>
    <refpurpose>Return a menu object for the window-manager configuration menu.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-wmconfig-menu 
		 #&amp;optional (wmconfig-title default-wmconfig-title)
		 (wmconfig-dir default-wmconfig-dir))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a menu object for the window-manager configuration menu.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/wmconfig-menu.scm"><filename>scheme/wmconfig-menu.scm</filename></ulink>
  at line 93 </para> </refsect1>
</refentry>

<refentry id="make-xlock-menu">
  <refnamediv>
    <refname>make-xlock-menu</refname>
    <refpurpose>Create an xlock menu.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(make-xlock-menu #&amp;optional (lock? #f))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Create an xlock menu.
To use this, add the following to the menu of your choice:
   (menuitem \"Screensaver\" #:action (make-xlock-menu <literal>#f</literal>))
or (menuitem \"Lock Screen\" #:action (make-xlock-menu <literal>#t</literal>))
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm std-menus)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/std-menus.scm"><filename>scheme/std-menus.scm</filename></ulink>
  at line 63 </para> </refsect1>
</refentry>

<refentry id="map-in-order">
  <refnamediv>
    <refname>map-in-order</refname>
    <refpurpose>Process FIRST and the lists comprising REST as <link linkend="map"><function>map</function></link> would.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(map-in-order proc first . rest)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Process FIRST and the lists comprising REST as <link linkend="map"><function>map</function></link> would.
However, PROC is guaranteed to be called on these elements in the
order in which they appear in the lists.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm listops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/listops.scm"><filename>scheme/listops.scm</filename></ulink>
  at line 173 </para> </refsect1>
</refentry>

<refentry id="marshal-fvwm2-config-info">
  <refnamediv>
    <refname>marshal-fvwm2-config-info</refname>
    <refpurpose>Constructs a fvwm2 BroadcastInfo module packet.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(marshal-fvwm2-config-info win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Constructs a fvwm2 BroadcastInfo module packet.
The return value is the contents of a BroadcastInfo fvwm2
module packet for <parameter>win</parameter> as a Scheme string.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/module-interface.c"><filename>scwm/module-interface.c</filename></ulink>
  at line 103 </para> </refsect1>
</refentry>

<refentry id="marshal-fvwm2-iconify-info">
  <refnamediv>
    <refname>marshal-fvwm2-iconify-info</refname>
    <refpurpose>Constructs a fvwm2 "M_ICONIFY" module packet.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(marshal-fvwm2-iconify-info win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Constructs a fvwm2 "M_ICONIFY" module packet.
The return value is the contents of an "M_ICONIFY" fvwm
module packet for <parameter>win</parameter> as a Scheme string.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/module-interface.c"><filename>scwm/module-interface.c</filename></ulink>
  at line 149 </para> </refsect1>
</refentry>

<refentry id="maximize">
  <refnamediv>
    <refname>maximize</refname>
    <refpurpose>Maximize WIN to new pixel width NW and new pixel height NH.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(maximize nw nh #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Maximize WIN to new pixel width NW and new pixel height NH.
If NW or NH is 0, that dimension is not changed.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winops.scm"><filename>scheme/winops.scm</filename></ulink>
  at line 78 </para> </refsect1>
</refentry>

<refentry id="maximized-p">
  <refnamediv>
    <refname>maximized?</refname>
    <refpurpose>Return <literal>#t</literal> if WIN is maximized, <literal>#f</literal> otherwise.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(maximized? #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if WIN is maximized, <literal>#f</literal> otherwise.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winops.scm"><filename>scheme/winops.scm</filename></ulink>
  at line 117 </para> </refsect1>
</refentry>

<refentry id="menu">
  <refnamediv>
    <refname>menu</refname>
    <refpurpose>Return a menu object with the given attributes.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menu list-of-menuitems #&amp;key
		      (image-side 'menu-side-image)
		      (image-align 'top)
		      (color-bg-image-side 'menu-side-bg-color)
		      (image-bg 'menu-bg-image)
		      (color-text 'menu-text-color)
		      (color-bg 'menu-bg-color)
		      (color-stipple 'menu-stipple-color)
		      (font 'menu-font)
		      (look 'menu-look)
		      (extra #f))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a menu object with the given attributes.
LIST-OF-MENUITEMS is a list of menuitem objects (each created with
<link linkend="make-menuitem"><function>make-menuitem</function></link> or <link linkend="menuitem"><function>menuitem</function></link>).  IMAGE-SIDE is an image object to be
displayed along the left edge of the menu.  IMAGE-ALIGN determines
whether to align that image to the 'top, 'center or 'bottom of the
menu.  COLOR-BG-IMAGE-SIDE is the background color for that image
object.  COLOR-TEXT is a color object or string for the foreground
text color of menu items.  COLOR-BG is a color object or string for
the background color for the menu and menu items.  COLOR-STIPPLE is a
color object for stippled (\"grayed\") menu items.  FONT is a font
object for the font of the menu items.  EXTRA is an extra argument
specific to the menu look used for this menu.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 333 </para> </refsect1>
</refentry>

<refentry id="menu-hilight-factor">
  <refnamediv>
    <refname>menu-hilight-factor</refname>
    <refpurpose>Return the current menu hilight factor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menu-hilight-factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current menu hilight factor.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 578 </para> </refsect1>
</refentry>

<refentry id="menu-prefs">
  <refnamediv>
    <refname>menu-prefs</refname>
    <refpurpose>Generate the <link linkend="-references"><function>Preferences</function></link> menu.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menu-prefs . opts)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Generate the <link linkend="-references"><function>Preferences</function></link> menu.
All the arguments are passed directly to the <link linkend="menu"><function>menu</function></link> function.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/prefs-menu.scm"><filename>scheme/prefs-menu.scm</filename></ulink>
  at line 185 </para> </refsect1>
</refentry>

<refentry id="menu-properties">
  <refnamediv>
    <refname>menu-properties</refname>
    <refpurpose>Returns the a list of the menu properties of MENU, a menu object.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menu-properties menu)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the a list of the menu properties of <parameter>menu</parameter>, a menu object.
The properties returned are:
'(menu-title menu-items side-image side-image-align side-bg-color bg-color
text-color stipple-color
image-bg font extra-options used-shortcut-keys) */
/* FIXJTL: menu-look
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/menu.c"><filename>scwm/menu.c</filename></ulink>
  at line 221 </para> </refsect1>
</refentry>

<refentry id="menu-shadow-factor">
  <refnamediv>
    <refname>menu-shadow-factor</refname>
    <refpurpose>Return the current menu shadow factor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menu-shadow-factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current menu shadow factor.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 605 </para> </refsect1>
</refentry>

<refentry id="menu-style">
  <refnamediv>
    <refname>menu-style</refname>
    <refpurpose>Set various properites for the menus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menu-style #&amp;key
		     (fg #f) (foreground #f)
		     (bg #f) (background #f)
		     (bg-image #f)
		     (stipple #f) (font #f)
		     (look #f)
		     (side-image #f) (side-bg 'unset))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set various properites for the menus.
See <link linkend="make-menu"><function>make-menu</function></link> for options on creation of individual menus.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 240 </para> </refsect1>
</refentry>

<refentry id="menu-p">
  <refnamediv>
    <refname>menu?</refname>
    <refpurpose>Return <literal>#t</literal> if and only if OBJ is a menu object.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menu? obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if and only if <parameter>obj</parameter> is a menu object.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/menu.c"><filename>scwm/menu.c</filename></ulink>
  at line 157 </para> </refsect1>
</refentry>

<refentry id="menuitem">
  <refnamediv>
    <refname>menuitem</refname>
    <refpurpose>Return a menuitem object with the given attributes.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menuitem label #&amp;key image-above image-left
			  extra-label action hover-action unhover-action
			  hotkey-prefs)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a menuitem object with the given attributes.
LABEL is a string for the name on the item.
IMAGE-ABOVE is an image object to show above the label.
IMAGE-LEFT is an image object to show to the left of the label.
EXTRA_LABEL is a second label shown on the item.
ACTION is a menu object or a procedure; if it is a menu object,
the item will popup ACTION as a sub-menu, if it is a procedure,
the procedure will be invoked when the item is selected.
HOVER-ACTION is an procedure to be invoked when the item is
highlighted but not invoked for a moment; UNHOVER-ACTION is
a procedure to be invoked after the HOVER-ACTION is invoked
when the item is unhighlighted.  HOTKEY-PREFS is a string listing
the characters which are appropriate shortcut-keys for the item;
the first not-yet-used-in-this-menu character will be used for
the shortcut key for the menu item.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 299 </para> </refsect1>
</refentry>

<refentry id="menuitem-properties">
  <refnamediv>
    <refname>menuitem-properties</refname>
    <refpurpose>Return a list of the properties of the given MENU-ITEM.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menuitem-properties menu-item)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a list of the properties of the given <parameter>menu-item</parameter>.
<parameter>menu-item</parameter> is a menuitem object, created by <link linkend="make-menuitem"><function>make-menuitem</function></link>.  The
returned list contains the following, in this order:
'(label action extra-label picture-above picture-left hover-action
unhover-action hotkey-preferences)
Note that this is the same as the arguments to the <link linkend="make-menuitem"><function>make-menuitem</function></link>
primitive.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/menuitem.c"><filename>scwm/menuitem.c</filename></ulink>
  at line 91 </para> </refsect1>
</refentry>

<refentry id="menulook-p">
  <refnamediv>
    <refname>menulook?</refname>
    <refpurpose>Return <literal>#t</literal> if OBJ is a menulook object, <literal>#f</literal> otherwise.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(menulook? obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>obj</parameter> is a menulook object, <literal>#f</literal> otherwise.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/menulook.c"><filename>scwm/menulook.c</filename></ulink>
  at line 52 </para> </refsect1>
</refentry>

<refentry id="message">
  <refnamediv>
    <refname>message</refname>
    <refpurpose>Display the string arguments STR in a message window.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(message . str)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Display the string arguments STR in a message window.
Requires the program <link linkend="xmessage"><function>xmessage</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 126 </para> </refsect1>
</refentry>

<refentry id="message-window-colors">
  <refnamediv>
    <refname>message-window-colors</refname>
    <refpurpose>Returns the colors that the message window MWN is displayed with.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(message-window-colors mwn)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the colors that the message window <parameter>mwn</parameter> is displayed with.
These are returned in a list of the form (fg_color,bg_color).
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/message-window.c"><filename>scwm/message-window.c</filename></ulink>
  at line 562 </para> </refsect1>
</refentry>

<refentry id="message-window-font">
  <refnamediv>
    <refname>message-window-font</refname>
    <refpurpose>Returns the font that the message window MWN uses for displaying text.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(message-window-font mwn)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the font that the message window <parameter>mwn</parameter> uses for displaying text.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/message-window.c"><filename>scwm/message-window.c</filename></ulink>
  at line 548 </para> </refsect1>
</refentry>

<refentry id="message-window-hide-x">
  <refnamediv>
    <refname>message-window-hide!</refname>
    <refpurpose>Hide the message window MWN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(message-window-hide! mwn)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Hide the message window <parameter>mwn</parameter>.
See also <link linkend="message-window-show"><function>message-window-show</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/message-window.c"><filename>scwm/message-window.c</filename></ulink>
  at line 483 </para> </refsect1>
</refentry>

<refentry id="message-window-message">
  <refnamediv>
    <refname>message-window-message</refname>
    <refpurpose>Returns the message that message window MWN displays.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(message-window-message mwn)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the message that message window <parameter>mwn</parameter> displays.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/message-window.c"><filename>scwm/message-window.c</filename></ulink>
  at line 517 </para> </refsect1>
</refentry>

<refentry id="message-window-options">
  <refnamediv>
    <refname>message-window-options</refname>
    <refpurpose>Allow specification of message-window behavior for standard actions.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(message-window-options action #&amp;key enable
					follow-window 
					position gravity offset 
					proportional-offset)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Allow specification of message-window behavior for standard actions.

ACTION specifies the action for which this behavior should be
used. Currently, 'interactive-move and 'interactive-resize are the
only useful values. 

ENABLE is a boolean value inidicating whether to use a message window
for that action at all.

GRAVITY indicates which point on the message window is used as the
control point for placing it. See `gravity->alignmnents' for a list of
valid gravity specs.

If FOLLOW-WINDOW is true, the message window will track the window on
which an action is being performed, if applicable. In this case,
POSITION is ignored; OFFSET is taken as a list of the X and Y offsets
from the window's top left corner, and PROPORTIONAL-OFFSET is taken as
a list of factors to multiply by the window's size. For instance, an
OFFSET of (0 0) and a PROPORTIONAL-OFFSET of (0.5 0.5) will place the
message window at the center of of the window being operated on.

However, if FOLLOW-WINDOW is false, or there is no applicable window,
POSITION is interpreted as a list of x, y coordinates at which to
place the message window.

These options are cumulative for repeated calls to
<link linkend="message-window-options"><function>message-window-options</function></link> for the same action.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm message-window)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/message-window.scm"><filename>scheme/message-window.scm</filename></ulink>
  at line 45 </para> </refsect1>
</refentry>

<refentry id="message-window-position">
  <refnamediv>
    <refname>message-window-position</refname>
    <refpurpose>Returns the position that message window MWN is/will be displayed at.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(message-window-position mwn)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the position that message window <parameter>mwn</parameter> is/will be displayed at. This is
returned as a four element list of (x,y,x_align,y_align)
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/message-window.c"><filename>scwm/message-window.c</filename></ulink>
  at line 531 </para> </refsect1>
</refentry>

<refentry id="message-window-relief-p">
  <refnamediv>
    <refname>message-window-relief?</refname>
    <refpurpose>Returns the relief setting for the message window MWN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(message-window-relief? mwn)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the relief setting for the message window <parameter>mwn</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/message-window.c"><filename>scwm/message-window.c</filename></ulink>
  at line 580 </para> </refsect1>
</refentry>

<refentry id="message-window-set-colors-x">
  <refnamediv>
    <refname>message-window-set-colors!</refname>
    <refpurpose>Set the fore- and background colors to be used for the message window MWN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(message-window-set-colors! mwn fg-color bg-color)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the fore- and background colors to be used for the message window <parameter>mwn</parameter>.
The foreground color will be <parameter>fg-color</parameter> and the background color will be <parameter>bg-color</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/message-window.c"><filename>scwm/message-window.c</filename></ulink>
  at line 339 </para> </refsect1>
</refentry>

<refentry id="message-window-set-font-x">
  <refnamediv>
    <refname>message-window-set-font!</refname>
    <refpurpose>Set the font to be used for the message window MWN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(message-window-set-font! mwn fnt)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the font to be used for the message window <parameter>mwn</parameter>.
The font will be <parameter>fnt</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/message-window.c"><filename>scwm/message-window.c</filename></ulink>
  at line 311 </para> </refsect1>
</refentry>

<refentry id="message-window-set-message-x">
  <refnamediv>
    <refname>message-window-set-message!</refname>
    <refpurpose>Changes the message displayed by the message window MWN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(message-window-set-message! mwn message)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Changes the message displayed by the message window <parameter>mwn</parameter>.
The message will be <parameter>message</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/message-window.c"><filename>scwm/message-window.c</filename></ulink>
  at line 286 </para> </refsect1>
</refentry>

<refentry id="message-window-set-position-x">
  <refnamediv>
    <refname>message-window-set-position!</refname>
    <refpurpose>Set the position to be used for the message window MWN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(message-window-set-position! mwn x y #&amp;optional x-align y-align)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the position to be used for the message window <parameter>mwn</parameter>.
<parameter>x</parameter> and <parameter>y</parameter> specify the position of the control point of the window,
while <parameter>x-align</parameter> and <parameter>y-align</parameter> specify a fraction of the width and
height of the window to offset the window for alignment.
<parameter>x-align</parameter> and <parameter>y-align</parameter> should each be in the range [0,-1].
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/message-window.c"><filename>scwm/message-window.c</filename></ulink>
  at line 379 </para> </refsect1>
</refentry>

<refentry id="message-window-set-relief-x">
  <refnamediv>
    <refname>message-window-set-relief!</refname>
    <refpurpose>Sets the relief for the window MWN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(message-window-set-relief! mwn rlf)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Sets the relief for the window <parameter>mwn</parameter>. Relief will be <parameter>rlf</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/message-window.c"><filename>scwm/message-window.c</filename></ulink>
  at line 434 </para> </refsect1>
</refentry>

<refentry id="message-window-show-x">
  <refnamediv>
    <refname>message-window-show!</refname>
    <refpurpose>Displays the message window MWN on the screen.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(message-window-show! mwn)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Displays the message window <parameter>mwn</parameter> on the screen.
Be sure to keep the displayed message window somewhere
do that you can call <link linkend="message-window-hide-x"><function>message-window-hide!</function></link> (otherwise
the window will not ever disappear).
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/message-window.c"><filename>scwm/message-window.c</filename></ulink>
  at line 453 </para> </refsect1>
</refentry>

<refentry id="message-window-style">
  <refnamediv>
    <refname>message-window-style</refname>
    <refpurpose>Set visual style of MSGWIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(message-window-style msgwin #&amp;key (font #f) (fg #f) (bg #f))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set visual style of MSGWIN.
FONT specifies the font, FG the foreground color, and BG the
background color.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm message-window)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/message-window.scm"><filename>scheme/message-window.scm</filename></ulink>
  at line 205 </para> </refsect1>
</refentry>

<refentry id="message-window-visible-p">
  <refnamediv>
    <refname>message-window-visible?</refname>
    <refpurpose>Return <literal>#t</literal> if the message window MWN is visible, <literal>#f</literal> otherwise.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(message-window-visible? mwn)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if the message window <parameter>mwn</parameter> is visible, <literal>#f</literal> otherwise.
See also <link linkend="message-window-show"><function>message-window-show</function></link>, <link linkend="message-window-hide"><function>message-window-hide</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/message-window.c"><filename>scwm/message-window.c</filename></ulink>
  at line 502 </para> </refsect1>
</refentry>

<refentry id="message-window-p">
  <refnamediv>
    <refname>message-window?</refname>
    <refpurpose>Returns <literal>#t</literal> if MWN is a msgwindow object, otherwise <literal>#f</literal>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(message-window? mwn)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns <literal>#t</literal> if <parameter>mwn</parameter> is a msgwindow object, otherwise <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/message-window.c"><filename>scwm/message-window.c</filename></ulink>
  at line 66 </para> </refsect1>
</refentry>

<refentry id="mod-desk-size-x">
  <refnamediv>
    <refname>mod-desk-size!</refname>
    <refpurpose>Modify the current desktop size by the given parameter.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(mod-desk-size! dx dy)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Modify the current desktop size by the given parameter.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm prefs-menu)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/prefs-menu.scm"><filename>scheme/prefs-menu.scm</filename></ulink>
  at line 60 </para> </refsect1>
</refentry>

<refentry id="mod-mask-alt">
  <refnamediv>
    <refname>mod-mask-alt</refname>
    <refpurpose>Return the bit-mask for the Alt modifier key, or <literal>#f</literal>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(mod-mask-alt)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the bit-mask for the Alt modifier key, or <literal>#f</literal>.
Returns <literal>#f</literal> if and only if there is no key bound to act as Alt, otherwise
returns a power of two corresponding to the bit-mask of the modifier
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/binding.c"><filename>scwm/binding.c</filename></ulink>
  at line 953 </para> </refsect1>
</refentry>

<refentry id="mod-mask-control">
  <refnamediv>
    <refname>mod-mask-control</refname>
    <refpurpose>Return the bit-mask for the Control modifier key, or <literal>#f</literal>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(mod-mask-control)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the bit-mask for the Control modifier key, or <literal>#f</literal>.
Returns <literal>#f</literal> if and only if there is no key bound to act as Control, otherwise
returns a power of two corresponding to the bit-mask of the modifier
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/binding.c"><filename>scwm/binding.c</filename></ulink>
  at line 937 </para> </refsect1>
</refentry>

<refentry id="mod-mask-hyper">
  <refnamediv>
    <refname>mod-mask-hyper</refname>
    <refpurpose>Return the bit-mask for the Hyper modifier key, or <literal>#f</literal>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(mod-mask-hyper)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the bit-mask for the Hyper modifier key, or <literal>#f</literal>.
Returns <literal>#f</literal> if and only if there is no key bound to act as Hyper, otherwise
returns a power of two corresponding to the bit-mask of the modifier
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/binding.c"><filename>scwm/binding.c</filename></ulink>
  at line 961 </para> </refsect1>
</refentry>

<refentry id="mod-mask-meta">
  <refnamediv>
    <refname>mod-mask-meta</refname>
    <refpurpose>Return the bit-mask for the Meta modifier key, or <literal>#f</literal>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(mod-mask-meta)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the bit-mask for the Meta modifier key, or <literal>#f</literal>.
Returns <literal>#f</literal> if and only if there is no key bound to act as Meta, otherwise
returns a power of two corresponding to the bit-mask of the modifier
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/binding.c"><filename>scwm/binding.c</filename></ulink>
  at line 945 </para> </refsect1>
</refentry>

<refentry id="mod-mask-shift">
  <refnamediv>
    <refname>mod-mask-shift</refname>
    <refpurpose>Return the bit-mask for the Shift modifier key, or <literal>#f</literal>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(mod-mask-shift)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the bit-mask for the Shift modifier key, or <literal>#f</literal>.
Returns <literal>#f</literal> if and only if there is no key bound to act as Shift, otherwise
returns a power of two corresponding to the bit-mask of the modifier
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/binding.c"><filename>scwm/binding.c</filename></ulink>
  at line 929 </para> </refsect1>
</refentry>

<refentry id="mod-mask-super">
  <refnamediv>
    <refname>mod-mask-super</refname>
    <refpurpose>Return the bit-mask for the Super modifier key, or <literal>#f</literal>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(mod-mask-super)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the bit-mask for the Super modifier key, or <literal>#f</literal>.
Returns <literal>#f</literal> if and only if there is no key bound to act as Super, otherwise
returns a power of two corresponding to the bit-mask of the modifier
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/binding.c"><filename>scwm/binding.c</filename></ulink>
  at line 970 </para> </refsect1>
</refentry>

<refentry id="module-event-name-from-number">
  <refnamediv>
    <refname>module-event-name-from-number</refname>
    <refpurpose>Return the string module event name for event number NUM.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(module-event-name-from-number num)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the string module event name for event number NUM.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/module-types.scm"><filename>scheme/module-types.scm</filename></ulink>
  at line 64 </para> </refsect1>
</refentry>

<refentry id="mouse-event-type">
  <refnamediv>
    <refname>mouse-event-type</refname>
    <refpurpose>Return a symbol corresponding to the type of the most recent mouse event.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(mouse-event-type)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a symbol corresponding to the type of the most recent mouse event.
Return value is one of 'motion, 'click, 'one-and-a-half-clicks, 'double-click.
You can <link linkend="case"><function>case</function></link> on this symbol in a procedure bound to a mouse event
to determine, e.g., whether the user single clicked or double clicked.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/binding.c"><filename>scwm/binding.c</filename></ulink>
  at line 916 </para> </refsect1>
</refentry>

<refentry id="mouse-focus-click-raises-p">
  <refnamediv>
    <refname>mouse-focus-click-raises?</refname>
    <refpurpose>Returns a boolean value indicating whether a mouse-focus-click will raise the window.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(mouse-focus-click-raises?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns a boolean value indicating whether a mouse-focus-click will raise the window.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 438 </para> </refsect1>
</refentry>

<refentry id="move-inside-aligned-viewport">
  <refnamediv>
    <refname>move-inside-aligned-viewport</refname>
    <refpurpose>Ensure that WIN is entirely inside the XX, YY viewport if possible.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(move-inside-aligned-viewport win xx yy)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Ensure that WIN is entirely inside the XX, YY viewport if possible.
XX and YY are given in units of the display size.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm virtual)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/virtual.scm"><filename>scheme/virtual.scm</filename></ulink>
  at line 99 </para> </refsect1>
</refentry>

<refentry id="move-inside-current-viewport">
  <refnamediv>
    <refname>move-inside-current-viewport</refname>
    <refpurpose>Ensure that WIN is entirely inside the current viewport, if possible.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(move-inside-current-viewport win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Ensure that WIN is entirely inside the current viewport, if possible.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm virtual)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/virtual.scm"><filename>scheme/virtual.scm</filename></ulink>
  at line 104 </para> </refsect1>
</refentry>

<refentry id="move-inside-own-viewport">
  <refnamediv>
    <refname>move-inside-own-viewport</refname>
    <refpurpose>Ensure that WIN is entirely inside the closest viewport to its center.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(move-inside-own-viewport win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Ensure that WIN is entirely inside the closest viewport to its center.
The viewport selected will be an integral multiple of the desk size.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm virtual)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/virtual.scm"><filename>scheme/virtual.scm</filename></ulink>
  at line 108 </para> </refsect1>
</refentry>

<refentry id="move-inside-viewport">
  <refnamediv>
    <refname>move-inside-viewport</refname>
    <refpurpose>Ensure that WIN is entirely inside the X, Y viewport if possible.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(move-inside-viewport win x y)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Ensure that WIN is entirely inside the X, Y viewport if possible.
X and Y are given in pixels.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm virtual)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/virtual.scm"><filename>scheme/virtual.scm</filename></ulink>
  at line 87 </para> </refsect1>
</refentry>

<refentry id="move-pointer">
  <refnamediv>
    <refname>move-pointer</refname>
    <refpurpose>Move the X11 pointer X pixels to the right, and Y pixels down.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(move-pointer x y)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move the X11 pointer X pixels to the right, and Y pixels down.
If X is negative, moves to the left.  If Y is negative moves up.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 165 </para> </refsect1>
</refentry>

<refentry id="move-pointer-to">
  <refnamediv>
    <refname>move-pointer-to</refname>
    <refpurpose>Move the mouse pointer to viewport coordinates SX, SY.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(move-pointer-to sx sy)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move the mouse pointer to viewport coordinates <parameter>sx</parameter>, <parameter>sy</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 252 </para> </refsect1>
</refentry>

<refentry id="move-to">
  <refnamediv>
    <refname>move-to</refname>
    <refpurpose>Move WIN to viewport position X, Y.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(move-to x y 
			#&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move WIN to viewport position X, Y.
If X or Y is <literal>#f</literal>, then do not move along that axis (use existing
value for that coordinate).
See <link linkend="move-window"><function>move-window</function></link> if you wish to move a window to a virtual position.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 173 </para> </refsect1>
</refentry>

<refentry id="move-to-viewport">
  <refnamediv>
    <refname>move-to-viewport</refname>
    <refpurpose>Move to the viewport numbered (XX,YY).</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(move-to-viewport xx yy)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move to the viewport numbered (XX,YY).
The (0,0) viewport is the starting viewport.  XX and YY are
full display-size increments (e.g., (1,0) is the viewport
just to the right of the home (0,0) viewport).
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm virtual)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/virtual.scm"><filename>scheme/virtual.scm</filename></ulink>
  at line 118 </para> </refsect1>
</refentry>

<refentry id="move-viewport">
  <refnamediv>
    <refname>move-viewport</refname>
    <refpurpose>Move the viewport onto the virtual desktop relatively.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(move-viewport x y)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move the viewport onto the virtual desktop relatively.
Moves X pixels horizontally, to the right if positive, to the left if
negative, and Y pixels vertically, down if positive, up if negative.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 228 </para> </refsect1>
</refentry>

<refentry id="move-window">
  <refnamediv>
    <refname>move-window</refname>
    <refpurpose>Move WIN to virtual coordinates X, Y.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(move-window x y #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move <parameter>win</parameter> to virtual coordinates <parameter>x</parameter>, <parameter>y</parameter>.
If <parameter>x</parameter> is <literal>#f</literal>, then <parameter>x</parameter> defaults to the current <parameter>x</parameter> position of <parameter>win</parameter>.
If <parameter>y</parameter> is <literal>#f</literal>, then <parameter>y</parameter> defaults to the current <parameter>y</parameter> position of <parameter>win</parameter>.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2164 </para> </refsect1>
</refentry>

<refentry id="move-window-relative">
  <refnamediv>
    <refname>move-window-relative</refname>
    <refpurpose>Move WIN from its current position by (dx,dy) pixels.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(move-window-relative dx dy #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move WIN from its current position by (dx,dy) pixels.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 567 </para> </refsect1>
</refentry>

<refentry id="move-window-to-desk">
  <refnamediv>
    <refname>move-window-to-desk</refname>
    <refpurpose>Move WIN to DESK.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(move-window-to-desk desk #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move <parameter>win</parameter> to <parameter>desk</parameter>. <parameter>desk</parameter> is an integer desk identifier. <parameter>win</parameter>
defaults to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2328 </para> </refsect1>
</refentry>

<refentry id="move-window-to-viewport">
  <refnamediv>
    <refname>move-window-to-viewport</refname>
    <refpurpose>Move WIN to the viewport numbered (XX,YY).</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(move-window-to-viewport xx yy #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move WIN to the viewport numbered (XX,YY).
The (0,0) viewport is the starting viewport.  XX and YY are
full display-size increments (e.g., (1,0) is the viewport
just to the right of the home (0,0) viewport).
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm virtual)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/virtual.scm"><filename>scheme/virtual.scm</filename></ulink>
  at line 73 </para> </refsect1>
</refentry>

<refentry id="ms-to-usec">
  <refnamediv>
    <refname>ms->usec</refname>
    <refpurpose>Convert MS milliseconds into an equivalent number of microseconds.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(ms->usec ms)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Convert MS milliseconds into an equivalent number of microseconds.
Especially useful for add-hook! and other timing related procedures
that take microseconds.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 442 </para> </refsect1>
</refentry>

<refentry id="nearest-aligned-viewport">
  <refnamediv>
    <refname>nearest-aligned-viewport</refname>
    <refpurpose>Compute the nearest valid integral viewport position to POS.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(nearest-aligned-viewport pos)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Compute the nearest valid integral viewport position to POS.
POS is a list of x and y virtual coordinates in that order. The
viewport coordinates returned will be in the same format and will be a
integral multiples of the desk size.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm virtual)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/virtual.scm"><filename>scheme/virtual.scm</filename></ulink>
  at line 47 </para> </refsect1>
</refentry>

<refentry id="netpbm-loader">
  <refnamediv>
    <refname>netpbm-loader</refname>
    <refpurpose>Tries to load an arbitrary image using the netpbm packge.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(netpbm-loader fname)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Tries to load an arbitrary image using the netpbm packge.
Uses <link linkend="anytoppm"><function>anytoppm</function></link> and <link linkend="ppmtoxpm"><function>ppmtoxpm</function></link> to try to convert the file to an xpm,
then attempts to load it as such.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm image-loaders)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/image-loaders.scm"><filename>scheme/image-loaders.scm</filename></ulink>
  at line 38 </para> </refsect1>
</refentry>

<refentry id="netscape-goto-cut-buffer-url">
  <refnamediv>
    <refname>netscape-goto-cut-buffer-url</refname>
    <refpurpose>Make netscape go to the URL in CUT_BUFFER0.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(netscape-goto-cut-buffer-url
                #&amp;optional (new netscape-new-window))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Make netscape go to the URL in CUT_BUFFER0.
This permits you to just select a URL and use this function
to go to that page.
The optional argument specifies whether a new window should be opened.
It defaults to <link linkend="netscape-new-window"><function>netscape-new-window</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 641 </para> </refsect1>
</refentry>

<refentry id="netscape-win">
  <refnamediv>
    <refname>netscape-win</refname>
    <refpurpose>Return a netscape window, prefer a visible netscape window.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(netscape-win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a netscape window, prefer a visible netscape window.
May error if no netscape windows are present.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 580 </para> </refsect1>
</refentry>

<refentry id="next-window">
  <refnamediv>
    <refname>next-window</refname>
    <refpurpose>Circulate to the next matching window.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(next-window #&amp;key (window (get-window #f #f))
			     (only '()) (except '()) (proc window-list-proc))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Circulate to the next matching window.
If WINDOW is given, circulate to that window.
ONLY and EXCEPT control which windows match --- see <link linkend="list-windows"><function>list-windows</function></link> for 
details.
PROC is a procedure of one argument which does the work after the
windows are circulated.  PROC defaults to <link linkend="window-list-proc"><function>window-list-proc</function></link>.
See also <link linkend="prev-window"><function>prev-window</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winlist)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winlist.scm"><filename>scheme/winlist.scm</filename></ulink>
  at line 248 </para> </refsect1>
</refentry>

<refentry id="normal-border">
  <refnamediv>
    <refname>normal-border</refname>
    <refpurpose>Cause WIN to be decorated with a normal border.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(normal-border  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter> to be decorated with a normal border.
This means that there will be resize handles in the corners. <parameter>win</parameter>
defaults to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2876 </para> </refsect1>
</refentry>

<refentry id="not-menu-background">
  <refnamediv>
    <refname>not-menu-background</refname>
    <refpurpose>Return the default background color for icons, window frames, etc.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(not-menu-background)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the default background color for icons, window frames, etc.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 794 </para> </refsect1>
</refentry>

<refentry id="not-menu-foreground">
  <refnamediv>
    <refname>not-menu-foreground</refname>
    <refpurpose>Return the default foreground color for icons, titlebars, etc.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(not-menu-foreground)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the default foreground color for icons, titlebars, etc.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 759 </para> </refsect1>
</refentry>

<refentry id="on-current-desk-p">
  <refnamediv>
    <refname>on-current-desk?</refname>
    <refpurpose>Return <literal>#t</literal> if WIN is on the current desk.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(on-current-desk? #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if WIN is on the current desk.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm wininfo)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/wininfo.scm"><filename>scheme/wininfo.scm</filename></ulink>
  at line 41 </para> </refsect1>
</refentry>

<refentry id="on-desk-n-p">
  <refnamediv>
    <refname>on-desk-n?</refname>
    <refpurpose>Returns a function which takes WIN and returns <literal>#t</literal> if WIN is on desk N, else <literal>#f</literal>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>((on-desk-n? n) #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns a function which takes WIN and returns <literal>#t</literal> if WIN is on desk N, else <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm wininfo)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/wininfo.scm"><filename>scheme/wininfo.scm</filename></ulink>
  at line 37 </para> </refsect1>
</refentry>

<refentry id="on-desk-placement">
  <refnamediv>
    <refname>on-desk-placement</refname>
    <refpurpose>Return a procedure that takes a window and places it on DESK.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(on-desk-placement desk)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a procedure that takes a window and places it on DESK.
The procedure will act just like calling <link linkend="place-on-desk"><function>place-on-desk</function></link> on the
window with the same DESK argument.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm placement)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/placement.scm"><filename>scheme/placement.scm</filename></ulink>
  at line 85 </para> </refsect1>
</refentry>

<refentry id="on-desk-p">
  <refnamediv>
    <refname>on-desk?</refname>
    <refpurpose>Return <literal>#t</literal> if WIN is on desk N, else <literal>#f</literal>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(on-desk? n #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if WIN is on desk N, else <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm wininfo)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/wininfo.scm"><filename>scheme/wininfo.scm</filename></ulink>
  at line 33 </para> </refsect1>
</refentry>

<refentry id="opaque-move">
  <refnamediv>
    <refname>opaque-move</refname>
    <refpurpose>Move WIN interactively, opaquely.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(opaque-move  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move <parameter>win</parameter> interactively, opaquely.
This allows the user to drag the window itself around the screen. <parameter>win</parameter>
defaults to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/move.c"><filename>scwm/move.c</filename></ulink>
  at line 549 </para> </refsect1>
</refentry>

<refentry id="opaque-resize">
  <refnamediv>
    <refname>opaque-resize</refname>
    <refpurpose>Resize WIN interactively, opaquely.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(opaque-resize  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Resize <parameter>win</parameter> interactively, opaquely.
This allows the user to drag the boundaries of the window to set its
size. <parameter>win</parameter> defaults to the window context in the usual way if not
specified. The window is updated immediately as the size changes take
place.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/resize.c"><filename>scwm/resize.c</filename></ulink>
  at line 590 </para> </refsect1>
</refentry>

<refentry id="or-map">
  <refnamediv>
    <refname>or-map</refname>
    <refpurpose>Apply PROC repeatedly, returning the first true value.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(or-map proc first . rest)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Apply PROC repeatedly, returning the first true value.
PROC is applied to elements of FIRST and the lists comprising REST
much as <link linkend="map"><function>map</function></link> would do it. If PROC never returns a true value, return
<literal>#f</literal> instead. If all the lists are empty, return <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm listops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/listops.scm"><filename>scheme/listops.scm</filename></ulink>
  at line 128 </para> </refsect1>
</refentry>

<refentry id="percent-visible">
  <refnamediv>
    <refname>percent-visible</refname>
    <refpurpose>Return the percent of WIN currently in the viewport as a real in [0,100].</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(percent-visible #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the percent of WIN currently in the viewport as a real in [0,100].
Note that this does not consider other windows which may
obscure WIN;  it only checks what fraction of WIN would be visible
if it were on top (unobscured).
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm wininfo)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/wininfo.scm"><filename>scheme/wininfo.scm</filename></ulink>
  at line 103 </para> </refsect1>
</refentry>

<refentry id="place-at-point">
  <refnamediv>
    <refname>place-at-point</refname>
    <refpurpose>Place WIN at the pointer position.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(place-at-point win #&amp;key (offset '(0 0)) 
			       (proportional-offset '(-0.5 -0.5)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Place WIN at the pointer position.

If the keyword argument OFFSET is specified, it is interpreted as a
list of x and y offsets to add to the pointer position.

If the keyword argument PROPORTIONAL-OFFSET is specified, it is
interpreted as a list of numbers to multiply by the window's width and
height, and is treated as an extra offset.

The defaults are (0 0) for OFFSET and (-0.5 -0.5) for
PROPORTIONAL-OFFSET, with the result that by default the window is
centered at the mouse pointer position.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm placement)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/placement.scm"><filename>scheme/placement.scm</filename></ulink>
  at line 57 </para> </refsect1>
</refentry>

<refentry id="place-in-viewport">
  <refnamediv>
    <refname>place-in-viewport</refname>
    <refpurpose>Move WIN to the (XX, YY) viewport.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(place-in-viewport win xx yy)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move WIN to the (XX, YY) viewport.
XX and YY are full display-size increments (e.g., (1,0) is the
viewport just to the right of the home (0,0) viewport).
This is equivalent to <link linkend="move-window-to-viewport"><function>move-window-to-viewport</function></link>, just named
differently for clarity and convenience.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm placement)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/placement.scm"><filename>scheme/placement.scm</filename></ulink>
  at line 34 </para> </refsect1>
</refentry>

<refentry id="place-on-default-desk">
  <refnamediv>
    <refname>place-on-default-desk</refname>
    <refpurpose>Place WIN on a desk according to the default algorithm.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(place-on-default-desk win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Place <parameter>win</parameter> on a desk according to the default algorithm.
Place a window with it's window group, with a window it is transient
for, on the desk it was on previous to a restart, on the desk
specified with the starts-on-desk flag,
This is called as part of <link linkend="default-placement-proc"><function>default-placement-proc</function></link>.  It could also be
used in user-defined placement procedures (see
<link linkend="set-window-placement-proc-x"><function>set-window-placement-proc!</function></link>).
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/placement.c"><filename>scwm/placement.c</filename></ulink>
  at line 392 </para> </refsect1>
</refentry>

<refentry id="place-on-desk">
  <refnamediv>
    <refname>place-on-desk</refname>
    <refpurpose>Move window WIN to desk DESK.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(place-on-desk win desk)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move window WIN to desk DESK.
This is equivalent to <link linkend="move-window-to-desk"><function>move-window-to-desk</function></link>, just named
differently for clarity and convenience.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm placement)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/placement.scm"><filename>scheme/placement.scm</filename></ulink>
  at line 42 </para> </refsect1>
</refentry>

<refentry id="plain-border">
  <refnamediv>
    <refname>plain-border</refname>
    <refpurpose>Cause WIN to be decorated with a plain border.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(plain-border  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter> to be decorated with a plain border.
This means that there will be no resize handles in the corners. <parameter>win</parameter>
defaults to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2908 </para> </refsect1>
</refentry>

<refentry id="pointer-position">
  <refnamediv>
    <refname>pointer-position</refname>
    <refpurpose>Return the current position of the mouse pointer in pixels.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(pointer-position)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current position of the mouse pointer in pixels.
The return value is a two-element list of the x and y coordinates.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 237 </para> </refsect1>
</refentry>

<refentry id="popup-menu">
  <refnamediv>
    <refname>popup-menu</refname>
    <refpurpose>Popup MENU, a menu object, and warp to the first item if WARP-TO-FIRST? is <literal>#t</literal>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(popup-menu menu #&amp;optional warp-to-first? x-pos y-pos left-side?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Popup <parameter>menu</parameter>, a menu object, and warp to the first item if <parameter>warp-to-first?</parameter> is <literal>#t</literal>.
<parameter>x-pos</parameter>, <parameter>y-pos</parameter> specify a desired position for the menu, and <parameter>left-side?</parameter> should be
<literal>#t</literal> if the menu should be left justified against <parameter>x-pos</parameter>, or <literal>#f</literal> if it should be
right justified against <parameter>x-pos</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/menu.c"><filename>scwm/menu.c</filename></ulink>
  at line 1435 </para> </refsect1>
</refentry>

<refentry id="popup-menu-from-decoration">
  <refnamediv>
    <refname>popup-menu-from-decoration</refname>
    <refpurpose>Popup MENU from WIN's decoration numbered BUTTON-NUMBER.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(popup-menu-from-decoration menu win button-number)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Popup MENU from WIN's decoration numbered BUTTON-NUMBER.
This positions the popup menu appropriately.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 448 </para> </refsect1>
</refentry>

<refentry id="position-message-window-x">
  <refnamediv>
    <refname>position-message-window!</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(position-message-window! msgwin x y gravity)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm message-window)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/message-window.scm"><filename>scheme/message-window.scm</filename></ulink>
  at line 33 </para> </refsect1>
</refentry>

<refentry id="prev-window">
  <refnamediv>
    <refname>prev-window</refname>
    <refpurpose>Circulate to the previous matching window.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(prev-window #&amp;key (window (get-window #f #f))
			     (only '()) (except '()) (proc window-list-proc))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Circulate to the previous matching window.
If WINDOW is given, circulate to that window.
ONLY and EXCEPT control which windows match --- see <link linkend="list-windows"><function>list-windows</function></link> for 
details.
PROC is a procedure of one argument which does the work after the
windows are circulated.  PROC defaults to <link linkend="window-list-proc"><function>window-list-proc</function></link>.
See also <link linkend="next-window"><function>next-window</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winlist.scm"><filename>scheme/winlist.scm</filename></ulink>
  at line 260 </para> </refsect1>
</refentry>

<refentry id="print-window">
  <refnamediv>
    <refname>print-window</refname>
    <refpurpose>Print WIN using xpr and lpr.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(print-window #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Print WIN using xpr and lpr.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winops.scm"><filename>scheme/winops.scm</filename></ulink>
  at line 248 </para> </refsect1>
</refentry>

<refentry id="printable-char-to-keysym-string">
  <refnamediv>
    <refname>printable-char->keysym-string</refname>
    <refpurpose>Return the keysym string corresponding to a printable character.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(printable-char->keysym-string char)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the keysym string corresponding to a printable character.
CHAR is a scheme character.  The return value is appropriate for
use by <link linkend="send-key-press"><function>send-key-press</function></link>.  See also <link linkend="X-synthetic-send-string"><function>X-synthetic-send-string</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 247 </para> </refsect1>
</refentry>

<refentry id="program-exists-p">
  <refnamediv>
    <refname>program-exists?</refname>
    <refpurpose>Return <literal>#t</literal> if PROGRAM-NAME is found as an executable in the current $PATH.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(program-exists? program-name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if PROGRAM-NAME is found as an executable in the current $PATH.
Returns <literal>#f</literal> otherwise.  See <link linkend="cached-program-exists-p"><function>cached-program-exists?</function></link> for a more efficient
version of this.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 116 </para> </refsect1>
</refentry>

<refentry id="put-string-in-palm-clipboard">
  <refnamediv>
    <refname>put-string-in-palm-clipboard</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(put-string-in-palm-clipboard str)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 712 </para> </refsect1>
</refentry>

<refentry id="quotify-single-quotes">
  <refnamediv>
    <refname>quotify-single-quotes</refname>
    <refpurpose>Return a string that has single quote characters backslashified.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(quotify-single-quotes str)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a string that has single quote characters backslashified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 121 </para> </refsect1>
</refentry>

<refentry id="raise-by-one">
  <refnamediv>
    <refname>raise-by-one</refname>
    <refpurpose>Raise window W above the next window up that overlaps it.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(raise-by-one #&amp;optional (w (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Raise window W above the next window up that overlaps it.
W defaults to the window context in the usual way.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/stacking.scm"><filename>scheme/stacking.scm</filename></ulink>
  at line 77 </para> </refsect1>
</refentry>

<refentry id="raise-window">
  <refnamediv>
    <refname>raise-window</refname>
    <refpurpose>Raise WIN to the top of the window stack.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(raise-window  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Raise <parameter>win</parameter> to the top of the window stack.
Stays-on-top windows still take priority. <parameter>win</parameter> defaults to the window
context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1695 </para> </refsect1>
</refentry>

<refentry id="raise-window-above">
  <refnamediv>
    <refname>raise-window-above</refname>
    <refpurpose>Restack window W immediately above W2.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(raise-window-above w w2)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Restack window W immediately above W2.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm stacking)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/stacking.scm"><filename>scheme/stacking.scm</filename></ulink>
  at line 62 </para> </refsect1>
</refentry>

<refentry id="raised-p">
  <refnamediv>
    <refname>raised?</refname>
    <refpurpose>Return <literal>#t</literal> if WIN is currently raised, <literal>#f</literal> if not.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(raised?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>win</parameter> is currently raised, <literal>#f</literal> if not.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified. A window is considered to be raised if the application
window (not the frame) is unobscured (or if this was the last
window you called <link linkend="raise-window"><function>raise-window</function></link> on).
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1828 </para> </refsect1>
</refentry>

<refentry id="random-place-window">
  <refnamediv>
    <refname>random-place-window</refname>
    <refpurpose>Places WIN just as if being placed by fvwm2's RandomPlacement.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(random-place-window win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Places <parameter>win</parameter> just as if being placed by fvwm2's RandomPlacement.
This placement is not truly random; it is based on two state variables
which are incremented for the x and y coordinates, and which wrap
around once a window would be forced off the screen. The placement is
fairly arbitrary, but always succeeds, and so avoids user
interaction. <literal>#t</literal> is always returned.
This is called as part of <link linkend="default-placement-proc"><function>default-placement-proc</function></link>.  It could also be
used in user-defined placement procedures (see
<link linkend="set-window-placement-proc-x"><function>set-window-placement-proc!</function></link>).
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/placement.c"><filename>scwm/placement.c</filename></ulink>
  at line 501 </para> </refsect1>
</refentry>

<refentry id="recapture">
  <refnamediv>
    <refname>recapture</refname>
    <refpurpose>Recapture all the windows.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(recapture)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Recapture all the windows.
This destroys all the current frame windows and recreate them from
scratch. This is hopefully not necessary during normal operation.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 275 </para> </refsect1>
</refentry>

<refentry id="reduce">
  <refnamediv>
    <refname>reduce</refname>
    <refpurpose>Repeatedly apply PROC to a current value and a member of L.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(reduce proc init l)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Repeatedly apply PROC to a current value and a member of L.  The
initial current value is the first member of the list. The list is
processed from left to right. The final result is returned, unless the
list is empty, in which case INIT is returned. Compare to
<link linkend="accumulate"><function>accumulate</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm listops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/listops.scm"><filename>scheme/listops.scm</filename></ulink>
  at line 61 </para> </refsect1>
</refentry>

<refentry id="refresh">
  <refnamediv>
    <refname>refresh</refname>
    <refpurpose>Make sure all windows and their decorations are up to date.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(refresh)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Make sure all windows and their decorations are up to date.
This forces a redraw of the entire current viewport. Should not be
necessary during normal operation.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 159 </para> </refsect1>
</refentry>

<refentry id="refresh-window">
  <refnamediv>
    <refname>refresh-window</refname>
    <refpurpose>Refresh the decorations on window WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(refresh-window  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Refresh the decorations on window <parameter>win</parameter>.
Refreshing ensuring that everything, including the decorations is up
to date. <link linkend="refresh"><function>refresh</function></link> does this in a more efficient way for all windows,
as well as the root. <parameter>win</parameter> defaults to the window context in the usual
way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2304 </para> </refsect1>
</refentry>

<refentry id="register-fvwm2-module-config">
  <refnamediv>
    <refname>register-fvwm2-module-config</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(register-fvwm2-module-config module-type . args)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm fvwm-module)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/fvwm-module.scm"><filename>scheme/fvwm-module.scm</filename></ulink>
  at line 363 </para> </refsect1>
</refentry>

<refentry id="register-image-loader">
  <refnamediv>
    <refname>register-image-loader</refname>
    <refpurpose>Register PROC as the loader to use for images ending in EXTENSION.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(register-image-loader extension proc)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Register <parameter>proc</parameter> as the loader to use for images ending in <parameter>extension</parameter>.
<parameter>extension</parameter> must be a string beginning with a period, the
empty string (for files with no extension), or the string "default"
(for files that no other image loader succeeds in loading). <parameter>proc</parameter> will
be called with the full pathname of the image and should return an
image object, or <literal>#f</literal> if it succeeds.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/image.c"><filename>scwm/image.c</filename></ulink>
  at line 299 </para> </refsect1>
</refentry>

<refentry id="remove-input-hook-x">
  <refnamediv>
    <refname>remove-input-hook!</refname>
    <refpurpose>Remove an input hook identified by HANDLE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(remove-input-hook! handle)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Remove an input hook identified by <parameter>handle</parameter>.
<parameter>handle</parameter> should be an object that was returned by <link linkend="add-input-hook-x"><function>add-input-hook!</function></link>. An
input hook may safely remove itself.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/callbacks.c"><filename>scwm/callbacks.c</filename></ulink>
  at line 615 </para> </refsect1>
</refentry>

<refentry id="remove-timer-hook-x">
  <refnamediv>
    <refname>remove-timer-hook!</refname>
    <refpurpose>Remove a timer hook identified by HANDLE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(remove-timer-hook! handle)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Remove a timer hook identified by <parameter>handle</parameter>.
The <parameter>handle</parameter> should be an object that was returned by
<link linkend="add-timer-hook-x"><function>add-timer-hook!</function></link>. No warning or error will occur if <parameter>handle</parameter> is for a
timer hook that has already been triggered.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/callbacks.c"><filename>scwm/callbacks.c</filename></ulink>
  at line 490 </para> </refsect1>
</refentry>

<refentry id="report-scwm-usage">
  <refnamediv>
    <refname>report-scwm-usage</refname>
    <refpurpose>Log your usage of scwm to a central host.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(report-scwm-usage)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Log your usage of scwm to a central host.
The data sent includes the version of scwm you are running and your
hostname. If the environment variable SCWM_DO_NOT_LOG_USAGE is set,
however, no message will be sent even if this function is called.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/report-usage.scm"><filename>scheme/report-usage.scm</filename></ulink>
  at line 42 </para> </refsect1>
</refentry>

<refentry id="reset-background-x">
  <refnamediv>
    <refname>reset-background!</refname>
    <refpurpose>Resets the root window to the default "weave".</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(reset-background!)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Resets the root window to the default "weave".
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/modules/background/background.c"><filename>modules/background/background.c</filename></ulink>
  at line 234 </para> </refsect1>
</refentry>

<refentry id="reset-scwmexec-protocol">
  <refnamediv>
    <refname>reset-scwmexec-protocol</refname>
    <refpurpose>Reset the scwmexec protocol.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(reset-scwmexec-protocol)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Reset the scwmexec protocol.
This procedure removes the "XA_SCWMEXEC_REQUEST" property on the
root window.  It should not be necessary but may be useful in case
your X server goes awry (and otherwise you would have to restart your
X server).  Use if scwmexec or scwmrepl are not returning (e.g.,
if your Emacs hangs when you try evaluating a scwm expression).
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/events.c"><filename>scwm/events.c</filename></ulink>
  at line 491 </para> </refsect1>
</refentry>

<refentry id="resize-frame-to">
  <refnamediv>
    <refname>resize-frame-to</refname>
    <refpurpose>Resize WIN to a size of W by H in pixels.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(resize-frame-to w h #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Resize <parameter>win</parameter> to a size of <parameter>w</parameter> by <parameter>h</parameter> in pixels.
The size includes the window decorations. <parameter>win</parameter> defaults to the window
context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2236 </para> </refsect1>
</refentry>

<refentry id="resize-to">
  <refnamediv>
    <refname>resize-to</refname>
    <refpurpose>Resize WIN's client area to a size of W by H in pixels.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(resize-to w h #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Resize <parameter>win</parameter>'s client area to a size of <parameter>w</parameter> by <parameter>h</parameter> in pixels.
The size does not include the window decorations -- only the client
application size. <parameter>win</parameter> defaults to the window
context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2196 </para> </refsect1>
</refentry>

<refentry id="resize-window">
  <refnamediv>
    <refname>resize-window</refname>
    <refpurpose>Resize WIN's client area to a size of W by H in pixels.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(resize-window w h #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Resize WIN's client area to a size of W by H in pixels. 
The size does not include the window decorations -- only the client
application size. WIN defaults to the window context in the usual way
if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winops.scm"><filename>scheme/winops.scm</filename></ulink>
  at line 257 </para> </refsect1>
</refentry>

<refentry id="restack-windows">
  <refnamediv>
    <refname>restack-windows</refname>
    <refpurpose>Restack the windows in WINLIST from front to back.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(restack-windows winlist)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Restack the windows in <parameter>winlist</parameter> from front to back.
The first element of <parameter>winlist</parameter> will be kept in its current stacking
order, the remainder will be stacked immediately below it in the order
given. (Note: This will currently confuse the heck out of the pager
and possibly other legacy fvwm2 modules).
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1738 </para> </refsect1>
</refentry>

<refentry id="restart">
  <refnamediv>
    <refname>restart</refname>
    <refpurpose>Restart the window manager.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(restart  #&amp;optional command)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Restart the window manager. If <parameter>command</parameter> is specified, use
that, as the new window manager to run. If <parameter>command</parameter> is not specified or
is exactly equal to "scwm", restart scwm with the same command-line
arguments as given previously.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/shutdown.c"><filename>scwm/shutdown.c</filename></ulink>
  at line 157 </para> </refsect1>
</refentry>

<refentry id="restarted-p">
  <refnamediv>
    <refname>restarted?</refname>
    <refpurpose>Returns true if scwm is being restarted by itself.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(restarted?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns true if scwm is being restarted by itself.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 136 </para> </refsect1>
</refentry>

<refentry id="restore-scwm-handlers">
  <refnamediv>
    <refname>restore-scwm-handlers</refname>
    <refpurpose>Restore the scwm behavior for signals and for X errors.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(restore-scwm-handlers)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Restore the scwm behavior for signals and for X errors.
This is automatically called when (app scwm gtk) is loaded, to clean up
after the (gtk gtk) module.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/modules/scwmgtkhelper/scwmgtkhelper.c"><filename>modules/scwmgtkhelper/scwmgtkhelper.c</filename></ulink>
  at line 50 </para> </refsect1>
</refentry>

<refentry id="reverse-iota">
  <refnamediv>
    <refname>reverse-iota</refname>
    <refpurpose>Generate a list of the integers from N to 1 in order.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(reverse-iota n)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Generate a list of the integers from N to 1 in order.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm listops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/listops.scm"><filename>scheme/listops.scm</filename></ulink>
  at line 49 </para> </refsect1>
</refentry>

<refentry id="round/">
  <refnamediv>
    <refname>round/</refname>
    <refpurpose>Reaturn the closest integer to X divided by Y.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(round/ x y)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Reaturn the closest integer to X divided by Y.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 38 </para> </refsect1>
</refentry>

<refentry id="rubber-band-move">
  <refnamediv>
    <refname>rubber-band-move</refname>
    <refpurpose>Move WIN interactively, using a rubber band frame.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(rubber-band-move  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move <parameter>win</parameter> interactively, using a rubber band frame.
This allows the user to drag a rubber band frame around the
screen. <parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/move.c"><filename>scwm/move.c</filename></ulink>
  at line 531 </para> </refsect1>
</refentry>

<refentry id="rubber-band-resize">
  <refnamediv>
    <refname>rubber-band-resize</refname>
    <refpurpose>Resize WIN interactively, using a rubber band frame.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(rubber-band-resize  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Resize <parameter>win</parameter> interactively, using a rubber band frame.
This allows the user to drag a rubber band frame to set the size of
the window. <parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/resize.c"><filename>scwm/resize.c</filename></ulink>
  at line 559 </para> </refsect1>
</refentry>

<refentry id="run-fvwm2-module">
  <refnamediv>
    <refname>run-fvwm2-module</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(run-fvwm2-module module-name #&amp;optional
				  (other-args '())	       
				  (config-file "~/.fvwm2rc")
				  (config-info
				   (get-fvwm2-module-config
				    (basename module-name))))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm fvwm-module)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/fvwm-module.scm"><filename>scheme/fvwm-module.scm</filename></ulink>
  at line 384 </para> </refsect1>
</refentry>

<refentry id="run-in-netscape">
  <refnamediv>
    <refname>run-in-netscape</refname>
    <refpurpose>Runs COMMAND in a Netscape window, calling COMPLETION when done, if set.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(run-in-netscape command completion #&amp;optional (netwin (netscape-win)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Runs COMMAND in a Netscape window, calling COMPLETION when done, if set.
Uses Netscape window NETWIN if specifies, or one found by (netscape-win)
otherwise; it is an error if NETWIN refers to a non-Netscape window.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 607 </para> </refsect1>
</refentry>

<refentry id="run-in-xterm">
  <refnamediv>
    <refname>run-in-xterm</refname>
    <refpurpose>Return a procedure that runs CMD in an xterm.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(run-in-xterm cmd . opts)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a procedure that runs CMD in an xterm.
Uses the variable <link linkend="xterm-command"><function>xterm-command</function></link> to determine how
to run an xterm.  CMD may include options to the command.
The rest of the arguments are passed as options to the xterm command.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 434 </para> </refsect1>
</refentry>

<refentry id="run--cwmClock">
  <refnamediv>
    <refname>run-ScwmClock</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(run-ScwmClock #&amp;key (24-hour #t) (show-timezone #t)
			       (update-interval 1))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm ScwmClock)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/ScwmClock.scm"><filename>scheme/ScwmClock.scm</filename></ulink>
  at line 32 </para> </refsect1>
</refentry>

<refentry id="run--cwmDeskButtons">
  <refnamediv>
    <refname>run-ScwmDeskButtons</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(run-ScwmDeskButtons desks #&amp;key desk-names)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm ScwmDeskButtons)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/ScwmDeskButtons.scm"><filename>scheme/ScwmDeskButtons.scm</filename></ulink>
  at line 39 </para> </refsect1>
</refentry>

<refentry id="safe-load">
  <refnamediv>
    <refname>safe-load</refname>
    <refpurpose>Load file FNAME while trapping and displaying errors.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(safe-load fname)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Load file <parameter>fname</parameter> while trapping and displaying errors.
Each individual top-level-expression is evaluated separately and all
errors are trapped and displayed.  You Should use this procedure if
you need to make sure most of a file loads, even if it may contain
errors.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/callbacks.c"><filename>scwm/callbacks.c</filename></ulink>
  at line 247 </para> </refsect1>
</refentry>

<refentry id="save-settings">
  <refnamediv>
    <refname>save-settings</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(save-settings)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm prefs-menu)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/prefs-menu.scm"><filename>scheme/prefs-menu.scm</filename></ulink>
  at line 39 </para> </refsect1>
</refentry>

<refentry id="scwm-gdk-X-fdes">
  <refnamediv>
    <refname>scwm-gdk-X-fdes</refname>
    <refpurpose></refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(scwm-gdk-X-fdes)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/modules/scwmgtkhelper/scwmgtkhelper.c"><filename>modules/scwmgtkhelper/scwmgtkhelper.c</filename></ulink>
  at line 36 </para> </refsect1>
</refentry>

<refentry id="scwm-gtk-sync">
  <refnamediv>
    <refname>scwm-gtk-sync</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(scwm-gtk-sync)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm gtk)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/gtk.scm"><filename>scheme/gtk.scm</filename></ulink>
  at line 28 </para> </refsect1>
</refentry>

<refentry id="scwm-is-constraint-enabled-p">
  <refnamediv>
    <refname>scwm-is-constraint-enabled?</refname>
    <refpurpose>Return <literal>#t</literal> if scwm has the constraint solver primitives, <literal>#f</literal> otherwise.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(scwm-is-constraint-enabled?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if scwm has the constraint solver primitives, <literal>#f</literal> otherwise.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 534 </para> </refsect1>
</refentry>

<refentry id="scwm-path-exec-prefix">
  <refnamediv>
    <refname>scwm-path-exec-prefix</refname>
    <refpurpose>Return the <envar>$EXEC_PREFIX</envar> directory path that scwm was installed with.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(scwm-path-exec-prefix)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the <envar>$EXEC_PREFIX</envar> directory path that scwm was installed with.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 534 </para> </refsect1>
</refentry>

<refentry id="scwm-path-prefix">
  <refnamediv>
    <refname>scwm-path-prefix</refname>
    <refpurpose>Return the <envar>$PREFIX</envar> directory path that scwm was installed with.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(scwm-path-prefix)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the <envar>$PREFIX</envar> directory path that scwm was installed with.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 524 </para> </refsect1>
</refentry>

<refentry id="scwm-quit">
  <refnamediv>
    <refname>scwm-quit</refname>
    <refpurpose>Exit scwm cleanly.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(scwm-quit  . args)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Exit scwm cleanly. <link linkend="quit"><function>quit</function></link> is redefined as this within
scwm. <parameter>args</parameter> is ignored.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/shutdown.c"><filename>scwm/shutdown.c</filename></ulink>
  at line 183 </para> </refsect1>
</refentry>

<refentry id="scwm-system">
  <refnamediv>
    <refname>scwm-system</refname>
    <refpurpose>Run CMD using /bin/sh -c CMD and return the exit status.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(scwm-system cmd)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Run CMD using /bin/sh -c CMD and return the exit status.
The CMD is run synchronously, and Bourne-shell meta characters
are interpreted by /bin/sh.  E.g., to start CMD in the background,
use a trailing \"&amp;\" character.  See also guile's <link linkend="system"><function>system</function></link>, but note
that it may permit signals on the controlling tty to be seen
by children (observed on Linux, Free/NetBSD, but not on Solaris or HP/UX.
This may be a bug (not meeting POSIX.2 specifications).
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 538 </para> </refsect1>
</refentry>

<refentry id="scwm-version">
  <refnamediv>
    <refname>scwm-version</refname>
    <refpurpose>Return the version of scwm running.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(scwm-version)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the version of scwm running.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 503 </para> </refsect1>
</refentry>

<refentry id="scwm-version-date">
  <refnamediv>
    <refname>scwm-version-date</refname>
    <refpurpose>Return the date that the running scwm was last changed as a string.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(scwm-version-date)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the date that the running scwm was last changed as a string.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 513 </para> </refsect1>
</refentry>

<refentry id="sec-to-usec">
  <refnamediv>
    <refname>sec->usec</refname>
    <refpurpose>Convert SEC seconds into an equivalent number of microseconds.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(sec->usec sec)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Convert SEC seconds into an equivalent number of microseconds.
Especially useful for add-hook! and other timing related procedures
that take microseconds.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 436 </para> </refsect1>
</refentry>

<refentry id="select-multiple-windows-interactively">
  <refnamediv>
    <refname>select-multiple-windows-interactively</refname>
    <refpurpose>Return a list of user-selected windows, up to MAX.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(select-multiple-windows-interactively #&amp;optional (max 32000))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a list of user-selected windows, up to MAX.
The list is in the reverse order from the way by which they were selected.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 384 </para> </refsect1>
</refentry>

<refentry id="select-window">
  <refnamediv>
    <refname>select-window</refname>
    <refpurpose>Select a window interactively.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(select-window  #&amp;optional kill? release?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Select a window interactively.
Use a special cursor and let the user click to select the window. The
optional arguments <parameter>kill?</parameter> and <parameter>release?</parameter> indicate whether to use the
"skull and cross-bones" kill cursor (recommended for destructive
operations like delete-window and destroy-window), and whether to wait
for a mouse release or act immediately on the click. The former is a
place-holder until we have proper cursor support in scwm.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 734 </para> </refsect1>
</refentry>

<refentry id="select-window-from-window-list">
  <refnamediv>
    <refname>select-window-from-window-list</refname>
    <refpurpose>Permit selecting a window from a window list.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(select-window-from-window-list #&amp;key
						(only '()) (except '())
						(ignore-winlist-skip #f))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Permit selecting a window from a window list.
Return the selected window object, or <literal>#f</literal> if none was selected
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 399 </para> </refsect1>
</refentry>

<refentry id="select-window-group">
  <refnamediv>
    <refname>select-window-group</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(select-window-group)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 347 </para> </refsect1>
</refentry>

<refentry id="select-window-interactively">
  <refnamediv>
    <refname>select-window-interactively</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(select-window-interactively #&amp;optional (msg #f))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 602 </para> </refsect1>
</refentry>

<refentry id="select-window-interactively-and-highlight">
  <refnamediv>
    <refname>select-window-interactively-and-highlight</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(select-window-interactively-and-highlight)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 373 </para> </refsect1>
</refentry>

<refentry id="select-window-interactively-no-message">
  <refnamediv>
    <refname>select-window-interactively-no-message</refname>
    <refpurpose>Returns a window selected interactively.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(select-window-interactively-no-message)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns a window selected interactively.
Returns <literal>#f</literal> if no window was selected.  Use <link linkend="select-window-interactively"><function>select-window-interactively</function></link> if you would
like to display a message while the user selects a window.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 903 </para> </refsect1>
</refentry>

<refentry id="send-button-press">
  <refnamediv>
    <refname>send-button-press</refname>
    <refpurpose>Send a synthetic mouse press event.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(send-button-press button #&amp;optional win button-press? button-release? propagate?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Send a synthetic mouse press event.
Create a synthetic event of a press of mouse button <parameter>button</parameter>. The usual
mouse button specification format (with modifiers) is used. Send the
event to window <parameter>win</parameter> if specified; otherwise the window to be used
defaults to the window context in the usual way. By default, both a
press and a release are sent. However, the boolean parameters
<parameter>button-press?</parameter> and <parameter>button-release?</parameter> allow you to specify which are sent
individually. <parameter>propagate?</parameter> indicates whether the propagate flag is set
on the event; the default is <literal>#f</literal>. You should not have to worry about
this unless you know what it means.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/events.c"><filename>scwm/events.c</filename></ulink>
  at line 1885 </para> </refsect1>
</refentry>

<refentry id="send-key-press">
  <refnamediv>
    <refname>send-key-press</refname>
    <refpurpose>Send a synthetic press of KEY.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(send-key-press key #&amp;optional win key-press? key-release? propagate?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Send a synthetic press of <parameter>key</parameter>. The usual key specification
format (with modifiers) is used. The event is sent to window <parameter>win</parameter> if
specified; otherwise the window to be used defaults to the window
context in the usual way. By default, both a press and a release are
sent. However, the boolean parameters <parameter>key-press?</parameter> and <parameter>key-release?</parameter>
allow you to specify which are sent individually. <parameter>propagate?</parameter> indicates
whether the propagate flag is set on the event; the default is <literal>#f</literal>. You
should not have to worry about this unless you know what it means.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/events.c"><filename>scwm/events.c</filename></ulink>
  at line 1823 </para> </refsect1>
</refentry>

<refentry id="set-animation-x">
  <refnamediv>
    <refname>set-animation!</refname>
    <refpurpose>Set the animation parameters to VECTOR.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-animation! vector)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the animation parameters to <parameter>vector</parameter>. <parameter>vector</parameter> is a vector of
floats which give the fractions of the final position that the window
should appear at. For instance, #(0.0 0.25 0.5 0.75 1.0 1.1 1.0) would
make the window appear at the initial position, 1/4 of the way, 1/2 of
the way, 3/4 of the way, overshoot the final position slightly, and
finally slide back into place. This parameter is used for both
animated window shades and animated moves.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/modules/c-animation/c-animation.c"><filename>modules/c-animation/c-animation.c</filename></ulink>
  at line 188 </para> </refsect1>
</refentry>

<refentry id="set-auto-raise-x">
  <refnamediv>
    <refname>set-auto-raise!</refname>
    <refpurpose>Turn auto-raise on (<literal>#t</literal>) or off (<literal>#f</literal>) for WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-auto-raise! auto-raise? #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Turn auto-raise on (<literal>#t</literal>) or off (<literal>#f</literal>) for WIN.
Auto-raise makes a window automatically raise when the mouse pointer
enters the window frame.  See <link linkend="set-auto-raise-delay-x"><function>set-auto-raise-delay!</function></link> for controlling
the delay before the window raises.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm auto-raise)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/auto-raise.scm"><filename>scheme/auto-raise.scm</filename></ulink>
  at line 89 </para> </refsect1>
</refentry>

<refentry id="set-auto-raise-delay-x">
  <refnamediv>
    <refname>set-auto-raise-delay!</refname>
    <refpurpose>Set the auto-raise delay to DELAY (in ms) for WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-auto-raise-delay! delay #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the auto-raise delay to DELAY (in ms) for WIN.
DELAY is the number of milliseconds after the pointer enters
WIN that WIN will be raised.  See <link linkend="set-auto-raise-x"><function>set-auto-raise!</function></link> to turn
auto-raise on or off for a given window.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm auto-raise)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/auto-raise.scm"><filename>scheme/auto-raise.scm</filename></ulink>
  at line 96 </para> </refsect1>
</refentry>

<refentry id="set-auto-raise-focus-proc-x">
  <refnamediv>
    <refname>set-auto-raise-focus-proc!</refname>
    <refpurpose>Set the auto-raise-focus-proc for WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-auto-raise-focus-proc! fproc #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the auto-raise-focus-proc for WIN.
The auto-raise-focus-proc is the procedure which is invoked
after the auto-raise-delay after the pointer enters WIN's frame.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm auto-raise)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/auto-raise.scm"><filename>scheme/auto-raise.scm</filename></ulink>
  at line 110 </para> </refsect1>
</refentry>

<refentry id="set-auto-raise-unfocus-delay-x">
  <refnamediv>
    <refname>set-auto-raise-unfocus-delay!</refname>
    <refpurpose>Set the timeout to DELAY (in ms) for the unfocus-proc of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-auto-raise-unfocus-delay! delay #&amp;optional 
					       (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the timeout to DELAY (in ms) for the unfocus-proc of WIN.
After DELAY milliseconds after the pointer leaves WIN's frame,
the auto-raise-unfocus-proc will be called.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm auto-raise)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/auto-raise.scm"><filename>scheme/auto-raise.scm</filename></ulink>
  at line 103 </para> </refsect1>
</refentry>

<refentry id="set-auto-raise-unfocus-proc-x">
  <refnamediv>
    <refname>set-auto-raise-unfocus-proc!</refname>
    <refpurpose>Set the auto-raise-unfocus-proc for WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-auto-raise-unfocus-proc! ufproc 
					     #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the auto-raise-unfocus-proc for WIN.
The auto-raise-unfocus-proc is the procedure which is invoked
after the auto-raise-unfocus-delay after the pointer leaves WIN's frame.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm auto-raise)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/auto-raise.scm"><filename>scheme/auto-raise.scm</filename></ulink>
  at line 116 </para> </refsect1>
</refentry>

<refentry id="set-background-color-x">
  <refnamediv>
    <refname>set-background-color!</refname>
    <refpurpose>Sets the color of the root window to COLOR.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-background-color! color)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Sets the color of the root window to <parameter>color</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/modules/background/background.c"><filename>modules/background/background.c</filename></ulink>
  at line 57 </para> </refsect1>
</refentry>

<refentry id="set-background-image-x">
  <refnamediv>
    <refname>set-background-image!</refname>
    <refpurpose>Sets the background of the root window to be IMAGE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-background-image! image #&amp;optional style)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Sets the background of the root window to be <parameter>image</parameter>.
<parameter>style</parameter> can be either 'centered or 'tiled.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/modules/background/background.c"><filename>modules/background/background.c</filename></ulink>
  at line 184 </para> </refsect1>
</refentry>

<refentry id="set-border-face-x">
  <refnamediv>
    <refname>set-border-face!</refname>
    <refpurpose>Set the face for the border In the current decor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-border-face! active #&amp;optional inactive)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the face for the border In the current decor.
Use <parameter>active</parameter> as the face for the border when the window is active. Use
<parameter>inactive</parameter> when the window is inactive. <parameter>inactive</parameter> defaults to the same as
<parameter>active</parameter> when not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/face.c"><filename>scwm/face.c</filename></ulink>
  at line 988 </para> </refsect1>
</refentry>

<refentry id="set-border-width-x">
  <refnamediv>
    <refname>set-border-width!</refname>
    <refpurpose>Set the border width of WIN's border to WIDTH pixels.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-border-width! width #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the border width of <parameter>win</parameter>'s border to <parameter>width</parameter> pixels.
<parameter>win</parameter> defaults to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2951 </para> </refsect1>
</refentry>

<refentry id="set-button-face-x">
  <refnamediv>
    <refname>set-button-face!</refname>
    <refpurpose>Set the button faces for the various window states.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-button-face! button active-up #&amp;optional active-down inactive)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the button faces for the various window states.
In the current decor, use <parameter>active-up</parameter> as the face for the
button specified by the integer <parameter>button</parameter> when active and not pressed
in. Use <parameter>active-down</parameter> when <parameter>button</parameter> is active and pressed in, and <parameter>inactive</parameter>
when the window is inactive. Both <parameter>inactive</parameter> and <parameter>active-down</parameter> default to
<parameter>active-up</parameter> when not specified. Note that <parameter>active-down</parameter> will magically
reverse the sense of the relief flag, so if the button is raised in
the <parameter>active-up</parameter> state, it will be sunk in the <parameter>active-down</parameter> state by
default.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/face.c"><filename>scwm/face.c</filename></ulink>
  at line 893 </para> </refsect1>
</refentry>

<refentry id="set-button-mwm-flag-x">
  <refnamediv>
    <refname>set-button-mwm-flag!</refname>
    <refpurpose>Specify the Mwm flag for BUTTON.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-button-mwm-flag! button flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Specify the Mwm flag for <parameter>button</parameter>.
If <parameter>flag</parameter> is <literal>#t</literal>, the button's relief pattern (if any) will appear to
reverse in depth sense (i.e., flip from sunken in to extruding out)
when the window is maximized (has a non-<literal>#f</literal> "maximized" window
property).
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/face.c"><filename>scwm/face.c</filename></ulink>
  at line 954 </para> </refsect1>
</refentry>

<refentry id="set-click-delay-x">
  <refnamediv>
    <refname>set-click-delay!</refname>
    <refpurpose>Set the delay used in identifying mouse clicks and drags.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-click-delay! msec)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the delay used in identifying mouse clicks and drags.
<parameter>msec</parameter> is specified in milliseconds. After <parameter>msec</parameter> milliseconds, a mouse-down
without a mouse-up is considered a drag.  Also, after <parameter>msec</parameter> milliseconds, a
single click is definitively identified as not a double click.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 172 </para> </refsect1>
</refentry>

<refentry id="set-click-to-focus-passes-click-x">
  <refnamediv>
    <refname>set-click-to-focus-passes-click!</refname>
    <refpurpose>Determine whether a click-to-focus window receives the click.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-click-to-focus-passes-click! flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine whether a click-to-focus window receives the click.
If <parameter>flag</parameter> is <literal>#t</literal>, the window will receive the event, if <literal>#f</literal>, scwm
will not pass the event on to the client.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 369 </para> </refsect1>
</refentry>

<refentry id="set-click-to-focus-raises-x">
  <refnamediv>
    <refname>set-click-to-focus-raises!</refname>
    <refpurpose>Determine whether a click to focus raises the clicked-on window.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-click-to-focus-raises! flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine whether a click to focus raises the clicked-on window.
If <parameter>flag</parameter> is <literal>#t</literal>, clicks which transfer focus will also raise the target
window
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 393 </para> </refsect1>
</refentry>

<refentry id="set-colormap-focus-x">
  <refnamediv>
    <refname>set-colormap-focus!</refname>
    <refpurpose>Set the colormap focus policy to FTYPE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-colormap-focus! ftype)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the colormap focus policy to <parameter>ftype</parameter>.
<parameter>ftype</parameter> can either be 'mouse, indicating that the window under the mouse
pointer should always have its colormap installed, or 'focus to
indicate that the window with the input focus should also get the
colormap focus. This makes a difference only when using focus policies
other than 'mouse.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 199 </para> </refsect1>
</refentry>

<refentry id="set-current-decor-x">
  <refnamediv>
    <refname>set-current-decor!</refname>
    <refpurpose>Set the current decor to DECOR.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-current-decor! decor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the current decor to <parameter>decor</parameter>. Operations described as
setting options "in the current decor" will now operate on this
one.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/decor.c"><filename>scwm/decor.c</filename></ulink>
  at line 251 </para> </refsect1>
</refentry>

<refentry id="set-current-desk-x">
  <refnamediv>
    <refname>set-current-desk!</refname>
    <refpurpose>Change the current desk to DESK.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-current-desk! desk)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Change the current desk to <parameter>desk</parameter>. <parameter>desk</parameter> should be an integer
small enough to fit in one machine word.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 60 </para> </refsect1>
</refentry>

<refentry id="set-decorate-transient-x">
  <refnamediv>
    <refname>set-decorate-transient!</refname>
    <refpurpose>Set decoration of transients property on WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-decorate-transient! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set decoration of transients property on <parameter>win</parameter>.
If <parameter>flag</parameter> is <literal>#t</literal>, then if <parameter>win</parameter> is transient it will be fully
decorated. Transient windows that are not fully decorated will be
given only a border and no titlebar regardless of other settings. <parameter>win</parameter>
defaults to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3642 </para> </refsect1>
</refentry>

<refentry id="set-desk-size-x">
  <refnamediv>
    <refname>set-desk-size!</refname>
    <refpurpose>Sets the desk size to WIDTH, HEIGHT.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-desk-size! width height)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Sets the desk size to <parameter>width</parameter>, <parameter>height</parameter>.
Both numbers are given in units of the physical screen size.  For
example <informalexample><programlisting>(set-desk-size 3 3)
</programlisting></informalexample> createsa virtual world 9 times the
size of the physical display.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 306 </para> </refsect1>
</refentry>

<refentry id="set-edge-move-threshold-x">
  <refnamediv>
    <refname>set-edge-move-threshold!</refname>
    <refpurpose>Set the edge move threshold to PIXELS.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-edge-move-threshold! pixels)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the edge move threshold to <parameter>pixels</parameter>.
Attempts to move a window so that it is off the edge of the screen by
fewer than <parameter>pixels</parameter> pixels will leave the window entirely onscreen.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 276 </para> </refsect1>
</refentry>

<refentry id="set-edge-resistance-x">
  <refnamediv>
    <refname>set-edge-resistance!</refname>
    <refpurpose>Set the edge scroll delay to S, and the edge move threshold to M.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-edge-resistance! s m)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the edge scroll delay to S, and the edge move threshold to M.
See also <link linkend="set-edge-scroll-delay-x"><function>set-edge-scroll-delay!</function></link> and <link linkend="set-edge-move-threshold-x"><function>set-edge-move-threshold!</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 501 </para> </refsect1>
</refentry>

<refentry id="set-edge-scroll-x">
  <refnamediv>
    <refname>set-edge-scroll!</refname>
    <refpurpose>Set the edge scroll values to X and Y, respectively.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-edge-scroll! x y)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the edge scroll values to X and Y, respectively.
These values are the number of pixels that the viewport
moves when the pointer hits the edge of the screen.  Use
<link linkend="pctx"><function>%x</function></link> and <link linkend="pcty"><function>%y</function></link> to convert from a percentage of a screen
dimension to a number of pixels.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 515 </para> </refsect1>
</refentry>

<refentry id="set-edge-scroll-delay-x">
  <refnamediv>
    <refname>set-edge-scroll-delay!</refname>
    <refpurpose>Set the edge scroll delay to USEC microseconds.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-edge-scroll-delay! usec)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the edge scroll delay to <parameter>usec</parameter> microseconds.
When the mouse pointer hits the edge of the screen, it must stay there
for at least the edge scroll delay amount before the desktop will be
scrolled. If this parameter is <literal>#f</literal>, the viewport will not scroll at all
at the screen edge.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 236 </para> </refsect1>
</refentry>

<refentry id="set-edge-wrap-x">
  <refnamediv>
    <refname>set-edge-wrap!</refname>
    <refpurpose>Set the edge x and y wrap values to X and Y, respectively.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-edge-wrap! x y)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the edge x and y wrap values to X and Y, respectively.
These values should be <literal>#t</literal> to mean that the pointer should
wrap in the given direction, or <literal>#f</literal> to not wrap around.
See also <link linkend="set-edge-x-wrap-x"><function>set-edge-x-wrap!</function></link> and <link linkend="set-edge-y-wrap-x"><function>set-edge-y-wrap!</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 507 </para> </refsect1>
</refentry>

<refentry id="set-edge-x-scroll-x">
  <refnamediv>
    <refname>set-edge-x-scroll!</refname>
    <refpurpose>Set the horizontal edge scroll increment to PIXELS.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-edge-x-scroll! pixels)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the horizontal edge scroll increment to <parameter>pixels</parameter>.
The horizontal edge scroll setting is the amount by which the viewport
will scroll when the mouse hits the left or right edge. Use <link linkend="pctx"><function>%x</function></link> to
convert from a percent of screen size to pixels.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 128 </para> </refsect1>
</refentry>

<refentry id="set-edge-x-wrap-x">
  <refnamediv>
    <refname>set-edge-x-wrap!</refname>
    <refpurpose>Set whether to wrap pointer around horizontal edges.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-edge-x-wrap! flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set whether to wrap pointer around horizontal edges.
If the boolean value <parameter>flag</parameter> is <literal>#t</literal>, the pointer will wrap from the right
edge of the desktop to the left of the display as it moves off the
right edge, and vice-versa. See also <link linkend="set-edge-y-wrap-x"><function>set-edge-y-wrap!</function></link>
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 187 </para> </refsect1>
</refentry>

<refentry id="set-edge-y-scroll-x">
  <refnamediv>
    <refname>set-edge-y-scroll!</refname>
    <refpurpose>Set the vertical edge scroll increment to PIXELS.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-edge-y-scroll! pixels)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the vertical edge scroll increment to <parameter>pixels</parameter>.
The vertical edge scroll setting is the amount by which the viewport
will scroll when the mouse hits the top or bottom edge. Use <link linkend="pcty"><function>%y</function></link> to
convert from a percent of screen size to pixels.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 157 </para> </refsect1>
</refentry>

<refentry id="set-edge-y-wrap-x">
  <refnamediv>
    <refname>set-edge-y-wrap!</refname>
    <refpurpose>Set whether to wrap pointer around vertical edges.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-edge-y-wrap! flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set whether to wrap pointer around vertical edges.
If the boolean value <parameter>flag</parameter> is <literal>#t</literal>, the pointer will wrap from the bottom
edge of the desktop to the top of the display as it moves off the very
bottom edge, and vice-versa. See also <link linkend="set-edge-x-wrap-x"><function>set-edge-x-wrap!</function></link>
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 211 </para> </refsect1>
</refentry>

<refentry id="set-face-flag-x">
  <refnamediv>
    <refname>set-face-flag!</refname>
    <refpurpose>Set the given FLAG to the given FLAGVAL for face FACE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-face-flag! face flag flagval)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the given <parameter>flag</parameter> to the given <parameter>flagval</parameter> for face <parameter>face</parameter>.
See the section on the `Face Flags' concept.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/face.c"><filename>scwm/face.c</filename></ulink>
  at line 347 </para> </refsect1>
</refentry>

<refentry id="set-force-icon-x">
  <refnamediv>
    <refname>set-force-icon!</refname>
    <refpurpose>Set the window-manager-overriding property for WIN to boolean FLAG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-force-icon! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the window-manager-overriding property for <parameter>win</parameter> to boolean <parameter>flag</parameter>.
If <literal>#t</literal>, the icon specified for <parameter>win</parameter> by the user through scwm will override an
application-provided icon.  <parameter>win</parameter> defaults to the window context in the usual
way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3443 </para> </refsect1>
</refentry>

<refentry id="set-hilight-background-x">
  <refnamediv>
    <refname>set-hilight-background!</refname>
    <refpurpose>Use BG as the background color for a window with the input focus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-hilight-background! bg)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>bg</parameter> as the background color for a window with the input focus.
Applies to the current decor. This is used only for windows that don't
have their own background color.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 670 </para> </refsect1>
</refentry>

<refentry id="set-hilight-factor-x">
  <refnamediv>
    <refname>set-hilight-factor!</refname>
    <refpurpose>Use FACTOR to generate highlight colors for the current decor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-hilight-factor! factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>factor</parameter> to generate highlight colors for the current decor.
<parameter>factor</parameter> is a positive floating point number.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 485 </para> </refsect1>
</refentry>

<refentry id="set-hilight-foreground-x">
  <refnamediv>
    <refname>set-hilight-foreground!</refname>
    <refpurpose>Use FG for the foreground color of a window with the input focus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-hilight-foreground! fg)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>fg</parameter> for the foreground color of a window with the input focus.
Applies to the current decor. This is used only for windows that don't
have their own foreground color.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 625 </para> </refsect1>
</refentry>

<refentry id="set-hint-override-x">
  <refnamediv>
    <refname>set-hint-override!</refname>
    <refpurpose>Set whether or not Mwm and Open Look function hints are used.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-hint-override! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set whether or not Mwm and Open Look function hints are used.
If <parameter>flag</parameter> is <literal>#t</literal>, the hints, which indicate what operations should be
allowed on a window, will be ignored for <parameter>win</parameter>.  If <parameter>flag</parameter> is <literal>#f</literal>, the hints will
be honoured. <parameter>win</parameter> defaults to the window context in the usual way if
not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3625 </para> </refsect1>
</refentry>

<refentry id="set-icon-x">
  <refnamediv>
    <refname>set-icon!</refname>
    <refpurpose>Set the image to use for the icon of WIN to IMAGE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-icon! image #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the image to use for the icon of <parameter>win</parameter> to <parameter>image</parameter>.
As usual, an image object or a filename string may be given. <literal>#f</literal> May
also be specified, indicating no icon image. <parameter>win</parameter> defaults to the window
context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3489 </para> </refsect1>
</refentry>

<refentry id="set-icon-box-x">
  <refnamediv>
    <refname>set-icon-box!</refname>
    <refpurpose>Set the icon box in which WIN's icon will be placed.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-icon-box! x y w h #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the icon box in which <parameter>win</parameter>'s icon will be placed.
This set the box to the rectangle at coordinates <parameter>x</parameter>, <parameter>y</parameter> with width <parameter>w</parameter> and
height <parameter>h</parameter>. <parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3049 </para> </refsect1>
</refentry>

<refentry id="set-icon-font-x">
  <refnamediv>
    <refname>set-icon-font!</refname>
    <refpurpose>Set the font used for drawing icon titles to FONT.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-icon-font! font)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the font used for drawing icon titles to <parameter>font</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/font.c"><filename>scwm/font.c</filename></ulink>
  at line 255 </para> </refsect1>
</refentry>

<refentry id="set-icon-title-x">
  <refnamediv>
    <refname>set-icon-title!</refname>
    <refpurpose>Set the visibility of WIN's icon title according to FLAG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-icon-title! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the visibility of <parameter>win</parameter>'s icon title according to <parameter>flag</parameter>. <parameter>win</parameter>
defaults to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3426 </para> </refsect1>
</refentry>

<refentry id="set-lenience-x">
  <refnamediv>
    <refname>set-lenience!</refname>
    <refpurpose>Set or reset the input focus lenience flag.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-lenience! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set or reset the input focus lenience flag.
Determine whether or not to try to give <parameter>win</parameter> the input focus
when asked, even if the window claims according to hints that it
cannot receive the input focus, according to the boolean value
<parameter>flag</parameter>. <parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3757 </para> </refsect1>
</refentry>

<refentry id="set-menu-background-x">
  <refnamediv>
    <refname>set-menu-background!</refname>
    <refpurpose>Set the default background for menus to BG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-background! bg)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the default background for menus to BG.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 125 </para> </refsect1>
</refentry>

<refentry id="set-menu-bg-image-x">
  <refnamediv>
    <refname>set-menu-bg-image!</refname>
    <refpurpose>Set the default menu background image to IMAGE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-bg-image! image)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the default menu background image to IMAGE.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 146 </para> </refsect1>
</refentry>

<refentry id="set-menu-font-x">
  <refnamediv>
    <refname>set-menu-font!</refname>
    <refpurpose>Set the default font for menu text to FONT.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-font! font)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the default font for menu text to FONT.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 132 </para> </refsect1>
</refentry>

<refentry id="set-menu-foreground-x">
  <refnamediv>
    <refname>set-menu-foreground!</refname>
    <refpurpose>Set the default color for menu text to FG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-foreground! fg)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the default color for menu text to FG.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 122 </para> </refsect1>
</refentry>

<refentry id="set-menu-hilight-factor-x">
  <refnamediv>
    <refname>set-menu-hilight-factor!</refname>
    <refpurpose>Use FACTOR to generate hilight colors for menus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-hilight-factor! factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>factor</parameter> to generate hilight colors for menus.
<parameter>factor</parameter> is a positive floating point number
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 561 </para> </refsect1>
</refentry>

<refentry id="set-menu-look-x">
  <refnamediv>
    <refname>set-menu-look!</refname>
    <refpurpose>Set the default menu look to LOOK.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-look! look)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the default menu look to LOOK.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 149 </para> </refsect1>
</refentry>

<refentry id="set-menu-menu-look-x">
  <refnamediv>
    <refname>set-menu-menu-look!</refname>
    <refpurpose>Use MENU-LOOK as the menu-look for MENU.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-menu-look! menu menu-look)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>menu-look</parameter> as the menu-look for <parameter>menu</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/menu.c"><filename>scwm/menu.c</filename></ulink>
  at line 408 </para> </refsect1>
</refentry>

<refentry id="set-menu-menu-title-x">
  <refnamediv>
    <refname>set-menu-menu-title!</refname>
    <refpurpose>Use MENU-TITLE as the title for MENU.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-menu-title! menu menu-title)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>menu-title</parameter> as the title for <parameter>menu</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/menu.c"><filename>scwm/menu.c</filename></ulink>
  at line 431 </para> </refsect1>
</refentry>

<refentry id="set-menu-shadow-factor-x">
  <refnamediv>
    <refname>set-menu-shadow-factor!</refname>
    <refpurpose>Use FACTOR to generate shadow colors for menus.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-shadow-factor! factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>factor</parameter> to generate shadow colors for menus.
<parameter>factor</parameter> is a positive floating point number
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 588 </para> </refsect1>
</refentry>

<refentry id="set-menu-side-background-x">
  <refnamediv>
    <refname>set-menu-side-background!</refname>
    <refpurpose>Set the default background for the menu side image to BG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-side-background! bg)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the default background for the menu side image to BG.
If BG is <literal>#f</literal>, use the default menu background
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 138 </para> </refsect1>
</refentry>

<refentry id="set-menu-side-image-x">
  <refnamediv>
    <refname>set-menu-side-image!</refname>
    <refpurpose>Set the default menu side image to IMAGE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-side-image! image)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the default menu side image to IMAGE.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 135 </para> </refsect1>
</refentry>

<refentry id="set-menu-stipple-x">
  <refnamediv>
    <refname>set-menu-stipple!</refname>
    <refpurpose>Set the default color for stippled (inactive) menu text to STIPPLE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-menu-stipple! stipple)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the default color for stippled (inactive) menu text to STIPPLE.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 129 </para> </refsect1>
</refentry>

<refentry id="set-mini-icon-x">
  <refnamediv>
    <refname>set-mini-icon!</refname>
    <refpurpose>Set the image to use for the mini-icon of WIN to IMAGE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-mini-icon! image #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the image to use for the mini-icon of <parameter>win</parameter> to <parameter>image</parameter>. As
usual, an image object or a filename string may be given. <parameter>win</parameter> defaults
to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3542 </para> </refsect1>
</refentry>

<refentry id="set-mouse-focus-click-raises-x">
  <refnamediv>
    <refname>set-mouse-focus-click-raises!</refname>
    <refpurpose>Determine whether a mouse-focus-click will raise the window.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-mouse-focus-click-raises! flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine whether a mouse-focus-click will raise the window.
If <parameter>flag</parameter> is <literal>#t</literal> it will raise the window. Not sure if this function
makes sense any more.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 425 </para> </refsect1>
</refentry>

<refentry id="set-mwm-border-x">
  <refnamediv>
    <refname>set-mwm-border!</refname>
    <refpurpose>Set the mwm-border style flag of WIN to boolean FLAG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-mwm-border! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the mwm-border style flag of <parameter>win</parameter> to boolean <parameter>flag</parameter>.
The Mwm style has shallower bevels than the default scwm/fvwm2 style.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3381 </para> </refsect1>
</refentry>

<refentry id="set-mwm-buttons-x">
  <refnamediv>
    <refname>set-mwm-buttons!</refname>
    <refpurpose>Set the mwm-buttons flag of WIN to boolean FLAG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-mwm-buttons! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the mwm-buttons flag of <parameter>win</parameter> to boolean <parameter>flag</parameter>.
The mwm-buttons flag controls whether any of this window's
flags obey their mwm-flags. See <link linkend="set-button-mwm-flag-x"><function>set-button-mwm-flag!</function></link>. <parameter>win</parameter> defaults
to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3365 </para> </refsect1>
</refentry>

<refentry id="set-mwm-decor-hint-x">
  <refnamediv>
    <refname>set-mwm-decor-hint!</refname>
    <refpurpose>Set whether or not Motif decoration hints are used for WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-mwm-decor-hint! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set whether or not Motif decoration hints are used for <parameter>win</parameter>.
If <parameter>flag</parameter> is <literal>#t</literal>, the Mwm decor hint will be given for <parameter>win</parameter>.  <parameter>win</parameter> defaults
to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3658 </para> </refsect1>
</refentry>

<refentry id="set-mwm-func-hint-x">
  <refnamediv>
    <refname>set-mwm-func-hint!</refname>
    <refpurpose>Set whether or not Motif function hints are used for WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-mwm-func-hint! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set whether or not Motif function hints are used for <parameter>win</parameter>.
If <parameter>flag</parameter> is <literal>#t</literal>, the Motif function hints are respected for <parameter>win</parameter>.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3672 </para> </refsect1>
</refentry>

<refentry id="set-not-menu-background-x">
  <refnamediv>
    <refname>set-not-menu-background!</refname>
    <refpurpose>Use BG as the default background color for icons, window frames, etc.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-not-menu-background! bg)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>bg</parameter> as the default background color for icons, window frames, etc.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 768 </para> </refsect1>
</refentry>

<refentry id="set-not-menu-foreground-x">
  <refnamediv>
    <refname>set-not-menu-foreground!</refname>
    <refpurpose>Use FG as the default foreground color for icons, titlebars, etc.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-not-menu-foreground! fg)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>fg</parameter> as the default foreground color for icons, titlebars, etc.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 740 </para> </refsect1>
</refentry>

<refentry id="set-OL-decor-hint-x">
  <refnamediv>
    <refname>set-OL-decor-hint!</refname>
    <refpurpose>Determine whether or not to respect Open Look decoration hints.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-OL-decor-hint! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine whether or not to respect Open Look decoration hints.
If <parameter>flag</parameter> is <literal>#t</literal>, the decoration hints will be respected for <parameter>win</parameter>. <parameter>win</parameter>
defaults to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3704 </para> </refsect1>
</refentry>

<refentry id="set-PPosition-hint-x">
  <refnamediv>
    <refname>set-PPosition-hint!</refname>
    <refpurpose>Set or reset the program-specified position hint for WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-PPosition-hint! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set or reset the program-specified position hint for <parameter>win</parameter>.
If <parameter>flag</parameter> is <literal>#t</literal>, the hint will be set, otherwise reset.  This only
matters when using the default placement procedure. Some programs
allegedly set this hint to a useless value like (0,0) always, so
ignoring it is recommended. <parameter>win</parameter> defaults to the window context in the
usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3687 </para> </refsect1>
</refentry>

<refentry id="set-random-placement-x">
  <refnamediv>
    <refname>set-random-placement!</refname>
    <refpurpose>Set the random-placement flag of WIN to boolean FLAG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-random-placement! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the random-placement flag of <parameter>win</parameter> to boolean <parameter>flag</parameter>.
This flag only matters if the default placement procedure is
being used. <parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3310 </para> </refsect1>
</refentry>

<refentry id="set-rubber-band-mask-x">
  <refnamediv>
    <refname>set-rubber-band-mask!</refname>
    <refpurpose>Set the rubber band mask used when dragging or resizing.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-rubber-band-mask! value)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the rubber band mask used when dragging or resizing.
<parameter>value</parameter> is XORed with the background when dragging non-opaque move or
resize frames. <parameter>value</parameter> should be an integer.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/resize.c"><filename>scwm/resize.c</filename></ulink>
  at line 267 </para> </refsect1>
</refentry>

<refentry id="set-shadow-factor-x">
  <refnamediv>
    <refname>set-shadow-factor!</refname>
    <refpurpose>Use FACTOR to generate shadow colors in the current decor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-shadow-factor! factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use <parameter>factor</parameter> to generate shadow colors in the current decor.
<parameter>factor</parameter> is a positive floating point number
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 523 </para> </refsect1>
</refentry>

<refentry id="set-show-icon-x">
  <refnamediv>
    <refname>set-show-icon!</refname>
    <refpurpose>Set whether or not the icon of WIN will be visible.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-show-icon! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set whether or not the icon of <parameter>win</parameter> will be visible.  If <parameter>flag</parameter>
is <literal>#t</literal>, the icon will be displayed, if <literal>#f</literal>, it will not appear when the
window is iconified (it will still be in the window list, of course).
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3470 </para> </refsect1>
</refentry>

<refentry id="set-skip-mapping-x">
  <refnamediv>
    <refname>set-skip-mapping!</refname>
    <refpurpose>Set or reset whether scwm should not change desktops on a map.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-skip-mapping! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set or reset whether scwm should not change desktops on a map.
This only affect the behaviour upon initial mapping of <parameter>win</parameter>. If <parameter>flag</parameter> is
<literal>#t</literal>, the virtual desktop will not be changed when <parameter>win</parameter> is mapped.  <parameter>win</parameter>
defaults to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3742 </para> </refsect1>
</refentry>

<refentry id="set-smart-placement-x">
  <refnamediv>
    <refname>set-smart-placement!</refname>
    <refpurpose>Set the smart-placement flag of WIN to boolean FLAG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-smart-placement! flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the smart-placement flag of <parameter>win</parameter> to boolean <parameter>flag</parameter>.
This flag only matters if the default placement procedure is
being used. <parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3325 </para> </refsect1>
</refentry>

<refentry id="set-smart-placement-is-really-smart-x">
  <refnamediv>
    <refname>set-smart-placement-is-really-smart!</refname>
    <refpurpose>Determine whether or not <link linkend="clever-place-window"><function>clever-place-window</function></link> will be used when smart-placing.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-smart-placement-is-really-smart! flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Determine whether or not <link linkend="clever-place-window"><function>clever-place-window</function></link> will be used when smart-placing.
If <parameter>flag</parameter> is <literal>#t</literal>, then <link linkend="clever-place-window"><function>clever-place-window</function></link> will be used instead of
<link linkend="smart-place-window"><function>smart-place-window</function></link> when the default placement procedure is used, and
the window's smart-placement flag is on.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 337 </para> </refsect1>
</refentry>

<refentry id="set-start-on-desk-x">
  <refnamediv>
    <refname>set-start-on-desk!</refname>
    <refpurpose>Make WIN start on DESK when first mapped.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-start-on-desk! desk #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Make <parameter>win</parameter> start on <parameter>desk</parameter> when first mapped. <parameter>win</parameter> defaults to the
window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3718 </para> </refsect1>
</refentry>

<refentry id="set-title-face-x">
  <refnamediv>
    <refname>set-title-face!</refname>
    <refpurpose>Set the titlebar faces for the various window states.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-title-face! active-up #&amp;optional active-down inactive)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the titlebar faces for the various window states.
In the current decor, use <parameter>active-up</parameter> as the face for the title
bar when active and not pressed in. Use <parameter>active-down</parameter> when the title bar
is active and pressed in, and <parameter>inactive</parameter> when the window is
inactive. Both <parameter>inactive</parameter> and <parameter>active-down</parameter> default to <parameter>active-up</parameter> when not
specified. Note that <parameter>active-down</parameter> will magically reverse the sense of
the relief flag, so if your titlebar bar is raised in the <parameter>active-up</parameter>
state, it will be sunk in the <parameter>active-down</parameter> state by default.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/face.c"><filename>scwm/face.c</filename></ulink>
  at line 853 </para> </refsect1>
</refentry>

<refentry id="set-title-font-x">
  <refnamediv>
    <refname>set-title-font!</refname>
    <refpurpose>Set the font for window titles In the current decor to FONT.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-title-font! font)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the font for window titles In the current decor to <parameter>font</parameter>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/font.c"><filename>scwm/font.c</filename></ulink>
  at line 286 </para> </refsect1>
</refentry>

<refentry id="set-title-height-x">
  <refnamediv>
    <refname>set-title-height!</refname>
    <refpurpose>Set the height of the titlebar in pixels to HEIGHT.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-title-height! height)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the height of the titlebar in pixels to <parameter>height</parameter>.
Applies to the current decor.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 89 </para> </refsect1>
</refentry>

<refentry id="set-title-justify-x">
  <refnamediv>
    <refname>set-title-justify!</refname>
    <refpurpose>Set the justification for the title to JUST.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-title-justify! just)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the justification for the title to <parameter>just</parameter>.
<parameter>just</parameter> should be one of 'right, 'left, or 'center. Applies to the
current decor.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 37 </para> </refsect1>
</refentry>

<refentry id="set-viewport-position-x">
  <refnamediv>
    <refname>set-viewport-position!</refname>
    <refpurpose>Position the upper left corner of the viewport at coordinates X, Y.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-viewport-position! x y)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Position the upper left corner of the viewport at coordinates <parameter>x</parameter>, <parameter>y</parameter>.
<parameter>x</parameter> and <parameter>y</parameter> are given in pixels.  Does not affect the current desk.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 97 </para> </refsect1>
</refentry>

<refentry id="set-window-background-x">
  <refnamediv>
    <refname>set-window-background!</refname>
    <refpurpose>Set the background color of WIN to BG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-background! bg #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the background color of <parameter>win</parameter> to <parameter>bg</parameter>.
This color is used to draw most of the window decorations, along with
the relief colors generated from it, which are used to draw the
window's 3-D bevels.  <parameter>win</parameter> defaults to the window context in the usual
way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3217 </para> </refsect1>
</refentry>

<refentry id="set-window-button-x">
  <refnamediv>
    <refname>set-window-button!</refname>
    <refpurpose>Set the visibility of button number N on window WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-button! n flag #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the visibility of button number <parameter>n</parameter> on window <parameter>win</parameter>.
If <parameter>flag</parameter> is <literal>#t</literal>, the button will be visible, otherwise it won't be
drawn.  <parameter>win</parameter> defaults to the window context in the usual way if not
specified. (<parameter>n</parameter>ote: this code may be broken right now.)
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3340 </para> </refsect1>
</refentry>

<refentry id="set-window-colors-x">
  <refnamediv>
    <refname>set-window-colors!</refname>
    <refpurpose>Set WIN's background color to BG, foreground color to FG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-colors! #&amp;optional (bg #f) (fg #f) (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set WIN's background color to BG, foreground color to FG.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 159 </para> </refsect1>
</refentry>

<refentry id="set-window-context-x">
  <refnamediv>
    <refname>set-window-context!</refname>
    <refpurpose>Set the current window context to WIN and return the old context.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-context! win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the current window context to <parameter>win</parameter> and return the old context.
<parameter>win</parameter> can be either a window, or <literal>#f</literal>, to reset the current window-context.
See also <link linkend="with-window"><function>with-window</function></link> and <link linkend="get-window"><function>get-window</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 845 </para> </refsect1>
</refentry>

<refentry id="set-window-decor-x">
  <refnamediv>
    <refname>set-window-decor!</refname>
    <refpurpose>Set WIN's decor to DECOR, updating its decorations appropriately.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-decor! win decor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set <parameter>win</parameter>'s decor to <parameter>decor</parameter>, updating its decorations appropriately.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/decor.c"><filename>scwm/decor.c</filename></ulink>
  at line 295 </para> </refsect1>
</refentry>

<refentry id="set-window-focus-x">
  <refnamediv>
    <refname>set-window-focus!</refname>
    <refpurpose>Set the focus style of WIN to SYM.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-focus! sym #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the focus style of <parameter>win</parameter> to <parameter>sym</parameter>. <parameter>sym</parameter> may be 'click, 'mouse,
'sloppy or 'none. <parameter>win</parameter> defaults to the window context in the usual way
if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3109 </para> </refsect1>
</refentry>

<refentry id="set-window-foreground-x">
  <refnamediv>
    <refname>set-window-foreground!</refname>
    <refpurpose>Set the foreground color of WIN to FG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-foreground! fg #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the foreground color of <parameter>win</parameter> to <parameter>fg</parameter>.
This color is used to draw the title text currently. In the future, it
may have other uses as well. <parameter>win</parameter> defaults to the window context in the
usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3194 </para> </refsect1>
</refentry>

<refentry id="set-window-highlight-background-x">
  <refnamediv>
    <refname>set-window-highlight-background!</refname>
    <refpurpose>Set the highlighted background color of WIN to BG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-highlight-background! bg #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the highlighted background color of <parameter>win</parameter> to <parameter>bg</parameter>.
This color is used when <parameter>win</parameter> has the focus to draw most of the window
decorations, along with the relief colors generated from it, which are
used to draw the window's 3-D bevels.  <parameter>win</parameter> defaults to the window context
in the usual way if not specified. If <parameter>bg</parameter> is <literal>#f</literal>, then lets the decor
highlight background color be used (turns off a special highlight color
for <parameter>win</parameter>).
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3275 </para> </refsect1>
</refentry>

<refentry id="set-window-highlight-foreground-x">
  <refnamediv>
    <refname>set-window-highlight-foreground!</refname>
    <refpurpose>Set the highlighted foreground color of WIN to FG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-highlight-foreground! fg #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the highlighted foreground color of <parameter>win</parameter> to <parameter>fg</parameter>.
This color is used to draw the title text when <parameter>win</parameter> has the focus.
In the future, it may have other uses
as well. <parameter>win</parameter> defaults to the window context in the usual way
if not specified. If <parameter>fg</parameter> is <literal>#f</literal>, then lets the decor highlight
foreground color be used (turns off a special highlight
color for <parameter>win</parameter>).
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3247 </para> </refsect1>
</refentry>

<refentry id="set-window-placement-proc-x">
  <refnamediv>
    <refname>set-window-placement-proc!</refname>
    <refpurpose>Set the 'placement-proc property of WIN to PROC.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-placement-proc! proc win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the 'placement-proc property of WIN to PROC.
When the window manager tries to place WIN, it will call PROC to
actually set its position.  This function must be called before the 
window is placed (i.e., from before-new-window-hook); see <link linkend="window-style"><function>window-style</function></link>
for a way to make sure this function is called at the correct time.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm style)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/style.scm"><filename>scheme/style.scm</filename></ulink>
  at line 238 </para> </refsect1>
</refentry>

<refentry id="set-window-property-x">
  <refnamediv>
    <refname>set-window-property!</refname>
    <refpurpose>Set window property PROP of WIN to VAL.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-property! win prop val)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set window property <parameter>prop</parameter> of <parameter>win</parameter> to <parameter>val</parameter>.
<parameter>prop</parameter> should be a symbol. <parameter>val</parameter> may be any Scheme object. This name/value
pair will be associated with the window, and may be retrieved with
<link linkend="window-property"><function>window-property</function></link>. Passing <literal>#f</literal> as the value will delete the property
instead. Soon, some properties will have magical meanings, altering
particular fields in the window structure. Also, a
window-property-change-hook mechanism will soon be implemented for
notification of all window property changes. This is not yet done. The
window property primitives should be considered in flux.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3773 </para> </refsect1>
</refentry>

<refentry id="set-window-title-x">
  <refnamediv>
    <refname>set-window-title!</refname>
    <refpurpose>Change the window title X-Property of WIN to TITLE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-title! win title)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Change the window title X-Property of WIN to TITLE.
WIN is a Scwm window object, TITLE is a string.  This procedure alters the
window title by changing the WM_NAME X-Property.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 423 </para> </refsect1>
</refentry>

<refentry id="set-window-transient-placement-proc-x">
  <refnamediv>
    <refname>set-window-transient-placement-proc!</refname>
    <refpurpose>Like <link linkend="set-window-placement-proc-x"><function>set-window-placement-proc!</function></link> (which see), but for transient</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-window-transient-placement-proc! proc win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Like <link linkend="set-window-placement-proc-x"><function>set-window-placement-proc!</function></link> (which see), but for transient
windows.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm style)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/style.scm"><filename>scheme/style.scm</filename></ulink>
  at line 246 </para> </refsect1>
</refentry>

<refentry id="set-X-server-synchronize-x">
  <refnamediv>
    <refname>set-X-server-synchronize!</refname>
    <refpurpose>Set X server sychronization flag to FLAG.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(set-X-server-synchronize! flag)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set X server sychronization flag to <parameter>flag</parameter>.
If <parameter>flag</parameter> is <literal>#t</literal>, then Scwm will turn on synchronous X behaviour; if <parameter>flag</parameter>
is <literal>#f</literal>, Scwm will turn off synchronous behaviour.  Scwm is slower in
synchronous mode, but can be easier to debug.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 544 </para> </refsect1>
</refentry>

<refentry id="shadow-factor">
  <refnamediv>
    <refname>shadow-factor</refname>
    <refpurpose>Return the current shadow factor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(shadow-factor)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current shadow factor.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/color.c"><filename>scwm/color.c</filename></ulink>
  at line 547 </para> </refsect1>
</refentry>

<refentry id="should-circulate-skip-p">
  <refnamediv>
    <refname>should-circulate-skip?</refname>
    <refpurpose>Return <literal>#t</literal> if WIN should now be skipped when circulating, <literal>#f</literal> otherwise.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(should-circulate-skip? #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if WIN should now be skipped when circulating, <literal>#f</literal> otherwise.
Uses the current state of WIN (whether it is iconified or not) in
determining the result.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winlist)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winlist.scm"><filename>scheme/winlist.scm</filename></ulink>
  at line 215 </para> </refsect1>
</refentry>

<refentry id="show-com">
  <refnamediv>
    <refname>show-com</refname>
    <refpurpose>Return a lambda to show the stdout generated by the COM shell pipeline.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(show-com com)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a lambda to show the stdout generated by the COM shell pipeline.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 142 </para> </refsect1>
</refentry>

<refentry id="show-file">
  <refnamediv>
    <refname>show-file</refname>
    <refpurpose>Return a lambda to display the contents of filename in a window.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(show-file filename)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a lambda to display the contents of filename in a window.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 138 </para> </refsect1>
</refentry>

<refentry id="show-mesg">
  <refnamediv>
    <refname>show-mesg</refname>
    <refpurpose>Return a lambda to display the string arguments STR in a message window.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(show-mesg . str)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a lambda to display the string arguments STR in a message window.
See also <link linkend="message"><function>message</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 133 </para> </refsect1>
</refentry>

<refentry id="show-system-info">
  <refnamediv>
    <refname>show-system-info</refname>
    <refpurpose>Display the <link linkend="system-info-string"><function>system-info-string</function></link> system details in a window.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(show-system-info)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Display the <link linkend="system-info-string"><function>system-info-string</function></link> system details in a window.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 179 </para> </refsect1>
</refentry>

<refentry id="show-titlebar">
  <refnamediv>
    <refname>show-titlebar</refname>
    <refpurpose>Cause WIN to be decorated with a titlebar.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(show-titlebar  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter> to be decorated with a titlebar.
See also <link linkend="hide-titlebar"><function>hide-titlebar</function></link>.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2814 </para> </refsect1>
</refentry>

<refentry id="show-window-list-menu">
  <refnamediv>
    <refname>show-window-list-menu</refname>
    <refpurpose>Popup a window list menu and permit a selection to be made.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(show-window-list-menu #&amp;key (only '()) (except '())
				       (by-stacking #f)
				       (by-focus #f)
				       (reverse #f)
				       (proc window-list-proc)
				       (flash-window-proc #f)
				       (unflash-window-proc #f)
				       (show-geometry #f)
				       (show-last-focus-time #f)
				       (warp-to-first #f)
				       (ignore-winlist-skip #f)
				       (show-mini-icon #t))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Popup a window list menu and permit a selection to be made.
ONLY and EXCEPT are procedures that control which windows will appear
in the list -- see <link linkend="list-windows"><function>list-windows</function></link> for details. BY-STACKING, BY-FOCUS
and REVERSE control the order in which windows appear. See
<link linkend="list-windows"><function>list-windows</function></link> for more on these as well.

PROC is the procedure which will be called on the selected window. 

FLASH-WINDOW-PROC and UNFLASH-WINDOW-PROC are set as the hover-action
and unhover-action (respectively) of the items in the menu.  (See
<link linkend="menuitem"><function>menuitem</function></link>.)

If SHOW-GEOMETRY is <literal>#t</literal>, the geometries of the windows will be listed
in each menuitem.  

If SHOW-LAST-FOCUS-TIME is <literal>#t</literal>, the last focus time of the windows will be listed
in each menuitem.

If SHOW-MINI-ICON is <literal>#t</literal>, the mini-icon of the windows will be
displayed with each menuitem.

If WARP-TO-FIRST is <literal>#t</literal>, the mouse pointer will be warped to the first
menuitem (see <link linkend="popup-menu"><function>popup-menu</function></link>).  

  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winlist)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winlist.scm"><filename>scheme/winlist.scm</filename></ulink>
  at line 95 </para> </refsect1>
</refentry>

<refentry id="shutdown-options">
  <refnamediv>
    <refname>shutdown-options</refname>
    <refpurpose>Configure shutdown preferences.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(shutdown-options #&amp;key switch-to-home-viewport
				  move-windows-to-current-viewport)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Configure shutdown preferences.

Both SWITCH-TO-HOME-VIEWPORT and MOVE-WINDOWS-TO-CURRENT-VIEWPORT may
be be any of <literal>#f</literal>, <literal>#t</literal>, 'shutdown-only or 'restart-only. These options
indicate when scwm should switch to the (0 0) viewport on shutdown,
and whether all windows are moved to to the current viewport on
shutdown, respectively.

The possible settings mean never, always, only when shutting down or
only when restarting, respectively.

Any window movement is done after any viewport switching.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm shutdown-opts)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/shutdown-opts.scm"><filename>scheme/shutdown-opts.scm</filename></ulink>
  at line 32 </para> </refsect1>
</refentry>

<refentry id="simple-title-style">
  <refnamediv>
    <refname>simple-title-style</refname>
    <refpurpose>Set the style for titlebars.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(simple-title-style #&amp;key font height justify)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the style for titlebars.
FONT is a font object or a string, HEIGHT is a number of points,
JUSTIFY is a legal argument to <link linkend="set-title-justify-x"><function>set-title-justify!</function></link> such as 'left,
'right, or 'center.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 262 </para> </refsect1>
</refentry>

<refentry id="size-to-str">
  <refnamediv>
    <refname>size->str</refname>
    <refpurpose>Convert a two-element list to a string.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(size->str sz #&amp;optional (sep "x"))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Convert a two-element list to a string.
Use the optional second argument as the separator.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 150 </para> </refsect1>
</refentry>

<refentry id="sleep-ms">
  <refnamediv>
    <refname>sleep-ms</refname>
    <refpurpose>Delay for MS milliseconds.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(sleep-ms ms)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Delay for MS milliseconds.
Note that timer-hooks are much more useful in nearly all
cases.  See <link linkend="add-timer-hook-x"><function>add-timer-hook!</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 241 </para> </refsect1>
</refentry>

<refentry id="SM-client-id">
  <refnamediv>
    <refname>SM-client-id</refname>
    <refpurpose>Return scwm's session management client id (a string).</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(SM-client-id)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return scwm's session management client id (a string).
A return value of <literal>#f</literal> indicates that session management is not active.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/session-manager.c"><filename>scwm/session-manager.c</filename></ulink>
  at line 423 </para> </refsect1>
</refentry>

<refentry id="SM-error-message">
  <refnamediv>
    <refname>SM-error-message</refname>
    <refpurpose>Return a string, describing why session management is not available.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(SM-error-message)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a string, describing why session management is not available.
Only valid, if <link linkend="-M-client-id"><function>SM-client-id</function></link> is <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/session-manager.c"><filename>scwm/session-manager.c</filename></ulink>
  at line 435 </para> </refsect1>
</refentry>

<refentry id="smart-place-window">
  <refnamediv>
    <refname>smart-place-window</refname>
    <refpurpose>Places WIN using fvwm2's SmartPlacement algorithm.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(smart-place-window win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Places <parameter>win</parameter> using fvwm2's SmartPlacement algorithm.
The placement is just as if SmartPlacementIsReallySmart were not in
effect. That is, it tries to place the window so that it does not
overlap any other. If it fails to do so, it returns <literal>#f</literal>; otherwise it
returns <literal>#t</literal>.
This is called as part of <link linkend="default-placement-proc"><function>default-placement-proc</function></link>.  It could also be
used in user-defined placement procedures (see
<link linkend="set-window-placement-proc-x"><function>set-window-placement-proc!</function></link>).
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/placement.c"><filename>scwm/placement.c</filename></ulink>
  at line 414 </para> </refsect1>
</refentry>

<refentry id="smart-placement-is-really-smart-p">
  <refnamediv>
    <refname>smart-placement-is-really-smart?</refname>
    <refpurpose>Return whether or not <link linkend="clever-place-window"><function>clever-place-window</function></link> will be used when smart-placing.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(smart-placement-is-really-smart?)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return whether or not <link linkend="clever-place-window"><function>clever-place-window</function></link> will be used when smart-placing.
If the value is <literal>#t</literal>, then <link linkend="clever-place-window"><function>clever-place-window</function></link> will be used instead of
smart-place-window when the default placement procedure is used, and
the window's smart-placement flag is on.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 352 </para> </refsect1>
</refentry>

<refentry id="sort">
  <refnamediv>
    <refname>sort</refname>
    <refpurpose>Returned LS sorted according to COMPARE (defaults to ascending numerical order).</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(sort ls #&amp;optional (compare >))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returned LS sorted according to COMPARE (defaults to ascending numerical order).
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/sort.scm"><filename>scheme/sort.scm</filename></ulink>
  at line 41 </para> </refsect1>
</refentry>

<refentry id="stick">
  <refnamediv>
    <refname>stick</refname>
    <refpurpose>Make WIN "sticky" so that it stays stationary in the viewport.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(stick  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Make <parameter>win</parameter> "sticky" so that it stays stationary in the viewport.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1958 </para> </refsect1>
</refentry>

<refentry id="stick-icon">
  <refnamediv>
    <refname>stick-icon</refname>
    <refpurpose>Cause WIN's icon to become "sticky".</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(stick-icon  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter>'s icon to become "sticky". See <link linkend="stick"><function>stick</function></link>. <parameter>win</parameter>
defaults to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2997 </para> </refsect1>
</refentry>

<refentry id="sticky-p">
  <refnamediv>
    <refname>sticky?</refname>
    <refpurpose>Return <literal>#t</literal> if WIN is "sticky", <literal>#f</literal> otherwise.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(sticky?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>win</parameter> is "sticky", <literal>#f</literal> otherwise.
See <link linkend="stick"><function>stick</function></link> for an explanation. <parameter>win</parameter> defaults to the
window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2020 </para> </refsect1>
</refentry>

<refentry id="string-to-X-atom">
  <refnamediv>
    <refname>string->X-atom</refname>
    <refpurpose>Returns an X atom representing STRING.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(string->X-atom string)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns an X atom representing <parameter>string</parameter>.
If <parameter>string</parameter> contains NULL-characters, the behaviour is undefined.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/xproperty.c"><filename>scwm/xproperty.c</filename></ulink>
  at line 356 </para> </refsect1>
</refentry>

<refentry id="style-one-window">
  <refnamediv>
    <refname>style-one-window</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(style-one-window win . args)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm style)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/style.scm"><filename>scheme/style.scm</filename></ulink>
  at line 37 </para> </refsect1>
</refentry>

<refentry id="style-option:cumulative-p">
  <refnamediv>
    <refname>style-option:cumulative?</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(style-option:cumulative? window-style-options key)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/style-options.scm"><filename>scheme/style-options.scm</filename></ulink>
  at line 59 </para> </refsect1>
</refentry>

<refentry id="style-option:handler">
  <refnamediv>
    <refname>style-option:handler</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(style-option:handler key)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm style-options)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/style-options.scm"><filename>scheme/style-options.scm</filename></ulink>
  at line 55 </para> </refsect1>
</refentry>

<refentry id="style-option:type">
  <refnamediv>
    <refname>style-option:type</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(style-option:type key)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm style-options)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/style-options.scm"><filename>scheme/style-options.scm</filename></ulink>
  at line 57 </para> </refsect1>
</refentry>

<refentry id="support-image-conversion">
  <refnamediv>
    <refname>support-image-conversion</refname>
    <refpurpose>Set things up to try to load arbitrary images.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(support-image-conversion)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set things up to try to load arbitrary images.
Works by setting <link linkend="try-everything-loader"><function>try-everything-loader</function></link> as the image loader for
unknown extensions.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/image-loaders.scm"><filename>scheme/image-loaders.scm</filename></ulink>
  at line 55 </para> </refsect1>
</refentry>

<refentry id="system-info-string">
  <refnamediv>
    <refname>system-info-string</refname>
    <refpurpose>Return a string with various system information.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(system-info-string)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a string with various system information.
Use <link linkend="show-system-info"><function>show-system-info</function></link> to display it in a window.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 84 </para> </refsect1>
</refentry>

<refentry id="take-screenshot">
  <refnamediv>
    <refname>take-screenshot</refname>
    <refpurpose>Take a snapshot of the whole screen.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(take-screenshot
		 #&amp;optional (template (string-append
				       (user-home)
				       "/screenshot%y%m%d%H%M%S.xwd")))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Take a snapshot of the whole screen.
The screenshot will be saved in xwd format in the filename constructed from
TEMPLATE. %-escapes in TEMPLATE will be replaced by time-elements, according
to strftime rules. TEMPLATE defaults to the file \"screenshot%y%m%d%H%M%S.xwd\"
in the user's home directory.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 692 </para> </refsect1>
</refentry>

<refentry id="theme:background-style">
  <refnamediv>
    <refname>theme:background-style</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(theme:background-style theme)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/theme-impl.scm"><filename>scheme/theme-impl.scm</filename></ulink>
  at line 73 </para> </refsect1>
</refentry>

<refentry id="theme:name">
  <refnamediv>
    <refname>theme:name</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(theme:name theme)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm theme-impl)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/theme-impl.scm"><filename>scheme/theme-impl.scm</filename></ulink>
  at line 67 </para> </refsect1>
</refentry>

<refentry id="theme:window-style">
  <refnamediv>
    <refname>theme:window-style</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(theme:window-style theme)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm theme-impl)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/theme-impl.scm"><filename>scheme/theme-impl.scm</filename></ulink>
  at line 70 </para> </refsect1>
</refentry>

<refentry id="there-exists-p">
  <refnamediv>
    <refname>there-exists?</refname>
    <refpurpose>Return true if PRED is true for at least one elements of L, otherwise false.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(there-exists? l pred)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return true if PRED is true for at least one elements of L, otherwise false.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm listops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/listops.scm"><filename>scheme/listops.scm</filename></ulink>
  at line 95 </para> </refsect1>
</refentry>

<refentry id="tile">
  <refnamediv>
    <refname>tile</refname>
    <refpurpose>Tile the windows on the specified desk.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(tile #&amp;key (only ()) (except ()) 
			 (by-stacking #f) (by-focus #f)
			 (reverse #f)
			 (all-viewports #f) (desk (current-desk))
			 (ignore-default-exceptions #f)
			 (start-pos '(0 0)) 
			 (end-pos (display-size)) (resize 'always)
			 (restack #t)
			 (max-windows #f)
			 (order 'horizontal))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Tile the windows on the specified desk.
The DESK option, defaulting to the current desk, specifies which desk;
ALL-VIEWPORTS, when true indicates that the windows in all viewports
of this desk should be tiled, otherwise only the current viewport
is tiled. 

The options ONLY, EXCEPT, BY-STACKING, BY-FOCUS and REVERSE indicate
the windows to use and the order to use them in, as with
<link linkend="list-windows"><function>list-windows</function></link>. However, unless IGNORE-DEFAULT-EXCEPTIONS is <literal>#t</literal>,
transient, maximized, sticky and iconified windows will be always be
excluded.

START-POS, END-POS, RESIZE, RAISE, MAX-WINDOWS and ORDER
control the tiling options as for <link linkend="tile-windows"><function>tile-windows</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/tile.scm"><filename>scheme/tile.scm</filename></ulink>
  at line 124 </para> </refsect1>
</refentry>

<refentry id="tile-windows">
  <refnamediv>
    <refname>tile-windows</refname>
    <refpurpose>Tile WINDOWS according to several parameters.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(tile-windows
		 windows #&amp;key (start-pos '(0 0)) 
		 (end-pos (display-size)) (resize 'always)
		 (raise 'restack-only)
		 (max-windows #f)
		 (order 'horizontal))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Tile WINDOWS according to several parameters.  

Tiling places the windows according to a grid from START-POS, (0 0) by
default, to END-POS, the size of the display by default. 

If MAX-WINDOWS is specified and not <literal>#f</literal>, at most MAX-WINDOWS elements
of WINDOWS will be operated on.

If ORDER is 'horizontal, the windows will be tiled in row-major order;
if it is 'vertical they will be tiled in column-major oder.

RESIZE may be <literal>#f</literal>, 'shrink-only or 'always, indicating that the windows
should never be resized, that they should be resized to the max-size
only if they are bigger, or that they should always be resized to the
max size. The default is 'shrink-only.

RAISE may be <literal>#f</literal>, <literal>#t</literal>, or 'restack-only, indicating that the windows
should not be moved in the stacking order; that they should be raised
on top of other windows and placed in the tile order with the upper
left window lowest in the stacking order; or that they should be
restacked as for <literal>#t</literal> but not raised above other windows,
respectively. The default is 'restack-only.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm tile)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/tile.scm"><filename>scheme/tile.scm</filename></ulink>
  at line 34 </para> </refsect1>
</refentry>

<refentry id="time-t-to-seconds-ago">
  <refnamediv>
    <refname>time-t->seconds-ago</refname>
    <refpurpose>Return the number of seconds that have passed since TIMET was the current time.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(time-t->seconds-ago timet)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the number of seconds that have passed since TIMET was the current time.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm wininfo)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/wininfo.scm"><filename>scheme/wininfo.scm</filename></ulink>
  at line 141 </para> </refsect1>
</refentry>

<refentry id="title-font">
  <refnamediv>
    <refname>title-font</refname>
    <refpurpose>Return the font used for drawing window titles in the current decor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(title-font)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the font used for drawing window titles in the current decor.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/font.c"><filename>scwm/font.c</filename></ulink>
  at line 315 </para> </refsect1>
</refentry>

<refentry id="title-height">
  <refnamediv>
    <refname>title-height</refname>
    <refpurpose>Return the height of the titlebar in pixels, as set by <link linkend="set-title-height-x"><function>set-title-height!</function></link>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(title-height)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the height of the titlebar in pixels, as set by <link linkend="set-title-height-x"><function>set-title-height!</function></link>.
Applies to the current decor.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 122 </para> </refsect1>
</refentry>

<refentry id="title-justify">
  <refnamediv>
    <refname>title-justify</refname>
    <refpurpose>Return the current justification for the title, as set by <link linkend="set-title-justify-x"><function>set-title-justify!</function></link>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(title-justify)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current justification for the title, as set by <link linkend="set-title-justify-x"><function>set-title-justify!</function></link>.
The return value will be one of 'right, 'left, or 'center. Applies to the
current decor.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 67 </para> </refsect1>
</refentry>

<refentry id="title-style">
  <refnamediv>
    <refname>title-style</refname>
    <refpurpose>Set the title style in the current decor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(title-style #&amp;key font height justify
			     (active-up '()) 
			     (active-down '()) 
			     (inactive '()) #&allow-other-keys . rest)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set the title style in the current decor.
FONT is the window title font, a font object or a string.
HEIGHT is the height of the title bar, in points.
JUSTIFY is one of 'left, 'right, or 'center.
This function also takes the keyword arguments #:relief, #:solid,
#:gradient, #:h-gradient, #:v-gradient, and #:pixmap, with effects
as described under the `Face Flags' and `Face Specification Flags'
concepts (except that #:pixmap is always tiled, and #:h-gradient
and #:v-gradient are horizontal and vertical gradients).  These
extra keyword arguments can either be included in the main argument
list, or lists of these arguments can be used as the ACTIVE-UP,
ACTIVE-DOWN, or INACTIVE arguments.  For instance:
  (title-style #:solid \"red\" #:inactive (list #:solid \"green\"))
would set the title to be red in either active state, and green
in the inactive state, leaving FONT, HEIGHT, and JUSTIFY in their
current state, and returning everything else about the title
to their default state.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm face)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/face.scm"><filename>scheme/face.scm</filename></ulink>
  at line 29 </para> </refsect1>
</refentry>

<refentry id="titlebar-shown-p">
  <refnamediv>
    <refname>titlebar-shown?</refname>
    <refpurpose>Return <literal>#t</literal> if WIN is decorated with a titlebar, <literal>#f</literal> otherwise.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(titlebar-shown?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>win</parameter> is decorated with a titlebar, <literal>#f</literal> otherwise.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2862 </para> </refsect1>
</refentry>

<refentry id="to-string">
  <refnamediv>
    <refname>to-string</refname>
    <refpurpose>Dump all arguments into a string.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(to-string . rest)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Dump all arguments into a string.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 80 </para> </refsect1>
</refentry>

<refentry id="toggle-max-both">
  <refnamediv>
    <refname>toggle-max-both</refname>
    <refpurpose>Toggle the current window's maximization (both vertically and horizontally).</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(toggle-max-both)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Toggle the current window's maximization (both vertically and horizontally).
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 61 </para> </refsect1>
</refentry>

<refentry id="toggle-max-horz">
  <refnamediv>
    <refname>toggle-max-horz</refname>
    <refpurpose>Toggle the current window's maximized-horizontally state.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(toggle-max-horz)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Toggle the current window's maximized-horizontally state.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 57 </para> </refsect1>
</refentry>

<refentry id="toggle-max-vert">
  <refnamediv>
    <refname>toggle-max-vert</refname>
    <refpurpose>Toggle the current window's maximized-vertically state.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(toggle-max-vert)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Toggle the current window's maximized-vertically state.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 53 </para> </refsect1>
</refentry>

<refentry id="toggle-max-vert-part">
  <refnamediv>
    <refname>toggle-max-vert-part</refname>
    <refpurpose>Toggle the current window's maximization-vertically to 95% of the screen height.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(toggle-max-vert-part)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Toggle the current window's maximization-vertically to 95% of the screen height.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 65 </para> </refsect1>
</refentry>

<refentry id="toggle-maximize">
  <refnamediv>
    <refname>toggle-maximize</refname>
    <refpurpose>Maximize to width NW, height NH if not maximized, or unmaximize.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(toggle-maximize nw nh #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Maximize to width NW, height NH if not maximized, or unmaximize.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winops.scm"><filename>scheme/winops.scm</filename></ulink>
  at line 157 </para> </refsect1>
</refentry>

<refentry id="transient-p">
  <refnamediv>
    <refname>transient?</refname>
    <refpurpose>Return <literal>#t</literal> if WIN is transient, <literal>#f</literal> if not.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(transient?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>win</parameter> is transient, <literal>#f</literal> if not.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1848 </para> </refsect1>
</refentry>

<refentry id="try-everything-loader">
  <refnamediv>
    <refname>try-everything-loader</refname>
    <refpurpose>Tries to load an arbitrary image, using any available loader.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(try-everything-loader fname)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Tries to load an arbitrary image, using any available loader.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm image-loaders)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/image-loaders.scm"><filename>scheme/image-loaders.scm</filename></ulink>
  at line 49 </para> </refsect1>
</refentry>

<refentry id="un-keep-on-top">
  <refnamediv>
    <refname>un-keep-on-top</refname>
    <refpurpose>Remove the on-top property from WIN, if it has it.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(un-keep-on-top  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Remove the on-top property from <parameter>win</parameter>, if it has it.
See <link linkend="keep-on-top"><function>keep-on-top</function></link>. <parameter>win</parameter> defaults to the window context in the usual
way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2756 </para> </refsect1>
</refentry>

<refentry id="unbind-key">
  <refnamediv>
    <refname>unbind-key</refname>
    <refpurpose>Remove any bindings attached to KEY in given CONTEXTS.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unbind-key contexts key)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Remove any bindings attached to <parameter>key</parameter> in given <parameter>contexts</parameter>.
<parameter>contexts</parameter> is a list of event-contexts (e.g., '(button1 sidebar))
<parameter>key</parameter> is a string giving the key-specifier (e.g., M-Delete for Meta+Delete)
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/binding.c"><filename>scwm/binding.c</filename></ulink>
  at line 590 </para> </refsect1>
</refentry>

<refentry id="unbind-mouse">
  <refnamediv>
    <refname>unbind-mouse</refname>
    <refpurpose>Remove any bindings attached to mouse BUTTON in given CONTEXTS.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unbind-mouse contexts button)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Remove any bindings attached to mouse <parameter>button</parameter> in given <parameter>contexts</parameter>.
<parameter>contexts</parameter> is a list of event-contexts (e.g., '(button1 sidebar))
<parameter>button</parameter> is a string or integer giving the mouse button number
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/binding.c"><filename>scwm/binding.c</filename></ulink>
  at line 648 </para> </refsect1>
</refentry>

<refentry id="unflash-window">
  <refnamediv>
    <refname>unflash-window</refname>
    <refpurpose>Revert WIN's titlebar and boundary color to state before a <link linkend="flash-window"><function>flash-window</function></link>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unflash-window #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Revert WIN's titlebar and boundary color to state before a <link linkend="flash-window"><function>flash-window</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 476 </para> </refsect1>
</refentry>

<refentry id="unfocus">
  <refnamediv>
    <refname>unfocus</refname>
    <refpurpose>Remove the input focus from any window that may have it.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unfocus)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Remove the input focus from any window that may have it.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1661 </para> </refsect1>
</refentry>

<refentry id="unmaximize">
  <refnamediv>
    <refname>unmaximize</refname>
    <refpurpose>Unmaximize WIN so it returns to its size/position before maximization.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unmaximize #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Unmaximize WIN so it returns to its size/position before maximization.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winops.scm"><filename>scheme/winops.scm</filename></ulink>
  at line 122 </para> </refsect1>
</refentry>

<refentry id="unregister-image-loader">
  <refnamediv>
    <refname>unregister-image-loader</refname>
    <refpurpose>Unregister the loader, if any, for images ending in EXTENSION.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unregister-image-loader extension)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Unregister the loader, if any, for images ending in <parameter>extension</parameter>.
<parameter>extension</parameter> must be a string beginning with a period, the
empty string (for files with no extension), or the string "default"
(for files that no other image loader succeeds in loading).
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/image.c"><filename>scwm/image.c</filename></ulink>
  at line 325 </para> </refsect1>
</refentry>

<refentry id="unset-message-window-position-x">
  <refnamediv>
    <refname>unset-message-window-position!</refname>
    <refpurpose>Move the message window back to the default screen-center position.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unset-message-window-position!)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move the message window back to the default screen-center position.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 524 </para> </refsect1>
</refentry>

<refentry id="unstick">
  <refnamediv>
    <refname>unstick</refname>
    <refpurpose>Cause a window to no longer be "sticky", if it is.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unstick  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause a window to no longer be "sticky", if it is.
See <link linkend="stick"><function>stick</function></link> for an explanation. <parameter>win</parameter> defaults to the window context in
the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1989 </para> </refsect1>
</refentry>

<refentry id="unstick-icon">
  <refnamediv>
    <refname>unstick-icon</refname>
    <refpurpose>Cause WIN's icon to no longer by "sticky".</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(unstick-icon  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter>'s icon to no longer by "sticky". See <link linkend="stick-icon"><function>stick-icon</function></link>
and <link linkend="stick"><function>stick</function></link>. <parameter>win</parameter> defaults to the window context in the usual way if
not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3016 </para> </refsect1>
</refentry>

<refentry id="use-change-desk-commands">
  <refnamediv>
    <refname>use-change-desk-commands</refname>
    <refpurpose>Execute one of the VECTOR-OF-COMMANDS shell commands when the desk changes.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(use-change-desk-commands vector-of-commands)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Execute one of the VECTOR-OF-COMMANDS shell commands when the desk changes.
The 0th element of the vector is used for changes to desk 0,
the first element for changes to desk 1, etc.  Changes to desks which are
\"off the end\" of the vector do nothing.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 656 </para> </refsect1>
</refentry>

<refentry id="use-theme">
  <refnamediv>
    <refname>use-theme</refname>
    <refpurpose>Use settings from THEME to set up the window manager.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(use-theme theme #&amp;key (for-windows #t) 
			    (for-menus #t) (for-icons #t)
			    (for-background #t) 
			    (for-global-settings #t))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Use settings from THEME to set up the window manager.
THEME can be either a theme object (as returned by <link linkend="load-theme"><function>load-theme</function></link>) or a
string naming a theme, in which case that theme will be loaded and
used.  By default, window styles, menus, icons, backgrounds, and
global settings are all affected; if the FOR-WINDOWS, FOR-MENUS,
FOR-ICONS, FOR-BACKGROUND, or FOR-GLOBAL-SETTINGS arguments are <literal>#f</literal>,
the corresponding areas are not affected.  (Note: at this time,
only windows and backgrounds are affected; the other components
of themes have yet to be implemented.)
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm themes)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/themes.scm"><filename>scheme/themes.scm</filename></ulink>
  at line 49 </para> </refsect1>
</refentry>

<refentry id="user-home">
  <refnamediv>
    <refname>user-home</refname>
    <refpurpose>Return the current user's home directory.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(user-home)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current user's home directory.
This is set to one of the following (in order of relevance):
<envar>$HOME</envar>,
the directory field of the current uid's entry in the password file,
the constant string "/tmp".
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 664 </para> </refsect1>
</refentry>

<refentry id="user-name">
  <refnamediv>
    <refname>user-name</refname>
    <refpurpose>Return the current user's name.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(user-name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the current user's name.
This is set to one of the following (in order of relevance):
<envar>$USER</envar>, <envar>$LOGNAME</envar>,
the name field of the current uid's entry in the password file,
the constant string "nobody".
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 651 </para> </refsect1>
</refentry>

<refentry id="viewport-to-virtual">
  <refnamediv>
    <refname>viewport->virtual</refname>
    <refpurpose>Return the virtual coordinates for viewport X,Y.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(viewport->virtual x y)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the virtual coordinates for viewport X,Y.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 80 </para> </refsect1>
</refentry>

<refentry id="viewport-position">
  <refnamediv>
    <refname>viewport-position</refname>
    <refpurpose>Returns the current position of the viewport in pixels.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(viewport-position)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the current position of the viewport in pixels.
The returned value is a list of the x and y positions.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/deskpage.c"><filename>scwm/deskpage.c</filename></ulink>
  at line 115 </para> </refsect1>
</refentry>

<refentry id="viewport-x-position">
  <refnamediv>
    <refname>viewport-x-position</refname>
    <refpurpose>Return the x coordinate of the current viewport.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(viewport-x-position)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the x coordinate of the current viewport.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 72 </para> </refsect1>
</refentry>

<refentry id="viewport-y-position">
  <refnamediv>
    <refname>viewport-y-position</refname>
    <refpurpose>Return the y coordinate of the current viewport.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(viewport-y-position)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the y coordinate of the current viewport.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 76 </para> </refsect1>
</refentry>

<refentry id="virtual-to-viewport">
  <refnamediv>
    <refname>virtual->viewport</refname>
    <refpurpose>Return the viewport coordinates for virtual X,Y.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(virtual->viewport x y)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the viewport coordinates for virtual X,Y.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 84 </para> </refsect1>
</refentry>

<refentry id="virtual-size">
  <refnamediv>
    <refname>virtual-size</refname>
    <refpurpose>Return the size of the virtual screen in pixels.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(virtual-size)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the size of the virtual screen in pixels.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 88 </para> </refsect1>
</refentry>

<refentry id="virtual-switch-placement">
  <refnamediv>
    <refname>virtual-switch-placement</refname>
    <refpurpose>Wrap placement procedure PROC with virtual switching code.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(virtual-switch-placement proc #&amp;key (switch #t) (return #f))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Wrap placement procedure PROC with virtual switching code.
PROC is a procedure that takes a single window argument. The return
value is also a procedure of one one window argument which has the
same effect, except that it may switch to the desk and viewport of the
passed window before executing PROC, and may return to the previous
desk and viewport, depending on the values of SWITCH and RETURN
respectively.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm placement)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/placement.scm"><filename>scheme/placement.scm</filename></ulink>
  at line 137 </para> </refsect1>
</refentry>

<refentry id="visible-p">
  <refnamediv>
    <refname>visible?</refname>
    <refpurpose>Return <literal>#t</literal> if any of WIN is currently potentially visible, else <literal>#f</literal>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(visible? #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if any of WIN is currently potentially visible, else <literal>#f</literal>.
Note that this just checks if WIN is in the current viewport
and on the current desk.  It may still return <literal>#t</literal> if WIN is completely
obscured by other windows.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm wininfo)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/wininfo.scm"><filename>scheme/wininfo.scm</filename></ulink>
  at line 95 </para> </refsect1>
</refentry>

<refentry id="vx-">
  <refnamediv>
    <refname>vx-</refname>
    <refpurpose>Return the virtual coordinate X pixels left of the right virtual edge.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(vx- x)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the virtual coordinate X pixels left of the right virtual edge.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 92 </para> </refsect1>
</refentry>

<refentry id="vy-">
  <refnamediv>
    <refname>vy-</refname>
    <refpurpose>Return the virtual coordinate Y pixels up from the bottom virtual edge.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(vy- y)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the virtual coordinate Y pixels up from the bottom virtual edge.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 96 </para> </refsect1>
</refentry>

<refentry id="wpctx">
  <refnamediv>
    <refname>w%x</refname>
    <refpurpose>Return a pixel width X percent of the width of window W.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(w%x x #&amp;optional (w (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a pixel width X percent of the width of window W.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 108 </para> </refsect1>
</refentry>

<refentry id="wpcty">
  <refnamediv>
    <refname>w%y</refname>
    <refpurpose>Return a pixel height Y percent of the height of window W.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(w%y y #&amp;optional (w (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a pixel height Y percent of the height of window W.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 112 </para> </refsect1>
</refentry>

<refentry id="wait-for-window">
  <refnamediv>
    <refname>wait-for-window</refname>
    <refpurpose>Wait until a window appears which satisfies PREDICATE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(wait-for-window predicate)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Wait until a window appears which satisfies <parameter>predicate</parameter>.
Given the existence of before-new-window-hook, this is of questionable
usefulness and may be removed. Note that if no window satisfying <parameter>predicate</parameter>
ever appears, this will block scwm forever.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 294 </para> </refsect1>
</refentry>

<refentry id="warp-to-window">
  <refnamediv>
    <refname>warp-to-window</refname>
    <refpurpose>Move the mouse pointer to the upper left corner of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(warp-to-window  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Move the mouse pointer to the upper left corner of <parameter>win</parameter>.
If <parameter>win</parameter> is on a different desk or in a different viewport, these will
be changed appropriately so that the window is visible. <parameter>win</parameter> defaults
to the window context in the usual way if not specified.  Note that
the target window is not raised, so if the target window's upper
left corner is under another window, that other window may end up
with the keyboard focus.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1674 </para> </refsect1>
</refentry>

<refentry id="warp-to-window-viewport">
  <refnamediv>
    <refname>warp-to-window-viewport</refname>
    <refpurpose>Change to the desk and viewport of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(warp-to-window-viewport win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Change to the desk and viewport of WIN.
The viewport selected is an integral multiple of the viewport size
which contains the center of the window, or the closest possible if
none does.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm virtual)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/virtual.scm"><filename>scheme/virtual.scm</filename></ulink>
  at line 130 </para> </refsect1>
</refentry>

<refentry id="wiggle-window">
  <refnamediv>
    <refname>wiggle-window</refname>
    <refpurpose>Animatedly window shade and then unshade the current window.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(wiggle-window)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Animatedly window shade and then unshade the current window.
Just a toy--- perhaps could be useful to call attention to a window.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 69 </para> </refsect1>
</refentry>

<refentry id="wildcard-to-regexp">
  <refnamediv>
    <refname>wildcard->regexp</refname>
    <refpurpose>Return the regular expresision string corresponding to WILDCARD.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(wildcard->regexp wildcard)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the regular expresision string corresponding to WILDCARD.
This involves quoting meta characters and replacing the wildcard
meta-characters \"*\" with \".*\" and \"?\" with \".\".
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm wininfo)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/wininfo.scm"><filename>scheme/wininfo.scm</filename></ulink>
  at line 154 </para> </refsect1>
</refentry>

<refentry id="wildcard-match-p">
  <refnamediv>
    <refname>wildcard-match?</refname>
    <refpurpose>Returns <literal>#t</literal> if WILDCARD matches WIN (in the sense of <link linkend="wildcard-matcher"><function>wildcard-matcher</function></link>).</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(wildcard-match? wildcard #&amp;optional (win (get-window))
				 #&amp;key (full-regexp #f)
				 (regexp-options `(,regexp/icase)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns <literal>#t</literal> if WILDCARD matches WIN (in the sense of <link linkend="wildcard-matcher"><function>wildcard-matcher</function></link>).
See <link linkend="wildcard-matcher"><function>wildcard-matcher</function></link> for the meanings of FULL-REGEXP and REGEXP-OPTIONS.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm wininfo)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/wininfo.scm"><filename>scheme/wininfo.scm</filename></ulink>
  at line 203 </para> </refsect1>
</refentry>

<refentry id="wildcard-matcher">
  <refnamediv>
    <refname>wildcard-matcher</refname>
    <refpurpose>Return a procedure that matches WILDCARD against a window.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(wildcard-matcher wildcard #&amp;key (full-regexp #f)
				  (regexp-options `(,regexp/icase)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a procedure that matches WILDCARD against a window.
REGEXP-OPTIONS is passed to <link linkend="make-regexp"><function>make-regexp</function></link>.  If FULL-REGEXP is <literal>#t</literal>, 
the WILDCARD is considered to be a regular-expression instead of 
a shell-like wildcard.  The returned procedure takes a window
and returns <literal>#t</literal> if WILDCARD matches the title, class, or resource
of the window.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm wininfo)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/wininfo.scm"><filename>scheme/wininfo.scm</filename></ulink>
  at line 176 </para> </refsect1>
</refentry>

<refentry id="window-aligned-viewport">
  <refnamediv>
    <refname>window-aligned-viewport</refname>
    <refpurpose>Return the viewport that contains the center of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-aligned-viewport win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the viewport that contains the center of WIN.
The return value is an integral multiple of the viewport size which
contains the center of the window, or the closest possible if none
does.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm virtual)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/virtual.scm"><filename>scheme/virtual.scm</filename></ulink>
  at line 60 </para> </refsect1>
</refentry>

<refentry id="window-center-position">
  <refnamediv>
    <refname>window-center-position</refname>
    <refpurpose>Return the coordinates of the center of WIN as a list of the X and Y coordinate.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-center-position win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the coordinates of the center of WIN as a list of the X and Y coordinate.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm wininfo)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/wininfo.scm"><filename>scheme/wininfo.scm</filename></ulink>
  at line 119 </para> </refsect1>
</refentry>

<refentry id="window-class">
  <refnamediv>
    <refname>window-class</refname>
    <refpurpose>Return the window resource class of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-class  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window resource class of <parameter>win</parameter>.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2611 </para> </refsect1>
</refentry>

<refentry id="window-client-machine-name">
  <refnamediv>
    <refname>window-client-machine-name</refname>
    <refpurpose>Return the name of the client machine on which WIN is running.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-client-machine-name #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the name of the client machine on which WIN is running.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm wininfo)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/wininfo.scm"><filename>scheme/wininfo.scm</filename></ulink>
  at line 169 </para> </refsect1>
</refentry>

<refentry id="get-window-context">
  <refnamediv>
    <refname>window-context</refname>
    <refpurpose>Returns the current window context, or <literal>#f</literal> if there is none.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-context)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the current window context, or <literal>#f</literal> if there is none.
See also <link linkend="with-window"><function>with-window</function></link> and <link linkend="set-window-context-x"><function>set-window-context!</function></link>
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 866 </para> </refsect1>
</refentry>

<refentry id="window-decor">
  <refnamediv>
    <refname>window-decor</refname>
    <refpurpose>Return WIN's decor.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-decor win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <parameter>win</parameter>'s decor.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/decor.c"><filename>scwm/decor.c</filename></ulink>
  at line 329 </para> </refsect1>
</refentry>

<refentry id="window-deletable-p">
  <refnamediv>
    <refname>window-deletable?</refname>
    <refpurpose>Return <literal>#t</literal> if WIN is able to be deleted, <literal>#f</literal> otherwise.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-deletable?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>win</parameter> is able to be deleted, <literal>#f</literal> otherwise.
If this procedure returns <literal>#f</literal>, then a call to <link linkend="delete-window"><function>delete-window</function></link> on <parameter>win</parameter>
will do nothing.  <parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1625 </para> </refsect1>
</refentry>

<refentry id="window-desk">
  <refnamediv>
    <refname>window-desk</refname>
    <refpurpose>Return the desk that WIN is currently on.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-desk  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the desk that <parameter>win</parameter> is currently on. <parameter>win</parameter> defaults to the
window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2576 </para> </refsect1>
</refentry>

<refentry id="window-frame-area">
  <refnamediv>
    <refname>window-frame-area</refname>
    <refpurpose>Return the area of WIN's frame in square pixels.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-frame-area win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the area of WIN's frame in square pixels.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winops)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winops.scm"><filename>scheme/winops.scm</filename></ulink>
  at line 186 </para> </refsect1>
</refentry>

<refentry id="window-frame-border-width">
  <refnamediv>
    <refname>window-frame-border-width</refname>
    <refpurpose>Return the width of WIN's frame's border.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-frame-border-width  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the width of <parameter>win</parameter>'s frame's border.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2490 </para> </refsect1>
</refentry>

<refentry id="window-frame-id">
  <refnamediv>
    <refname>window-frame-id</refname>
    <refpurpose>Return the X window id for the outermost frame window of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-frame-id  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the X window id for the outermost frame window of <parameter>win</parameter>.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2519 </para> </refsect1>
</refentry>

<refentry id="window-frame-size">
  <refnamediv>
    <refname>window-frame-size</refname>
    <refpurpose>Return the size of the frame of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-frame-size  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the size of the frame of <parameter>win</parameter>.
The position is returned as a list of the width and the height in
pixels. <parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2417 </para> </refsect1>
</refentry>

<refentry id="window-geometry-string">
  <refnamediv>
    <refname>window-geometry-string</refname>
    <refpurpose>Return a string corresponding to the geometry specifications for WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-geometry-string #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a string corresponding to the geometry specifications for WIN.
The virtual position and the frame size are used.  The resulting string
looks like \"157x133+200+306\".  If WIN is iconified, the string
returned is in parentheses.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm wininfo)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/wininfo.scm"><filename>scheme/wininfo.scm</filename></ulink>
  at line 126 </para> </refsect1>
</refentry>

<refentry id="window-icon">
  <refnamediv>
    <refname>window-icon</refname>
    <refpurpose>Get the icon image being used for WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-icon win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Get the icon image being used for <parameter>win</parameter>.
Returns <literal>#f</literal> if none is being used. <parameter>win</parameter> defaults to the window context
in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3525 </para> </refsect1>
</refentry>

<refentry id="window-icon-shaped-p">
  <refnamediv>
    <refname>window-icon-shaped?</refname>
    <refpurpose>Return <literal>#t</literal> if WIN has shaped icon, <literal>#f</literal> otherwise.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-icon-shaped?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>win</parameter> has shaped icon, <literal>#f</literal> otherwise.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3609 </para> </refsect1>
</refentry>

<refentry id="window-icon-title">
  <refnamediv>
    <refname>window-icon-title</refname>
    <refpurpose>Return the icon window title of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-icon-title  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the icon window title of <parameter>win</parameter>.
This is the title as requested by the application. <parameter>win</parameter> defaults to
the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2599 </para> </refsect1>
</refentry>

<refentry id="window-id">
  <refnamediv>
    <refname>window-id</refname>
    <refpurpose>Return the X window id for WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-id  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the X window id for <parameter>win</parameter>.
This is the X id for the actual application window. <parameter>win</parameter> defaults to
the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2503 </para> </refsect1>
</refentry>

<refentry id="window-info">
  <refnamediv>
    <refname>window-info</refname>
    <refpurpose>Display information about WIN in a message window.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-info #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Display information about WIN in a message window.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 155 </para> </refsect1>
</refentry>

<refentry id="window-last-focus-time">
  <refnamediv>
    <refname>window-last-focus-time</refname>
    <refpurpose>Return the time that WIN was last focussed in seconds since 1/1/70.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-last-focus-time  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the time that <parameter>win</parameter> was last focussed in seconds since 1/1/70.
This currently uses time_t-s, but should probably use X server
times.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2636 </para> </refsect1>
</refentry>

<refentry id="window-last-focus-time-string">
  <refnamediv>
    <refname>window-last-focus-time-string</refname>
    <refpurpose>Return a string corresponding to the last focus time for WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-last-focus-time-string #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a string corresponding to the last focus time for WIN.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm wininfo)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/wininfo.scm"><filename>scheme/wininfo.scm</filename></ulink>
  at line 145 </para> </refsect1>
</refentry>

<refentry id="window-mini-icon">
  <refnamediv>
    <refname>window-mini-icon</refname>
    <refpurpose>Get the mini-icon image being used for WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-mini-icon win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Get the mini-icon image being used for <parameter>win</parameter>.
Returns <literal>#f</literal> if none is being used. <parameter>win</parameter> defaults to the window context
in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3577 </para> </refsect1>
</refentry>

<refentry id="window-overlaps-window-p">
  <refnamediv>
    <refname>window-overlaps-window?</refname>
    <refpurpose>Return a function which takes WIN2 and returns <literal>#t</literal> if it overlaps WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>((window-overlaps-window? #&amp;optional (win (get-window))) 
		 #&amp;optional (win2 (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a function which takes WIN2 and returns <literal>#t</literal> if it overlaps WIN.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm wininfo)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/wininfo.scm"><filename>scheme/wininfo.scm</filename></ulink>
  at line 90 </para> </refsect1>
</refentry>

<refentry id="window-position">
  <refnamediv>
    <refname>window-position</refname>
    <refpurpose>Return the position of WIN in pixels.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-position  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the position of <parameter>win</parameter> in pixels.
The position is returned as a list of the x coordinate and the y
coordinate in pixels. If the window is sticky, the position will
always be in the 0,0 viewport. <parameter>win</parameter> defaults to the window context in the usual
way if not specified.  See also <link linkend="window-viewport-position"><function>window-viewport-position</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2375 </para> </refsect1>
</refentry>

<refentry id="window-property">
  <refnamediv>
    <refname>window-property</refname>
    <refpurpose>Retrieve window property PROP of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-property win prop)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Retrieve window property <parameter>prop</parameter> of <parameter>win</parameter>.
<parameter>prop</parameter> should be a symbol. <literal>#f</literal> will be returned if the property does not
exist (whether set by <link linkend="set-window-property-x"><function>set-window-property!</function></link> or otherwise). Soon, some
properties will have magical meanings, accessing particular fields in
the window structure. Also, a window-property-change-hook mechanism
will soon be implemented for notification of all window property
changes. This is not yet done. The window property primitives should
be considered in flux.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3810 </para> </refsect1>
</refentry>

<refentry id="window-resource">
  <refnamediv>
    <refname>window-resource</refname>
    <refpurpose>Return the window resource instance of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-resource  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window resource instance of <parameter>win</parameter>. <parameter>win</parameter> defaults to
the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2624 </para> </refsect1>
</refentry>

<refentry id="window-shade">
  <refnamediv>
    <refname>window-shade</refname>
    <refpurpose>Cause WIN to become "window-shaded".</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-shade  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Cause <parameter>win</parameter> to become "window-shaded".
That is, to roll up into just a titlebar. By default, the change takes
place instantaneously. <parameter>win</parameter> defaults to the window context in the usual
way if not specified. See also <link linkend="window-unshade"><function>window-unshade</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2044 </para> </refsect1>
</refentry>

<refentry id="window-shaded-p">
  <refnamediv>
    <refname>window-shaded?</refname>
    <refpurpose>Return <literal>#t</literal> if WIN is shaded.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-shaded?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>win</parameter> is shaded.
<parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2107 </para> </refsect1>
</refentry>

<refentry id="window-shaped-p">
  <refnamediv>
    <refname>window-shaped?</refname>
    <refpurpose>Return <literal>#t</literal> if WIN is a shaped window, <literal>#f</literal> otherwise.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-shaped?  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if <parameter>win</parameter> is a shaped window, <literal>#f</literal> otherwise.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 3594 </para> </refsect1>
</refentry>

<refentry id="window-size">
  <refnamediv>
    <refname>window-size</refname>
    <refpurpose>Return the size of the application window of WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-size  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the size of the application window of <parameter>win</parameter>.
<parameter>win</parameter> defaults to the window context in the usual way if not specified.
The position is returned as a list of four numbers. The first two are
the width and the height in pixels, the third and fourth are the width
and height in resize units (e.g., characters for an xterm).
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2436 </para> </refsect1>
</refentry>

<refentry id="window-size-hints">
  <refnamediv>
    <refname>window-size-hints</refname>
    <refpurpose>Return a list of the window size hints associated with WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-size-hints win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a list of the window size hints associated with <parameter>win</parameter>.
The list returned contains 4 cons pairs containing:
'((min-width . max-width) (min-height . max-height)
(width-inc . height-inc) (base-width . base-height))
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2272 </para> </refsect1>
</refentry>

<refentry id="window-style">
  <refnamediv>
    <refname>window-style</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-style condition . args)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm style)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/style.scm"><filename>scheme/style.scm</filename></ulink>
  at line 41 </para> </refsect1>
</refentry>

<refentry id="window-title">
  <refnamediv>
    <refname>window-title</refname>
    <refpurpose>Return the window title of WIN, as requested by the application.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-title  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window title of <parameter>win</parameter>, as requested by the application.
<parameter>win</parameter> defaults to the window context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2588 </para> </refsect1>
</refentry>

<refentry id="window-title-height">
  <refnamediv>
    <refname>window-title-height</refname>
    <refpurpose>Return WIN's titlebar's height.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-title-height #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return WIN's titlebar's height.
See also <link linkend="window-title-size"><function>window-title-size</function></link>, <link linkend="window-title-width"><function>window-title-width</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 192 </para> </refsect1>
</refentry>

<refentry id="window-title-size">
  <refnamediv>
    <refname>window-title-size</refname>
    <refpurpose>Return a list with the width and height of WIN's titlebar.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-title-size  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return a list with the width and height of <parameter>win</parameter>'s titlebar.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2475 </para> </refsect1>
</refentry>

<refentry id="window-title-width">
  <refnamediv>
    <refname>window-title-width</refname>
    <refpurpose>Return WIN's titlebar's width.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-title-width #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return WIN's titlebar's width.
See also <link linkend="window-title-size"><function>window-title-size</function></link>, <link linkend="window-title-height"><function>window-title-height</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 197 </para> </refsect1>
</refentry>

<refentry id="window-transient-for">
  <refnamediv>
    <refname>window-transient-for</refname>
    <refpurpose>Return the window for which WIN is transient.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-transient-for  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the window for which <parameter>win</parameter> is transient.
If <parameter>win</parameter> is transient, and the window it is transient for is
not the root window and is being managed by scwm, this returns the window
object of the window that <parameter>win</parameter> is transient for, otherwise return
<literal>#f</literal>. <parameter>win</parameter> defaults to the window context in the usual way if not
specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 1863 </para> </refsect1>
</refentry>

<refentry id="window-unshade">
  <refnamediv>
    <refname>window-unshade</refname>
    <refpurpose>Reverse the effect of <link linkend="window-shade"><function>window-shade</function></link> on WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-unshade  #&amp;optional win)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Reverse the effect of <link linkend="window-shade"><function>window-shade</function></link> on <parameter>win</parameter>.
The change takes place instantaneously. <parameter>win</parameter> defaults to the window
context in the usual way if not specified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 2083 </para> </refsect1>
</refentry>

<refentry id="window-viewport-position">
  <refnamediv>
    <refname>window-viewport-position</refname>
    <refpurpose>Return the position of WIN in pixels within the viewport.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-viewport-position #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the position of WIN in pixels within the viewport.
The position is returned as a list of the x coordinate and the y
coordinate in pixels. WIN defaults to the window context in the usual
way if not specified.  See also <link linkend="window-position"><function>window-position</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 202 </para> </refsect1>
</refentry>

<refentry id="window-virtual-position">
  <refnamediv>
    <refname>window-virtual-position</refname>
    <refpurpose>Return the virtual position of WIN in pixels.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window-virtual-position #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the virtual position of WIN in pixels.
If WIN is sticky, this returns the position of the window in the
current viewport.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 211 </para> </refsect1>
</refentry>

<refentry id="window-p">
  <refnamediv>
    <refname>window?</refname>
    <refpurpose>Returns <literal>#t</literal> if OBJ is a window object, otherwise returns <literal>#f</literal>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(window? obj)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns <literal>#t</literal> if <parameter>obj</parameter> is a window object, otherwise returns <literal>#f</literal>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/window.c"><filename>scwm/window.c</filename></ulink>
  at line 725 </para> </refsect1>
</refentry>

<refentry id="windows-overlap-p">
  <refnamediv>
    <refname>windows-overlap?</refname>
    <refpurpose>Return <literal>#t</literal> if WIN and WIN2 overlap at all, else <literal>#f</literal>.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(windows-overlap? win win2)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if WIN and WIN2 overlap at all, else <literal>#f</literal>.
I.e., returns <literal>#t</literal> if the intersection of the windows' areas
is non-empty.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm wininfo)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/wininfo.scm"><filename>scheme/wininfo.scm</filename></ulink>
  at line 76 </para> </refsect1>
</refentry>

<refentry id="winlist-hit">
  <refnamediv>
    <refname>winlist-hit</refname>
    <refpurpose>Permit WIN to be displayed in the window list by default.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(winlist-hit #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Permit WIN to be displayed in the window list by default.
This resets the 'winlist-skip property of WIN.  See also <link linkend="winlist-skip"><function>winlist-skip</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winlist)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winlist.scm"><filename>scheme/winlist.scm</filename></ulink>
  at line 77 </para> </refsect1>
</refentry>

<refentry id="winlist-skip">
  <refnamediv>
    <refname>winlist-skip</refname>
    <refpurpose>Do not show WIN in the window list by default.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(winlist-skip #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Do not show WIN in the window list by default.
This sets the 'winlist-skip property of WIN.  See also <link linkend="winlist-hit"><function>winlist-hit</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winlist)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winlist.scm"><filename>scheme/winlist.scm</filename></ulink>
  at line 82 </para> </refsect1>
</refentry>

<refentry id="winlist-skip-p">
  <refnamediv>
    <refname>winlist-skip?</refname>
    <refpurpose>Return <literal>#t</literal> if WIN is skipped in the window list, <literal>#f</literal> otherwise.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(winlist-skip? #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return <literal>#t</literal> if WIN is skipped in the window list, <literal>#f</literal> otherwise.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm winlist)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/winlist.scm"><filename>scheme/winlist.scm</filename></ulink>
  at line 87 </para> </refsect1>
</refentry>

<refentry id="write-all">
  <refnamediv>
    <refname>write-all</refname>
    <refpurpose>Write all arguments into the port.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(write-all port . lst)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Write all arguments into the port. <literal>#t</literal> means <link linkend="current-output-port"><function>current-output-port</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 74 </para> </refsect1>
</refentry>

<refentry id="x-">
  <refnamediv>
    <refname>x-</refname>
    <refpurpose>Return the viewport pixel coordinate X pixels left of the right display edge.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(x- x)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the viewport pixel coordinate X pixels left of the right display edge.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 64 </para> </refsect1>
</refentry>

<refentry id="X-atom-to-string">
  <refnamediv>
    <refname>X-atom->string</refname>
    <refpurpose>Returns the string represented by ATOM.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-atom->string atom)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Returns the string represented by <parameter>atom</parameter>.
Returns <literal>#f</literal>, if the X atom was not known.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/xproperty.c"><filename>scwm/xproperty.c</filename></ulink>
  at line 376 </para> </refsect1>
</refentry>

<refentry id="X-atomic-property-set-if-unset-x">
  <refnamediv>
    <refname>X-atomic-property-set-if-unset!</refname>
    <refpurpose>Set property NAME on WINDOW to VALUE, if it's currently unset.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-atomic-property-set-if-unset! window name value #&amp;optional
						(type "STRING") (format 8))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set property NAME on WINDOW to VALUE, if it's currently unset.
Returns <literal>#f</literal> if the property is already set, <literal>#t</literal> otherwise.
TYPE and FORMAT are as in X-property-set!
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 593 </para> </refsect1>
</refentry>

<refentry id="X-cut-buffer-to-palm-clipboard">
  <refnamediv>
    <refname>X-cut-buffer->palm-clipboard</refname>
    <refpurpose>No documentation supplied.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-cut-buffer->palm-clipboard)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  No documentation supplied.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para></para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 717 </para> </refsect1>
</refentry>

<refentry id="X-cut-buffer-string">
  <refnamediv>
    <refname>X-cut-buffer-string</refname>
    <refpurpose>Return the text of the CUT_BUFFER0 property of the root window.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-cut-buffer-string)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the text of the CUT_BUFFER0 property of the root window.
This is the cut text selected by X clients.  Returns <literal>#f</literal> if the
CUT_BUFFER0 property is not a string.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 534 </para> </refsect1>
</refentry>

<refentry id="X-display-information">
  <refnamediv>
    <refname>X-display-information</refname>
    <refpurpose>Return some information about the screen.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-display-information)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return some information about the screen. In particular,
return a list of the horizontal resolution, the vertical resolution,
the number of planes on the current screen (i.e. the bit depth), the
bits per color supported by the hardware, the visual class (one of
"StaticGray", "GrayScale", "StaticColor", "PseudoColor", "DirectColor"
or "TrueColor") and a boolean indicating whether the display is color.
The resolutions mentioned above should in theory be pixels per
centimeter, rounded to the nearest integer. These parameters can be
used for various workarounds or conditional decisions in a scwmrc to
be shared among multiple machines.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 581 </para> </refsect1>
</refentry>

<refentry id="X-grab-server">
  <refnamediv>
    <refname>X-grab-server</refname>
    <refpurpose>Grab the X server.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-grab-server)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Grab the X server.
This is very risky; you should almost definitely use
<link linkend="with-grabbed-server"><function>with-grabbed-server</function></link> instead.  This must be paired with
X-ungrab-server.  This primitive is undefined at startup
to make it hard to access directly.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/Grab.c"><filename>scwm/Grab.c</filename></ulink>
  at line 58 </para> </refsect1>
</refentry>

<refentry id="X-pointer-mapping">
  <refnamediv>
    <refname>X-pointer-mapping</refname>
    <refpurpose>Return the mapping of physical->logical pointer buttons as a list.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-pointer-mapping)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the mapping of physical->logical pointer buttons as a list.
The length of the returned list is the number of buttons available.  Each
element in the list is an integer.  E.g., '(1 2 3) is a normally mapped
3-button mouse, whereas '(3 2 1) is a 3-button mouse where the rightmost
physical button acts as logical button 1, and the leftmost acts as button 3.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/binding.c"><filename>scwm/binding.c</filename></ulink>
  at line 979 </para> </refsect1>
</refentry>

<refentry id="X-property-delete-x">
  <refnamediv>
    <refname>X-property-delete!</refname>
    <refpurpose>Delete X property NAME of window WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-property-delete! win name)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Delete X property <parameter>name</parameter> of window <parameter>win</parameter>.
<parameter>win</parameter> is the window to check, or 'root-window.
<parameter>name</parameter> is a string. The return value is unspecified.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/xproperty.c"><filename>scwm/xproperty.c</filename></ulink>
  at line 314 </para> </refsect1>
</refentry>

<refentry id="X-property-get">
  <refnamediv>
    <refname>X-property-get</refname>
    <refpurpose>Get X property NAME of window WIN.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-property-get win name #&amp;optional consume)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Get X property <parameter>name</parameter> of window <parameter>win</parameter>.
<parameter>win</parameter> is the window to check, or 'root-window.
<parameter>name</parameter> is a string.
If <parameter>consume</parameter> is <literal>#t</literal>, the X property is deleted after getting it. Default is
not to delete.
If the X property could not be found, <literal>#f</literal> is returned.
If the X property could be found, a list "(value type format)" is returned.
"type" is a string.
"format" is either 8, 16, or 32, giving the size of the elements of "value".
"value" is a string, if "format" is 8, or a vector of integers otherwise.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/xproperty.c"><filename>scwm/xproperty.c</filename></ulink>
  at line 232 </para> </refsect1>
</refentry>

<refentry id="X-property-set-x">
  <refnamediv>
    <refname>X-property-set!</refname>
    <refpurpose>Set X property NAME on window WIN to VALUE.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-property-set! win name value #&amp;optional type format action)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Set X property <parameter>name</parameter> on window <parameter>win</parameter> to <parameter>value</parameter>.
<parameter>win</parameter> is the window to set the X property on, or 'root-window.
<parameter>name</parameter> and <parameter>type</parameter> are strings. <parameter>type</parameter> defaults to "STRING".
<parameter>format</parameter> may be one of the integers 8, 16, and 32, defining the element size
of the <parameter>value</parameter>. It is 8 by default.
<parameter>value</parameter> may be a string, if <parameter>format</parameter> is 8, and may always be a vector
of <parameter>format</parameter>-bit integers.
<parameter>action</parameter> may be one of the symbols 'replace, 'prepend, or 'append signifying
how the new <parameter>value</parameter> should be merged (if at all) with the existing
value.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/xproperty.c"><filename>scwm/xproperty.c</filename></ulink>
  at line 103 </para> </refsect1>
</refentry>

<refentry id="X-resource-database-save">
  <refnamediv>
    <refname>X-resource-database-save</refname>
    <refpurpose>Save the Scwm resource database to FILENAME.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-resource-database-save filename)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Save the Scwm resource database to <parameter>filename</parameter>.
Only the settings set or changed via <link linkend="X-resource-put"><function>X-resource-put</function></link> go into
the file.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/xrm.c"><filename>scwm/xrm.c</filename></ulink>
  at line 99 </para> </refsect1>
</refentry>

<refentry id="X-resource-get">
  <refnamediv>
    <refname>X-resource-get</refname>
    <refpurpose>Get X resource specified by NAME and XCLASS from Xrm database.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-resource-get name #&amp;optional xclass)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Get X resource specified by <parameter>name</parameter> and <parameter>xclass</parameter> from Xrm database.
Both <parameter>name</parameter> and <parameter>xclass</parameter> are strings, as is the returned value.  If
<parameter>xclass</parameter> is omitted, it defaults to the same string as <parameter>name</parameter>.
If there is no resource under the given key, <literal>#f</literal> is returned.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/xrm.c"><filename>scwm/xrm.c</filename></ulink>
  at line 66 </para> </refsect1>
</refentry>

<refentry id="X-resource-put">
  <refnamediv>
    <refname>X-resource-put</refname>
    <refpurpose>Stores string VALUE as X resource RESOURCE (also a string).</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-resource-put resource value)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Stores string <parameter>value</parameter> as X resource <parameter>resource</parameter> (also a string).
Later, the value can be retrieved using <link linkend="X-resource-get"><function>X-resource-get</function></link>.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/xrm.c"><filename>scwm/xrm.c</filename></ulink>
  at line 41 </para> </refsect1>
</refentry>

<refentry id="X-rotate-cut-buffers">
  <refnamediv>
    <refname>X-rotate-cut-buffers</refname>
    <refpurpose>Rotate the X cut buffers by N positions.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-rotate-cut-buffers n)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Rotate the X cut buffers by <parameter>n</parameter> positions.
This means buffer 0 becomes buffer n, buffer 1 becomes n + 1 mod 8,
and so on.  This cut buffer numbering is global to the display.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 449 </para> </refsect1>
</refentry>

<refentry id="X-synthetic-send-string">
  <refnamediv>
    <refname>X-synthetic-send-string</refname>
    <refpurpose>Send string STR to WIN via synthetic X events.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-synthetic-send-string str #&amp;optional (win (get-window)))</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Send string STR to WIN via synthetic X events.
Note that some programs (e.g., xterm) by default do not
honour synthetic key events as they are a security hole.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm flux)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/flux.scm"><filename>scheme/flux.scm</filename></ulink>
  at line 306 </para> </refsect1>
</refentry>

<refentry id="X-ungrab-server">
  <refnamediv>
    <refname>X-ungrab-server</refname>
    <refpurpose>Ungrab the X server.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-ungrab-server)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Ungrab the X server.
Using <link linkend="X-grab-server"><function>X-grab-server</function></link> and <link linkend="X-ungrab-server"><function>X-ungrab-server</function></link> directly is risky; you
should almost definitely use <link linkend="with-grabbed-server"><function>with-grabbed-server</function></link> instead. This
primitive is undefined at startup to make it hard to access directly.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/Grab.c"><filename>scwm/Grab.c</filename></ulink>
  at line 72 </para> </refsect1>
</refentry>

<refentry id="X-version-information">
  <refnamediv>
    <refname>X-version-information</refname>
    <refpurpose>Return some information about the version of the running X server.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(X-version-information)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return some information about the version of the running X server.
Return value is a list of the X protocol version, the X protocol
revision, the X server vendor, and the vendor release number.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>Built-in Primitive</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scwm/miscprocs.c"><filename>scwm/miscprocs.c</filename></ulink>
  at line 561 </para> </refsect1>
</refentry>

<refentry id="y-">
  <refnamediv>
    <refname>y-</refname>
    <refpurpose>Return the viewport pixel coordinate Y pixels up from the bottom display edge.</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <synopsis>(y- y)</synopsis>
  </refsynopsisdiv>
  <refsect1>
  <title>Description</title>
  <para>
  Return the viewport pixel coordinate Y pixels up from the bottom display edge.
  </para>
  </refsect1>
  <refsect1>
  <title>Module</title>
  <para>(app scwm base)</para>
  </refsect1>
  <refsect1>
  <title>Implementation Notes</title>
  <para> Defined in <ulink url="file:///scratch/gjb/scwm/scheme/base.scm"><filename>scheme/base.scm</filename></ulink>
  at line 68 </para> </refsect1>
</refentry>

  </chapter>
  <chapter>
    <title>Procedures By Defined-in File</title>
    <sect1><title>modules/background/background.c</title> <itemizedlist>
      <listitem><para><link linkend="set-background-color-x"><function>set-background-color!</function></link> &mdash; Sets the color of the root window to COLOR.</para></listitem>
      <listitem><para><link linkend="make-resized-image"><function>make-resized-image</function></link> &mdash; Makes a new image from IMAGE of the given WIDTH and HEIGHT.</para></listitem>
      <listitem><para><link linkend="set-background-image-x"><function>set-background-image!</function></link> &mdash; Sets the background of the root window to be IMAGE.</para></listitem>
      <listitem><para><link linkend="reset-background-x"><function>reset-background!</function></link> &mdash; Resets the root window to the default "weave".</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>modules/c-animation/c-animation.c</title> <itemizedlist>
      <listitem><para><link linkend="set-animation-x"><function>set-animation!</function></link> &mdash; Set the animation parameters to VECTOR.</para></listitem>
      <listitem><para><link linkend="animated-window-shade"><function>animated-window-shade</function></link> &mdash; Cause WIN to become "window-shaded".</para></listitem>
      <listitem><para><link linkend="animated-window-unshade"><function>animated-window-unshade</function></link> &mdash; Reverse the effect of <link linkend="window-shade"><function>window-shade</function></link> on WIN.</para></listitem>
      <listitem><para><link linkend="animated-move-window"><function>animated-move-window</function></link> &mdash; Move WIN to virtual coordinates X, Y with animation.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>modules/overlay-plane/overlay-plane.c</title> <itemizedlist>
      <listitem><para><link linkend="has-overlay-plane-p"><function>has-overlay-plane?</function></link> &mdash; Return <literal>#t</literal> if the current screen has an overlay plane, <literal>#f</literal> otherwise.</para></listitem>
      <listitem><para><link linkend="draw-overlay-plane"><function>draw-overlay-plane</function></link> &mdash; Draw a box in the overlay plane.</para></listitem>
      <listitem><para><link linkend="hide-overlay-plane"><function>hide-overlay-plane</function></link> &mdash; Draw a box in the overlay plane.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>modules/scwmgtkhelper/scwmgtkhelper.c</title> <itemizedlist>
      <listitem><para><link linkend="scwm-gdk-X-fdes"><function>scwm-gdk-X-fdes</function></link> &mdash; </para></listitem>
      <listitem><para><link linkend="restore-scwm-handlers"><function>restore-scwm-handlers</function></link> &mdash; Restore the scwm behavior for signals and for X errors.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/animation.scm</title> <itemizedlist>
      <listitem><para><link linkend="animated-move-to"><function>animated-move-to</function></link> &mdash; Move WIN to viewport coordinates X, Y with animation.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/auto-raise.scm</title> <itemizedlist>
      <listitem><para><link linkend="set-auto-raise-x"><function>set-auto-raise!</function></link> &mdash; Turn auto-raise on (<literal>#t</literal>) or off (<literal>#f</literal>) for WIN.</para></listitem>
      <listitem><para><link linkend="set-auto-raise-delay-x"><function>set-auto-raise-delay!</function></link> &mdash; Set the auto-raise delay to DELAY (in ms) for WIN.</para></listitem>
      <listitem><para><link linkend="set-auto-raise-unfocus-delay-x"><function>set-auto-raise-unfocus-delay!</function></link> &mdash; Set the timeout to DELAY (in ms) for the unfocus-proc of WIN.</para></listitem>
      <listitem><para><link linkend="set-auto-raise-focus-proc-x"><function>set-auto-raise-focus-proc!</function></link> &mdash; Set the auto-raise-focus-proc for WIN.</para></listitem>
      <listitem><para><link linkend="set-auto-raise-unfocus-proc-x"><function>set-auto-raise-unfocus-proc!</function></link> &mdash; Set the auto-raise-unfocus-proc for WIN.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/base.scm</title> <itemizedlist>
      <listitem><para><link linkend="round/"><function>round/</function></link> &mdash; Reaturn the closest integer to X divided by Y.</para></listitem>
      <listitem><para><link linkend="pctx"><function>%x</function></link> &mdash; Return the number of pixels that is X percent of the display width.</para></listitem>
      <listitem><para><link linkend="pcty"><function>%y</function></link> &mdash; Return the number of pixels that is Y percent of the display height.</para></listitem>
      <listitem><para><link linkend="x-"><function>x-</function></link> &mdash; Return the viewport pixel coordinate X pixels left of the right display edge.</para></listitem>
      <listitem><para><link linkend="y-"><function>y-</function></link> &mdash; Return the viewport pixel coordinate Y pixels up from the bottom display edge.</para></listitem>
      <listitem><para><link linkend="viewport-x-position"><function>viewport-x-position</function></link> &mdash; Return the x coordinate of the current viewport.</para></listitem>
      <listitem><para><link linkend="viewport-y-position"><function>viewport-y-position</function></link> &mdash; Return the y coordinate of the current viewport.</para></listitem>
      <listitem><para><link linkend="viewport-to-virtual"><function>viewport->virtual</function></link> &mdash; Return the virtual coordinates for viewport X,Y.</para></listitem>
      <listitem><para><link linkend="virtual-to-viewport"><function>virtual->viewport</function></link> &mdash; Return the viewport coordinates for virtual X,Y.</para></listitem>
      <listitem><para><link linkend="virtual-size"><function>virtual-size</function></link> &mdash; Return the size of the virtual screen in pixels.</para></listitem>
      <listitem><para><link linkend="vx-"><function>vx-</function></link> &mdash; Return the virtual coordinate X pixels left of the right virtual edge.</para></listitem>
      <listitem><para><link linkend="vy-"><function>vy-</function></link> &mdash; Return the virtual coordinate Y pixels up from the bottom virtual edge.</para></listitem>
      <listitem><para><link linkend="pctx-"><function>%x-</function></link> &mdash; Return the pixel coordinate X percent of the width away from the right edge.</para></listitem>
      <listitem><para><link linkend="pcty-"><function>%y-</function></link> &mdash; Return the pixel coordinate Y percent of the height away from the bottom edge.</para></listitem>
      <listitem><para><link linkend="wpctx"><function>w%x</function></link> &mdash; Return a pixel width X percent of the width of window W.</para></listitem>
      <listitem><para><link linkend="wpcty"><function>w%y</function></link> &mdash; Return a pixel height Y percent of the height of window W.</para></listitem>
      <listitem><para><link linkend="program-exists-p"><function>program-exists?</function></link> &mdash; Return <literal>#t</literal> if PROGRAM-NAME is found as an executable in the current $PATH.</para></listitem>
      <listitem><para><link linkend="set-menu-foreground-x"><function>set-menu-foreground!</function></link> &mdash; Set the default color for menu text to FG.</para></listitem>
      <listitem><para><link linkend="set-menu-background-x"><function>set-menu-background!</function></link> &mdash; Set the default background for menus to BG.</para></listitem>
      <listitem><para><link linkend="set-menu-stipple-x"><function>set-menu-stipple!</function></link> &mdash; Set the default color for stippled (inactive) menu text to STIPPLE.</para></listitem>
      <listitem><para><link linkend="set-menu-font-x"><function>set-menu-font!</function></link> &mdash; Set the default font for menu text to FONT.</para></listitem>
      <listitem><para><link linkend="set-menu-side-image-x"><function>set-menu-side-image!</function></link> &mdash; Set the default menu side image to IMAGE.</para></listitem>
      <listitem><para><link linkend="set-menu-side-background-x"><function>set-menu-side-background!</function></link> &mdash; Set the default background for the menu side image to BG.</para></listitem>
      <listitem><para><link linkend="set-menu-bg-image-x"><function>set-menu-bg-image!</function></link> &mdash; Set the default menu background image to IMAGE.</para></listitem>
      <listitem><para><link linkend="set-menu-look-x"><function>set-menu-look!</function></link> &mdash; Set the default menu look to LOOK.</para></listitem>
      <listitem><para><link linkend="set-window-colors-x"><function>set-window-colors!</function></link> &mdash; Set WIN's background color to BG, foreground color to FG.</para></listitem>
      <listitem><para><link linkend="move-pointer"><function>move-pointer</function></link> &mdash; Move the X11 pointer X pixels to the right, and Y pixels down.</para></listitem>
      <listitem><para><link linkend="move-to"><function>move-to</function></link> &mdash; Move WIN to viewport position X, Y.</para></listitem>
      <listitem><para><link linkend="window-title-height"><function>window-title-height</function></link> &mdash; Return WIN's titlebar's height.</para></listitem>
      <listitem><para><link linkend="window-title-width"><function>window-title-width</function></link> &mdash; Return WIN's titlebar's width.</para></listitem>
      <listitem><para><link linkend="window-viewport-position"><function>window-viewport-position</function></link> &mdash; Return the position of WIN in pixels within the viewport.</para></listitem>
      <listitem><para><link linkend="window-virtual-position"><function>window-virtual-position</function></link> &mdash; Return the virtual position of WIN in pixels.</para></listitem>
      <listitem><para><link linkend="icon-viewport-position"><function>icon-viewport-position</function></link> &mdash; Return the position of WIN's icon in pixels within the viewport.</para></listitem>
      <listitem><para><link linkend="move-viewport"><function>move-viewport</function></link> &mdash; Move the viewport onto the virtual desktop relatively.</para></listitem>
      <listitem><para><link linkend="menu-style"><function>menu-style</function></link> &mdash; Set various properites for the menus.</para></listitem>
      <listitem><para><link linkend="simple-title-style"><function>simple-title-style</function></link> &mdash; Set the style for titlebars.</para></listitem>
      <listitem><para><link linkend="menuitem"><function>menuitem</function></link> &mdash; Return a menuitem object with the given attributes.</para></listitem>
      <listitem><para><link linkend="menu"><function>menu</function></link> &mdash; Return a menu object with the given attributes.</para></listitem>
      <listitem><para><link linkend="image-property"><function>image-property</function></link> &mdash; Return the KEY property of IMAGE.</para></listitem>
      <listitem><para><link linkend="font-property"><function>font-property</function></link> &mdash; Return the KEY property of FONT.</para></listitem>
      <listitem><para><link linkend="color-property"><function>color-property</function></link> &mdash; Return the KEY property of COLOR.</para></listitem>
      <listitem><para><link linkend="fold-menu-list"><function>fold-menu-list</function></link> &mdash; Split ML into chained menus of no more than MAX-LINES items.</para></listitem>
      <listitem><para><link linkend="exe"><function>exe</function></link> &mdash; Return a procedure that, when invoked, executes COMMAND in the background.</para></listitem>
      <listitem><para><link linkend="run-in-xterm"><function>run-in-xterm</function></link> &mdash; Return a procedure that runs CMD in an xterm.</para></listitem>
      <listitem><para><link linkend="set-edge-resistance-x"><function>set-edge-resistance!</function></link> &mdash; Set the edge scroll delay to S, and the edge move threshold to M.</para></listitem>
      <listitem><para><link linkend="set-edge-wrap-x"><function>set-edge-wrap!</function></link> &mdash; Set the edge x and y wrap values to X and Y, respectively.</para></listitem>
      <listitem><para><link linkend="set-edge-scroll-x"><function>set-edge-scroll!</function></link> &mdash; Set the edge scroll values to X and Y, respectively.</para></listitem>
      <listitem><para><link linkend="unset-message-window-position-x"><function>unset-message-window-position!</function></link> &mdash; Move the message window back to the default screen-center position.</para></listitem>
      <listitem><para><link linkend="scwm-is-constraint-enabled-p"><function>scwm-is-constraint-enabled?</function></link> &mdash; Return <literal>#t</literal> if scwm has the constraint solver primitives, <literal>#f</literal> otherwise.</para></listitem>
      <listitem><para><link linkend="scwm-system"><function>scwm-system</function></link> &mdash; Run CMD using /bin/sh -c CMD and return the exit status.</para></listitem>
      <listitem><para><link linkend="execute"><function>execute</function></link> &mdash; Execute COMMAND in the background.</para></listitem>
      <listitem><para><link linkend="select-window-interactively"><function>select-window-interactively</function></link> &mdash; No documentation supplied.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/bincomm.scm</title> <itemizedlist>
      <listitem><para><link linkend="binary-write"><function>binary-write</function></link> &mdash; Writes STR as binary data to PORT.</para></listitem>
      <listitem><para><link linkend="binary-read"><function>binary-read</function></link> &mdash; Reads LENGTH bytes of binary data from PORT and return it as a string.</para></listitem>
      <listitem><para><link linkend="binary-read-long"><function>binary-read-long</function></link> &mdash; Reads a binary representation of a C long and return as a scheme number.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/cached-program-exists.scm</title> <itemizedlist>
      <listitem><para><link linkend="initialize-programs-that-exist"><function>initialize-programs-that-exist</function></link> &mdash; Initializes the cache with programs that exist in the current $PATH.</para></listitem>
      <listitem><para><link linkend="cached-program-exists-p"><function>cached-program-exists?</function></link> &mdash; Return <literal>#t</literal> if PROGRAM-NAME is in the cache of programs that exist.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/cascade.scm</title> <itemizedlist>
      <listitem><para><link linkend="cascade-windows"><function>cascade-windows</function></link> &mdash; Cascade WINDOWS according to several parameters.</para></listitem>
      <listitem><para><link linkend="cascade"><function>cascade</function></link> &mdash; Cascade the windows on the specified desk.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/decor.scm</title> <itemizedlist>
      <listitem><para><link linkend="call-with-decor"><function>call-with-decor</function></link> &mdash; Eval THUNK using DECOR as the current decor.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/desk-background.scm</title> <itemizedlist>
      <listitem><para><link linkend="desk-background"><function>desk-background</function></link> &mdash; Set the background to use on desk DESK.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/doc.scm</title> <itemizedlist>
      <listitem><para><link linkend="documentation"><function>documentation</function></link> &mdash; Print the documentation for the string or symbol.</para></listitem>
      <listitem><para><link linkend="help"><function>help</function></link> &mdash; Print all possible documentation for string or symbol.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/face.scm</title> <itemizedlist>
      <listitem><para><link linkend="title-style"><function>title-style</function></link> &mdash; Set the title style in the current decor.</para></listitem>
      <listitem><para><link linkend="border-style"><function>border-style</function></link> &mdash; Set the border style in the current decor.</para></listitem>
      <listitem><para><link linkend="button-style"><function>button-style</function></link> &mdash; Set the button style for button number BUTTON in the current decor.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/file.scm</title> <itemizedlist>
      <listitem><para><link linkend="filename-is-complete-p"><function>filename-is-complete?</function></link> &mdash; Return true if FNAME is a fully qualified pathname.</para></listitem>
      <listitem><para><link linkend="find-file-in-path"><function>find-file-in-path</function></link> &mdash; Search for file named FNAME in PATH.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/flux.scm</title> <itemizedlist>
      <listitem><para><link linkend="interactive-move-window-with-focus"><function>interactive-move-window-with-focus</function></link> &mdash; Interactively move the window which currently has the focus.</para></listitem>
      <listitem><para><link linkend="interactive-resize-window-with-focus"><function>interactive-resize-window-with-focus</function></link> &mdash; Interactively resize the window which currently has the focus.</para></listitem>
      <listitem><para><link linkend="interactive-move-window-with-pointer"><function>interactive-move-window-with-pointer</function></link> &mdash; Interactively move the window which currently contains the pointer.</para></listitem>
      <listitem><para><link linkend="interactive-resize-window-with-pointer"><function>interactive-resize-window-with-pointer</function></link> &mdash; Interactively resize the window which currently contains the pointer.</para></listitem>
      <listitem><para><link linkend="toggle-max-vert"><function>toggle-max-vert</function></link> &mdash; Toggle the current window's maximized-vertically state.</para></listitem>
      <listitem><para><link linkend="toggle-max-horz"><function>toggle-max-horz</function></link> &mdash; Toggle the current window's maximized-horizontally state.</para></listitem>
      <listitem><para><link linkend="toggle-max-both"><function>toggle-max-both</function></link> &mdash; Toggle the current window's maximization (both vertically and horizontally).</para></listitem>
      <listitem><para><link linkend="toggle-max-vert-part"><function>toggle-max-vert-part</function></link> &mdash; Toggle the current window's maximization-vertically to 95% of the screen height.</para></listitem>
      <listitem><para><link linkend="wiggle-window"><function>wiggle-window</function></link> &mdash; Animatedly window shade and then unshade the current window.</para></listitem>
      <listitem><para><link linkend="write-all"><function>write-all</function></link> &mdash; Write all arguments into the port.</para></listitem>
      <listitem><para><link linkend="to-string"><function>to-string</function></link> &mdash; Dump all arguments into a string.</para></listitem>
      <listitem><para><link linkend="system-info-string"><function>system-info-string</function></link> &mdash; Return a string with various system information.</para></listitem>
      <listitem><para><link linkend="make-file-menu"><function>make-file-menu</function></link> &mdash; Return a menu-object for viewing or editing FILE.</para></listitem>
      <listitem><para><link linkend="quotify-single-quotes"><function>quotify-single-quotes</function></link> &mdash; Return a string that has single quote characters backslashified.</para></listitem>
      <listitem><para><link linkend="message"><function>message</function></link> &mdash; Display the string arguments STR in a message window.</para></listitem>
      <listitem><para><link linkend="show-mesg"><function>show-mesg</function></link> &mdash; Return a lambda to display the string arguments STR in a message window.</para></listitem>
      <listitem><para><link linkend="show-file"><function>show-file</function></link> &mdash; Return a lambda to display the contents of filename in a window.</para></listitem>
      <listitem><para><link linkend="show-com"><function>show-com</function></link> &mdash; Return a lambda to show the stdout generated by the COM shell pipeline.</para></listitem>
      <listitem><para><link linkend="bool-to-str"><function>bool->str</function></link> &mdash; Return the string \"false\" if ARG is <literal>#f</literal>, \"true\" otherwise.</para></listitem>
      <listitem><para><link linkend="size-to-str"><function>size->str</function></link> &mdash; Convert a two-element list to a string.</para></listitem>
      <listitem><para><link linkend="window-info"><function>window-info</function></link> &mdash; Display information about WIN in a message window.</para></listitem>
      <listitem><para><link linkend="show-system-info"><function>show-system-info</function></link> &mdash; Display the <link linkend="system-info-string"><function>system-info-string</function></link> system details in a window.</para></listitem>
      <listitem><para><link linkend="make-menuitems-from-menu-information-list"><function>make-menuitems-from-menu-information-list</function></link> &mdash; Return a list of menu-items from a list of detailed programs list.</para></listitem>
      <listitem><para><link linkend="key-mouse-moves"><function>key-mouse-moves</function></link> &mdash; Bind four keys to move the mouse in compass directions by PCT-OF-SCREEN.</para></listitem>
      <listitem><para><link linkend="key-viewport-moves"><function>key-viewport-moves</function></link> &mdash; Bind four keys to move the viewport in compass directions by PCT-OF-SCREEN.</para></listitem>
      <listitem><para><link linkend="sleep-ms"><function>sleep-ms</function></link> &mdash; Delay for MS milliseconds.</para></listitem>
      <listitem><para><link linkend="printable-char-to-keysym-string"><function>printable-char->keysym-string</function></link> &mdash; Return the keysym string corresponding to a printable character.</para></listitem>
      <listitem><para><link linkend="X-synthetic-send-string"><function>X-synthetic-send-string</function></link> &mdash; Send string STR to WIN via synthetic X events.</para></listitem>
      <listitem><para><link linkend="find-window-by"><function>find-window-by</function></link> &mdash; Return a window satisfying predicate PRED.</para></listitem>
      <listitem><para><link linkend="find-window-by-name"><function>find-window-by-name</function></link> &mdash; Return a window with name WINDOW-NAME.</para></listitem>
      <listitem><para><link linkend="find-window-by-class-resource"><function>find-window-by-class-resource</function></link> &mdash; Return a window by its CLASS and RESOURCE names (as strings).</para></listitem>
      <listitem><para><link linkend="select-window-group"><function>select-window-group</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="select-window-interactively-and-highlight"><function>select-window-interactively-and-highlight</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="select-multiple-windows-interactively"><function>select-multiple-windows-interactively</function></link> &mdash; Return a list of user-selected windows, up to MAX.</para></listitem>
      <listitem><para><link linkend="select-window-from-window-list"><function>select-window-from-window-list</function></link> &mdash; Permit selecting a window from a window list.</para></listitem>
      <listitem><para><link linkend="color-to-string"><function>color->string</function></link> &mdash; Convert scwm color object COLOR into an X11 name of that color.</para></listitem>
      <listitem><para><link linkend="set-window-title-x"><function>set-window-title!</function></link> &mdash; Change the window title X-Property of WIN to TITLE.</para></listitem>
      <listitem><para><link linkend="get-wm-command"><function>get-wm-command</function></link> &mdash; Get the \"WM_COMMAND\" X-Property of WIN and return that string.</para></listitem>
      <listitem><para><link linkend="sec-to-usec"><function>sec->usec</function></link> &mdash; Convert SEC seconds into an equivalent number of microseconds.</para></listitem>
      <listitem><para><link linkend="ms-to-usec"><function>ms->usec</function></link> &mdash; Convert MS milliseconds into an equivalent number of microseconds.</para></listitem>
      <listitem><para><link linkend="popup-menu-from-decoration"><function>popup-menu-from-decoration</function></link> &mdash; Popup MENU from WIN's decoration numbered BUTTON-NUMBER.</para></listitem>
      <listitem><para><link linkend="flash-window"><function>flash-window</function></link> &mdash; Flash WIN's titlebar and boundary color to COLOR for UNFLASH-DELAY seconds.</para></listitem>
      <listitem><para><link linkend="unflash-window"><function>unflash-window</function></link> &mdash; Revert WIN's titlebar and boundary color to state before a <link linkend="flash-window"><function>flash-window</function></link>.</para></listitem>
      <listitem><para><link linkend="make-string-usable-for-resource-key"><function>make-string-usable-for-resource-key</function></link> &mdash; Return a converted string from STRING that can be used as an X resource key.</para></listitem>
      <listitem><para><link linkend="make-rhosts-menu"><function>make-rhosts-menu</function></link> &mdash; Returns a menu which lets you rlogin to each host mentioned in your .</para></listitem>
      <listitem><para><link linkend="X-cut-buffer-string"><function>X-cut-buffer-string</function></link> &mdash; Return the text of the CUT_BUFFER0 property of the root window.</para></listitem>
      <listitem><para><link linkend="display-message-briefly"><function>display-message-briefly</function></link> &mdash; Display MSG in the message window for SEC-TIMEOUT seconds.</para></listitem>
      <listitem><para><link linkend="close-all-xlogo-windows"><function>close-all-xlogo-windows</function></link> &mdash; Close each window with class == XLogo.</para></listitem>
      <listitem><para><link linkend="delta-position"><function>delta-position</function></link> &mdash; Return a new coordinate list that is DX,DY offset from XY-LIST.</para></listitem>
      <listitem><para><link linkend="move-window-relative"><function>move-window-relative</function></link> &mdash; Move WIN from its current position by (dx,dy) pixels.</para></listitem>
      <listitem><para><link linkend="netscape-win"><function>netscape-win</function></link> &mdash; Return a netscape window, prefer a visible netscape window.</para></listitem>
      <listitem><para><link linkend="X-atomic-property-set-if-unset-x"><function>X-atomic-property-set-if-unset!</function></link> &mdash; Set property NAME on WINDOW to VALUE, if it's currently unset.</para></listitem>
      <listitem><para><link linkend="run-in-netscape"><function>run-in-netscape</function></link> &mdash; Runs COMMAND in a Netscape window, calling COMPLETION when done, if set.</para></listitem>
      <listitem><para><link linkend="netscape-goto-cut-buffer-url"><function>netscape-goto-cut-buffer-url</function></link> &mdash; Make netscape go to the URL in CUT_BUFFER0.</para></listitem>
      <listitem><para><link linkend="use-change-desk-commands"><function>use-change-desk-commands</function></link> &mdash; Execute one of the VECTOR-OF-COMMANDS shell commands when the desk changes.</para></listitem>
      <listitem><para><link linkend="execute-on-selection"><function>execute-on-selection</function></link> &mdash; Run COMMAND in the background, with arguments supplied by the X selection.</para></listitem>
      <listitem><para><link linkend="exe-on-selection"><function>exe-on-selection</function></link> &mdash; Return a procedure that runs COMMAND in the background on the X selection.</para></listitem>
      <listitem><para><link linkend="extreme"><function>extreme</function></link> &mdash; Find extreme value e of PRED in LST.</para></listitem>
      <listitem><para><link linkend="take-screenshot"><function>take-screenshot</function></link> &mdash; Take a snapshot of the whole screen.</para></listitem>
      <listitem><para><link linkend="put-string-in-palm-clipboard"><function>put-string-in-palm-clipboard</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="X-cut-buffer-to-palm-clipboard"><function>X-cut-buffer->palm-clipboard</function></link> &mdash; No documentation supplied.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/fvwm-compat.scm</title> <itemizedlist>
      <listitem><para><link linkend="fvwm-exec-use-shell"><function>fvwm-exec-use-shell</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="fvwm-exec"><function>fvwm-exec</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="fvwm-none"><function>fvwm-none</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="fvwm-pipe-read"><function>fvwm-pipe-read</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="fvwm-nop"><function>fvwm-nop</function></link> &mdash; No documentation supplied.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/fvwm-eval.scm</title> <itemizedlist>
      <listitem><para><link linkend="eval-fvwm-command"><function>eval-fvwm-command</function></link> &mdash; Evaluate an fvwm2 command.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/fvwm-module.scm</title> <itemizedlist>
      <listitem><para><link linkend="fvwm2-module-send-window-list"><function>fvwm2-module-send-window-list</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="get-fvwm2-module-config"><function>get-fvwm2-module-config</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="register-fvwm2-module-config"><function>register-fvwm2-module-config</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="append-fvwm2-module-config"><function>append-fvwm2-module-config</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="clear-fvwm2-module-config"><function>clear-fvwm2-module-config</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="run-fvwm2-module"><function>run-fvwm2-module</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="kill-fvwm2-module"><function>kill-fvwm2-module</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="kill-all-fvwm2-modules"><function>kill-all-fvwm2-modules</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="kill-fvwm2-modules-by-name"><function>kill-fvwm2-modules-by-name</function></link> &mdash; No documentation supplied.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/gtk.scm</title> <itemizedlist>
      <listitem><para><link linkend="scwm-gtk-sync"><function>scwm-gtk-sync</function></link> &mdash; No documentation supplied.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/image-loaders.scm</title> <itemizedlist>
      <listitem><para><link linkend="ImageMagick-loader"><function>ImageMagick-loader</function></link> &mdash; Tries to load an arbitrary image using ImageMagick's <link linkend="convert"><function>convert</function></link>.</para></listitem>
      <listitem><para><link linkend="netpbm-loader"><function>netpbm-loader</function></link> &mdash; Tries to load an arbitrary image using the netpbm packge.</para></listitem>
      <listitem><para><link linkend="try-everything-loader"><function>try-everything-loader</function></link> &mdash; Tries to load an arbitrary image, using any available loader.</para></listitem>
      <listitem><para><link linkend="support-image-conversion"><function>support-image-conversion</function></link> &mdash; Set things up to try to load arbitrary images.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/listops.scm</title> <itemizedlist>
      <listitem><para><link linkend="iota"><function>iota</function></link> &mdash; Generate a list of the integers from 1 to N in order.</para></listitem>
      <listitem><para><link linkend="reverse-iota"><function>reverse-iota</function></link> &mdash; Generate a list of the integers from N to 1 in order.</para></listitem>
      <listitem><para><link linkend="accumulate"><function>accumulate</function></link> &mdash; Repeatedly apply PROC to a current value and a member of L.</para></listitem>
      <listitem><para><link linkend="reduce"><function>reduce</function></link> &mdash; Repeatedly apply PROC to a current value and a member of L.</para></listitem>
      <listitem><para><link linkend="append-map"><function>append-map</function></link> &mdash; Do the same thing as map, but collect results with <link linkend="append"><function>append</function></link>,  not <link linkend="cons"><function>cons</function></link>.</para></listitem>
      <listitem><para><link linkend="filter"><function>filter</function></link> &mdash; Return a list of those elements of L for which PRED is true.</para></listitem>
      <listitem><para><link linkend="there-exists-p"><function>there-exists?</function></link> &mdash; Return true if PRED is true for at least one elements of L, otherwise false.</para></listitem>
      <listitem><para><link linkend="for-all-p"><function>for-all?</function></link> &mdash; Return true if PRED is true for all elements of L, otherwise false.</para></listitem>
      <listitem><para><link linkend="and-map"><function>and-map</function></link> &mdash; Apply PROC repeatedly, returning the first false value.</para></listitem>
      <listitem><para><link linkend="or-map"><function>or-map</function></link> &mdash; Apply PROC repeatedly, returning the first true value.</para></listitem>
      <listitem><para><link linkend="list-index"><function>list-index</function></link> &mdash; Return the integer position of OBJ in list L.</para></listitem>
      <listitem><para><link linkend="make-list"><function>make-list</function></link> &mdash; Return a list containing N elements equal to the optional second argument.</para></listitem>
      <listitem><para><link linkend="map-in-order"><function>map-in-order</function></link> &mdash; Process FIRST and the lists comprising REST as <link linkend="map"><function>map</function></link> would.</para></listitem>
      <listitem><para><link linkend="filter-map"><function>filter-map</function></link> &mdash; Process FIRST and the lists comprising REST as <link linkend="map"><function>map</function></link> would.</para></listitem>
      <listitem><para><link linkend="delete-duplicates"><function>delete-duplicates</function></link> &mdash; Return a list that has the elements of L with duplicates omitted.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/message-window.scm</title> <itemizedlist>
      <listitem><para><link linkend="gravity-to-alignments"><function>gravity->alignments</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="position-message-window-x"><function>position-message-window!</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="message-window-options"><function>message-window-options</function></link> &mdash; Allow specification of message-window behavior for standard actions.</para></listitem>
      <listitem><para><link linkend="message-window-style"><function>message-window-style</function></link> &mdash; Set visual style of MSGWIN.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/module-types.scm</title> <itemizedlist>
      <listitem><para><link linkend="module-event-name-from-number"><function>module-event-name-from-number</function></link> &mdash; Return the string module event name for event number NUM.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/placement.scm</title> <itemizedlist>
      <listitem><para><link linkend="place-in-viewport"><function>place-in-viewport</function></link> &mdash; Move WIN to the (XX, YY) viewport.</para></listitem>
      <listitem><para><link linkend="place-on-desk"><function>place-on-desk</function></link> &mdash; Move window WIN to desk DESK.</para></listitem>
      <listitem><para><link linkend="interactive-place"><function>interactive-place</function></link> &mdash; Place WIN interactively.</para></listitem>
      <listitem><para><link linkend="place-at-point"><function>place-at-point</function></link> &mdash; Place WIN at the pointer position.</para></listitem>
      <listitem><para><link linkend="in-viewport-placement"><function>in-viewport-placement</function></link> &mdash; Return a procedure that takes a window and places it in viewport (XX, YY).</para></listitem>
      <listitem><para><link linkend="on-desk-placement"><function>on-desk-placement</function></link> &mdash; Return a procedure that takes a window and places it on DESK.</para></listitem>
      <listitem><para><link linkend="interactive-placement"><function>interactive-placement</function></link> &mdash; Return a procedure that takes a window and places it interactively.</para></listitem>
      <listitem><para><link linkend="at-point-placement"><function>at-point-placement</function></link> &mdash; Return a procedure that places a window it at the pointer position.</para></listitem>
      <listitem><para><link linkend="virtual-switch-placement"><function>virtual-switch-placement</function></link> &mdash; Wrap placement procedure PROC with virtual switching code.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/prefs-menu.scm</title> <itemizedlist>
      <listitem><para><link linkend="save-settings"><function>save-settings</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="mod-desk-size-x"><function>mod-desk-size!</function></link> &mdash; Modify the current desktop size by the given parameter.</para></listitem>
      <listitem><para><link linkend="help-mesg"><function>help-mesg</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="ask-string"><function>ask-string</function></link> &mdash; Ask for a string with PROMPT.</para></listitem>
      <listitem><para><link linkend="menu-prefs"><function>menu-prefs</function></link> &mdash; Generate the <link linkend="-references"><function>Preferences</function></link> menu.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/report-usage.scm</title> <itemizedlist>
      <listitem><para><link linkend="report-scwm-usage"><function>report-scwm-usage</function></link> &mdash; Log your usage of scwm to a central host.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/ScwmClock.scm</title> <itemizedlist>
      <listitem><para><link linkend="run--cwmClock"><function>run-ScwmClock</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="close--cwmClock"><function>close-ScwmClock</function></link> &mdash; No documentation supplied.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/ScwmDeskButtons.scm</title> <itemizedlist>
      <listitem><para><link linkend="run--cwmDeskButtons"><function>run-ScwmDeskButtons</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="close--cwmDeskButtons"><function>close-ScwmDeskButtons</function></link> &mdash; No documentation supplied.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/shutdown-opts.scm</title> <itemizedlist>
      <listitem><para><link linkend="shutdown-options"><function>shutdown-options</function></link> &mdash; Configure shutdown preferences.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/sort.scm</title> <itemizedlist>
      <listitem><para><link linkend="sort"><function>sort</function></link> &mdash; Returned LS sorted according to COMPARE (defaults to ascending numerical order).</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/stacking.scm</title> <itemizedlist>
      <listitem><para><link linkend="list-windows-above"><function>list-windows-above</function></link> &mdash; List the windows above w from bottom to top.</para></listitem>
      <listitem><para><link linkend="list-windows-below"><function>list-windows-below</function></link> &mdash; List the windows below w from top to bottom.</para></listitem>
      <listitem><para><link linkend="lower-window-below"><function>lower-window-below</function></link> &mdash; Restack window W immediately below W2.</para></listitem>
      <listitem><para><link linkend="raise-window-above"><function>raise-window-above</function></link> &mdash; Restack window W immediately above W2.</para></listitem>
      <listitem><para><link linkend="lower-by-one"><function>lower-by-one</function></link> &mdash; Lower window W below the next window down that overlaps it.</para></listitem>
      <listitem><para><link linkend="raise-by-one"><function>raise-by-one</function></link> &mdash; Raise window W above the next window up that overlaps it.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/std-menus.scm</title> <itemizedlist>
      <listitem><para><link linkend="make-xlock-menu"><function>make-xlock-menu</function></link> &mdash; Create an xlock menu.</para></listitem>
      <listitem><para><link linkend="make-hosts-menu"><function>make-hosts-menu</function></link> &mdash; Create a telnet menu.</para></listitem>
      <listitem><para><link linkend="make-context-menu"><function>make-context-menu</function></link> &mdash; Create a menu of actions applicable to the filename in the X selection.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/style-options.scm</title> <itemizedlist>
      <listitem><para><link linkend="add-window-style-option"><function>add-window-style-option</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="add-boolean-style-option"><function>add-boolean-style-option</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="add-window-hint-option"><function>add-window-hint-option</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="add-boolean-hint-option"><function>add-boolean-hint-option</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="style-option:handler"><function>style-option:handler</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="style-option:type"><function>style-option:type</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="style-option:cumulative-p"><function>style-option:cumulative?</function></link> &mdash; No documentation supplied.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/style.scm</title> <itemizedlist>
      <listitem><para><link linkend="style-one-window"><function>style-one-window</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="window-style"><function>window-style</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="clear-window-style"><function>clear-window-style</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="make-style"><function>make-style</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="make-conditional-style"><function>make-conditional-style</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="apply-style"><function>apply-style</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="set-window-placement-proc-x"><function>set-window-placement-proc!</function></link> &mdash; Set the 'placement-proc property of WIN to PROC.</para></listitem>
      <listitem><para><link linkend="set-window-transient-placement-proc-x"><function>set-window-transient-placement-proc!</function></link> &mdash; Like <link linkend="set-window-placement-proc-x"><function>set-window-placement-proc!</function></link> (which see), but for transient</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/theme-impl.scm</title> <itemizedlist>
      <listitem><para><link linkend="load-theme-image"><function>load-theme-image</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="make-theme"><function>make-theme</function></link> &mdash; Creates a theme object with the given NAME, WINDOW-STYLE, and BACKGROUND-STYLE.</para></listitem>
      <listitem><para><link linkend="theme:name"><function>theme:name</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="theme:window-style"><function>theme:window-style</function></link> &mdash; No documentation supplied.</para></listitem>
      <listitem><para><link linkend="theme:background-style"><function>theme:background-style</function></link> &mdash; No documentation supplied.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/themes.scm</title> <itemizedlist>
      <listitem><para><link linkend="use-theme"><function>use-theme</function></link> &mdash; Use settings from THEME to set up the window manager.</para></listitem>
      <listitem><para><link linkend="load-theme"><function>load-theme</function></link> &mdash; Returns a theme FNAME which is loaded from <link linkend="theme-path"><function>theme-path</function></link>.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/tile.scm</title> <itemizedlist>
      <listitem><para><link linkend="tile-windows"><function>tile-windows</function></link> &mdash; Tile WINDOWS according to several parameters.</para></listitem>
      <listitem><para><link linkend="tile"><function>tile</function></link> &mdash; Tile the windows on the specified desk.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/virtual.scm</title> <itemizedlist>
      <listitem><para><link linkend="containing-aligned-viewport"><function>containing-aligned-viewport</function></link> &mdash; Compute the viewport-position of the viewport that contains POS.</para></listitem>
      <listitem><para><link linkend="nearest-aligned-viewport"><function>nearest-aligned-viewport</function></link> &mdash; Compute the nearest valid integral viewport position to POS.</para></listitem>
      <listitem><para><link linkend="window-aligned-viewport"><function>window-aligned-viewport</function></link> &mdash; Return the viewport that contains the center of WIN.</para></listitem>
      <listitem><para><link linkend="move-window-to-viewport"><function>move-window-to-viewport</function></link> &mdash; Move WIN to the viewport numbered (XX,YY).</para></listitem>
      <listitem><para><link linkend="move-inside-viewport"><function>move-inside-viewport</function></link> &mdash; Ensure that WIN is entirely inside the X, Y viewport if possible.</para></listitem>
      <listitem><para><link linkend="move-inside-aligned-viewport"><function>move-inside-aligned-viewport</function></link> &mdash; Ensure that WIN is entirely inside the XX, YY viewport if possible.</para></listitem>
      <listitem><para><link linkend="move-inside-current-viewport"><function>move-inside-current-viewport</function></link> &mdash; Ensure that WIN is entirely inside the current viewport, if possible.</para></listitem>
      <listitem><para><link linkend="move-inside-own-viewport"><function>move-inside-own-viewport</function></link> &mdash; Ensure that WIN is entirely inside the closest viewport to its center.</para></listitem>
      <listitem><para><link linkend="move-to-viewport"><function>move-to-viewport</function></link> &mdash; Move to the viewport numbered (XX,YY).</para></listitem>
      <listitem><para><link linkend="align-viewport"><function>align-viewport</function></link> &mdash; Set the viewport position to the nearest multiple of the desk size.</para></listitem>
      <listitem><para><link linkend="warp-to-window-viewport"><function>warp-to-window-viewport</function></link> &mdash; Change to the desk and viewport of WIN.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/wininfo.scm</title> <itemizedlist>
      <listitem><para><link linkend="on-desk-p"><function>on-desk?</function></link> &mdash; Return <literal>#t</literal> if WIN is on desk N, else <literal>#f</literal>.</para></listitem>
      <listitem><para><link linkend="on-desk-n-p"><function>on-desk-n?</function></link> &mdash; Returns a function which takes WIN and returns <literal>#t</literal> if WIN is on desk N, else <literal>#f</literal>.</para></listitem>
      <listitem><para><link linkend="on-current-desk-p"><function>on-current-desk?</function></link> &mdash; Return <literal>#t</literal> if WIN is on the current desk.</para></listitem>
      <listitem><para><link linkend="in-viewport-any-desk-p"><function>in-viewport-any-desk?</function></link> &mdash; Return <literal>#t</literal> if WIN is in the current viewport ignoring the desk, else <literal>#f</literal>.</para></listitem>
      <listitem><para><link linkend="windows-overlap-p"><function>windows-overlap?</function></link> &mdash; Return <literal>#t</literal> if WIN and WIN2 overlap at all, else <literal>#f</literal>.</para></listitem>
      <listitem><para><link linkend="window-overlaps-window-p"><function>window-overlaps-window?</function></link> &mdash; Return a function which takes WIN2 and returns <literal>#t</literal> if it overlaps WIN.</para></listitem>
      <listitem><para><link linkend="visible-p"><function>visible?</function></link> &mdash; Return <literal>#t</literal> if any of WIN is currently potentially visible, else <literal>#f</literal>.</para></listitem>
      <listitem><para><link linkend="percent-visible"><function>percent-visible</function></link> &mdash; Return the percent of WIN currently in the viewport as a real in [0,100].</para></listitem>
      <listitem><para><link linkend="window-center-position"><function>window-center-position</function></link> &mdash; Return the coordinates of the center of WIN as a list of the X and Y coordinate.</para></listitem>
      <listitem><para><link linkend="window-geometry-string"><function>window-geometry-string</function></link> &mdash; Return a string corresponding to the geometry specifications for WIN.</para></listitem>
      <listitem><para><link linkend="time-t-to-seconds-ago"><function>time-t->seconds-ago</function></link> &mdash; Return the number of seconds that have passed since TIMET was the current time.</para></listitem>
      <listitem><para><link linkend="window-last-focus-time-string"><function>window-last-focus-time-string</function></link> &mdash; Return a string corresponding to the last focus time for WIN.</para></listitem>
      <listitem><para><link linkend="wildcard-to-regexp"><function>wildcard->regexp</function></link> &mdash; Return the regular expresision string corresponding to WILDCARD.</para></listitem>
      <listitem><para><link linkend="window-client-machine-name"><function>window-client-machine-name</function></link> &mdash; Return the name of the client machine on which WIN is running.</para></listitem>
      <listitem><para><link linkend="wildcard-matcher"><function>wildcard-matcher</function></link> &mdash; Return a procedure that matches WILDCARD against a window.</para></listitem>
      <listitem><para><link linkend="wildcard-match-p"><function>wildcard-match?</function></link> &mdash; Returns <literal>#t</literal> if WILDCARD matches WIN (in the sense of <link linkend="wildcard-matcher"><function>wildcard-matcher</function></link>).</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/winlist.scm</title> <itemizedlist>
      <listitem><para><link linkend="default-winlist-proc"><function>default-winlist-proc</function></link> &mdash; The default behaviour when WIN is selected from the window list.</para></listitem>
      <listitem><para><link linkend="list-windows"><function>list-windows</function></link> &mdash; Return the list of windows matching ONLY and not matching EXCEPT.</para></listitem>
      <listitem><para><link linkend="winlist-hit"><function>winlist-hit</function></link> &mdash; Permit WIN to be displayed in the window list by default.</para></listitem>
      <listitem><para><link linkend="winlist-skip"><function>winlist-skip</function></link> &mdash; Do not show WIN in the window list by default.</para></listitem>
      <listitem><para><link linkend="winlist-skip-p"><function>winlist-skip?</function></link> &mdash; Return <literal>#t</literal> if WIN is skipped in the window list, <literal>#f</literal> otherwise.</para></listitem>
      <listitem><para><link linkend="show-window-list-menu"><function>show-window-list-menu</function></link> &mdash; Popup a window list menu and permit a selection to be made.</para></listitem>
      <listitem><para><link linkend="circulate-hit"><function>circulate-hit</function></link> &mdash; Include WIN among the windows in the circulate list.</para></listitem>
      <listitem><para><link linkend="circulate-skip"><function>circulate-skip</function></link> &mdash; Do not include WIN among the windows in the circulate list.</para></listitem>
      <listitem><para><link linkend="circulate-skip-p"><function>circulate-skip?</function></link> &mdash; Return <literal>#t</literal> if WIN is not among the windows in the circulate list.</para></listitem>
      <listitem><para><link linkend="circulate-hit-icon"><function>circulate-hit-icon</function></link> &mdash; Include WIN's icon among the windows in the circulate list.</para></listitem>
      <listitem><para><link linkend="circulate-skip-icon"><function>circulate-skip-icon</function></link> &mdash; Do not include WIN's icon among the windows in the circulate list.</para></listitem>
      <listitem><para><link linkend="circulate-skip-icon-p"><function>circulate-skip-icon?</function></link> &mdash; Return <literal>#t</literal> if WIN's icon is not among the windows in the circulate list.</para></listitem>
      <listitem><para><link linkend="should-circulate-skip-p"><function>should-circulate-skip?</function></link> &mdash; Return <literal>#t</literal> if WIN should now be skipped when circulating, <literal>#f</literal> otherwise.</para></listitem>
      <listitem><para><link linkend="next-window"><function>next-window</function></link> &mdash; Circulate to the next matching window.</para></listitem>
      <listitem><para><link linkend="prev-window"><function>prev-window</function></link> &mdash; Circulate to the previous matching window.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/winops.scm</title> <itemizedlist>
      <listitem><para><link linkend="make-toggling-winop"><function>make-toggling-winop</function></link> &mdash; Returns a procedure which takes a window WIN and toggles a property of it.</para></listitem>
      <listitem><para><link linkend="close-window"><function>close-window</function></link> &mdash; Close WIN either by deleting it or destroying it.</para></listitem>
      <listitem><para><link linkend="maximize"><function>maximize</function></link> &mdash; Maximize WIN to new pixel width NW and new pixel height NH.</para></listitem>
      <listitem><para><link linkend="maximized-p"><function>maximized?</function></link> &mdash; Return <literal>#t</literal> if WIN is maximized, <literal>#f</literal> otherwise.</para></listitem>
      <listitem><para><link linkend="unmaximize"><function>unmaximize</function></link> &mdash; Unmaximize WIN so it returns to its size/position before maximization.</para></listitem>
      <listitem><para><link linkend="toggle-maximize"><function>toggle-maximize</function></link> &mdash; Maximize to width NW, height NH if not maximized, or unmaximize.</para></listitem>
      <listitem><para><link linkend="window-frame-area"><function>window-frame-area</function></link> &mdash; Return the area of WIN's frame in square pixels.</para></listitem>
      <listitem><para><link linkend="default-resize-opaquely-p"><function>default-resize-opaquely?</function></link> &mdash; Return <literal>#t</literal> if WIN has area &lt; opaque-resize-percent of the screen, else <literal>#f</literal>.</para></listitem>
      <listitem><para><link linkend="default-move-opaquely-p"><function>default-move-opaquely?</function></link> &mdash; Return <literal>#t</literal> if WIN has area &lt; opaque-move-percent of the screen, else <literal>#f</literal>.</para></listitem>
      <listitem><para><link linkend="interactive-move"><function>interactive-move</function></link> &mdash; Move WINDOW interactively and possibly opaquely.</para></listitem>
      <listitem><para><link linkend="interactive-resize"><function>interactive-resize</function></link> &mdash; Resize WINDOW interactively and possibly opaquely.</para></listitem>
      <listitem><para><link linkend="print-window"><function>print-window</function></link> &mdash; Print WIN using xpr and lpr.</para></listitem>
      <listitem><para><link linkend="resize-window"><function>resize-window</function></link> &mdash; Resize WIN's client area to a size of W by H in pixels.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scheme/wmconfig-menu.scm</title> <itemizedlist>
      <listitem><para><link linkend="make-wmconfig-menu"><function>make-wmconfig-menu</function></link> &mdash; Return a menu object for the window-manager configuration menu.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/binding.c</title> <itemizedlist>
      <listitem><para><link linkend="unbind-key"><function>unbind-key</function></link> &mdash; Remove any bindings attached to KEY in given CONTEXTS.</para></listitem>
      <listitem><para><link linkend="keysym-to-keycode"><function>keysym->keycode</function></link> &mdash; Returns a list of X/11 keycodes that generate the keysym, KEYSYM-NAME.</para></listitem>
      <listitem><para><link linkend="unbind-mouse"><function>unbind-mouse</function></link> &mdash; Remove any bindings attached to mouse BUTTON in given CONTEXTS.</para></listitem>
      <listitem><para><link linkend="bind-key"><function>bind-key</function></link> &mdash; Bind the given KEY within the CONTEXTS to invoke PROC.</para></listitem>
      <listitem><para><link linkend="bind-keycode"><function>bind-keycode</function></link> &mdash; Bind the given KEYCODE within the CONTEXTS to invoke PROC.</para></listitem>
      <listitem><para><link linkend="bind-mouse"><function>bind-mouse</function></link> &mdash; Bind the given mouse BUTTON within the CONTEXTS to invoke PROC.</para></listitem>
      <listitem><para><link linkend="mouse-event-type"><function>mouse-event-type</function></link> &mdash; Return a symbol corresponding to the type of the most recent mouse event.</para></listitem>
      <listitem><para><link linkend="mod-mask-shift"><function>mod-mask-shift</function></link> &mdash; Return the bit-mask for the Shift modifier key, or <literal>#f</literal>.</para></listitem>
      <listitem><para><link linkend="mod-mask-control"><function>mod-mask-control</function></link> &mdash; Return the bit-mask for the Control modifier key, or <literal>#f</literal>.</para></listitem>
      <listitem><para><link linkend="mod-mask-meta"><function>mod-mask-meta</function></link> &mdash; Return the bit-mask for the Meta modifier key, or <literal>#f</literal>.</para></listitem>
      <listitem><para><link linkend="mod-mask-alt"><function>mod-mask-alt</function></link> &mdash; Return the bit-mask for the Alt modifier key, or <literal>#f</literal>.</para></listitem>
      <listitem><para><link linkend="mod-mask-hyper"><function>mod-mask-hyper</function></link> &mdash; Return the bit-mask for the Hyper modifier key, or <literal>#f</literal>.</para></listitem>
      <listitem><para><link linkend="mod-mask-super"><function>mod-mask-super</function></link> &mdash; Return the bit-mask for the Super modifier key, or <literal>#f</literal>.</para></listitem>
      <listitem><para><link linkend="X-pointer-mapping"><function>X-pointer-mapping</function></link> &mdash; Return the mapping of physical->logical pointer buttons as a list.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/callbacks.c</title> <itemizedlist>
      <listitem><para><link linkend="safe-load"><function>safe-load</function></link> &mdash; Load file FNAME while trapping and displaying errors.</para></listitem>
      <listitem><para><link linkend="add-timer-hook-x"><function>add-timer-hook!</function></link> &mdash; Add a timer hook to call PROC once sometime after USEC microseconds.</para></listitem>
      <listitem><para><link linkend="remove-timer-hook-x"><function>remove-timer-hook!</function></link> &mdash; Remove a timer hook identified by HANDLE.</para></listitem>
      <listitem><para><link linkend="add-input-hook-x"><function>add-input-hook!</function></link> &mdash; Add an input hook to run PROC on input from PORT.</para></listitem>
      <listitem><para><link linkend="remove-input-hook-x"><function>remove-input-hook!</function></link> &mdash; Remove an input hook identified by HANDLE.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/color.c</title> <itemizedlist>
      <listitem><para><link linkend="color-p"><function>color?</function></link> &mdash; Returns <literal>#t</literal> if OBJ is a color object, otherwise <literal>#f</literal>.</para></listitem>
      <listitem><para><link linkend="color-properties"><function>color-properties</function></link> &mdash; Return an association list giving some properties of COLOR.</para></listitem>
      <listitem><para><link linkend="make-color"><function>make-color</function></link> &mdash; Return the color object corresponding to the X color specifier CNAME.</para></listitem>
      <listitem><para><link linkend="clear-color-cache-entry"><function>clear-color-cache-entry</function></link> &mdash; Colors are cached by name.</para></listitem>
      <listitem><para><link linkend="make-relief-color"><function>make-relief-color</function></link> &mdash; Convert a color into a new color appropriate for a relief.</para></listitem>
      <listitem><para><link linkend="make-reversed-color"><function>make-reversed-color</function></link> &mdash; Return a new color that is opposite COLOR.</para></listitem>
      <listitem><para><link linkend="set-hilight-factor-x"><function>set-hilight-factor!</function></link> &mdash; Use FACTOR to generate highlight colors for the current decor.</para></listitem>
      <listitem><para><link linkend="hilight-factor"><function>hilight-factor</function></link> &mdash; Return the current hilight factor.</para></listitem>
      <listitem><para><link linkend="set-shadow-factor-x"><function>set-shadow-factor!</function></link> &mdash; Use FACTOR to generate shadow colors in the current decor.</para></listitem>
      <listitem><para><link linkend="shadow-factor"><function>shadow-factor</function></link> &mdash; Return the current shadow factor.</para></listitem>
      <listitem><para><link linkend="set-menu-hilight-factor-x"><function>set-menu-hilight-factor!</function></link> &mdash; Use FACTOR to generate hilight colors for menus.</para></listitem>
      <listitem><para><link linkend="menu-hilight-factor"><function>menu-hilight-factor</function></link> &mdash; Return the current menu hilight factor.</para></listitem>
      <listitem><para><link linkend="set-menu-shadow-factor-x"><function>set-menu-shadow-factor!</function></link> &mdash; Use FACTOR to generate shadow colors for menus.</para></listitem>
      <listitem><para><link linkend="menu-shadow-factor"><function>menu-shadow-factor</function></link> &mdash; Return the current menu shadow factor.</para></listitem>
      <listitem><para><link linkend="set-hilight-foreground-x"><function>set-hilight-foreground!</function></link> &mdash; Use FG for the foreground color of a window with the input focus.</para></listitem>
      <listitem><para><link linkend="hilight-foreground"><function>hilight-foreground</function></link> &mdash; Return the default foreground color for windows with the input focus.</para></listitem>
      <listitem><para><link linkend="set-hilight-background-x"><function>set-hilight-background!</function></link> &mdash; Use BG as the background color for a window with the input focus.</para></listitem>
      <listitem><para><link linkend="hilight-background"><function>hilight-background</function></link> &mdash; Return the default background color for windows with the input focus.</para></listitem>
      <listitem><para><link linkend="set-not-menu-foreground-x"><function>set-not-menu-foreground!</function></link> &mdash; Use FG as the default foreground color for icons, titlebars, etc.</para></listitem>
      <listitem><para><link linkend="not-menu-foreground"><function>not-menu-foreground</function></link> &mdash; Return the default foreground color for icons, titlebars, etc.</para></listitem>
      <listitem><para><link linkend="set-not-menu-background-x"><function>set-not-menu-background!</function></link> &mdash; Use BG as the default background color for icons, window frames, etc.</para></listitem>
      <listitem><para><link linkend="not-menu-background"><function>not-menu-background</function></link> &mdash; Return the default background color for icons, window frames, etc.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/decor.c</title> <itemizedlist>
      <listitem><para><link linkend="make-decor"><function>make-decor</function></link> &mdash; Create a new decor object.</para></listitem>
      <listitem><para><link linkend="default-decor"><function>default-decor</function></link> &mdash; Return the default decor.</para></listitem>
      <listitem><para><link linkend="set-current-decor-x"><function>set-current-decor!</function></link> &mdash; Set the current decor to DECOR.</para></listitem>
      <listitem><para><link linkend="current-decor"><function>current-decor</function></link> &mdash; Return the current decor.</para></listitem>
      <listitem><para><link linkend="set-window-decor-x"><function>set-window-decor!</function></link> &mdash; Set WIN's decor to DECOR, updating its decorations appropriately.</para></listitem>
      <listitem><para><link linkend="window-decor"><function>window-decor</function></link> &mdash; Return WIN's decor.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/deskpage.c</title> <itemizedlist>
      <listitem><para><link linkend="set-current-desk-x"><function>set-current-desk!</function></link> &mdash; Change the current desk to DESK.</para></listitem>
      <listitem><para><link linkend="current-desk"><function>current-desk</function></link> &mdash; Returns the integer identifying the current desk.</para></listitem>
      <listitem><para><link linkend="set-viewport-position-x"><function>set-viewport-position!</function></link> &mdash; Position the upper left corner of the viewport at coordinates X, Y.</para></listitem>
      <listitem><para><link linkend="viewport-position"><function>viewport-position</function></link> &mdash; Returns the current position of the viewport in pixels.</para></listitem>
      <listitem><para><link linkend="set-edge-x-scroll-x"><function>set-edge-x-scroll!</function></link> &mdash; Set the horizontal edge scroll increment to PIXELS.</para></listitem>
      <listitem><para><link linkend="edge-x-scroll"><function>edge-x-scroll</function></link> &mdash; Return the horizontal edge scroll increment as set by <link linkend="set-edge-x-scroll-x"><function>set-edge-x-scroll!</function></link>.</para></listitem>
      <listitem><para><link linkend="set-edge-y-scroll-x"><function>set-edge-y-scroll!</function></link> &mdash; Set the vertical edge scroll increment to PIXELS.</para></listitem>
      <listitem><para><link linkend="edge-y-scroll"><function>edge-y-scroll</function></link> &mdash; Return the vertical edge scroll increment as set by <link linkend="set-edge-y-scroll-x"><function>set-edge-y-scroll!</function></link>.</para></listitem>
      <listitem><para><link linkend="set-edge-x-wrap-x"><function>set-edge-x-wrap!</function></link> &mdash; Set whether to wrap pointer around horizontal edges.</para></listitem>
      <listitem><para><link linkend="edge-x-wrap"><function>edge-x-wrap</function></link> &mdash; Return the current horizonatal edge wrap setting as set by <link linkend="set-edge-x-wrap-x"><function>set-edge-x-wrap!</function></link>.</para></listitem>
      <listitem><para><link linkend="set-edge-y-wrap-x"><function>set-edge-y-wrap!</function></link> &mdash; Set whether to wrap pointer around vertical edges.</para></listitem>
      <listitem><para><link linkend="edge-y-wrap"><function>edge-y-wrap</function></link> &mdash; Return the current vertical edge wrap setting as set by <link linkend="set-edge-y-wrap-x"><function>set-edge-y-wrap!</function></link>.</para></listitem>
      <listitem><para><link linkend="set-edge-scroll-delay-x"><function>set-edge-scroll-delay!</function></link> &mdash; Set the edge scroll delay to USEC microseconds.</para></listitem>
      <listitem><para><link linkend="edge-scroll-delay"><function>edge-scroll-delay</function></link> &mdash; Return the edge scroll delay as set by <link linkend="set-edge-scroll-delay-x"><function>set-edge-scroll-delay!</function></link>.</para></listitem>
      <listitem><para><link linkend="set-edge-move-threshold-x"><function>set-edge-move-threshold!</function></link> &mdash; Set the edge move threshold to PIXELS.</para></listitem>
      <listitem><para><link linkend="edge-move-threshold"><function>edge-move-threshold</function></link> &mdash; Return the edge move threshold as set by <link linkend="set-edge-move-threshold-x"><function>set-edge-move-threshold!</function></link>.</para></listitem>
      <listitem><para><link linkend="set-desk-size-x"><function>set-desk-size!</function></link> &mdash; Sets the desk size to WIDTH, HEIGHT.</para></listitem>
      <listitem><para><link linkend="desk-size"><function>desk-size</function></link> &mdash; Returns the size of the current desk.</para></listitem>
      <listitem><para><link linkend="display-size"><function>display-size</function></link> &mdash; Returns the size of the physical screen in pixels.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/events.c</title> <itemizedlist>
      <listitem><para><link linkend="reset-scwmexec-protocol"><function>reset-scwmexec-protocol</function></link> &mdash; Reset the scwmexec protocol.</para></listitem>
      <listitem><para><link linkend="send-key-press"><function>send-key-press</function></link> &mdash; Send a synthetic press of KEY.</para></listitem>
      <listitem><para><link linkend="send-button-press"><function>send-button-press</function></link> &mdash; Send a synthetic mouse press event.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/face.c</title> <itemizedlist>
      <listitem><para><link linkend="set-face-flag-x"><function>set-face-flag!</function></link> &mdash; Set the given FLAG to the given FLAGVAL for face FACE.</para></listitem>
      <listitem><para><link linkend="make-face"><function>make-face</function></link> &mdash; Create a new face.</para></listitem>
      <listitem><para><link linkend="set-title-face-x"><function>set-title-face!</function></link> &mdash; Set the titlebar faces for the various window states.</para></listitem>
      <listitem><para><link linkend="set-button-face-x"><function>set-button-face!</function></link> &mdash; Set the button faces for the various window states.</para></listitem>
      <listitem><para><link linkend="set-button-mwm-flag-x"><function>set-button-mwm-flag!</function></link> &mdash; Specify the Mwm flag for BUTTON.</para></listitem>
      <listitem><para><link linkend="set-border-face-x"><function>set-border-face!</function></link> &mdash; Set the face for the border In the current decor.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/font.c</title> <itemizedlist>
      <listitem><para><link linkend="make-font"><function>make-font</function></link> &mdash; Return the font object for the X font specifier FNAME.</para></listitem>
      <listitem><para><link linkend="font-p"><function>font?</function></link> &mdash; Returns <literal>#t</literal> if OBJ is a font object, otherwise <literal>#f</literal>.</para></listitem>
      <listitem><para><link linkend="font-properties"><function>font-properties</function></link> &mdash; Return an association list giving some properties of FONT.</para></listitem>
      <listitem><para><link linkend="set-icon-font-x"><function>set-icon-font!</function></link> &mdash; Set the font used for drawing icon titles to FONT.</para></listitem>
      <listitem><para><link linkend="icon-font"><function>icon-font</function></link> &mdash; Return the font used for drawing icon titles.</para></listitem>
      <listitem><para><link linkend="set-title-font-x"><function>set-title-font!</function></link> &mdash; Set the font for window titles In the current decor to FONT.</para></listitem>
      <listitem><para><link linkend="title-font"><function>title-font</function></link> &mdash; Return the font used for drawing window titles in the current decor.</para></listitem>
      <listitem><para><link linkend="clear-font-cache-entry"><function>clear-font-cache-entry</function></link> &mdash; Fonts are cached by name.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/Grab.c</title> <itemizedlist>
      <listitem><para><link linkend="X-grab-server"><function>X-grab-server</function></link> &mdash; Grab the X server.</para></listitem>
      <listitem><para><link linkend="X-ungrab-server"><function>X-ungrab-server</function></link> &mdash; Ungrab the X server.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/image.c</title> <itemizedlist>
      <listitem><para><link linkend="image-p"><function>image?</function></link> &mdash; Returns <literal>#t</literal> if OBJ is an image object, otherwise <literal>#f</literal>.</para></listitem>
      <listitem><para><link linkend="image-properties"><function>image-properties</function></link> &mdash; Return an association list giving some properties of IMAGE.</para></listitem>
      <listitem><para><link linkend="load-xbm"><function>load-xbm</function></link> &mdash; Load an X Bitmap file identified by the pathname FULL-PATH.</para></listitem>
      <listitem><para><link linkend="load-xpm"><function>load-xpm</function></link> &mdash; Load an X Pixmap file identified by the pathname FULL-PATH.</para></listitem>
      <listitem><para><link linkend="register-image-loader"><function>register-image-loader</function></link> &mdash; Register PROC as the loader to use for images ending in EXTENSION.</para></listitem>
      <listitem><para><link linkend="unregister-image-loader"><function>unregister-image-loader</function></link> &mdash; Unregister the loader, if any, for images ending in EXTENSION.</para></listitem>
      <listitem><para><link linkend="make-image"><function>make-image</function></link> &mdash; Loads an image from the file NAME.</para></listitem>
      <listitem><para><link linkend="clear-image-cache-entry"><function>clear-image-cache-entry</function></link> &mdash; Images are cached by both name and full pathname.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/menu.c</title> <itemizedlist>
      <listitem><para><link linkend="menu-p"><function>menu?</function></link> &mdash; Return <literal>#t</literal> if and only if OBJ is a menu object.</para></listitem>
      <listitem><para><link linkend="menu-properties"><function>menu-properties</function></link> &mdash; Returns the a list of the menu properties of MENU, a menu object.</para></listitem>
      <listitem><para><link linkend="make-menu"><function>make-menu</function></link> &mdash; Make and return a menu object from the given arguments.</para></listitem>
      <listitem><para><link linkend="set-menu-menu-look-x"><function>set-menu-menu-look!</function></link> &mdash; Use MENU-LOOK as the menu-look for MENU.</para></listitem>
      <listitem><para><link linkend="set-menu-menu-title-x"><function>set-menu-menu-title!</function></link> &mdash; Use MENU-TITLE as the title for MENU.</para></listitem>
      <listitem><para><link linkend="popup-menu"><function>popup-menu</function></link> &mdash; Popup MENU, a menu object, and warp to the first item if WARP-TO-FIRST? is <literal>#t</literal>.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/menuitem.c</title> <itemizedlist>
      <listitem><para><link linkend="menuitem-properties"><function>menuitem-properties</function></link> &mdash; Return a list of the properties of the given MENU-ITEM.</para></listitem>
      <listitem><para><link linkend="make-menuitem"><function>make-menuitem</function></link> &mdash; Return a newly created menuitem object using the given arguments.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/menulook.c</title> <itemizedlist>
      <listitem><para><link linkend="menulook-p"><function>menulook?</function></link> &mdash; Return <literal>#t</literal> if OBJ is a menulook object, <literal>#f</literal> otherwise.</para></listitem>
      <listitem><para><link linkend="copy-menu-look"><function>copy-menu-look</function></link> &mdash; Copy menu look ORIGINAL-MENU-LOOK with a new NAME and optional EXTRA.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/message-window.c</title> <itemizedlist>
      <listitem><para><link linkend="message-window-p"><function>message-window?</function></link> &mdash; Returns <literal>#t</literal> if MWN is a msgwindow object, otherwise <literal>#f</literal>.</para></listitem>
      <listitem><para><link linkend="make-message-window"><function>make-message-window</function></link> &mdash; Returns a newly created message window object with string MESSAGE.</para></listitem>
      <listitem><para><link linkend="message-window-set-message-x"><function>message-window-set-message!</function></link> &mdash; Changes the message displayed by the message window MWN.</para></listitem>
      <listitem><para><link linkend="message-window-set-font-x"><function>message-window-set-font!</function></link> &mdash; Set the font to be used for the message window MWN.</para></listitem>
      <listitem><para><link linkend="message-window-set-colors-x"><function>message-window-set-colors!</function></link> &mdash; Set the fore- and background colors to be used for the message window MWN.</para></listitem>
      <listitem><para><link linkend="message-window-set-position-x"><function>message-window-set-position!</function></link> &mdash; Set the position to be used for the message window MWN.</para></listitem>
      <listitem><para><link linkend="message-window-set-relief-x"><function>message-window-set-relief!</function></link> &mdash; Sets the relief for the window MWN.</para></listitem>
      <listitem><para><link linkend="message-window-show-x"><function>message-window-show!</function></link> &mdash; Displays the message window MWN on the screen.</para></listitem>
      <listitem><para><link linkend="message-window-hide-x"><function>message-window-hide!</function></link> &mdash; Hide the message window MWN.</para></listitem>
      <listitem><para><link linkend="message-window-visible-p"><function>message-window-visible?</function></link> &mdash; Return <literal>#t</literal> if the message window MWN is visible, <literal>#f</literal> otherwise.</para></listitem>
      <listitem><para><link linkend="message-window-message"><function>message-window-message</function></link> &mdash; Returns the message that message window MWN displays.</para></listitem>
      <listitem><para><link linkend="message-window-position"><function>message-window-position</function></link> &mdash; Returns the position that message window MWN is/will be displayed at.</para></listitem>
      <listitem><para><link linkend="message-window-font"><function>message-window-font</function></link> &mdash; Returns the font that the message window MWN uses for displaying text.</para></listitem>
      <listitem><para><link linkend="message-window-colors"><function>message-window-colors</function></link> &mdash; Returns the colors that the message window MWN is displayed with.</para></listitem>
      <listitem><para><link linkend="message-window-relief-p"><function>message-window-relief?</function></link> &mdash; Returns the relief setting for the message window MWN.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/miscprocs.c</title> <itemizedlist>
      <listitem><para><link linkend="set-title-justify-x"><function>set-title-justify!</function></link> &mdash; Set the justification for the title to JUST.</para></listitem>
      <listitem><para><link linkend="title-justify"><function>title-justify</function></link> &mdash; Return the current justification for the title, as set by <link linkend="set-title-justify-x"><function>set-title-justify!</function></link>.</para></listitem>
      <listitem><para><link linkend="set-title-height-x"><function>set-title-height!</function></link> &mdash; Set the height of the titlebar in pixels to HEIGHT.</para></listitem>
      <listitem><para><link linkend="title-height"><function>title-height</function></link> &mdash; Return the height of the titlebar in pixels, as set by <link linkend="set-title-height-x"><function>set-title-height!</function></link>.</para></listitem>
      <listitem><para><link linkend="restarted-p"><function>restarted?</function></link> &mdash; Returns true if scwm is being restarted by itself.</para></listitem>
      <listitem><para><link linkend="capturing-p"><function>capturing?</function></link> &mdash; Returns <literal>#t</literal> when the windows are being captured.</para></listitem>
      <listitem><para><link linkend="refresh"><function>refresh</function></link> &mdash; Make sure all windows and their decorations are up to date.</para></listitem>
      <listitem><para><link linkend="set-click-delay-x"><function>set-click-delay!</function></link> &mdash; Set the delay used in identifying mouse clicks and drags.</para></listitem>
      <listitem><para><link linkend="click-delay"><function>click-delay</function></link> &mdash; Returns the delay used in identifying mouse clicks and drags, in milliseconds.</para></listitem>
      <listitem><para><link linkend="set-colormap-focus-x"><function>set-colormap-focus!</function></link> &mdash; Set the colormap focus policy to FTYPE.</para></listitem>
      <listitem><para><link linkend="colormap-focus"><function>colormap-focus</function></link> &mdash; Return the colormap focus policy, as set by <link linkend="set-colormap-focus-x"><function>set-colormap-focus!</function></link>.</para></listitem>
      <listitem><para><link linkend="pointer-position"><function>pointer-position</function></link> &mdash; Return the current position of the mouse pointer in pixels.</para></listitem>
      <listitem><para><link linkend="move-pointer-to"><function>move-pointer-to</function></link> &mdash; Move the mouse pointer to viewport coordinates SX, SY.</para></listitem>
      <listitem><para><link linkend="recapture"><function>recapture</function></link> &mdash; Recapture all the windows.</para></listitem>
      <listitem><para><link linkend="wait-for-window"><function>wait-for-window</function></link> &mdash; Wait until a window appears which satisfies PREDICATE.</para></listitem>
      <listitem><para><link linkend="beep"><function>beep</function></link> &mdash; Ring the standard X bell.</para></listitem>
      <listitem><para><link linkend="set-smart-placement-is-really-smart-x"><function>set-smart-placement-is-really-smart!</function></link> &mdash; Determine whether or not <link linkend="clever-place-window"><function>clever-place-window</function></link> will be used when smart-placing.</para></listitem>
      <listitem><para><link linkend="smart-placement-is-really-smart-p"><function>smart-placement-is-really-smart?</function></link> &mdash; Return whether or not <link linkend="clever-place-window"><function>clever-place-window</function></link> will be used when smart-placing.</para></listitem>
      <listitem><para><link linkend="set-click-to-focus-passes-click-x"><function>set-click-to-focus-passes-click!</function></link> &mdash; Determine whether a click-to-focus window receives the click.</para></listitem>
      <listitem><para><link linkend="click-to-focus-passes-click-p"><function>click-to-focus-passes-click?</function></link> &mdash; Returns a boolean valude indicating whether a click-to-focus window receives the click.</para></listitem>
      <listitem><para><link linkend="set-click-to-focus-raises-x"><function>set-click-to-focus-raises!</function></link> &mdash; Determine whether a click to focus raises the clicked-on window.</para></listitem>
      <listitem><para><link linkend="click-to-focus-raises-p"><function>click-to-focus-raises?</function></link> &mdash; Returns a boolean valude indicating whether a click-to-focus window gets raised on focus.</para></listitem>
      <listitem><para><link linkend="set-mouse-focus-click-raises-x"><function>set-mouse-focus-click-raises!</function></link> &mdash; Determine whether a mouse-focus-click will raise the window.</para></listitem>
      <listitem><para><link linkend="mouse-focus-click-raises-p"><function>mouse-focus-click-raises?</function></link> &mdash; Returns a boolean value indicating whether a mouse-focus-click will raise the window.</para></listitem>
      <listitem><para><link linkend="X-rotate-cut-buffers"><function>X-rotate-cut-buffers</function></link> &mdash; Rotate the X cut buffers by N positions.</para></listitem>
      <listitem><para><link linkend="elapsed-time"><function>elapsed-time</function></link> &mdash; Return the elapsed time in milliseconds since O.</para></listitem>
      <listitem><para><link linkend="scwm-version"><function>scwm-version</function></link> &mdash; Return the version of scwm running.</para></listitem>
      <listitem><para><link linkend="scwm-version-date"><function>scwm-version-date</function></link> &mdash; Return the date that the running scwm was last changed as a string.</para></listitem>
      <listitem><para><link linkend="scwm-path-prefix"><function>scwm-path-prefix</function></link> &mdash; Return the <envar>$PREFIX</envar> directory path that scwm was installed with.</para></listitem>
      <listitem><para><link linkend="scwm-path-exec-prefix"><function>scwm-path-exec-prefix</function></link> &mdash; Return the <envar>$EXEC_PREFIX</envar> directory path that scwm was installed with.</para></listitem>
      <listitem><para><link linkend="set-X-server-synchronize-x"><function>set-X-server-synchronize!</function></link> &mdash; Set X server sychronization flag to FLAG.</para></listitem>
      <listitem><para><link linkend="X-version-information"><function>X-version-information</function></link> &mdash; Return some information about the version of the running X server.</para></listitem>
      <listitem><para><link linkend="X-display-information"><function>X-display-information</function></link> &mdash; Return some information about the screen.</para></listitem>
      <listitem><para><link linkend="user-name"><function>user-name</function></link> &mdash; Return the current user's name.</para></listitem>
      <listitem><para><link linkend="user-home"><function>user-home</function></link> &mdash; Return the current user's home directory.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/module-interface.c</title> <itemizedlist>
      <listitem><para><link linkend="marshal-fvwm2-config-info"><function>marshal-fvwm2-config-info</function></link> &mdash; Constructs a fvwm2 BroadcastInfo module packet.</para></listitem>
      <listitem><para><link linkend="marshal-fvwm2-iconify-info"><function>marshal-fvwm2-iconify-info</function></link> &mdash; Constructs a fvwm2 "M_ICONIFY" module packet.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/move.c</title> <itemizedlist>
      <listitem><para><link linkend="rubber-band-move"><function>rubber-band-move</function></link> &mdash; Move WIN interactively, using a rubber band frame.</para></listitem>
      <listitem><para><link linkend="opaque-move"><function>opaque-move</function></link> &mdash; Move WIN interactively, opaquely.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/placement.c</title> <itemizedlist>
      <listitem><para><link linkend="place-on-default-desk"><function>place-on-default-desk</function></link> &mdash; Place WIN on a desk according to the default algorithm.</para></listitem>
      <listitem><para><link linkend="smart-place-window"><function>smart-place-window</function></link> &mdash; Places WIN using fvwm2's SmartPlacement algorithm.</para></listitem>
      <listitem><para><link linkend="clever-place-window"><function>clever-place-window</function></link> &mdash; Places WIN using fvwm2's "ReallySmart" algorithm.</para></listitem>
      <listitem><para><link linkend="random-place-window"><function>random-place-window</function></link> &mdash; Places WIN just as if being placed by fvwm2's RandomPlacement.</para></listitem>
      <listitem><para><link linkend="default-placement-proc"><function>default-placement-proc</function></link> &mdash; Use various flags to call an appropriate placement function.</para></listitem>
      <listitem><para><link linkend="default-transient-placement-proc"><function>default-transient-placement-proc</function></link> &mdash; This is the default placement procedure for transient windows.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/resize.c</title> <itemizedlist>
      <listitem><para><link linkend="set-rubber-band-mask-x"><function>set-rubber-band-mask!</function></link> &mdash; Set the rubber band mask used when dragging or resizing.</para></listitem>
      <listitem><para><link linkend="rubber-band-resize"><function>rubber-band-resize</function></link> &mdash; Resize WIN interactively, using a rubber band frame.</para></listitem>
      <listitem><para><link linkend="opaque-resize"><function>opaque-resize</function></link> &mdash; Resize WIN interactively, opaquely.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/session-manager.c</title> <itemizedlist>
      <listitem><para><link linkend="SM-client-id"><function>SM-client-id</function></link> &mdash; Return scwm's session management client id (a string).</para></listitem>
      <listitem><para><link linkend="SM-error-message"><function>SM-error-message</function></link> &mdash; Return a string, describing why session management is not available.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/shutdown.c</title> <itemizedlist>
      <listitem><para><link linkend="restart"><function>restart</function></link> &mdash; Restart the window manager.</para></listitem>
      <listitem><para><link linkend="scwm-quit"><function>scwm-quit</function></link> &mdash; Exit scwm cleanly.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/window.c</title> <itemizedlist>
      <listitem><para><link linkend="window-p"><function>window?</function></link> &mdash; Returns <literal>#t</literal> if OBJ is a window object, otherwise returns <literal>#f</literal>.</para></listitem>
      <listitem><para><link linkend="select-window"><function>select-window</function></link> &mdash; Select a window interactively.</para></listitem>
      <listitem><para><link linkend="get-window"><function>get-window</function></link> &mdash; Retrieve the window context or select interactively.</para></listitem>
      <listitem><para><link linkend="set-window-context-x"><function>set-window-context!</function></link> &mdash; Set the current window context to WIN and return the old context.</para></listitem>
      <listitem><para><link linkend="get-window-context"><function>window-context</function></link> &mdash; Returns the current window context, or <literal>#f</literal> if there is none.</para></listitem>
      <listitem><para><link linkend="current-window-with-focus"><function>current-window-with-focus</function></link> &mdash; Return the window that currently has the input focus.</para></listitem>
      <listitem><para><link linkend="current-window-with-pointer"><function>current-window-with-pointer</function></link> &mdash; Return the window that currently contains the mouse pointer.</para></listitem>
      <listitem><para><link linkend="select-window-interactively-no-message"><function>select-window-interactively-no-message</function></link> &mdash; Returns a window selected interactively.</para></listitem>
      <listitem><para><link linkend="delete-window"><function>delete-window</function></link> &mdash; Request that WIN remove itself from the display.</para></listitem>
      <listitem><para><link linkend="destroy-window"><function>destroy-window</function></link> &mdash; Forcibly remove WIN from the screen.</para></listitem>
      <listitem><para><link linkend="window-deletable-p"><function>window-deletable?</function></link> &mdash; Return <literal>#t</literal> if WIN is able to be deleted, <literal>#f</literal> otherwise.</para></listitem>
      <listitem><para><link linkend="focus"><function>focus</function></link> &mdash; Give WIN the input focus.</para></listitem>
      <listitem><para><link linkend="unfocus"><function>unfocus</function></link> &mdash; Remove the input focus from any window that may have it.</para></listitem>
      <listitem><para><link linkend="warp-to-window"><function>warp-to-window</function></link> &mdash; Move the mouse pointer to the upper left corner of WIN.</para></listitem>
      <listitem><para><link linkend="raise-window"><function>raise-window</function></link> &mdash; Raise WIN to the top of the window stack.</para></listitem>
      <listitem><para><link linkend="lower-window"><function>lower-window</function></link> &mdash; Lower WIN to the bottom of the window stack.</para></listitem>
      <listitem><para><link linkend="restack-windows"><function>restack-windows</function></link> &mdash; Restack the windows in WINLIST from front to back.</para></listitem>
      <listitem><para><link linkend="raised-p"><function>raised?</function></link> &mdash; Return <literal>#t</literal> if WIN is currently raised, <literal>#f</literal> if not.</para></listitem>
      <listitem><para><link linkend="transient-p"><function>transient?</function></link> &mdash; Return <literal>#t</literal> if WIN is transient, <literal>#f</literal> if not.</para></listitem>
      <listitem><para><link linkend="window-transient-for"><function>window-transient-for</function></link> &mdash; Return the window for which WIN is transient.</para></listitem>
      <listitem><para><link linkend="iconify"><function>iconify</function></link> &mdash; Iconify WIN.</para></listitem>
      <listitem><para><link linkend="deiconify"><function>deiconify</function></link> &mdash; Deiconify WIN.</para></listitem>
      <listitem><para><link linkend="iconified-p"><function>iconified?</function></link> &mdash; Return <literal>#t</literal> if WIN is iconified, otherwise return <literal>#f</literal>.</para></listitem>
      <listitem><para><link linkend="stick"><function>stick</function></link> &mdash; Make WIN "sticky" so that it stays stationary in the viewport.</para></listitem>
      <listitem><para><link linkend="unstick"><function>unstick</function></link> &mdash; Cause a window to no longer be "sticky", if it is.</para></listitem>
      <listitem><para><link linkend="sticky-p"><function>sticky?</function></link> &mdash; Return <literal>#t</literal> if WIN is "sticky", <literal>#f</literal> otherwise.</para></listitem>
      <listitem><para><link linkend="window-shade"><function>window-shade</function></link> &mdash; Cause WIN to become "window-shaded".</para></listitem>
      <listitem><para><link linkend="window-unshade"><function>window-unshade</function></link> &mdash; Reverse the effect of <link linkend="window-shade"><function>window-shade</function></link> on WIN.</para></listitem>
      <listitem><para><link linkend="window-shaded-p"><function>window-shaded?</function></link> &mdash; Return <literal>#t</literal> if WIN is shaded.</para></listitem>
      <listitem><para><link linkend="move-window"><function>move-window</function></link> &mdash; Move WIN to virtual coordinates X, Y.</para></listitem>
      <listitem><para><link linkend="resize-to"><function>resize-to</function></link> &mdash; Resize WIN's client area to a size of W by H in pixels.</para></listitem>
      <listitem><para><link linkend="resize-frame-to"><function>resize-frame-to</function></link> &mdash; Resize WIN to a size of W by H in pixels.</para></listitem>
      <listitem><para><link linkend="window-size-hints"><function>window-size-hints</function></link> &mdash; Return a list of the window size hints associated with WIN.</para></listitem>
      <listitem><para><link linkend="refresh-window"><function>refresh-window</function></link> &mdash; Refresh the decorations on window WIN.</para></listitem>
      <listitem><para><link linkend="move-window-to-desk"><function>move-window-to-desk</function></link> &mdash; Move WIN to DESK.</para></listitem>
      <listitem><para><link linkend="window-position"><function>window-position</function></link> &mdash; Return the position of WIN in pixels.</para></listitem>
      <listitem><para><link linkend="icon-position"><function>icon-position</function></link> &mdash; Return the position of the icon for WIN.</para></listitem>
      <listitem><para><link linkend="window-frame-size"><function>window-frame-size</function></link> &mdash; Return the size of the frame of WIN.</para></listitem>
      <listitem><para><link linkend="window-size"><function>window-size</function></link> &mdash; Return the size of the application window of WIN.</para></listitem>
      <listitem><para><link linkend="window-title-size"><function>window-title-size</function></link> &mdash; Return a list with the width and height of WIN's titlebar.</para></listitem>
      <listitem><para><link linkend="window-frame-border-width"><function>window-frame-border-width</function></link> &mdash; Return the width of WIN's frame's border.</para></listitem>
      <listitem><para><link linkend="window-id"><function>window-id</function></link> &mdash; Return the X window id for WIN.</para></listitem>
      <listitem><para><link linkend="window-frame-id"><function>window-frame-id</function></link> &mdash; Return the X window id for the outermost frame window of WIN.</para></listitem>
      <listitem><para><link linkend="id-to-window"><function>id->window</function></link> &mdash; Return the window object corresponding to an application WINDOW-ID.</para></listitem>
      <listitem><para><link linkend="frame-id-to-window"><function>frame-id->window</function></link> &mdash; Return the window object corresponding to a frame WINDOW-ID.</para></listitem>
      <listitem><para><link linkend="window-desk"><function>window-desk</function></link> &mdash; Return the desk that WIN is currently on.</para></listitem>
      <listitem><para><link linkend="window-title"><function>window-title</function></link> &mdash; Return the window title of WIN, as requested by the application.</para></listitem>
      <listitem><para><link linkend="window-icon-title"><function>window-icon-title</function></link> &mdash; Return the icon window title of WIN.</para></listitem>
      <listitem><para><link linkend="window-class"><function>window-class</function></link> &mdash; Return the window resource class of WIN.</para></listitem>
      <listitem><para><link linkend="window-resource"><function>window-resource</function></link> &mdash; Return the window resource instance of WIN.</para></listitem>
      <listitem><para><link linkend="window-last-focus-time"><function>window-last-focus-time</function></link> &mdash; Return the time that WIN was last focussed in seconds since 1/1/70.</para></listitem>
      <listitem><para><link linkend="list-all-windows"><function>list-all-windows</function></link> &mdash; Return a list of all of the top-level window objects.</para></listitem>
      <listitem><para><link linkend="list-stacking-order"><function>list-stacking-order</function></link> &mdash; Return a list of all the top-level window objects, from top to bottom.</para></listitem>
      <listitem><para><link linkend="list-focus-order"><function>list-focus-order</function></link> &mdash; Return a list of all the top-level window objects in focus order.</para></listitem>
      <listitem><para><link linkend="keep-on-top"><function>keep-on-top</function></link> &mdash; Ensure that WIN is kept on top of all other windows.</para></listitem>
      <listitem><para><link linkend="un-keep-on-top"><function>un-keep-on-top</function></link> &mdash; Remove the on-top property from WIN, if it has it.</para></listitem>
      <listitem><para><link linkend="kept-on-top-p"><function>kept-on-top?</function></link> &mdash; Return <literal>#t</literal> if WIN is an on-top window, <literal>#f</literal> otherwise.</para></listitem>
      <listitem><para><link linkend="show-titlebar"><function>show-titlebar</function></link> &mdash; Cause WIN to be decorated with a titlebar.</para></listitem>
      <listitem><para><link linkend="hide-titlebar"><function>hide-titlebar</function></link> &mdash; Cause WIN not to be decorated with a titlebar.</para></listitem>
      <listitem><para><link linkend="titlebar-shown-p"><function>titlebar-shown?</function></link> &mdash; Return <literal>#t</literal> if WIN is decorated with a titlebar, <literal>#f</literal> otherwise.</para></listitem>
      <listitem><para><link linkend="normal-border"><function>normal-border</function></link> &mdash; Cause WIN to be decorated with a normal border.</para></listitem>
      <listitem><para><link linkend="plain-border"><function>plain-border</function></link> &mdash; Cause WIN to be decorated with a plain border.</para></listitem>
      <listitem><para><link linkend="border-normal-p"><function>border-normal?</function></link> &mdash; Return <literal>#t</literal> if WIN has a normal border, <literal>#f</literal> if it has a plain border.</para></listitem>
      <listitem><para><link linkend="set-border-width-x"><function>set-border-width!</function></link> &mdash; Set the border width of WIN's border to WIDTH pixels.</para></listitem>
      <listitem><para><link linkend="stick-icon"><function>stick-icon</function></link> &mdash; Cause WIN's icon to become "sticky".</para></listitem>
      <listitem><para><link linkend="unstick-icon"><function>unstick-icon</function></link> &mdash; Cause WIN's icon to no longer by "sticky".</para></listitem>
      <listitem><para><link linkend="icon-sticky-p"><function>icon-sticky?</function></link> &mdash; Return <literal>#t</literal> if WIN is "sticky", <literal>#f</literal> otherwise.</para></listitem>
      <listitem><para><link linkend="set-icon-box-x"><function>set-icon-box!</function></link> &mdash; Set the icon box in which WIN's icon will be placed.</para></listitem>
      <listitem><para><link linkend="set-window-focus-x"><function>set-window-focus!</function></link> &mdash; Set the focus style of WIN to SYM.</para></listitem>
      <listitem><para><link linkend="get-window-focus"><function>get-window-focus</function></link> &mdash; Get the focus style of WIN.</para></listitem>
      <listitem><para><link linkend="get-window-colors"><function>get-window-colors</function></link> &mdash; Return a two-element list, "(fg bg)", the colors for WIN.</para></listitem>
      <listitem><para><link linkend="get-window-highlight-colors"><function>get-window-highlight-colors</function></link> &mdash; Return a two-element list, "(fg bg)", the highlight colors for WIN.</para></listitem>
      <listitem><para><link linkend="set-window-foreground-x"><function>set-window-foreground!</function></link> &mdash; Set the foreground color of WIN to FG.</para></listitem>
      <listitem><para><link linkend="set-window-background-x"><function>set-window-background!</function></link> &mdash; Set the background color of WIN to BG.</para></listitem>
      <listitem><para><link linkend="set-window-highlight-foreground-x"><function>set-window-highlight-foreground!</function></link> &mdash; Set the highlighted foreground color of WIN to FG.</para></listitem>
      <listitem><para><link linkend="set-window-highlight-background-x"><function>set-window-highlight-background!</function></link> &mdash; Set the highlighted background color of WIN to BG.</para></listitem>
      <listitem><para><link linkend="set-random-placement-x"><function>set-random-placement!</function></link> &mdash; Set the random-placement flag of WIN to boolean FLAG.</para></listitem>
      <listitem><para><link linkend="set-smart-placement-x"><function>set-smart-placement!</function></link> &mdash; Set the smart-placement flag of WIN to boolean FLAG.</para></listitem>
      <listitem><para><link linkend="set-window-button-x"><function>set-window-button!</function></link> &mdash; Set the visibility of button number N on window WIN.</para></listitem>
      <listitem><para><link linkend="set-mwm-buttons-x"><function>set-mwm-buttons!</function></link> &mdash; Set the mwm-buttons flag of WIN to boolean FLAG.</para></listitem>
      <listitem><para><link linkend="set-mwm-border-x"><function>set-mwm-border!</function></link> &mdash; Set the mwm-border style flag of WIN to boolean FLAG.</para></listitem>
      <listitem><para><link linkend="set-icon-title-x"><function>set-icon-title!</function></link> &mdash; Set the visibility of WIN's icon title according to FLAG.</para></listitem>
      <listitem><para><link linkend="set-force-icon-x"><function>set-force-icon!</function></link> &mdash; Set the window-manager-overriding property for WIN to boolean FLAG.</para></listitem>
      <listitem><para><link linkend="set-show-icon-x"><function>set-show-icon!</function></link> &mdash; Set whether or not the icon of WIN will be visible.</para></listitem>
      <listitem><para><link linkend="set-icon-x"><function>set-icon!</function></link> &mdash; Set the image to use for the icon of WIN to IMAGE.</para></listitem>
      <listitem><para><link linkend="window-icon"><function>window-icon</function></link> &mdash; Get the icon image being used for WIN.</para></listitem>
      <listitem><para><link linkend="set-mini-icon-x"><function>set-mini-icon!</function></link> &mdash; Set the image to use for the mini-icon of WIN to IMAGE.</para></listitem>
      <listitem><para><link linkend="window-mini-icon"><function>window-mini-icon</function></link> &mdash; Get the mini-icon image being used for WIN.</para></listitem>
      <listitem><para><link linkend="window-shaped-p"><function>window-shaped?</function></link> &mdash; Return <literal>#t</literal> if WIN is a shaped window, <literal>#f</literal> otherwise.</para></listitem>
      <listitem><para><link linkend="window-icon-shaped-p"><function>window-icon-shaped?</function></link> &mdash; Return <literal>#t</literal> if WIN has shaped icon, <literal>#f</literal> otherwise.</para></listitem>
      <listitem><para><link linkend="set-hint-override-x"><function>set-hint-override!</function></link> &mdash; Set whether or not Mwm and Open Look function hints are used.</para></listitem>
      <listitem><para><link linkend="set-decorate-transient-x"><function>set-decorate-transient!</function></link> &mdash; Set decoration of transients property on WIN.</para></listitem>
      <listitem><para><link linkend="set-mwm-decor-hint-x"><function>set-mwm-decor-hint!</function></link> &mdash; Set whether or not Motif decoration hints are used for WIN.</para></listitem>
      <listitem><para><link linkend="set-mwm-func-hint-x"><function>set-mwm-func-hint!</function></link> &mdash; Set whether or not Motif function hints are used for WIN.</para></listitem>
      <listitem><para><link linkend="set-PPosition-hint-x"><function>set-PPosition-hint!</function></link> &mdash; Set or reset the program-specified position hint for WIN.</para></listitem>
      <listitem><para><link linkend="set-OL-decor-hint-x"><function>set-OL-decor-hint!</function></link> &mdash; Determine whether or not to respect Open Look decoration hints.</para></listitem>
      <listitem><para><link linkend="set-start-on-desk-x"><function>set-start-on-desk!</function></link> &mdash; Make WIN start on DESK when first mapped.</para></listitem>
      <listitem><para><link linkend="set-skip-mapping-x"><function>set-skip-mapping!</function></link> &mdash; Set or reset whether scwm should not change desktops on a map.</para></listitem>
      <listitem><para><link linkend="set-lenience-x"><function>set-lenience!</function></link> &mdash; Set or reset the input focus lenience flag.</para></listitem>
      <listitem><para><link linkend="set-window-property-x"><function>set-window-property!</function></link> &mdash; Set window property PROP of WIN to VAL.</para></listitem>
      <listitem><para><link linkend="window-property"><function>window-property</function></link> &mdash; Retrieve window property PROP of WIN.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/xproperty.c</title> <itemizedlist>
      <listitem><para><link linkend="X-property-set-x"><function>X-property-set!</function></link> &mdash; Set X property NAME on window WIN to VALUE.</para></listitem>
      <listitem><para><link linkend="X-property-get"><function>X-property-get</function></link> &mdash; Get X property NAME of window WIN.</para></listitem>
      <listitem><para><link linkend="X-property-delete-x"><function>X-property-delete!</function></link> &mdash; Delete X property NAME of window WIN.</para></listitem>
      <listitem><para><link linkend="string-to-X-atom"><function>string->X-atom</function></link> &mdash; Returns an X atom representing STRING.</para></listitem>
      <listitem><para><link linkend="X-atom-to-string"><function>X-atom->string</function></link> &mdash; Returns the string represented by ATOM.</para></listitem>
    </itemizedlist> </sect1>
    <sect1><title>scwm/xrm.c</title> <itemizedlist>
      <listitem><para><link linkend="X-resource-put"><function>X-resource-put</function></link> &mdash; Stores string VALUE as X resource RESOURCE (also a string).</para></listitem>
      <listitem><para><link linkend="X-resource-get"><function>X-resource-get</function></link> &mdash; Get X resource specified by NAME and XCLASS from Xrm database.</para></listitem>
      <listitem><para><link linkend="X-resource-database-save"><function>X-resource-database-save</function></link> &mdash; Save the Scwm resource database to FILENAME.</para></listitem>
    </itemizedlist> </sect1>
  </chapter>
  <chapter>
    <title>Hooks</title>
    <sect1 id="after-new-window-hook"><title>after-new-window-hook</title><para>
This hook is invoked when a new window has been completely created
and placed on the screen. Any window operations may be performed at
this time. However, it is recommended that placement-related
operations, such as setting the position, desk, viewport location and
z-ordering of a window be done in the placement procedure instead.
It should be used for setting window styles, as the window geometry
needs to be fully and correctly specified before the window is placed.
The <link linkend="window-style"><function>window-style</function></link> mechanism from the "(app scwm style)" module provides a convenient
interface to setting the relevant parameters when a new window is
created. 
    </para></sect1>
    <sect1 id="before-new-window-hook"><title>before-new-window-hook</title><para>
This hook is invoked when a new window structure is first starting
to be created. Only a subset of the usual window parameters should be
set here, in particular, those that control what hints will be
respected for this window, and those that control how the window will
be placed.

This hook does not typically need to be used directly by the user;
<link linkend="window-style"><function>window-style</function></link> from the "(app scwm style)" module provides a convenient
interface to setting the relevant parameters when a new window is
created. 
    </para></sect1>
    <sect1 id="before-place-new-window-hook"><title>before-place-new-window-hook</title><para>
This hook is invoked just before placing a new window.
It comes after <link linkend="before-new-window-hook"><function>before-new-window-hook</function></link>, but before <link linkend="after-new-window-hook"><function>after-new-window-hook</function></link>. 
This hook may be removed later since it is mostly redundant with the other
two hooks, despite being invoked at a slightly different time. 
    </para></sect1>
    <sect1 id="broadcast-config-hook"><title>broadcast-config-hook</title><para>
This hook is invoked whenever fvwm2 would call BroadcastConfig.
This hook is principally of use in implementing the fvwm2
module interface and for stuff that needs to be notified in ways that
can't be done with the proper hooks that have been included so
far. The procedures in this hook are passed a window structure as the
sole argument. 
    </para></sect1>
    <sect1 id="broadcast-hook"><title>broadcast-hook</title><para>
This hook is invoked whenever fvwm2 would call Broadcast.
This hook is principally of use in implementing the fvwm2
module interface and for stuff that needs to be notified in ways that
can't be done with the proper hooks that have been included so
far. The procedures in this hook are passed a numerical code
representing the event type, a number that indicates how many of the
following data arguments are meaningful, and 7 numeric data arguments. 
    </para></sect1>
    <sect1 id="broadcast-mini-icon-hook"><title>broadcast-mini-icon-hook</title><para>
This hook is invoked whenever fvwm2 would call BroadcastMiniIcon.
This hook is principally of use in implementing the fvwm2
module interface and for stuff that needs to be notified in ways that
can't be done with the proper hooks that have been included so
far. The procedures The procedures in this hook are passed a window
structure as the sole argument. 
    </para></sect1>
    <sect1 id="broadcast-name-hook"><title>broadcast-name-hook</title><para>
This hook is invoked whenever fvwm2 would call BroadcastName.
This hook is principally of use in implementing the fvwm2
module interface and for stuff that needs to be notified in ways
that can't be done with the proper hooks that have been included so
far. The procedures in this hook are passed an event type, three
numeric data arguments, and a string. 
    </para></sect1>
    <sect1 id="cannot-grab-hook"><title>cannot-grab-hook</title><para>
This hook is invoked with no arguments whenever scwm cannot
successfully grab the X server. <link linkend="beep"><function>beep</function></link> is one example of a procedure
to use here.  
    </para></sect1>
    <sect1 id="change-desk-hook"><title>change-desk-hook</title><para>
This hook is invoked whenever the current desktop is changed.
It is called with two argument, both integers.  The first is the
new desktop number, the second is the old desktop number. 
    </para></sect1>
    <sect1 id="deiconify-hook"><title>deiconify-hook</title><para>
This hook is invoked when a window is deiconified.
It is called with one argument, WINDOW 
    </para></sect1>
    <sect1 id="error-hook"><title>error-hook</title><para>
Called on all kinds of errors and exceptions.
Whenever an error or other uncaught throw occurs on any callback,
whether a hook, a mouse binding, a key binding, a menu entry, a file
being processed, or anything else, error-hook will be invoked. Each
procedure in the hook will be called with the throw arguments; these
will generally include information about the nature of the error. 

    </para></sect1>
    <sect1 id="iconify-hook"><title>iconify-hook</title><para>
This hook is invoked when a window is iconified.
It is called with one argument, WINDOW 
    </para></sect1>
    <sect1 id="image-not-found-hook"><title>image-not-found-hook</title><para>
Called with image name as a string when not found. 
    </para></sect1>
    <sect1 id="interactive-move-finish-hook"><title>interactive-move-finish-hook</title><para>
This hook is invoked at the end of an interactive move.
It is called with one argument, WINDOW. 
    </para></sect1>
    <sect1 id="interactive-move-new-position-hook"><title>interactive-move-new-position-hook</title><para>
This hook is invoked during an interactive move.
It is called with three arguments, WINDOW, NEW_X, and NEW_Y,
whenever the window is moved to a new location. 
    </para></sect1>
    <sect1 id="interactive-move-start-hook"><title>interactive-move-start-hook</title><para>
This hook is invoked at the start of an interactive move.
It is called with one argument, WINDOW. 
    </para></sect1>
    <sect1 id="interactive-resize-finish-hook"><title>interactive-resize-finish-hook</title><para>
This hook is invoked at the end of an interactive resize.
It is called with one argument, WINDOW. 
    </para></sect1>
    <sect1 id="interactive-resize-new-size-hook"><title>interactive-resize-new-size-hook</title><para>
This hook is invoked during an interactive resize.
It is called with three arguments, WINDOW, NEW_X_SIZE, and NEW_Y_SIZE,
whenever the window is changed to a new size 
    </para></sect1>
    <sect1 id="interactive-resize-start-hook"><title>interactive-resize-start-hook</title><para>
This hook is invoked at the start of an interactive resize.
It is called with three arguments: WINDOW, XMOTION, YMOTION.
XMOTION and YMOTION are -1, 0, or 1, indicating motion in that dimension
can happen on the right/bottom side, not at all, or the top/left side,
respectively. 
    </para></sect1>
    <sect1 id="invalid-interaction-hook"><title>invalid-interaction-hook</title><para>
This hook is invoked with no arguments when the user hits an invalid
key or performs an invalid mouse action during an interactive
operation like <link linkend="interactive-resize"><function>interactive-resize</function></link> or <link linkend="interactive-move"><function>interactive-move</function></link>. <link linkend="beep"><function>beep</function></link> is
one example of a procedure to use here. 
    </para></sect1>
    <sect1 id="shutdown-hook"><title>shutdown-hook</title><para>
The procedures in shutdown-hook are called with no arguments right
before scwm quits or restarts. 
    </para></sect1>
    <sect1 id="startup-hook"><title>startup-hook</title><para>
The procedures in startup-hook are called with no arguments after scwm
has processed the scwmrc and captured all application windows, and
right before it enters the main event loop.  Note that during
processing of the .scwmrc startup file, windows have not already been
captured, so the window-list (as reported by <link linkend="list-all-windows"><function>list-all-windows</function></link>) is
empty.  To provide behviour conditioned on a property of an existing
window, this hook should be used instead. 
    </para></sect1>
    <sect1 id="window-focus-change-hook"><title>window-focus-change-hook</title><para>
This hook is invoked whenever the keyboard focus is changed.
It is called with one argument, the window object of the window
that now has the focus, or <literal>#f</literal> if no window now has the focus. 
    </para></sect1>
    <sect1 id="X-DestroyNotify-hook"><title>X-DestroyNotify-hook</title><para>
This hook is invoked upon DestroyNotify X events.
It indicates a window is being destroyed.  The hook procedures are
invoked with one argument, WIN, the window being destroyed.
The WIN is still valid during the hook procedures. 
    </para></sect1>
    <sect1 id="X-MappingNotify-hook"><title>X-MappingNotify-hook</title><para>
This hook is invoked whenever a MappingNotify X event is
received. A MappingNotify event indicates a change of keymapping - in
particular, it may indicate a change of available modifiers or mouse
buttons. The hook procedures are invoked with no arguments. 
    </para></sect1>
    <sect1 id="X-PropertyNotify-hook"><title>X-PropertyNotify-hook</title><para>
This hook is invoked whenever a PropertyNotify event is received
for a window scwm is managing. This indicates that an X window
property has changed. Watching for window property changes can be used
to construct your own custom window manager protocols. The hook
procedures are invoked with two arguments, the name of the property
that changed (as a string) and the window that it changed for. 
    </para></sect1>
    <sect1 id="X-UnmapNotify-hook"><title>X-UnmapNotify-hook</title><para>
This hook is invoked upon UnmapNotify X events.  It indicates a
window is being unmapped (removed from display).  The hook procedures
are invoked with one argument, WIN, the window being destroyed.  The
WIN is still valid during the hook procedures. 
    </para></sect1>
  </chapter>
  <chapter>
    <title>User variables</title>
    <sect1 id="circle-pie-menu-look"><title>circle-pie-menu-look</title><para>
A menu-look that gives pie menus in a circular window. 
    </para></sect1>
    <sect1 id="context-map"><title>context-map</title><para>
An alist mapping filename patterns to applicable menu entries.
Whenever the car (a regexp) matches a filename, the cdr is used to
build a menuitem which is then added to the context menu.

    </para></sect1>
    <sect1 id="default-auto-raise-delay"><title>default-auto-raise-delay</title><para>
Number of ms to delay before raising the window the mouse pointer entered.
This can be overridden on a per-window basis using <link linkend="set-auto-raise-delay-x"><function>set-auto-raise-delay!</function></link>.

    </para></sect1>
    <sect1 id="default-auto-raise-focus-proc"><title>default-auto-raise-focus-proc</title><para>
The default procedure to invoke when raising the window.
This gets called after the auto-raise delay times out, and 
can be overwridden on a per-window basis using <link linkend="set-auto-raise-focus-proc-x"><function>set-auto-raise-focus-proc!</function></link>

    </para></sect1>
    <sect1 id="default-auto-raise-unfocus-delay"><title>default-auto-raise-unfocus-delay</title><para>
Number of ms to delay before running the unfocus proc for a raised window.
This can be overridden on a per-window basis using <link linkend="set-auto-raise-unfocus-delay-x"><function>set-auto-raise-unfocus-delay!</function></link>

    </para></sect1>
    <sect1 id="default-auto-raise-unfocus-proc"><title>default-auto-raise-unfocus-proc</title><para>
The default procedure to invoke when un-raising the window.
This gets called after the mouse pointer leaves an auto-raised window, and
can be overwridden on a per-window basis using <link linkend="set-auto-raise-unfocus-proc-x"><function>set-auto-raise-unfocus-proc!</function></link>

    </para></sect1>
    <sect1 id="default-menu-max-fold-lines"><title>default-menu-max-fold-lines</title><para>
The default number of items that menus are split into by <link linkend="fold-menu-list"><function>fold-menu-list</function></link>.

    </para></sect1>
    <sect1 id="image-load-path"><title>image-load-path</title><para>
List of strings of directories in which to look for image files. 
    </para></sect1>
    <sect1 id="locale-fullname"><title>locale-fullname</title><para>
Full name of the current locale, as a string. 
    </para></sect1>
    <sect1 id="locale-language-territory"><title>locale-language-territory</title><para>
The language territory name, as a string 
    </para></sect1>
    <sect1 id="move-opaquely?"><title>move-opaquely?</title><para>
User-settable predicate to determine if windows should be moved opaquely.

    </para></sect1>
    <sect1 id="netscape-new-window"><title>netscape-new-window</title><para>
If <literal>#t</literal>, <link linkend="netscape-goto-cut-buffer-url"><function>netscape-goto-cut-buffer-url</function></link> will open the URL in a new window.

    </para></sect1>
    <sect1 id="opaque-move-percent"><title>opaque-move-percent</title><para>
Percent of display area below which windows are moved opaquely.

    </para></sect1>
    <sect1 id="opaque-resize-percent"><title>opaque-resize-percent</title><para>
Percent of display area below which windows are resized opaquely.

    </para></sect1>
    <sect1 id="pie-menu-look"><title>pie-menu-look</title><para>
A menu-look that gives pie menus in a rectangular window 
    </para></sect1>
    <sect1 id="remote-shell-command"><title>remote-shell-command</title><para>
The command to use to start a remote shell.
It should take a first (non-option) argument of
the hostname to connect to.  "ssh" "rsh" and "telnet"
are each reasonable choices.

    </para></sect1>
    <sect1 id="resize-opaquely?"><title>resize-opaquely?</title><para>
User-settable predicate to determine if windows should be resized opaquely.

    </para></sect1>
    <sect1 id="scwm-menu-look"><title>scwm-menu-look</title><para>
The default menu look for Scwm.
Used as an argument to <link linkend="set-menu-look"><function>set-menu-look</function></link>. 
    </para></sect1>
    <sect1 id="shaped-pie-menu-look"><title>shaped-pie-menu-look</title><para>
A menu-look that gives pie menus with only the labels visible 
    </para></sect1>
    <sect1 id="use-scwm-system-proc"><title>use-scwm-system-proc</title><para>
If <literal>#t</literal>, <link linkend="execute"><function>execute</function></link> will use <link linkend="scwm-system"><function>scwm-system</function></link> instead of guile's <link linkend="system"><function>system</function></link>.
This works around a problem observed on pre-glibc Linux 2.0.34 i386
where SIGINT on the controlling tty (i.e., the one that started
scwm) propagates to the child processes.  The end result of the
possible bug is that xterms started by scwm are terminated if the
scwm that started them is terminated using a Ctrl-C to send it a SIGINT.

    </para></sect1>
    <sect1 id="xpm-shaped-menu-look"><title>xpm-shaped-menu-look</title><para>
The shaped XPM menu look. 
    </para></sect1>
    <sect1 id="xterm-command"><title>xterm-command</title><para>
The command to run when a new xterm window is requested.
The string given should refer to a binary or script in the
path and should take a "-e" argument of what to run.

    </para></sect1>
  </chapter>
  <chapter>
    <title>Concepts</title>
    <sect1 id="Colors"><title>Colors</title><para>

  Colors are first-class objects. However, anywhere that a color is
taken as an argument, a string containing an X color specification
will also be accepted, and will be automatically converted to the
proper color object. Using the same color specifier string more than
once is not inefficient, as caching ensures that color objects are
shared.

    </para></sect1>
    <sect1 id="Creating-themes"><title>Creating themes</title><para>
Currently, the best documentation on themes is the source code;
however, here are a few notes.
To create a theme, create a new subdirectory of a directory in
<link linkend="theme-path"><function>theme-path</function></link> (you'll probably want to add a private directory to 
<link linkend="theme-path"><function>theme-path</function></link>).  This subdirectory should be named the same as the
theme.  This subdirectory must contain (at least) a file named
theme.scm.  This file must create a module named
(app scwm theme your-theme-name), and define (in this module)
a theme object named <link linkend="the-theme"><function>the-theme</function></link>.  See the existing themes for
examples of what you can do when building <link linkend="the-theme"><function>the-theme</function></link>.

    </para></sect1>
    <sect1 id="Decors"><title>Decors</title><para>


  Decors are a means of managing the abundance of visual appearance
options for windows. In the original Fvwm code, there were many
options that could only be set globally, although they affected window
appearance. Decors are a compromise between leaving them global and
making them fully settable per window. These quasi-global options may
be set in a particular decor, and a decor may be attached to one or
more windows.

  Having to use decors to change certain aspects of the look and feel
is confusing. Scwm will probably move to some way of making these
options directly settable per-window at some point, especially if we
can figure out a way to not increase the memory overhead much.

    </para></sect1>
    <sect1 id="Desks"><title>Desks</title><para>


  Multiple virtual desktops are supported. A virtual desktop may be
bigger than the physical screen, in which case the current viewport on
the desktop may be moved around, as described in the Viewports entry.
Desks are identified by integers. There is currently an arbitrary
limit on the number of desks, but it should be much higher than anyone
will ever need. You can change the current desk with
<link linkend="set-current-desk-x"><function>set-current-desk!</function></link>; find out what the current desk is with
<link linkend="current-desk"><function>current-desk</function></link>; and set the desk a window is on with
<link linkend="set-window-desk-x"><function>set-window-desk!</function></link>.

    </para></sect1>
    <sect1 id="Event-Contexts"><title>Event Contexts</title><para>


 
    </para></sect1>
    <sect1 id="Face-Flags"><title>Face Flags</title><para>

   Face flags are two-element lists that specify certain properties
that are set once and only once for a give face (as opposed to specs,
which may be chained arbitrarily). Nearly all flags may be used for
button faces. Exceptions, as well as the flags that may be used for
title and border faces, are indicated below.

<table colsep="1" rowsep="0" frame="all">
<title>Face Flags</title>
<tgroup align="char" cols="3">
<thead><row>
 <entry>Key</entry>  <entry>Possible values</entry>  <entry>Explanation</entry>
</row></thead>
<tbody><row>
  <entry>'justify</entry>
     <entry>'left 'right 'center</entry>
     <entry>Horizontal justification for the face (pixmap, relief pattern, etc.)</entry>
  </row>
  <row>
  <entry>'vertical-justify</entry>
     <entry>'top 'bottom 'center</entry>
     <entry>Vertical justification for the face (pixmap, relief pattern, etc.)</entry>
  </row>
  <row>
  <entry>'relief</entry>
     <entry>'flat 'sunk 'raised</entry>
     <entry>Use for titles and buttons to control appearance (only flag for titles)</entry>
  </row>
  <row>
  <entry>'use-style-of</entry>
     <entry>'title 'border <literal>#f</literal></entry>
     <entry>Inherit the face flags from the title or border first, then add these flags</entry>
  </row>
  <row>
  <entry>'hidden-handles</entry>
     <entry><literal>#t</literal> <literal>#f</literal></entry>
     <entry>Set visibility of the corner handles -- only used for border faces</entry>
  </row>
  <row>
  <entry>'no-inset</entry>
     <entry><literal>#t</literal> <literal>#f</literal></entry>
     <entry>Win-9x-like effect of relieving borders on outside instead of inside</entry>
  </row>
</tbody>
</tgroup>
</table>

    </para></sect1>
    <sect1 id="Face-Specification-Flags"><title>Face Specification Flags</title><para>

  Face specification flags are two-element lists that specify certain
properties that may be chained to indicate how a face is drawn. Face
specs may be fully or partially destructive. A fully destructive spec
indicates how the whole area of the element is to be drawn, making
previous specs irrelevant. A partially destructive spec overlays part,
but not all, of the drawing area.

  All specs may be used for button faces. All but non-tiled pixmaps may
be used for titlebars, and only tiled pixmaps may be used for borders.


<table colsep="1" rowsep="0" frame="all">
<title>Face Specification Flags</title>
<tgroup align="char" cols="2">
<thead><row>
 <entry>Format</entry>  <entry>Explanation</entry>
</row></thead>
<tbody><row>
  <entry><para><informalexample><programlisting>
     '(relief-pattern ((X Y BOOL) ...))
       </programlisting></informalexample></para></entry><entry>
      Draw a relief pattern using the list of triples, each of which
indicates a pair of X,Y coordinates given as a percentage of the
button size, and a boolean value indicating whether to use the lighter
or darker color. This spec is partially destructive.
  </entry></row>
  <row>
  <entry><para><informalexample><programlisting>
     '(solid COLOR)
         </programlisting></informalexample></para></entry><entry>
      Use COLOR as the color for this element; fully destructive.
  </entry></row>
  <row>
  <entry><para><informalexample><programlisting>
     '(gradient ({horizontal|vertical} NCOLORS {COLOR_PERCENT}* FINAL))
         </programlisting></informalexample></para></entry><entry>
     Draw a gradient in this element.  The gradient may be horizontal or
vertical. The number of colors is specified, followed by a number of
colors with percentages and a final color. The percentages must add to
100.
  </entry></row>
  <row>
  <entry><para><informalexample><programlisting>
      '(pixmap {mini-icon|IMAGE|(tiled IMAGE)})
         </programlisting></informalexample></para></entry><entry>
      Specify a pixmap to use, either the window's mini-icon, an image
object or image specifier string, or a list of tiled and an image,
indicating the image should be tiled. Partially destructive, except
when tiled, which makes it fully destructive.
  </entry></row>
</tbody>
</tgroup>
</table>

    </para></sect1>
    <sect1 id="Faces"><title>Faces</title><para>

  Faces are a data type used to specify in detail the way in which
window decorations like the titlebar, the border and titlebar buttons
will be drawn. They are currently somewhat kludgey and
ad-hoc. However, they offer a great deal of flexibility. All faces are
set in the current decor, so multiple decors must be used to use
different faces for different windows. The low-level functionality
offered in the face primitives will rarely be needed; the
<link linkend="button-style"><function>button-style</function></link>, <link linkend="title-style"><function>title-style</function></link> and <link linkend="border-style"><function>border-style</function></link> procedures in the
(app scwm face) module provide a more convenient interface to this
functionality.

    </para></sect1>
    <sect1 id="Focus-Styles"><title>Focus Styles</title><para>


   Scwm supports several focus styles, which are settable
per-window. A window with the 'click focus style is click-to-focus: it
requires that the user click on it before it will receive the input
focus, and will not lose it again until some other window gains
focus. The 'mouse focus style is mouse-focus in the traditional sense
- the window will gain and lose focus as the mouse enters and leaves
it. 

  'sloppy indicates the sloppy-focus style. This is like mouse-focus,
but the window will not lose the focus until another gains it. So if
you focus the window with the mouse and then let the pointer slide
into the root window or a window that has focus styles of 'click or
'none, the window will not lose the focus. This style of focus was
first introduced in fvwm.

  A focus style of 'none indicates that the window should never gain
the input focus, no matter what. This can be used for clocks,
mailboxes, and other desktop gadgets that never need keyboard input.

    </para></sect1>
    <sect1 id="Fonts"><title>Fonts</title><para>

  Fonts are first-class objects. However, anywhere that a font is
taken as an argument, a string containing an X font specification
will also be accepted, and will be automatically converted to the
proper font object. Using the same font specifier string more than
once is not inefficient, as caching ensures that font objects are
shared.

    </para></sect1>
    <sect1 id="Hooks"><title>Hooks</title><para>

  Hooks are used throughout scwm to provide a convenient mechanism for
user callbacks on particular events. Fundamentally, a hook is just a
variable that contains a list of procedures that are called in order
when the relevant event occurs. However, several convenience macros
are provided for manipulating hooks; see <link linkend="add-hook-x"><function>add-hook!</function></link>, <link linkend="remove-hook-x"><function>remove-hook!</function></link>
and <link linkend="reset-hook-x"><function>reset-hook!</function></link>. 

    </para></sect1>
    <sect1 id="Image-Loaders"><title>Image Loaders</title><para>

  Different loaders are available for various images types. <link linkend="load-xbm"><function>load-xbm</function></link>
and <link linkend="load-xpm"><function>load-xpm</function></link> load X pixmaps and X bitmaps respectively. The user may
register other image loaders using the extension or the special string
"default" for the loader to be tried for an image that cannot be
loaded any other way.

    </para></sect1>
    <sect1 id="Images"><title>Images</title><para>

  Images are first-class objects. However, anywhere that an image is
taken as an argument, a string containing a filename will also be
accepted, and will be automatically converted to the proper image
object by loading the image. Using the same image filename more than
once is not inefficient, as caching ensures that image objects are
shared.

    </para></sect1>
    <sect1 id="Input-Hooks"><title>Input Hooks</title><para>

  Input hooks are a special form of hook that is called whenever input
is available on a particular port. They are treated differently than
normal hooks - use <link linkend="add-input-hook-x"><function>add-input-hook!</function></link> and <link linkend="remove-input-hook-x"><function>remove-input-hook!</function></link> to
manipulate them. Like regular hooks and unlike timer hooks, input
hooks are not one-shot - they trigger every time input is made
available on the particular port, and do not go away until explicitly
removed. An input hook may safely remove itself from within its own
invocation.

    </para></sect1>
    <sect1 id="Key-Specifier"><title>Key Specifier</title><para>

   A key specifier is a string denoting a keystroke, perhaps including
modifiers.  The available modifiers include S-, C-, M-, A-, H-, and s-
for Shift, Control, Meta, Alt, Hyper, and Super, respectively.  They
can be combined arbitrarily, and in any order, but should precede the
key name.

    </para></sect1>
    <sect1 id="Menu-Looks"><title>Menu Looks</title><para>


  Menus have an associated menu look, which determines how the menus
are drawn.

    </para></sect1>
    <sect1 id="Run-time-command-line-options"><title>Run-time command-line options</title><para>

<segmentedlist>
<segtitle/Option/
<segtitle/Description/

<seglistitem>
<seg/-D or --debug/ <seg/enable lots of debugging messages./
</seglistitem><seglistitem>


<seg/-s or --single-screen/ <seg/run only on on the first screen of the display./
</seglistitem><seglistitem>

<seg/-d or --display dpy/ <seg/run on display dpy./
</seglistitem><seglistitem>

<seg/-f or --file file/ <seg>read startup commands from the specified
file instead of ".scwmrc" or "system.scwmrc".</seg>
</seglistitem><seglistitem>

<seg/-e or --expression expr/ <seg>evaluate Scheme expression expr
instead of reading from ".scwmrc" or "system.scwmrc". Multiple -e and
-f options may be specified on a single command line and in this case
will be processed in the order in which they were specified.</seg>
</seglistitem><seglistitem>

<seg/-h or --help/ <seg/prints a usage message and exits./
</seglistitem><seglistitem>

<seg/-b or --blackout/ <seg/blacks the screen out to hide the initial capture./
</seglistitem><seglistitem>

<seg/--client-id id/ <seg>sets scwm's client id to a specific value. This
is probably of no use to you unless you're a session manager or debbuging.
</seg>
</seglistitem><seglistitem>

<seg/-v or --version/ <seg/prints the version and exits./
</seglistitem>
</segmentedlist>
  
    </para></sect1>
    <sect1 id="SCWMEXEC-Protocol"><title>SCWMEXEC Protocol</title><para>

  Scwm supports a protocol for other programs to send commands to the
window manager. Programs send ordinary configuration language
expressions and are returned a string representation of the return
value, and the output and error output generated, if any.

  For more information on how to make use of this protocol, see the
documentation for the scwmexec and scwmrepl programs, the scwm.el
emacs interaction mode, the libscwmexec library, and the details of
the SCWMEXEC protocol (as documented in
<filename>doc/scwmexec.proto</filename>).
FIXDOC: Link to file!

    </para></sect1>
    <sect1 id="Shadow-and-Highlight-Factors"><title>Shadow and Highlight Factors</title><para>

  Many decorations are supposed to look "three-dimensional".
To implement this, the decorations use three colors: the specified
decoration color, a brighter "highlight" color, and a darker "shadow"
color.  For "raised" decorations, the top and left edges are drawn in
the highlight color, and the bottom and right edges are drawn in the
shadow color; this is reversed for "sunken" decorations.

The highlight and shadow colors are computed from the decoration color
using the highlight and shadow factors.  The highlight factor should be
a floating-point number greater than 1.  If the highlight factor is
1, then the highlight color is the same as the decoration color;
the larger the highlight factor, the brighter the highlight color.
The shadow factor should be a floating-point number between 0 and 1.  If 
the shadow factor is 1, then the shadow color is the same as the
decoration color; the smaller the shadow factor, the darker the
shadow color.

(It is actually possible to give a highlight factor which is less than
1 (which makes the highlight color darker than the decoration color)
and a shadow factor which is greater than 1 (which makes the shadow
color brighter than the decoration color); the effect is to reverse
"raised" and "sunken" elements throughout the user interface.)

NOTE: "highlight" is often (mis-)spelled "hilight" or even "hilite".

    </para></sect1>
    <sect1 id="Sticky"><title>Sticky</title><para>


  A "sticky" window will appear on all desktops, and will remain at the
same screen position regardless of scrolling within the current
desktop.

    </para></sect1>
    <sect1 id="The-Window-Context"><title>The Window Context</title><para>


  When actions are triggered by mouse or keyboard events, or menu
actions from menus originally popped up by mouse or keyboard events, a
context window is saved, which is used as the default for window
operations that are not passed their optional window argument. This
allows the user to easily bind actions to events without worrying
about passing around the window argument. 

  However, it is unclear whether behind-the-scenes magic like this is
a good idea.  The merit of this approach is still under consideration;
it may be changed entirely. 
    </para></sect1>
    <sect1 id="Themes"><title>Themes</title><para>
A theme is a named collection of window manager settings.
Themes are still under development, but they are planned to
affect window styles, menus, icons, backgrounds, and various
global settings.

    </para></sect1>
    <sect1 id="Timer-Hooks"><title>Timer Hooks</title><para>

  Timer hooks are a special form of hook that is called after a
specified amount of time has passed. They are treated differently than
normal hooks - use <link linkend="add-timer-hook-x"><function>add-timer-hook!</function></link> and <link linkend="remove-timer-hook-x"><function>remove-timer-hook!</function></link> to
manipulate them. Timer hooks, unlike regular hooks, are one-shot -
once the time limit expires and the timer hook is triggered, it is
removed.

    </para></sect1>
    <sect1 id="Viewports"><title>Viewports</title><para>

  The current viewport is the area of the current desk that may be
seen on the physical screen. Since a desk can be larger than the
physical screen size, the viewport can move around the desk.

  Viewports give rise to two concepts of coordinates.  A viewport
coordinate is relative to the current viewport (i.e., it is the 
coordinate you actually see on the screen).  A virtual coordinate
is relative to the origin of the current desk.

    </para></sect1>
    <sect1 id="Windows"><title>Windows</title><para>

  Windows are the most important scwm data type. A window object
represents an on-screen window that scwm is managing, and is used to
perform window management operations on the window, as well as to set
options and retrieve information about the window.
 
    </para></sect1>
    <sect1 id="X-atoms"><title>X atoms</title><para>

   X windows allows certain entities (for example, X properties [FIXME: XREF
to X properties]) to have arbitrary names. To avoid exchanging strings ever so
often, these names are in fact X atoms.

New X atoms can be created, or old ones retrieved simply by specifying
the string the atom stands for. An X atom can also be converted back to a
string. Scwm provides primitives for these actions. 
    </para></sect1>
    <sect1 id="X-Properties"><title>X Properties</title><para>

   X has a notion of window properties, which live in the X
server. X window properties are often used to implement protocols
between applications and the window manager, which can have several
levels of standardization, from official X standard, to standardized
by some other organization, to made up informally by groups of
programmers, to specific to one window manager, to specific to an
individual, or installation.

  Scwm already internally implements many of these protocols,
including all X standard protocols, as well as the Motif and Open Look
protocols. However, the user should be able to implement any of these
he likes, including making up his own for personal use.

  This is possible through the low-level X property interface. Scwm has
one procedure to get, and set them, respectively.
 
    </para></sect1>
  </chapter>
</book>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
fill-column: 10000
sgml-omittag:nil
sgml-shorttag:t
End:
-->
