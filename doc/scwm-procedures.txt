(%x x)
Return the number of pixels that is X percent of the display width.
[From scheme/base.scm:35]


(%x- x)
Return the pixel coordinate X percent of the width away from the right edge.
[From scheme/base.scm:51]


(%y y)
Return the number of pixels that is Y percent of the display height.
[From scheme/base.scm:39]


(%y- y)
Return the pixel coordinate Y percent of the height away from the bottom edge.
[From scheme/base.scm:55]


(add-boolean-hint-option key t-handler f-handler)
No documentation supplied.
[From scheme/style-options.scm:401]


(add-boolean-style-option key t-handler f-handler)
No documentation supplied.
[From scheme/style-options.scm:392]


(add-input-hook! port proc)
Add an input hook to run PROC on input from PORT.
Whenever input becomes available on PORT, procedure PROC will be called
with no arguments repeatedly until no unprocessed input remains on
PORT. PORT must be open, it must be an input port, and it must be a
file port (this includes pipes and sockets, but not string ports or
soft ports). A handle suitable for passing to `remove-input-hook!' is
returned.
[From scwm/callbacks.c:560]


(add-timer-hook! usec proc)
Add a timer hook to call PROC once sometime after USEC microseconds.
When at least USEC microseconds have passed, procedure PROC will be
called with no arguments. A handle suitable for passing to
`remove-timer-hook!' is returned.
[From scwm/callbacks.c:422]


(add-window-hint-option key handler)
No documentation supplied.
[From scheme/style-options.scm:398]


(add-window-style-option key handler)
No documentation supplied.
[From scheme/style-options.scm:389]


(animated-move-to x y #&optional (win (get-window)))
Move WIN to x y animatedly.
If X or Y is 'x or 'y, respectively (or #f), then do not change
that coordinate during the move.  At least one of X and Y must be
a number.
[From scheme/winops.scm:195]


(append-fvwm2-module-config module-type . args)
No documentation supplied.
[From scheme/fvwm-module.scm:933]


(ask-string prompt set-fn)
No documentation supplied.
[From scheme/prefs-menu.scm:108]


(beep)
Ring the standard X bell.
[From scwm/miscprocs.c:340]


(binary-read length #&optional (port (current-input-port)))
Reads LENGTH bytes of binary data from PORT and return it as a string.
[From scheme/bincomm.scm:167]


(binary-read-long #&optional (port (current-input-port)))
No documentation supplied.
[From scheme/bincomm.scm:177]


(binary-write str #&optional (port (current-input-port)))
Writes STR as binary data to PORT.
[From scheme/bincomm.scm:162]


(bind-key contexts key proc)
Bind the given KEY within the CONTEXTS to invoke PROC.
CONTEXTS is a list of event-contexts (e.g., '(button1 sidebar))
KEY is a string giving the key-specifier (e.g., M-Delete for Meta+Delete)
PROC is a procedure (possibly a thunk) that should be invoked
[From scwm/binding.c:644]


(bind-mouse contexts button proc)
Bind the given mouse BUTTON within the CONTEXTS to invoke PROC.
CONTEXTS is a list of event-contexts (e.g., '(button1 sidebar))
BUTTON is a string or integer giving the mouse button number
PROC is a procedure (possibly a thunk) that should be invoked
[From scwm/binding.c:703]


(bool->str arg)
No documentation supplied.
[From scheme/flux.scm:143]


(border-normal?  #&optional win)
Return #t if WIN has a normal border, #f otherwise.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:2833]


(border-style #&key (active '())  
			      (inactive '()) . rest)
Set the current border style.
[From scheme/face.scm:112]


(button-style button #&key mwm
			      (active-up '()) 
			      (active-down '()) 
			      (inactive '()) . rest)
Set the current button style for button number BUTTON.
[From scheme/face.scm:123]


(call-with-decor decor thunk)
No documentation supplied.
[From scheme/decor.scm:209]


(capturing?)
Returns #t when the windows are being captured.
This happens at two times: during initial startup, or during a
recapture operation. In either case, placement procedures should
probably avoid interaction and perhaps avoid moving the window being
placed at all.
[From scwm/miscprocs.c:164]


(circulate-hit #&optional (w (get-window)))
No documentation supplied.
[From scheme/winlist.scm:271]


(circulate-hit-icon #&optional (w (get-window)))
No documentation supplied.
[From scheme/winlist.scm:280]


(circulate-skip #&optional (w (get-window)))
No documentation supplied.
[From scheme/winlist.scm:274]


(circulate-skip-icon #&optional (w (get-window)))
No documentation supplied.
[From scheme/winlist.scm:283]


(circulate-skip-icon? #&optional (w (get-window)))
No documentation supplied.
[From scheme/winlist.scm:286]


(circulate-skip? #&optional (w (get-window)))
No documentation supplied.
[From scheme/winlist.scm:277]


(clear-color-cache-entry name)
Colors are cached by name. It is remotely possible that the
meaning of a particular string as a color will change in your X
server, if you try hard enough. For this unlikely eventuality,
`clear-color-cache-entry' is provided - it removes the color
associated with NAME from the color cache.
[From scwm/color.c:175]


(clear-font-cache-entry name)
Fonts are cached by name. It is remotely possible that the
meaning of a particular string as a fonts will change in your X
server, if you try hard enough (perhaps if you add or remove font
servers). For this unlikely eventuality, `clear-font-cache-entry' is
provided - it removes the font associated with NAME from the font
cache.
[From scwm/font.c:387]


(clear-fvwm2-module-config module-type)
No documentation supplied.
[From scheme/fvwm-module.scm:937]


(clear-image-cache-entry name)
Images are cached by both name and full pathname. It is
remotely possible that the file that should be used for a particular
name will change, for example if you alter the image file or change
your image path. For this unlikely eventuality,
`clear-image-cache-entry' is provided - it removes the image
associated with NAME from the image cache.
[From scwm/image.c:542]


(clever-place-window win)
Places WIN using fvwm2's "ReallySmart" algorithm.
The placement is just as if being placed by fvwm2's SmartPlacement,
as if SmartPlacementIsReallySmart were in effect. That is, it
tries to place the window so as to minimize its area of
overlap with other windows. Several parameters give different
weight to various kinds of windows, but they are not tunable
at runtime currently. If it fails to place the window, it
returns #f; otherwise it returns #t.
[From scwm/placement.c:438]


(click-delay)
Retrun the delay used in identifying mouse clicks and drags, in microseconds.
See also `set-click-delay!'
[From scwm/miscprocs.c:207]


(click-to-focus-passes-click?)
Returns a boolean valude indicating whether a click-to-focus window receives the click.
[From scwm/miscprocs.c:395]


(click-to-focus-raises?)
Returns a boolean valude indicating whether a click-to-focus window gets raised on focus.
[From scwm/miscprocs.c:422]


(close-window #&optional (w (get-window #t)))
No documentation supplied.
[From scheme/winops.scm:35]


(color->string color)
Convert scwm color object COLOR into an X11 name of that color.
The resulting string can, e.g., be used in command lines for executing
other applications.
[From scheme/flux.scm:280]


(color-properties color)
Return an association list giving some properties of COLOR.
Currently defined properties are 'name, the string name of the
color, and 'pixel, the X pixel value it uses.
[From scwm/color.c:92]


(color-property color key)
Return the KEY property of COLOR.
See `color-properties' for a list of the keys.
[From scheme/base.scm:246]


(color? obj)
Returns #t if OBJ is a color object, otherwise #f.
[From scwm/color.c:80]


(colormap-focus)
Return the colormap focus policy, as set by `set-colormap-focus!'.
The value can be either be 'mouse, indicating that the window under
the mouse pointer will always colormap installed, or 'focus to
indicate that the window with the input focus should also get the
colormap focus.
[From scwm/miscprocs.c:242]


(current-decor)
Return the current decor.
[From scwm/decor.c:291]


(current-desk)
Returns the integer identifying the current desk.
[From scwm/deskpage.c:74]


(current-window-with-focus)
Return the window that currently has the input focus.
[From scwm/window.c:728]


(current-window-with-pointer)
Return the window that currently contains the mouse pointer.
[From scwm/window.c:738]


(default-decor)
Return the default decor.
[From scwm/decor.c:251]


(default-placement-proc win)
Use various flags to call an appropriate placement function.
This is the default placement procedure for non-transient windows. It
tries `smart-place-window', `clever-place-window',
`random-place-window', or `interactive-move' (to achieve interactive
placement) on WIN depending on several style flags. However,
if one of the following factors holds, the window will instead be
placed exactly as requested by the program: the position was specified
by the user, the position was specified by the program, and
#:no-PPosition-hint is not set, or the window starts iconic.
[From scwm/placement.c:510]


(default-transient-placement-proc win)
This is the default placement procedure for transient windows.
It simply leaves the window WIN in place, exactly as requested.
[From scwm/placement.c:568]


(default-winlist-proc #&optional (w (get-window)))
No documentation supplied.
[From scheme/winlist.scm:187]


(deiconify  #&optional win)
Deiconify WIN.
Unmap its icon window, and map its regular
window. WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:1777]


(delete-window  #&optional win)
Request that WIN remove itself from the display.
This is the friendly way of closing a window, but it will not work if
the application does not cooperate. WIN defaults to the window context
in the usual way if not specified.
[From scwm/window.c:1431]


(desk-size)
Returns the size of the current desk.
The returned value is in units of the physical screen size, as a list
of the width and the height.
[From scwm/deskpage.c:335]


(destroy-window  #&optional win)
Forcibly remove WIN from the screen.
This will kill the application without giving it a chance to save its
state or do any other shutdown, but is guaranteed to work. WIN
defaults to the window context in the usual way if not specified.
[From scwm/window.c:1462]


(display-area)
No documentation supplied.
[From scheme/winops.scm:111]


(display-size)
Returns the size of the physical screen in pixels.
The return value is list of the width and the height. The
width is the `car', the height is the `cadr' of the returned list.
[From scwm/deskpage.c:349]


(documentation func #&optional (port (current-output-port)))
Print the documentation for the string or symbol.
Return #t if found anything, #f if no documentation.
[From scheme/doc.scm:20]


(edge-move-threshold)
Return the edge move threshold as set by `set-edge-move-threshold!'.
[From scwm/deskpage.c:288]


(edge-scroll-delay)
Return the edge scroll delay as set by `set-edge-scroll-delay!'.
[From scwm/deskpage.c:257]


(edge-x-scroll)
Return the horizontal edge scroll increment as set by `set-edge-x-scroll!'.
[From scwm/deskpage.c:140]


(edge-x-wrap)
Return the current horizonatal edge wrap setting as set by `set-edge-x-wrap!'.
[From scwm/deskpage.c:194]


(edge-y-scroll)
Return the vertical edge scroll increment as set by `set-edge-y-scroll!'.
[From scwm/deskpage.c:169]


(edge-y-wrap)
Return the current vertical edge wrap setting as set by `set-edge-y-wrap!'.
[From scwm/deskpage.c:219]


(eval-fvwm-command command #&optional (fmod #f) 
				   (window #f))
No documentation supplied.
[From scheme/fvwm-eval.scm:514]


(exe command)
Return a procedure that runs the system command COMMAND.
[From scheme/base.scm:275]


(execute command)
Execute COMMAND in the background.
[From scheme/base.scm:67]


(find-window-by-name window-name)
No documentation supplied.
[From scheme/flux.scm:234]


(flash-window win #&optional (color (make-color "red")))
No documentation supplied.
[From scheme/flux.scm:336]


(focus  #&optional win)
Give WIN the input focus.
This will typically result in drawing WIN's frame in a special style
as well. WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:1507]


(fold-menu-list
		ml #&optional (max-lines default-max-fold-lines))
Split ML into chained menus of no more than MAX-LINES items.
ML is a list of menuitem objects. MAX-LINES is a number, which
defaults to `default-max-fold-lines'.
[From scheme/base.scm:266]


(font-properties font)
Return an association list giving some properties of FONT.
Currently defined properties are 'name, the string name of the
color, and 'height, it's total height in pixels.
[From scwm/font.c:241]


(font-property font key)
Return the KEY property of FONT.
See `font-properties' for a list of the keys.
[From scheme/base.scm:241]


(font? obj)
Returns #t if OBJ is a font object, otherwise #f.
[From scwm/font.c:231]


(frame-id->window window-id)
Return the window object corresponding to a frame WINDOW-ID.
WINDOW-ID should be the X id of a scwm frame window. If there is no
such window object, return #f.
[From scwm/window.c:2496]


(fvwm-exec command)
No documentation supplied.
[From scheme/fvwm-compat.scm:40]


(fvwm-exec-use-shell #&optional (shell #f))
No documentation supplied.
[From scheme/fvwm-compat.scm:31]


(fvwm-none thunk #&key (only '()) (except '()))
No documentation supplied.
[From scheme/fvwm-compat.scm:48]


(fvwm-nop . args)
No documentation supplied.
[From scheme/fvwm-compat.scm:72]


(fvwm-pipe-read command)
No documentation supplied.
[From scheme/fvwm-compat.scm:52]


(get-fvwm2-module-config module-type)
No documentation supplied.
[From scheme/fvwm-module.scm:925]


(get-window  #&optional kill? select? release?)
Retrieve the context window or select interactively.
If there is no context window, a window is selected interactively.
The optional boolean argument KILL?  (default #f) determines whether
to use the "kill" cursor when selecting interactively. The boolean
SELECT? argument (default #t) determines whether or not a window
should be selected interactively if there is no current context
window. And finally the RELEASE? argument (default #t) determines
whether or not interactive selection (if any) should wait for a mouse
release event or just a press. The latter behavior is useful if the
action being performed on the window is an interactive one involving
mouse drags. (FIXMS: that's probably a bad order for the optional
arguments)
[From scwm/window.c:686]


(get-wm-command win)
Get the 
[From scheme/flux.scm:292]


(help obj #&optional (port (current-output-port)))
Print all possible documentation for string or symbol.
[From scheme/doc.scm:48]


(help-mesg . funcs)
No documentation supplied.
[From scheme/prefs-menu.scm:63]


(hide-titlebar  #&optional win)
Cause WIN not to be decorated with a titlebar.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:2733]


(hilight-background)
Return the background color for windows with the input focus.
Applies to the current decor.
[From scwm/color.c:679]


(hilight-factor)
Return the current hilight factor.
[From scwm/color.c:451]


(hilight-foreground)
Return the foreground color of the window with the input focus.
Applies to the focus in the current decor.
[From scwm/color.c:606]


(icon-font)
Return the font used for drawing icon titles.
[From scwm/font.c:281]


(icon-position  #&optional win)
Return the position of the icon for WIN.
The position is returned as a list of the x coordinate and the y
coordinate in pixels. WIN defaults to the window context in the usual
way if not specified.
[From scwm/window.c:2371]


(icon-sticky?  #&optional win)
Return #t if WIN is "sticky", #f otherwise.
See `stick-icon' and `stick'. WIN defaults to the window context in
the usual way if not specified.
[From scwm/window.c:2934]


(iconified?  #&optional win)
Return #t if WIN is iconified, otherwise return #f.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:1794]


(iconify  #&optional win)
Iconify WIN.
Iconifying unmaps the regular window, and map the window's icon
window. WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:1751]


(id->window window-id)
Return the window object corresponding to an application WINDOW-ID.
WINDOW-ID should be the X id of the application window. If there is no
such window object, return #f.
[From scwm/window.c:2475]


(image-properties image)
Return an association list giving some properties of IMAGE.
Currently defined properties are 'filename, the fully expanded
pathname of the image, 'width, it's width, 'height, it's height, and
depth, it's color depth.
[From scwm/image.c:159]


(image-property image key)
Return the KEY property of IMAGE.
See `image-properties' for a list of the keys.
[From scheme/base.scm:236]


(image? obj)
Returns #t if OBJ is an image object, otherwise #f.
[From scwm/image.c:149]


(ImageMagick-loader fname)
No documentation supplied.
[From scheme/image-loaders.scm:28]


(in-viewport xx yy)
Return a function of one argument, a window, moving it to the viewport.
[From scheme/flux.scm:92]


(in-viewport-any-desk? #&optional (w (get-window)))
No documentation supplied.
[From scheme/wininfo.scm:63]


(interactive-move  #&optional win opaque?)
Move WIN interactively.
This allows the user to drag a rubber band frame or the window itself
around the screen. WIN defaults to the window context in the
usual way if not specified.  If OPAQUE? is #t, the move will be done
"opaquely", moving the actual X window, if #f a rubberband will be
used instead to save on server computation (note that the rubberband
requires a server "grab" which means that nothing else changes on
screen while the non-opaque move takes place.
[From scwm/move.c:672]


(interactive-move-maybe-opaque #&optional (win (get-window)))
Move WINDOW interactively and possibly opaquely.
Calls `move-opaquely?' and moves opaquely if that returns #,
uses a rubberband if it returns #f.
[From scheme/winops.scm:127]


(interactive-move-window-with-focus)
Interactively move the window which currently has the focus.
`interactive-move-maybe-opaque' is used to control whether a rubberband
outline or the window itself is moved.
[From scheme/flux.scm:29]


(interactive-move-window-with-pointer)
Interactively move the window which currently contains the pointer.
`interactive-move-maybe-opaque' is used to control whether a rubberband
outline or the window itself is moved.
[From scheme/flux.scm:41]


(interactive-resize  #&optional win opaque?)
Resize WIN interactively.
This allows the user to drag a rubber band frame to set the size of
the window. WIN defaults to the window context in the usual way if not
specified. If OPAQUE? is #t, the resize will be done
"opaquely", moving the actual X window, if #f a rubberband will be
used instead to save on server computation (note that the rubberband
requires a server "grab" which means that nothing else changes on
screen while the non-opaque resize takes place.
[From scwm/resize.c:610]


(interactive-resize-maybe-opaque #&optional (win (get-window)))
Move WINDOW interactively and opaquely.
Calls `resize-opaquely?' and moves opaquely if that returns #,
uses a rubberband if it returns #f.
[From scheme/winops.scm:133]


(interactive-resize-window-with-focus)
Interactively resize the window which currently has the focus.
`interactive-resize-maybe-opaque' is used to control whether a rubberband
outline or the window itself is resized.
[From scheme/flux.scm:35]


(interactive-resize-window-with-pointer)
Interactively resize the window which currently contains the pointer.
`interactive-resize-maybe-opaque' is used to control whether a rubberband
outline or the window itself is resized.
[From scheme/flux.scm:47]


(keep-on-top  #&optional win)
Ensure that WIN is kept on top of all other windows.
Obviously, other windows that are also on-top may obscure WIN.
WIN defaults to the window context in the usual way if not specified.
[From scwm/window.c:2629]


(kept-on-top?  #&optional win)
Return #t if WIN is an on-top window, #f otherwise.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:2672]


(key-mouse-moves modifiers pct-of-screen left down up right)
No documentation supplied.
[From scheme/flux.scm:190]


(key-viewport-moves modifiers pct-of-screen left down up right)
No documentation supplied.
[From scheme/flux.scm:200]


(kill-all-fvwm2-modules)
No documentation supplied.
[From scheme/fvwm-module.scm:1073]


(kill-fvwm2-module fmod)
No documentation supplied.
[From scheme/fvwm-module.scm:1070]


(kill-fvwm2-modules-by-name module-name)
No documentation supplied.
[From scheme/fvwm-module.scm:1076]


(list-all-windows)
Return a list of all of the top-level window objects.
The list is in a semi-arbitrary order that is convenient for the sake
of circulation.
[From scwm/window.c:2579]


(list-stacking-order)
Return a list of all the top-level window objects, from top to bottom.
The order is the stacking order of the windows. The first element is
the topmost window, the last is the bottommost
[From scwm/window.c:2598]


(list-windows #&key (only '()) (except '())
			      (by-stacking #f))
No documentation supplied.
[From scheme/winlist.scm:210]


(list-windows-above w #&key (only ()) (except()))
List the windows above w from bottom to top.
Returns a list in the reverse of the stacking order of the windows
above W, in otherwords, from the one immediately above, to the topmost
window; the ONLY and EXCEPT keyword arguments operate as is usual for
procedures that deal with the window list.
[From scheme/stacking.scm:221]


(list-windows-below w #&key (only ()) (except()))
List the windows below w from top to bottom.
Returns a list in the stacking order of the windows below in, in other
words, from the one immediately below, to the bottommost window; the
ONLY and EXCEPT keyword arguments operate as is usual for procedures
that deal with the window list.
[From scheme/stacking.scm:233]


(load-xbm full-path)
Load an X Bitmap file identified by the pathname FULL-PATH.
[From scwm/image.c:217]


(load-xpm full-path)
Load an X Pixmap file identified by the pathname FULL-PATH.
[From scwm/image.c:251]


(lower-by-one #&optional (w (get-window)))
Lower window W below the next window down that overlaps it.
W defaults to the window context in the usual way.
[From scheme/stacking.scm:256]


(lower-window  #&optional win)
Lower WIN to the bottom of the window stack. WIN defaults to
the window context in the usual way if not specified.
[From scwm/window.c:1585]


(lower-window-below w w2)
Lower window W immediately below W2.
[From scheme/stacking.scm:245]


(make-color cname)
Return the color object corresponding to the X color specifier CNAME.
If CNAME is not a valid X color name, or cannot be
allocated, an error results.
[From scwm/color.c:110]


(make-decor  #&optional name)
Create a new decor object. NAME optionally provides a string
that is used to name the decor, and is displayed when the decor is
printed.
[From scwm/decor.c:223]


(make-face flags specs)
Create a new face.
FLAGS is a list of face flags (see concept) and
SPECS is a list of face specifiers.
[From scwm/face.c:446]


(make-file-menu file . rest)
Return a menu-object for viewing or editing FILE.
REST is a list of other menu-items to include in the returned menu.
[From scheme/flux.scm:117]


(make-font fname)
Return the font object for the X font specifier FNAME.
If FNAME is not a valid X font name, or cannot be
allocated, an error results.
[From scwm/font.c:101]


(make-hosts-menu host-list #&optional (user USER))
Create a telnet menu.
To use this, add the following to the menu of your choice:
  (menuitem \"telnet\" #:action (make-hosts-menu '(\"host1\" \"host2\" ...)))
An optional USER argument specifies the user to telnet as.
[From scheme/std-menus.scm:348]


(make-image name)
Loads an image from the file NAME.
To load the image, the appropriate image loaders will be invoked as
needed. If NAME starts with "/", "./" or "../", it is treated as a
fully qualified pathname; otherwise, the image path is searched for an
appropriate file.
[From scwm/image.c:473]


(make-menu list-of-menuitems #&optional picture-side side-bg-color bg-color text-color picture-bg font extra-options)
Make and return a menu object from the given arguments.
LIST-OF-MENUITEMS is a scheme list of menu items -- see `make-menuitem';
PICTURE-SIDE is an image object;
SIDE-BG-COLOR, BG-COLOR, TEXT-COLOR, PICTURE-BG are color objects;
FONT is a font object;
EXTRA-OPTIONS can be anything understood by the menu-specific
drawing code (not used currently).
[From scwm/menu.c:196]


(make-menuitem label action #&optional extra-label picture-above picture-left hover-action unhover-action hotkey-prefs)
Return a newly created menuitem object using the given arguments.
LABEL is a string giving the main text label of the menu item;
ACTION is a procedure or menu object -- if it is a procedure, it gets
invoked when the menuitem is selected, if it is a menu object, that
menu is attached as a submenu from the enclosing menu that the created
menuitem is put in.
EXTRA-LABEL is extra text describing the menu item -- often this
contains a shortcut key description, or some other descriptive text.
PICTURE-ABOVE and PICTURE-LEFT are picture objects which correspond to
images to display within the bounding region of the menuitem.
HOVER-ACTION and UNHOVER-ACTION are procedures to be invoked when the
mouse pointer hovers over the item and is moved away after hovering
over the item, respectively.
HOTKEY-PREFS is a string listing preferred alphanumeric shortcut-keys
for the given menu-item; the menu creation routine uses these as hints
for assigning shortcut keys to the various menuitems.
[From scwm/menuitem.c:118]


(make-menuitems-from-menu-information-list menu-info-list)
No documentation supplied.
[From scheme/flux.scm:173]


(make-relief-color color factor)
Convert a color into a new color appropriate for a relief.
Multiplies the luminosity and saturation of COLOR by the
positive floating point number FACTOR. Using a FACTOR smaller than 1
will result in a dimmer color, suitable for use as a darker
relief. Using a factor greater than 1 will result in a brighter color
which is suitable for use as a hilight.
[From scwm/color.c:360]


(make-string-usable-for-resource-key string)
Return a converted string from STRING that can be used as an X resource key.
The returned string will have all non-alphanumeric characters replaced with
underscores, so that the resulting string can be used as a key for
`X-resource-get' and `X-resource-put'.
[From scheme/flux.scm:341]


(make-style . args)
No documentation supplied.
[From scheme/style.scm:487]


((make-toggling-winop pred neg pos) 
		 #&optional (w (get-window)))
No documentation supplied.
[From scheme/winops.scm:29]


(make-wmconfig-menu 
		 #&optional (wmconfig-title default-wmconfig-title)
		 (wmconfig-dir default-wmconfig-dir))
Return a menu object for the window-manager configuration menu.
[From scheme/wmconfig-menu.scm:306]


(make-xlock-menu #&optional (lock? #f))
Create an xlock menu.
To use this, add the following to the menu of your choice:
   (menuitem \"Screensaver\" #:action (make-xlock-menu #f))
or (menuitem \"Lock Screen\" #:action (make-xlock-menu #t))
[From scheme/std-menus.scm:334]


(marshal-fvwm2-config-info win)
Constructs a fvwm2 BroadcastInfo module packet.
The return value is the contents of a BroadcastInfo fvwm2
module packet for WIN as a Scheme string.
[From scwm/module-interface.c:83]


(marshal-fvwm2-iconify-info win)
Constructs a fvwm2 "M_ICONIFY" module packet.
The return value is the contents of an "M_ICONIFY" fvwm
module packet for WIN as a Scheme string.
[From scwm/module-interface.c:127]


(maximize nw nh #&optional (w (get-window)))
No documentation supplied.
[From scheme/winops.scm:75]


(maximized? #&optional (w (get-window)))
No documentation supplied.
[From scheme/winops.scm:90]


(menu list-of-menuitems #&key
		      image-side
		      (color-bg-image-side 'menu-bg-color)
		      (image-bg #f)
		      (color-text 'menu-text-color)
		      (color-bg 'menu-bg-color)
		      (font 'menu-font))
Return a menu object with the given attributes.
LIST-OF-MENUITEMS is a list of menuitem objects (each created with
`make-menuitem' or `menuitem').  IMAGE-SIDE is an image object to be
displayed along the left edge of the menu.  COLOR-BG-IMAGE-SIDE is the
background color for that image object.  COLOR-TEXT is a color object
or string for the foreground text color of menu items.  COLOR-BG is a
color object or string for the background color for the menu and menu
items.  FONT is a font object for the font of the menu items.
[From scheme/base.scm:210]


(menu-background)
Return the default background color for menus.
[From scwm/color.c:783]


(menu-font)
Return the font used by default for drawing menus.
[From scwm/font.c:377]


(menu-foreground)
Return the default foreground color for menus.
[From scwm/color.c:719]


(menu-hilight-factor)
Return the current menu hilight factor.
[From scwm/color.c:526]


(menu-mwm-style)
Return the menu mwm style as set by `set-menu-mwm-style!'.
This option is currently ignored.
[From scwm/miscprocs.c:44]


(menu-prefs . opts)
No documentation supplied.
[From scheme/prefs-menu.scm:152]


(menu-properties menu)
Returns the a list of the menu properties of MENU, a menu object.
The properties returned are:
'(menu-items side-image side-bg-color bg-color text-color image-bg
font extra-options used-shortcut-keys)
[From scwm/menu.c:170]


(menu-shadow-factor)
Return the current menu shadow factor.
[From scwm/color.c:555]


(menu-stipple)
Return the default stipple color for menus.
May not be used any more.
[From scwm/color.c:829]


(menu-style #&key
		     (fg #f) (foreground #f)
		     (bg #f) (background #f)
		     (stipple #f) font mwm mwm-style)
Set various properites for the menus.
Many of these are ignored.  See `make-menu' for options on
creation of individual menus.
[From scheme/base.scm:119]


(menu? obj)
Return #t if and only if OBJ is a menu object.
[From scwm/menu.c:112]


(menuitem label #&key image-above image-left
			  extra-label action hover-action unhover-action
			  hotkey-prefs)
Return a menuitem object with the given attributes.
LABEL is a string for the name on the item.
IMAGE-ABOVE is an image object to show above the label.
IMAGE-LEFT is an image object to show to the left of the label.
EXTRA_LABEL is a second label shown on the item.
ACTION is a menu object or a procedure; if it is a menu object,
the item will popup ACTION as a sub-menu, if it is a procedure,
the procedure will be invoked when the item is selected.
HOVER-ACTION is an procedure to be invoked when the item is
highlighted but not invoked for a moment; UNHOVER-ACTION is
a procedure to be invoked after the HOVER-ACTION is invoked
when the item is unhighlighted.  HOTKEY-PREFS is a string listing
the characters which are appropriate shortcut-keys for the item;
the first not-yet-used-in-this-menu character will be used for
the shortcut key for the menu item.
[From scheme/base.scm:175]


(menuitem-properties menu-item)
Return a list of the properties of the given MENU-ITEM.
MENU-ITEM is a menuitem object, created by `make-menuitem'.  The
returned list contains the following, in this order:
'(label action extra-label picture-above picture-left hover-action
unhover-action hotkey-preferences)
Note that this is the same as the arguments to the `make-menuitem'
primitive
[From scwm/menuitem.c:90]


(message . str)
Display the string arguments in a message window.
[From scheme/flux.scm:131]


(mod-desk-size! dx dy)
Modify the current desktop size by the given parameter.
[From scheme/prefs-menu.scm:58]


(mod-mask-alt)
Return the bit-mask for the Alt modifier key, or #f.
Returns #f if and only if there is no key bound to act as Alt, otherwise
returns a power of two corresponding to the bit-mask of the modifier
[From scwm/binding.c:841]


(mod-mask-hyper)
Return the bit-mask for the Hyper modifier key, or #f.
Returns #f if and only if there is no key bound to act as Hyper, otherwise
returns a power of two corresponding to the bit-mask of the modifier
[From scwm/binding.c:849]


(mod-mask-meta)
Return the bit-mask for the Meta modifier key, or #f.
Returns #f if and only if there is no key bound to act as Meta, otherwise
returns a power of two corresponding to the bit-mask of the modifier
[From scwm/binding.c:833]


(mod-mask-super)
Return the bit-mask for the Super modifier key, or #f.
Returns #f if and only if there is no key bound to act as Super, otherwise
returns a power of two corresponding to the bit-mask of the modifier
[From scwm/binding.c:858]


(module-event-name-from-number num)
Return the string module event name for event number NUM.
[From scheme/module-types.scm:64]


(mouse-event-type)
Return a symbol corresponding to the type of the most recent mouse event.
Return value is one of 'motion, 'click, 'one-and-a-half-clicks, 'double-click.
You can `case' on this symbol in a procedure bound to a mouse event
to determine, e.g., whether the user single clicked or double clicked.
[From scwm/binding.c:820]


(mouse-focus-click-raises?)
Returns a boolean valude indicating whether a mouse-focus-click will raise the window..
[From scwm/miscprocs.c:452]


(move-opaquely? win)
Return #t if WIN has area < opaque-move-percent of the screen, else #f.
[From scheme/winops.scm:122]


(move-or-raise-maybe-opaque)
Perform a move, raise, or lower based on the mouse-event-type.
To be bound to a window decoration: click does `raise-window',
motion does `interactive-move-maybe-opaque', and double-click does
`lower-window'.
[From scheme/winops.scm:154]


(move-pointer x y)
Move the X11 pointer X pixels to the right, and Y pixels down.
If X is negative, moves to the left.  If Y is negative moves up.
[From scheme/base.scm:106]


(move-pointer-to sx sy)
Move the mouse pointer to SX, SY (given in pixels).
[From scwm/miscprocs.c:270]


(move-to x y #&optional win animated? move-pointer-too?)
Move WIN to coordinates X, Y.
If X is #f, then X defaults to the current X position of WIN.
If Y is #f, then Y defaults to the current Y position of WIN.
If ANIMATED? is specified and true, animate the motion of the window,
otherwise the move is instantaneous. If MOVE-POINTER-TOO? is specified
and true, move the mouse pointer by the same amount as the window,
animating the motion of the pointer along with the window if ANIMATED?
is true. WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:2064]


(move-viewport x y)
Move the viewport onto the virtual desktop relatively.
Moves X pixels horizontally, to the right if positive, to the left if
negative, and Y pixels vertically, down if positive, up if negative.
[From scheme/base.scm:112]


(move-window-to-desk desk #&optional win)
Move WIN to DESK. DESK is an integer desk identifier. WIN
defaults to the window context in the usual way if not specified.
[From scwm/window.c:2304]


(move-window-to-viewport xx yy #&optional ww)
Move the window to the viewport; the first one being (0 0).
[From scheme/flux.scm:84]


(ms->usec ms)
Convert MS milliseconds into an equivalent number of microseconds.
Especially useful for add-hook! and other timing related procedures
that take microseconds.
[From scheme/flux.scm:304]


(netpbm-loader fname)
No documentation supplied.
[From scheme/image-loaders.scm:38]


(next-window #&key (window (get-window #f #f))
			     (only '()) (except '()) (proc window-list-proc))
No documentation supplied.
[From scheme/winlist.scm:316]


(normal-border  #&optional win)
Cause WIN to be decorated with a normal border.
This means that there will be resize handles in the corners. WIN
defaults to the window context in the usual way if not specified.
[From scwm/window.c:2770]


(on-current-desk? #&optional (win (get-window)))
Return #t if WIN is on the current desk.
[From scheme/wininfo.scm:38]


((on-desk-n? n) #&optional (win (get-window)))
No documentation supplied.
[From scheme/wininfo.scm:35]


(on-desk? n #&optional (win (get-window)))
Return #t if WIN is on desk N, else #f.
[From scheme/wininfo.scm:31]


(opaque-interactive-move #&optional (win (get-window)))
Move WINDOW interactively and opaquely.
[From scheme/winops.scm:165]


(opaque-interactive-resize #&optional (win (get-window)))
Resize WINDOW interactively and opaquely.
[From scheme/winops.scm:169]


(percent-visible #&optional (w (get-window)))
No documentation supplied.
[From scheme/wininfo.scm:87]


(plain-border  #&optional win)
Cause WIN to be decorated with a plain border.
This means that there will be no resize handles in the corners, and the
window . WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:2802]


(pointer-position)
Return the current position of the mouse pointer in pixels.
The return value is a two-element list of the x and y coordinates.
[From scwm/miscprocs.c:255]


(popup-menu menu #&optional warp-to-first? x-pos y-pos left-side?)
Popup MENU, a menu object, and warp to the first item if WARP-TO-FIRST? is #t.
X-POS, Y-POS specify a desired position for the menu, and LEFT-SIDE? should be
#t if the menu should be left justified against X-POS, or #f if it should be
right justified against X-POS.
[From scwm/menu.c:1276]


(popup-menu-from-decoration menu win button-number)
Popup MENU from WIN's decoration numbered BUTTON-NUMBER.
This positions the popup menu appropriately.
[From scheme/flux.scm:324]


(prev-window #&key (window (get-window #f #f))
			     (only '()) (except '()) (proc window-list-proc))
No documentation supplied.
[From scheme/winlist.scm:321]


(print-window #&optional (w (get-window)))
No documentation supplied.
[From scheme/winops.scm:189]


(printable-char->keysym-string char)
No documentation supplied.
[From scheme/flux.scm:213]


(program-exists? program-name)
Return #t if PROGRAM-NAME is found as an executable in the current $PATH.
Returns #f otherwise.
[From scheme/base.scm:71]


(quotify-single-quotes str)
Return a string that has single quote characters backslashified.
[From scheme/flux.scm:126]


(raise-by-one #&optional (w (get-window)))
Raise window W above the next window up that overlaps it.
W defaults to the window context in the usual way.
[From scheme/stacking.scm:264]


(raise-window  #&optional win)
Raise WIN to the top of the window stack.
Stays-on-top windows still take priority. WIN defaults to the window
context in the usual way if not specified.
[From scwm/window.c:1559]


(raise-window-above w w2)
Raise window W immediately above W2.
[From scheme/stacking.scm:249]


(raised?  #&optional win)
Return #t if WIN is currently raised, #f if not.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:1690]


(random-place-window win)
Places WIN just as if being placed by fvwm2's RandomPlacement.
This placement is not truly random; it is based on two state variables
which are incremented for the x and y coordinates, and which wrap
around once a window would be forced off the screen. The placement is
fairly arbitrary, but always succeeds, and so avoids user
interaction. #t is always returned.
[From scwm/placement.c:474]


(recapture)
Recapture all the windows.
This destroys all the current frame windows and recreate them from
scratch. This is hopefully not necessary during normal operation.
[From scwm/miscprocs.c:293]


(refresh)
Make sure all decorations for all windows are up to date. In theory,
this should not be needed.
[From scwm/miscprocs.c:178]


(refresh-window  #&optional win)
Refresh the decorations on window WIN.
Refreshing ensuring that everything, including the decorations is up
to date. `refresh' does this in a more efficient way for all windows,
as well as the root. WIN defaults to the window context in the usual
way if not specified.
[From scwm/window.c:2280]


(register-fvwm2-module-config module-type . args)
No documentation supplied.
[From scheme/fvwm-module.scm:930]


(register-image-loader extension proc)
Register PROC as the loader to use for images ending in EXTENSION.
EXTENSION must be a string beginning with a period, the
empty string (for files with no extension), or the string "default"
(for files that no other image loader succeeds in loading). PROC will
be called with the full pathname of the image and should return an
image object, or #f if it succeeds.
[From scwm/image.c:299]


(remove-input-hook! handle)
Remove an input hook identified by HANDLE.
HANDLE should be an object that was returned by `add-input-hook!'. An
input hook may safely remove itself.
[From scwm/callbacks.c:590]


(remove-timer-hook! handle)
Remove a timer hook identified by HANDLE.
The HANDLE should be an object that was returned by
`add-timer-hook!'. No warning or error will occur if HANDLE is for a
timer hook that has already been triggered.
[From scwm/callbacks.c:465]


(reset-scwmexec-protocol)
Reset the scwmexec protocol.
This procedure removes the "XA_SCWMEXEC_REQUEST" property on the
root window.  It should not be necessary but may be useful in case
your X server goes awry (and otherwise you would have to restart your
X server).  Use if scwmexec or scwmrepl are not returning (e.g.,
if your Emacs hangs when you try evaluating a scwm expression).
[From scwm/events.c:459]


(resize-frame-to w h #&optional win)
Resize WIN to a size of W by H in pixels. The size includes
the window decorations. WIN defaults to the window context in the
usual way if not specified.
[From scwm/window.c:2210]


(resize-opaquely? win)
Return #t if WIN has area < opaque-resize-percent of the screen, else #f.
[From scheme/winops.scm:117]


(resize-or-raise-maybe-opaque)
Perform a resize, raise, or lower based on the mouse-event-type.
To be bound to a window decoration: click does `raise-window',
motion does `interactive-resize-maybe-opaque', and double-click does
`lower-window'.
[From scheme/winops.scm:144]


(resize-to w h #&optional win)
Resize WIN's client area to a size of W by H in pixels.
The size includes the window decorations. WIN defaults to the window
context in the usual way if not specified.
[From scwm/window.c:2170]


(restack-windows winlist)
Restack the windows in WINLIST from front to back.
The first element of WINLIST will be kept in its current stacking
order, the remainder will be stacked immediately below it in the order
given. (Note: This will currently confuse the heck out of the pager
and possibly other legacy fvwm2 modules).
[From scwm/window.c:1602]


(restart  #&optional command)
Restart the window manager. If COMMAND is specified, use
that, as the new window manager to run. If COMMAND is not specified or
is exactly equal to "scwm", restart scwm with the same command-line
arguments as given previously.
[From scwm/shutdown.c:130]


(restarted?)
Returns true if scwm is being restarted by itself.
[From scwm/miscprocs.c:155]


(run-fvwm2-module module-name #&optional
				  (other-args '())	       
				  (config-file "~/.fvwm2rc")
				  (config-info
				   (get-fvwm2-module-config
				    (basename module-name))))
No documentation supplied.
[From scheme/fvwm-module.scm:945]


(run-in-xterm cmd . opts)
Return a procedure that runs CMD in an xterm.
Uses the variable `xterm-command' to determine how
to run an xterm.  CMD may include options to the command.
The rest of the arguments are passed as options to the xterm command.
[From scheme/base.scm:283]


(safe-load fname)
Load file FNAME while trapping and displaying errors.
Each individual top-level-expression is evaluated separately and all
errors are trapped and displayed.  You Should use this procedure if
you need to make sure most of a file loads, even if it may contain
errors.
[From scwm/callbacks.c:243]


(save-settings)
No documentation supplied.
[From scheme/prefs-menu.scm:37]


(scwm-path-exec-prefix)
Return the <envar>$EXEC_PREFIX</envar> directory path that scwm was installed with.
[From scwm/miscprocs.c:493]


(scwm-path-prefix)
Return the <envar>$PREFIX</envar> directory path that scwm was installed with.
[From scwm/miscprocs.c:483]


(scwm-quit  . args)
Exit scwm cleanly. `quit' is redefined as this within
scwm. ARGS is ignored.
[From scwm/shutdown.c:156]


(scwm-version)
Return the version of scwm running.
[From scwm/miscprocs.c:462]


(scwm-version-date)
Return the date that the running scwm was last changed as a string.
[From scwm/miscprocs.c:472]


(sec->usec sec)
Convert SEC seconds into an equivalent number of microseconds.
Especially useful for add-hook! and other timing related procedures
that take microseconds.
[From scheme/flux.scm:298]


(select-multiple-windows-interactively #&optional (max 32000))
Return a list of user-selected windows, up to MAX.
The list is in the reverse order from the way by which they were selected.
[From scheme/flux.scm:256]


(select-window  #&optional kill? release?)
Select a window interactively.
Use a special cursor and let the user click to select the window. The
optional arguments KILL? and RELEASE? indicate whether to use the
"skull and cross-bones" kill cursor (recommended for destructive
operations like delete-window and destroy-window), and whether to wait
for a mouse release or act immediately on the click. The former is a
place-holder until we have proper cursor support in scwm.
[From scwm/window.c:619]


(select-window-from-window-list #&key (only '()) (except '()))
Permit selecting a window from a window list.
Return the selected window object, or #f if none was selected
[From scheme/flux.scm:271]


(select-window-interactively  #&optional msg)
Returns a window selected interactively while displaying MSG.
Returns #f if no window was selected. Display no message if MSG not given.
[From scwm/window.c:751]


(send-button-press button #&optional win button-press? button-release? propagate?)
Send a synthetic mouse press event.
Create a synthetic event of a press of mouse button BUTTON. The usual
mouse button specification format (with modifiers) is used. Send the
event to window WIN if specified; otherwise the window to be used
defaults to the window context in the usual way. By default, both a
press and a release are sent. However, the boolean parameters
BUTTON-PRESS? and BUTTON-RELEASE? allow you to specify which are sent
individually. PROPAGATE? indicates whether the propagate flag is set
on the event; the default is #f. You should not have to worry about
this unless you know what it means.
[From scwm/events.c:1785]


(send-key-press key #&optional win key-press? key-release? propagate?)
Send a synthetic press of KEY. The usual key specification
format (with modifiers) is used. The event is sent to window WIN if
specified; otherwise the window to be used defaults to the window
context in the usual way. By default, both a press and a release are
sent. However, the boolean parameters KEY-PRESS? and KEY-RELEASE?
allow you to specify which are sent individually. PROPAGATE? indicates
whether the propagate flag is set on the event; the default is #f. You
should not have to worry about this unless you know what it means.
[From scwm/events.c:1723]


(set-animation! vector)
Set the animation parameters to VECTOR. VECTOR is a vector of
floats which give the fractions of the final position that the window
should appear at. For instance, #(0.0 0.25 0.5 0.75 1.0 1.1 1.0) would
make the window appear at the initial position, 1/4 of the way, 1/2 of
the way, 3/4 of the way, overshoot the final position slightly, and
finally slide back into place. This parameter is used for both
animated window shades and animated moves.
[From scwm/window.c:2017]


(set-auto-raise! auto-raise? #&optional (win (get-window)))
Turn auto-raise on (#t) or off (#f) for WIN.
Auto-raise makes a window automatically raise when the mouse pointer
enters the window frame.  See `set-auto-raise-delay!' for controlling
the delay before the window raises.
[From scheme/auto-raise.scm:66]


(set-auto-raise-delay! delay #&optional (win (get-window)))
Set the auto-raise delay to DELAY (in ms) for WIN.
DELAY is the number of milliseconds after the pointer enters
WIN that WIN will be raised.  See `set-auto-raise!' to turn
auto-raise on or off for a given window.
[From scheme/auto-raise.scm:73]


(set-auto-raise-focus-proc! fproc #&optional (win (get-window)))
Set the auto-raise-focus-proc for WIN.
The auto-raise-focus-proc is the procedure which is invoked
after the auto-raise-delay after the pointer enters WIN's frame.
[From scheme/auto-raise.scm:87]


(set-auto-raise-unfocus-delay! delay #&optional 
					       (win (get-window)))
Set the timeout to DELAY (in ms) for the unfocus-proc of WIN.
After DELAY milliseconds after the pointer leaves WIN's frame,
the auto-raise-unfocus-proc will be called.
[From scheme/auto-raise.scm:80]


(set-auto-raise-unfocus-proc! ufproc 
					     #&optional (win (get-window)))
Set the auto-raise-unfocus-proc for WIN.
The auto-raise-unfocus-proc is the procedure which is invoked
after the auto-raise-unfocus-delay after the pointer leaves WIN's frame.
[From scheme/auto-raise.scm:93]


(set-border-face! active #&optional inactive)
Set the face for the border In the current decor.
Use ACTIVE as the face for the border when the window is active. Use
INACTIVE when the window is inactive. INACTIVE defaults to the same as
ACTIVE when not specified.
[From scwm/face.c:987]


(set-border-width! width #&optional win)
Set the border width of WIN's border to WIDTH pixels.
WIN defaults to the window context in the usual way if not specified.
[From scwm/window.c:2845]


(set-button-face! button active-up #&optional active-down inactive)
Set the button faces for the various window states.
In the current decor, use ACTIVE-UP as the face for the
button specified by the integer BUTTON when active and not pressed
in. Use ACTIVE-DOWN when BUTTON is active and pressed in, and INACTIVE
when the window is inactive. Both INACTIVE and ACTIVE-DOWN default to
ACTIVE-UP when not specified. Note that ACTIVE-DOWN will magically
reverse the sense of the relief flag, so if the button is raised in
the ACTIVE-UP state, it will be sunk in the ACTIVE-DOWN state by
default.
[From scwm/face.c:893]


(set-button-mwm-flag! button flag)
Specify the Mwm flag for BUTTON.
If FLAG is #t, the button's relief pattern (if any) will appear to
reverse in depth sense (i.e., flip from sunken in to extruding out)
when the window is maximized.
[From scwm/face.c:954]


(set-click-delay! usec)
Set the delay used in identifying mouse clicks and drags.
USEC is specified in microseconds. After USEC microseconds, a mouse-down
without a mouse-up is considered a drag.  Also, after USEC microseconds, a
single click is definitively identified as not a double click.
[From scwm/miscprocs.c:190]


(set-click-to-focus-passes-click! flag)
Determine whether a click-to-focus window receives the click.
If FLAG is #t, the window will receive the event, if #f, scwm
will not pass the event on to the client.
[From scwm/miscprocs.c:383]


(set-click-to-focus-raises! flag)
Determine whether a click to focus raises the clicked-on window.
If FLAG is #t, clicks which transfer focus will also raise the target
window
[From scwm/miscprocs.c:407]


(set-colormap-focus! ftype)
Set the colormap focus policy to FTYPE.
FTYPE can either be 'mouse, indicating that the window under the mouse
pointer should always have it's colormap installed, or 'focus to
indicate that the window with the input focus should also get the
colormap focus. This makes a difference only when using focus policies
other than 'mouse.
[From scwm/miscprocs.c:217]


(set-current-decor! decor)
Set the current decor to DECOR. Operations described as
setting options "in the current decor" will now operate on this
one.
[From scwm/decor.c:261]


(set-current-desk! desk)
Change the current desk to DESK. DESK should be an integer
small enough to fit in one machine word.
[From scwm/deskpage.c:58]


(set-decorate-transient! flag #&optional win)
Set decoration of transients property on WIN.
If FLAG is #t, then if WIN is transient it will be fully
decorated. Transient windows that are not fully decorated will be
given only a border and no titlebar regardless of other settings. WIN
defaults to the window context in the usual way if not specified.
[From scwm/window.c:3395]


(set-desk-size! width height)
Sets the desk size to WIDTH, HEIGHT.
Both numbers are given in units of the physical screen size.  For
example <informalexample>(set-desk-size 3 3)</informalexample> creates
a virtual world 9 times the size of the physical display.
[From scwm/deskpage.c:299]


(set-edge-move-threshold! pixels)
Set the edge move threshold to PIXELS.
This is the number of pixels past the edge of the screen that a window
must be moved before it will really move past the edge.
[From scwm/deskpage.c:269]


(set-edge-resistance! s m)
Set the edge scroll delay to S, and the edge move threshold to M.
See also `set-edge-scroll-delay!' and `set-edge-move-threshold!'.
[From scheme/base.scm:325]


(set-edge-scroll! x y)
Set the edge scroll values to X and Y, respectively.
These values are the number of pixels that the viewport
moves when the pointer hits the edge of the screen.  Use
`%x' and `%y' to convert from a percentage of a screen
dimension to a number of pixels.
[From scheme/base.scm:339]


(set-edge-scroll-delay! usec)
Set the edge scroll delay to USEC microseconds.
When the mouse pointer hits the edge of the screen, it must stay there
for at least the edge scroll delay amount before the desktop will be
scrolled. If this parameter is #f, the viewport will not scroll at all
at the screen edge.
[From scwm/deskpage.c:229]


(set-edge-wrap! x y)
Set the edge x and y wrap values to X and Y, respectively.
These values should be #t to mean that the pointer should
wrap in the given direction, or #f to not wrap around.
See also `set-edge-x-wrap!' and `set-edge-y-wrap!'.
[From scheme/base.scm:331]


(set-edge-x-scroll! pixels)
Set the horizontal edge scroll increment to PIXELS.
The horizontal edge scroll setting is the amount by which the viewport
will scroll when the mouse hits the left or right edge. Use `%x' to
convert from a percent of screen size to pixels.
[From scwm/deskpage.c:121]


(set-edge-x-wrap! flag)
Set whether to wrap pointer around horizontal edges.
If the boolean value FLAG is #t, the pointer will wrap from the right
edge of the desktop to the left of the display as it moves off the
right edge, and vice-versa. See also `set-edge-y-wrap!'
[From scwm/deskpage.c:180]


(set-edge-y-scroll! pixels)
Set the vertical edge scroll increment to PIXELS.
The vertical edge scroll setting is the amount by which the viewport
will scroll when the mouse hits the top or bottom edge. Use `%y' to
convert from a percent of screen size to pixels.
[From scwm/deskpage.c:150]


(set-edge-y-wrap! flag)
Set whether to wrap pointer around vertical edges.
If the boolean value FLAG is #t, the pointer will wrap from the bottom
edge of the desktop to the top of the display as it moves off the very
bottom edge, and vice-versa. See also `set-edge-x-wrap!'
[From scwm/deskpage.c:204]


(set-face-flag! face flag flagval)
Set the given FLAG to the given FLAGVAL for face FACE.
See the section on the face-specification-flags concept.
[From scwm/face.c:345]


(set-force-icon! flag #&optional win)
Set the window-manager-overriding property for WIN to boolean FLAG.
If #t, the icon specified for WIN by the user through scwm will override an
application-provided icon.  WIN defaults to the window context in the usual
way if not specified.
[From scwm/window.c:3227]


(set-hilight-background! bg)
Use BG as the background color for the window with input focus.
Applies to the current decor.
[From scwm/color.c:625]


(set-hilight-factor! factor)
Use FACTOR to generate highlight colors for the current decor.
FACTOR is a positive floating point number.
[From scwm/color.c:428]


(set-hilight-foreground! fg)
Use FG for foreground color of the window with the input focus.
Applies to the current decor.
[From scwm/color.c:582]


(set-hint-override! flag #&optional win)
Set whether or not Mwm and Open Look function hints are used.
If FLAG is #t, the hints, which indicate what operations should be
allowed on a window, will be ignored for WIN.  If FLAG is #f, the hints will
be honoured. WIN defaults to the window context in the usual way if
not specified.
[From scwm/window.c:3378]


(set-icon! image #&optional win)
Set the image to use for the icon of WIN to IMAGE.
As usual, an image object or a filename string may be given. #f May
also be specified, indicating no icon image. WIN defaults to the window
context in the usual way if not specified.
[From scwm/window.c:3273]


(set-icon-box! x y w h #&optional win)
Set the icon box in which WIN's icon will be placed.
This set the box to the rectangle at coordinates X, Y with width W and
height H. WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:2947]


(set-icon-font! font)
Set the font used for drawing icon titles to FONT.
[From scwm/font.c:258]


(set-icon-title! flag #&optional win)
Set the visibility of WIN's icon title according to FLAG. WIN
defaults to the window context in the usual way if not specified.
[From scwm/window.c:3210]


(set-lenience! flag #&optional win)
Set or reset the input focus lenience flag.
Determine whether or not to try to give WIN the input focus
when asked, even if the window claims according to hints that it
cannot receive the input focus, according to the boolean value
FLAG. WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:3510]


(set-menu-background! bg)
Use BG as the default foreground color for menus.
[From scwm/color.c:729]


(set-menu-font! font)
Set the default font used for drawing menus to FONT.
[From scwm/font.c:354]


(set-menu-foreground! fg)
Use FG as the default foreground color for menus.
[From scwm/color.c:693]


(set-menu-hilight-factor! factor)
Use FACTOR to generate hilight colors for menus.
FACTOR is a positive floating point number
[From scwm/color.c:507]


(set-menu-mwm-style! flag)
Set the menu mwm style according to the boolean FLAG.
This option is currently ignored.
[From scwm/miscprocs.c:33]


(set-menu-shadow-factor! factor)
Use FACTOR to generate shadow colors for menus.
FACTOR is a positive floating point number
[From scwm/color.c:536]


(set-menu-stipple! st)
Use ST as the default stipple color for menus.
May not be used any longer.
[From scwm/color.c:794]


(set-message-window-attributes! font fg-color bg-color)
Set the attributes to be used for the message window.
The font will be FONT, foreground color FG-COLOR, and background color BG-COLOR.
This the window which is used to display the current size or position of the window
being moved or resized interactively.
[From scwm/resize.c:56]


(set-mini-icon! image #&optional win)
Set the image to use for the mini-icon of WIN to IMAGE. As
usual, an image object or a filename string may be given. WIN defaults
to the window context in the usual way if not specified.
[From scwm/window.c:3326]


(set-mouse-focus-click-raises! flag)
Determine whether a mouse-focus-click will raise the window.
If FLAG is #t it will raise the window. Not sure if this function
makes sense any more.
[From scwm/miscprocs.c:439]


(set-mwm-border! flag #&optional win)
Set the mwm-border style flag of WIN to boolean FLAG.
The Mwm style has shallower bevels than the default scwm/fvwm2 style.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:3166]


(set-mwm-buttons! flag #&optional win)
Set the mwm-buttons flag of WIN to boolean FLAG.
The mwm-buttons flag controls whether any of this window's
flags obey their mwm-flags. See `set-button-mwm-flag!'. WIN defaults
to the window context in the usual way if not specified.
[From scwm/window.c:3150]


(set-mwm-decor-hint! flag #&optional win)
Set whether or not Motif decoration hints are used for WIN.
If FLAG is #t, the Mwm decor hint will be given for WIN.  WIN defaults
to the window context in the usual way if not specified.
[From scwm/window.c:3411]


(set-mwm-func-hint! flag #&optional win)
Set whether or not Motif function hints are used for WIN.
If FLAG is #t, the Motif function hints are respected for WIN.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:3425]


(set-OL-decor-hint! flag #&optional win)
Determine whether or not to respect Open Look decoration hints.
If FLAG is #t, the decoration hints will be respected for WIN. WIN
defaults to the window context in the usual way if not specified.
[From scwm/window.c:3457]


(set-PPosition-hint! flag #&optional win)
Set or reset the program-specified position hint for WIN.
If FLAG is #t, the hint will be set, otherwise reset.  This only
matters when using the default placement procedure. Some programs
allegedly set this hint to a useless value like (0,0) always, so
ignoring it is recommended. WIN defaults to the window context in the
usual way if not specified.
[From scwm/window.c:3440]


(set-random-placement! flag #&optional win)
Set the random-placement flag of WIN to boolean FLAG.
This flag only matters if the default placement procedure is
being used. WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:3095]


(set-rubber-band-mask! value)
Set the rubber band mask used when dragging or resizing.
VALUE is XORed with the background when dragging non-opaque move or
resize frames. VALUE should be an integer.
[From scwm/resize.c:332]


(set-shadow-factor! factor)
Use FACTOR to generate shadow colors in the current decor.
FACTOR is a positive floating point number
[From scwm/color.c:465]


(set-show-icon! flag #&optional win)
Set whether or not the icon of WIN will be visible.  If FLAG
is #t, the icon will be displayed, if #f, it will not appear when the
window is iconified (it will still be in the window list, of course).
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:3254]


(set-skip-mapping! flag #&optional win)
Set or reset whether scwm should not change desktops on a map.
This only affect the behaviour upon initial mapping of WIN. If FLAG is
#t, the virtual desktop will not be changed when WIN is mapped.  WIN
defaults to the window context in the usual way if not specified.
[From scwm/window.c:3495]


(set-smart-placement! flag #&optional win)
Set the smart-placement flag of WIN to boolean FLAG.
This flag only matters if the default placement procedure is
being used. WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:3110]


(set-smart-placement-is-really-smart! flag)
Determine whether or not `clever-place-window' will be used when smart-placing.
If FLAG is #t, then `clever-place-window' will be used instead of
`smart-place-window' when the default placement procedure is used, and
the window's smart-placement flag is on.
[From scwm/miscprocs.c:351]


(set-start-on-desk! desk #&optional win)
Make WIN start on DESK when first mapped. WIN defaults to the
window context in the usual way if not specified.
[From scwm/window.c:3471]


(set-title-face! active-up #&optional active-down inactive)
Set the titlebar faces for the various window states.
In the current decor, use ACTIVE-UP as the face for the title
bar when active and not pressed in. Use ACTIVE-DOWN when the title bar
is active and pressed in, and INACTIVE when the window is
inactive. Both INACTIVE and ACTIVE-DOWN default to ACTIVE-UP when not
specified. Note that ACTIVE-DOWN will magically reverse the sense of
the relief flag, so if your titlebar bar is raised in the ACTIVE-UP
state, it will be sunk in the ACTIVE-DOWN state by default.
[From scwm/face.c:853]


(set-title-font! font)
Set the font for window titles In the current decor to FONT.
[From scwm/font.c:291]


(set-title-height! height)
Set the height of the titlebar in pixels to HEIGHT.
Applies to the current decor.
[From scwm/miscprocs.c:108]


(set-title-justify! just)
Set the justification for the title to JUST.
JUST should be one of 'right, 'left, or 'center. Applies to the
current decor
[From scwm/miscprocs.c:56]


(set-viewport-position! x y)
Position the upper left corner of the viewport at coordinates X, Y.
X and Y are given in pixels.  Does not affect the current desk.
[From scwm/deskpage.c:90]


(set-window-background! bg #&optional win)
Set the foreground color of WIN to BG. This color is used to
draw most of the window decorations, along with the relief colors
generated from it, which are used to draw the window's 3-D bevels.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:3065]


(set-window-button! n flag #&optional win)
Set the visibility of button number N on window WIN.
If FLAG is #t, the button will be visible, otherwise it won't be
drawn.  WIN defaults to the window context in the usual way if not
specified. (Note: this code may be broken right now.)
[From scwm/window.c:3125]


(set-window-colors! #&optional (bg #f) (fg #f) (win (get-window)))
Set WIN's background color to BG, foreground color to FG.
[From scheme/base.scm:100]


(set-window-decor! win decor)
Set WIN's decor to DECOR, updating its decorations appropriately.
[From scwm/decor.c:305]


(set-window-focus! sym #&optional win)
Set the focus style of WIN to SYM. SYM may be 'click, 'mouse,
'sloppy or 'none. WIN defaults to the window context in the usual way
if not specified.
[From scwm/window.c:3007]


(set-window-foreground! fg #&optional win)
Set the foreground color of WIN to FG. This color is used to
draw the title text currently. In the future, it may have other uses
as well. WIN defaults to the window context in the usual way
if not specified.
[From scwm/window.c:3042]


(set-window-property! win prop val)
Set window property PROP of WIN to VAL.
PROP should be a symbol. VAL may be any Scheme object. This name/value
pair will be associated with the window, and may be retrieved with
`window-property'. Passing #f as the value will delete the property
instead. Soon, some properties will have magical meanings, altering
particular fields in the window structure. Also, a
window-property-change-hook mechanism will soon be implemented for
notification of all window property changes. This is not yet done. The
window property primitives should be considered in flux.
[From scwm/window.c:3526]


(set-window-text-property win propname value)
Set a text property named PROPNAME on WIN.
Uses format 8 (byte) and type "XA_STRING", and VALUE as the data.
[From scwm/xproperty.c:146]


(set-window-title! win title)
Change the window title X-Property of WIN to TITLE.
WIN is a Scwm window object, TITLE is a string.  This procedure alters the
window title by changing the WM_NAME X-Property.
[From scheme/flux.scm:286]


(set-X-server-synchronize! flag)
Set X server sychronization flag to FLAG.
If FLAG is #t, then Scwm will turn on synchronous X behaviour; if FLAG
is #f, Scwm will turn off synchronous behaviour.  Scwm is slower in
synchronous mode, but can be easier to debug.
[From scwm/miscprocs.c:503]


(shadow-factor)
Return the current shadow factor.
[From scwm/color.c:489]


(should-circulate-skip? #&optional (w (get-window)))
No documentation supplied.
[From scheme/winlist.scm:289]


(show-com com)
No documentation supplied.
[From scheme/flux.scm:140]


(show-file fl)
No documentation supplied.
[From scheme/flux.scm:138]


(show-mesg . str)
No documentation supplied.
[From scheme/flux.scm:137]


(show-system-info)
No documentation supplied.
[From scheme/flux.scm:171]


(show-titlebar  #&optional win)
Cause WIN to be decorated with a titlebar.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:2709]


(show-window-list-menu #&key (only '()) (except '())
				       (by-stacking #f)
				       (proc window-list-proc)
				       (show-geometry #f)
				       (warp-to-first #f)
				       (show-mini-icon #t))
No documentation supplied.
[From scheme/winlist.scm:232]


(simple-title-style #&key font height justify)
Set the style for titlebars.
FONT is a font object or a string, HEIGHT is a number of points,
JUSTIFY is a legal argument to `set-title-justify' such as 'left,
'right, or 'center.
[From scheme/base.scm:140]


(size->str sz #&optional (sep "x"))
Convert a two-element list to a string.
Use the optional second argument as the separator.
[From scheme/flux.scm:145]


(sleep-ms ms)
No documentation supplied.
[From scheme/flux.scm:210]


(smart-place-window win)
Places WIN using fvwm2's SmartPlacement algorithm.
The placement is just as if SmartPlacementIsReallySmart were not in
effect. That is, it tries to place the window so that it does not
overlap any other. If it fails to do so, it returns #f; otherwise it
returns #t.
[From scwm/placement.c:395]


(smart-placement-is-really-smart?)
Return whether or not `clever-place-window' will be used when smart-placing.
If the value is #t, then `clever-place-window' will be used instead of
smart-place-window when the default placement procedure is used, and
the window's smart-placement flag is on.
[From scwm/miscprocs.c:366]


(stick  #&optional win)
Cause WIN to become "sticky".
A sticky window will appear on all desktops, and will remain at the
same screen position regardless of scrolling within the current
desktop. WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:1807]


(stick-icon  #&optional win)
Cause WIN's icon to become "sticky". See `stick'. WIN
defaults to the window context in the usual way if not specified.
[From scwm/window.c:2895]


(sticky?  #&optional win)
Return #t if WIN is "sticky", #f otherwise.
See `stick' for an explanation. WIN defaults to the
window context in the usual way if not specified.
[From scwm/window.c:1850]


(string->xproperty str)
Create an xproperty object from STR.
[From scwm/xproperty.c:242]


(style-one-window w . args)
No documentation supplied.
[From scheme/style.scm:483]


(support-image-conversion)
No documentation supplied.
[From scheme/image-loaders.scm:54]


(system-info-string)
Return a string with various system information.
Use `show-system-info' to display it in a window.
[From scheme/flux.scm:96]


(title-font)
Return the font used for drawing window titles in the current decor.
[From scwm/font.c:320]


(title-height)
Return the height of the titlebar in pixels, as set by `set-title-height!'.
Applies to the current decor.
[From scwm/miscprocs.c:141]


(title-justify)
Return the current justification for the title, as set by `set-title-justify!'.
The return value will be one of 'right, 'left, or 'center. Applies to the
current decor.
[From scwm/miscprocs.c:86]


(title-style #&key font height justify
			     (active-up '()) 
			     (active-down '()) 
			     (inactive '()) . rest)
Set the current title style to use FONT, HEIGHT, and JUSTIFY.
FONT is the window title font, a font object or a string.
HEIGHT is the height of the title bar, in points.
JUSTIFY is one of 'left, 'right, or 'center.
FIXMS: What are? ACTIVE-UP, ACTIVE-DOWN, INACTIVE.
[From scheme/face.scm:92]


(titlebar-shown?  #&optional win)
Return #t if WIN is decorated with a titlebar, #f otherwise.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:2756]


(to-string . rest)
Dump all arguments into a string.
[From scheme/flux.scm:80]


(toggle-max-both)
Toggle the current window's maximization (both vertically and horizontally).
[From scheme/flux.scm:61]


(toggle-max-horz)
Toggle the current window's maximized-horizontally state.
[From scheme/flux.scm:57]


(toggle-max-vert)
Toggle the current window's maximized-vertically state.
[From scheme/flux.scm:53]


(toggle-max-vert-part)
Toggle the current window's maximization-vertically to 95% of the screen height.
[From scheme/flux.scm:65]


(toggle-maximize nw nh #&optional (win (get-window)))
Maximize to width NW, height NH if not maximized, or unmaximize.
[From scheme/winops.scm:174]


(transient?  #&optional win)
Return #t if WIN is transient, #f if not.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:1707]


(try-everything-loader fname)
No documentation supplied.
[From scheme/image-loaders.scm:47]


(un-keep-on-top  #&optional win)
Remove the on-top property from WIN, if it has it.
See `keep-on-top'. WIN defaults to the window context in the usual
way if not specified.
[From scwm/window.c:2651]


(un-window-shade  #&optional win animated?)
Reverse the effect of `window-shade' on WIN.
By default, the change takes place instantaneously. However, if the
optional ANIMATED? argument is true, the window will be animated as it
rolls down, producing a pleasing visual effect. WIN defaults to the
window context in the usual way if not specified.
[From scwm/window.c:1947]


(un-window-shade-animated w)
No documentation supplied.
[From scheme/winops.scm:55]


(unbind-key contexts key)
Remove any bindings attached to KEY in given CONTEXTS.
CONTEXTS is a list of event-contexts (e.g., '(button1 sidebar))
KEY is a string giving the key-specifier (e.g., M-Delete for Meta+Delete)
[From scwm/binding.c:585]


(unbind-mouse contexts button)
Remove any bindings attached to mouse BUTTON in given CONTEXTS.
CONTEXTS is a list of event-contexts (e.g., '(button1 sidebar))
BUTTON is a string or integer giving the mouse button number
[From scwm/binding.c:617]


(unfocus)
Remove the input focus from any window that may have it.
[From scwm/window.c:1528]


(unmaximize #&optional (w (get-window)))
No documentation supplied.
[From scheme/winops.scm:93]


(unregister-image-loader extension)
Unregister the loader, if any, for images ending in EXTENSION.
EXTENSION must be a string beginning with a period, the
empty string (for files with no extension), or the string "default"
(for files that no other image loader succeeds in loading).
[From scwm/image.c:325]


(unstick  #&optional win)
Cause a window to no longer be "sticky", if it is.
See `stick' for an explanation. WIN defaults to the window context in
the usual way if not specified.
[From scwm/window.c:1830]


(unstick-icon  #&optional win)
Cause WIN's icon to no longer by "sticky". See `stick-icon'
and `stick'. WIN defaults to the window context in the usual way if
not specified.
[From scwm/window.c:2914]


(viewport-position)
Returns the current position of the viewport in pixels.
The returned value is a list of the x and y positions.
[From scwm/deskpage.c:108]


(visible? #&optional (w (get-window)))
No documentation supplied.
[From scheme/wininfo.scm:83]


(w%x x #&optional (w (get-window)))
Return a pixel width X percent of the width of window W.
[From scheme/base.scm:59]


(w%y y #&optional (w (get-window)))
Return a pixel height Y percent of the height of window W.
[From scheme/base.scm:63]


(wait-for-window predicate)
Wait until a window appears which satisfies PREDICATE.
Given the existence of before-new-window-hook, this is of questionable
usefulness.
[From scwm/miscprocs.c:309]


(warp-to-window  #&optional win)
Move the mouse pointer to the upper left corner of WIN.
If WIN is on a different desk or in a different viewport, these will
be changed appropriately so that the window is visible. WIN defaults
to the window context in the usual way if not specified.
[From scwm/window.c:1541]


(wiggle-window)
Animatedly window shade and then unshade the current window.
Just a toy--- perhaps could be useful to call attention to a window.
[From scheme/flux.scm:69]


(wildcard->regexp wildcard)
No documentation supplied.
[From scheme/wininfo.scm:112]


(wildcard-match? wildcard #&optional (w (get-window))
				 #&key (full-regexp #f)
				 (regexp-options `(,regexp/icase)))
No documentation supplied.
[From scheme/wininfo.scm:152]


(wildcard-matcher wildcard #&key (full-regexp #f)
				  (regexp-options `(,regexp/icase)))
Return a procedure that matches WILDCARD using the supplied options.
If FULL-REGEXP is #t, the WILDCARD is considered to be a regular-expression
instead of a shell-like wildcard.
[From scheme/wininfo.scm:129]


(window-border-width win)
No documentation supplied.
[From scheme/flux.scm:322]


(window-bottom window-name)
No documentation supplied.
[From scheme/flux.scm:243]


(window-class  #&optional win)
Return the window resource class of WIN.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:2554]


(window-client-machine-name #&optional (win (get-window)))
Return the name of the client machine on which WIN is running.
[From scheme/wininfo.scm:124]


(window-decor win)
Return WIN's decor.
[From scwm/decor.c:340]


(window-deletable?  #&optional win)
Return #t if WIN is able to be deleted, #f otherwise.
Scwm may call `delete-window' on WIN only if this procedure returns
#t. WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:1493]


(window-desk  #&optional win)
Return the desk that WIN is currently on. WIN defaults to the
window context in the usual way if not specified.
[From scwm/window.c:2519]


(window-frame-area win)
No documentation supplied.
[From scheme/winops.scm:105]


(window-frame-id  #&optional win)
Return the X window id for the outermost frame window of WIN.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:2462]


(window-frame-size  #&optional win)
Return the size of the frame of WIN.
The position is returned as a list of the width and the height in
pixels. WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:2391]


(window-geometry-string #&optional (w (get-window)))
No documentation supplied.
[From scheme/wininfo.scm:97]


(window-icon win)
Get the icon image being used for WIN.
Returns #f if none is being used. WIN defaults to the window context
in the usual way if not specified.
[From scwm/window.c:3309]


(window-icon-title  #&optional win)
Return the icon window title of WIN.
This is the title as requested by the application . WIN defaults to
the window context in the usual way if not specified.
[From scwm/window.c:2542]


(window-id  #&optional win)
Return the X window id for WIN.
This is the X id for the actual application window. WIN defaults to
the window context in the usual way if not specified.
[From scwm/window.c:2449]


(window-info #&optional (ww (get-window)))
Display information about a window in a message window.
[From scheme/flux.scm:150]


(window-mini-icon win)
Get the mini-icon image being used for WIN.
Returns #f if none is being used. WIN defaults to the window context
in the usual way if not specified.
[From scwm/window.c:3361]


((window-overlaps-window? #&optional (w (get-window))) 
		 #&optional (w2 (get-window)))
No documentation supplied.
[From scheme/wininfo.scm:79]


(window-position  #&optional win)
Return the position of WIN in pixels.
The position is returned as a list of the x coordinate and the y
coordinate in pixels. WIN defaults to the window context in the usual
way if not specified.
[From scwm/window.c:2351]


(window-property win prop)
Retrieve window property PROP of WIN.
PROP should be a symbol. #f will be returned if the property does not
exist (wether set by `set-window-property!' or otherwise). Soon, some
properties will have magical meanings, accessing particular fields in
the window structure. Also, a window-property-change-hook mechanism
will soon be implemented for notification of all window property
changes. This is not yet done. The window property primitives should
be considered in flux.
[From scwm/window.c:3561]


(window-resource  #&optional win)
Return the window resource instance of WIN. WIN defaults to
the window context in the usual way if not specified.
[From scwm/window.c:2567]


(window-shade  #&optional win animated?)
Cause WIN to become "window-shaded".
That is, to roll up into just a titlebar. By default, the change takes
place instantaneously. However, if the optional ANIMATED? argument is
true, the window will be animated as it rolls up, producing a pleasing
visual effect. WIN defaults to the window context in the usual way if
not specified.
[From scwm/window.c:1876]


(window-shade-animated w)
No documentation supplied.
[From scheme/winops.scm:52]


(window-shaded?  #&optional win)
Return #t if WIN is shaded.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:1995]


(window-size  #&optional win)
Return the size of the application window of WIN.
WIN defaults to the window context in the usual way if not specified.
The position is returned as a list of four numbers. The first two are
the width and the height in pixels, the third and fourth are the width
and height in resize units (e.g., characters for an xterm).
[From scwm/window.c:2410]


(window-size-hints win)
Return a list of the window size hints associated with WIN.
The list returned contains 4 cons pairs containing:
'((min-width . max-width) (min-height . max-height)
(width-inc . height-inc) (base-width . baseheight))
[From scwm/window.c:2247]


(window-style condition . args)
No documentation supplied.
[From scheme/style.scm:457]


(window-title  #&optional win)
Return the window title of WIN, as requested by the application.
WIN defaults to the window context in the usual way if not specified.
[From scwm/window.c:2531]


(window-title-height win)
No documentation supplied.
[From scheme/flux.scm:313]


(window-transient-for  #&optional win)
Return the window for which WIN is transient.
If WIN is transient, and the window it is transient for is
not the root window and is being managed by scwm, this returns the window
object of the window that WIN is transient for, otherwise return
#f. WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:1722]


(window-xproperty win name #&optional consume)
Get and maybe delete the property called NAME from WIN.
The property will be deleted upon getting (in an atomic operation)
if the boolean value CONSUME is #t
[From scwm/xproperty.c:177]


(window? obj)
Returns #t if OBJ is a window object, otherwise returns #f.
[From scwm/window.c:610]


(windows-overlap? w w2)
No documentation supplied.
[From scheme/wininfo.scm:72]


(winlist-hit #&optional (w (get-window)))
No documentation supplied.
[From scheme/winlist.scm:219]


(winlist-skip #&optional (w (get-window)))
No documentation supplied.
[From scheme/winlist.scm:222]


(winlist-skip? #&optional (w (get-window)))
No documentation supplied.
[From scheme/winlist.scm:225]


(write-all port . lst)
Write all arguments into the port. #t means `current-output-port'.
[From scheme/flux.scm:74]


(x- x)
Return the pixel coordinate that is X pixels left from the right display edge.
[From scheme/base.scm:43]


(X-display-information)
Return some information about the screen. In particular,
return a list of the horizontal resolution, the vertical resolution,
the number of planes on the current screen (i.e. the bit depth), the
bits per color supported by the hardware, the visual class (one of
"StaticGray", "GrayScale", "StaticColor", "PseudoColor", "DirectColor"
or "TrueColor") and a boolean indicating whether the display is color.
The resolutions mentioned above should in theory be pixels per
centimeter, rounded to the nearest integer. These parameters can be
used for various workarounds or conditional decisions in a scwmrc to
be shared among multiple machines.
[From scwm/miscprocs.c:540]


(X-pointer-mapping)
Return the mapping of physical->logical pointer buttons as a list.
The length of the returned list is the number of buttons available.  Each
element in the list is an integer.  E.g., '(1 2 3) is a normally mapped
3-button mouse, whereas '(3 2 1) is a 3-button mouse where the rightmost
physical button acts as logical button 1, and the leftmost acts as button 3.
[From scwm/binding.c:867]


(X-resource-get name #&optional xclass)
Get X resource specified by NAME and XCLASS from Xrm database.
Both NAME and XCLASS are strings, as is the returned value.  If
XCLASS is omitted, it defaults to the same string as NAME.
If there is no resource under the given key, #f is returned.
[From scwm/xrm.c:45]


(X-resource-put resource value)
Stores string VALUE as X resource RESOURCE (also a string).
Later, the value can be retrieved using `X-resource-get'.
[From scwm/xrm.c:20]


(X-synthetic-send-string str)
No documentation supplied.
[From scheme/flux.scm:225]


(X-version-information)
Return some information about the version of the running X server.
Return value is a list of the X protocol version, the X protocol
revision, the X server vendor, and the vendor release number.
[From scwm/miscprocs.c:520]


(xproperty->string prop)
Convert that data portion of xproperty object PROP to a string.
[From scwm/xproperty.c:229]


(xproperty? obj)
Return #t if OBJ is an xproperty object, otherwise #f.
[From scwm/xproperty.c:118]


(y- y)
Return the pixel coordinate that is Y pixels up from the bottom display edge.
[From scheme/base.scm:47]


