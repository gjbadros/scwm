(%x x)
- (app scwm base)
Return the number of pixels that is X percent of the display width.
[From scheme/base.scm:151]

(%x- x)
- (app scwm base)
Return the pixel coordinate X percent of the width away from the right edge.
[From scheme/base.scm:239]

(%x-permit-negative x)
- (app scwm fvwm-compat)
No documentation supplied.
[From scheme/fvwm-compat.scm:120]

(%y y)
- (app scwm base)
Return the number of pixels that is Y percent of the display height.
[From scheme/base.scm:155]

(%y- y)
- (app scwm base)
Return the pixel coordinate Y percent of the height away from the bottom edge.
[From scheme/base.scm:243]

(%y-permit-negative y)
- 
No documentation supplied.
[From scheme/fvwm-compat.scm:126]

(accumulate proc init l)
- (app scwm listops)
Repeatedly apply PROC to a current value and a member of L. 
The initial current value is INIT. The list is processed from left to
right. The final result is returned. Compare to `reduce'.
[From scheme/listops.scm:53]

(activate-ScwmBiff sb)
- (app scwm ScwmBiff)
Turn on the ScwmBiff notification service.
[From scheme/ScwmBiff.scm:101]

(add-boolean-both-option key th fh #&optional (cumulative? #f))
- (app scwm style-options)
No documentation supplied.
[From scheme/style-options.scm:54]

(add-boolean-hint-option key th fh #&optional (cumulative? #f))
- (app scwm style-options)
No documentation supplied.
[From scheme/style-options.scm:47]

(add-boolean-style-option key th fh #&optional (cumulative? #f))
- (app scwm style-options)
No documentation supplied.
[From scheme/style-options.scm:41]

(add-hook-once! hook proc)
- (app scwm base)
Add PROC to HOOK only if it does not contain PROC already.
[From scheme/base.scm:51]

(add-input-hook! port proc)
- Built-in Primitive
Add an input hook to run PROC on input from PORT.\n\
Whenever input becomes available on PORT, procedure PROC will be called\n\
with no arguments repeatedly until no unprocessed input remains on\n\
PORT. PORT must be open, it must be an input port, and it must be a\n\
file port (this includes pipes and sockets, but not string ports or\n\
soft ports). A handle suitable for passing to `remove-input-hook!' is\n\
returned.
[From src/callbacks.c:702]

(add-left-button button-face hook #&optional (immed-hook #f))
- (app scwm titlebar-buttons)
Add a left button to the current decor.
[From scheme/titlebar-buttons.scm:33]

(add-motion-handler! proc)
- Built-in Primitive
Call PROC on XMotionEvents.\n\
This can considerably slow Scwm down so use it only when\n\
necessary.  See `remove-motion-handler' and `reset-motion-handlers'.
[From src/events.c:2173]

(add-property-style-option key property #&optional 
					    (cumulative? #f))
- (app scwm style-options)
No documentation supplied.
[From scheme/style-options.scm:62]

(add-right-button button-face hook #&optional (immed-hook #f))
- 
Add a right button to the current decor.
[From scheme/titlebar-buttons.scm:43]

(add-timer-hook! msec proc)
- Built-in Primitive
Add a timer hook to call PROC once sometime after MSEC milliseconds.\n\
When at least MSEC milliseconds have passed, procedure PROC will be\n\
called with no arguments. A handle suitable for passing to\n\
`remove-timer-hook!' is returned.
[From src/callbacks.c:553]

(add-window-both-option key handler #&optional (cumulative? #f))
- (app scwm style-options)
No documentation supplied.
[From scheme/style-options.scm:50]

(add-window-hint-option key handler #&optional (cumulative? #f))
- (app scwm style-options)
No documentation supplied.
[From scheme/style-options.scm:44]

(add-window-style-option key handler #&optional 
					 (type 'normal) (cumulative? #f))
- (app scwm style-options)
No documentation supplied.
[From scheme/style-options.scm:32]

(align-viewport)
- (app scwm virtual)
Set the viewport position to the nearest multiple of the desk size.
[From scheme/virtual.scm:154]

(and-map proc first . rest)
- (app scwm listops)
Apply PROC repeatedly, returning the first false value.
PROC is applied to elements of FIRST and the lists comprising REST
much as `map' would do it. If proc never returns a false value, return
#t instead. If all the lists are empty, return #t.
[From scheme/listops.scm:110]

(animate-windows xforms #&optional move-pointer-too?)
- Primitive from (app scwm c-animation)
Animate multiple windows.
XFORMS is a list of transform operations where each xform operation
describes how a single window should move and resize by giving its
old and new configuration.  Each xfrom element of the XFORMS list
should look like:
(window frame? (start-width . start-height) (end-width . end-height) (start-x . start-y) (end-x . end-y) (set-end-x? . set-end-y?))
If MOVE-POINTER-TOO? is #t, then the X11 pointer will move in
conjunction with the first window in the XFORMS list;  defaults to #f.
[From modules/c-animation/c-animation.c:439]

(animated-deiconify #&optional (win (get-window)))
- (app scwm animated-iconify)
Deiconify WIN using a simple animation of a growing rectangle.
The rectangle grows outwards from the icon, if there is one.
[From scheme/animated-iconify.scm:65]

(animated-deiconify-to-viewport #&optional (win (get-window)))
- (app scwm animated-iconify)
Deiconify WIN with an animation to the same viewport position as it was iconified from.
[From scheme/animated-iconify.scm:77]

(animated-deiconify-to-vp-focus #&optional (win (get-window)))
- 
Deiconify WIN to the current viewport, and give it the focus.
[From scheme/animated-iconify.scm:110]

(animated-iconify #&optional (win (get-window)))
- (app scwm animated-iconify)
Iconify WIN using a simple animation of a shrinking rectangle.
The rectangle moves towards the icon's location, if there is one.
[From scheme/animated-iconify.scm:49]

(animated-move-to x y #&optional (win (get-window))
				  (move-pointer-too? #t))
- 
Move WIN to viewport coordinates X, Y with animation. 
If X or Y is #f, then do not change that coordinate during 
the move. At least one of X and Y must be a number. This 
moves the pointer with the window unless MOVE-POINTER-TOO? 
is #f.
[From scheme/animation.scm:46]

(animated-move-to-center #&optional (win (get-window)))
- 
Move WIN to the center of the viewport and update its gravity.
[From scheme/animated-edge-moves.scm:77]

(animated-move-to-e #&optional (win (get-window)))
- (app scwm animated-edge-moves)
Move WIN to the east edge and update its gravity.
[From scheme/animated-edge-moves.scm:53]

(animated-move-to-n #&optional (win (get-window)))
- (app scwm animated-edge-moves)
Move WIN to the north edge and update its gravity.
[From scheme/animated-edge-moves.scm:45]

(animated-move-to-ne #&optional (win (get-window)))
- (app scwm animated-edge-moves)
Move WIN to the northeast edge and update its gravity.
[From scheme/animated-edge-moves.scm:20]

(animated-move-to-nw #&optional (win (get-window)))
- (app scwm animated-edge-moves)
Move WIN to the northwest edge and update its gravity.
[From scheme/animated-edge-moves.scm:12]

(animated-move-to-s #&optional (win (get-window)))
- (app scwm animated-edge-moves)
Move WIN to the south edge and update its gravity.
[From scheme/animated-edge-moves.scm:61]

(animated-move-to-se #&optional (win (get-window)))
- (app scwm animated-edge-moves)
Move WIN to the southeast edge and update its gravity.
[From scheme/animated-edge-moves.scm:36]

(animated-move-to-sw #&optional (win (get-window)))
- (app scwm animated-edge-moves)
Move WIN to the southwest edge and update its gravity.
[From scheme/animated-edge-moves.scm:28]

(animated-move-to-w #&optional (win (get-window)))
- (app scwm animated-edge-moves)
Move WIN to the west edge and update its gravity.
[From scheme/animated-edge-moves.scm:69]

(animated-move-window x y #&optional win move-pointer-too?)
- Primitive from (app scwm c-animation)
Move WIN to virtual coordinates X, Y with animation.
If X or Y is #f, then do not change that coordinate during the move.
If MOVE-POINTER-TOO? is specified and true, move the mouse pointer by
the same amount as the window, animating the motion of the pointer
along with the window. WIN defaults to the window context in the usual
way if not specified.
[From modules/c-animation/c-animation.c:477]

(animated-resize-frame w h #&optional win x y move-pointer-too?)
- Primitive from (app scwm c-animation)
Resize the frame of WIN to size W, H (pixels) with animation.
WIN defaults to the window context in the usual way if not
specified.  If X and Y are given, they are a new virtual position for the northwest
corder of the window. If MOVE-POINTER-TOO? is specified and true, move the mouse pointer by
the same amount as the window, animating the motion of the pointer
along with the window.
[From modules/c-animation/c-animation.c:603]

(animated-resize-window w h #&optional win x y move-pointer-too?)
- Primitive from (app scwm c-animation)
Resize the client area of WIN to size W, H (pixels) with animation.
WIN defaults to the window context in the usual way if not
specified.  If X and Y are given, they are a new virtual position for the northwest
corder of the window. If MOVE-POINTER-TOO? is specified and true, move the mouse pointer by
the same amount as the window, animating the motion of the pointer
along with the window.
[From modules/c-animation/c-animation.c:588]

(animated-toggle-iconify #&optional (win (get-window)))
- (app scwm animated-iconify)
Iconify WIN if not iconified, or de-iconify WIN if it is iconified.
Uses animation, in either case.
[From scheme/animated-iconify.scm:100]

(animated-window-shade  #&optional win)
- Primitive from (app scwm c-animation)
Cause WIN to become "window-shaded".
That is, to roll up into just a titlebar.  The window will be animated
as it rolls up, producing a pleasing visual effect. WIN defaults to
the window context in the usual way if not specified.
[From modules/c-animation/c-animation.c:341]

(animated-window-unshade  #&optional win)
- Primitive from (app scwm c-animation)
Reverse the effect of `window-shade' on WIN.
The window will be animated as it rolls down, producing a pleasing
visual effect. WIN defaults to the window context in the usual way if
not specified. See also `window-unshade', `animated-window-shade'.
[From modules/c-animation/c-animation.c:400]

(any-id->window window-id)
- Built-in Primitive
Return the window object that contains the window with id WINDOW-ID.\n\
WINDOW-ID can be the X id of any child window in the application. If there is no\n\
such window object, return #f.
[From src/window.c:2822]

(append-fvwm2-module-config module-type . args)
- (app scwm fvwm-module)
No documentation supplied.
[From scheme/fvwm-module.scm:416]

(append-hook! hook proc)
- 
Add PROC to HOOK at the end of the list.
[From scheme/minimal.scm:131]

(append-hook-once! hook proc)
- (app scwm base)
Append PROC to HOOK only if it does not contain PROC already.
[From scheme/base.scm:56]

(append-map proc first . rest)
- (app scwm listops)
Do the same thing as map, but collect results with `append',  not `cons'.
In particular, PROC is applied in succession to each member of FIRST and
the corresponding members of REST if any, and is expected to return a
list. These lists are concatenated together with `append'. In effect,
this is a version of map that allows the mapping function to return
any number of elements to be inserted into the result list, including
possibly none.
[From scheme/listops.scm:73]

(apply-fancy-resize-cursors #&optional (win (get-window)))
- (app scwm cursor)
Use the fancy resize cursors for WIN.
[From scheme/cursor.scm:24]

(apply-style style win)
- (app scwm style)
No documentation supplied.
[From scheme/style.scm:128]

(apropos-internal-with-modules rgx)
- (app scwm reflection)
Return a list of accessible variable names and the modules they are defined in.
[From scheme/reflection.scm:138]

(ask-string prompt)
- (app scwm prefs-menu)
Ask for a string with PROMPT.
[From scheme/prefs-menu.scm:138]

(at-point-placement #&key (offset '(0 0))
			       (proportional-offset '(-0.5 -0.5))
			       (switch #t) (return #f))
- (app scwm placement)
Return a procedure that places a window at the pointer position.
If the keyword argument OFFSET is specified, it is interpreted as a
list of x and y offsets to add to the pointer position. If the keyword
argument PROPORTIONAL-OFFSET is specified, it is interpreted as a list
of numbers to multiply by the window's width and height, and is
treated as an extra offset.The defaults are (0 0) for OFFSET and (-0.5
-0.5) for PROPORTIONAL-OFFSET, with the result that by default the
window is centered at the mouse pointer position by the returned
procedure.

If SWITCH is true, the returned procedure will switch to the virtual
desk and viewport of its window argument before placing it. This is
the default. If RETURN is false, the returned procedure will switch
back to the previous desk and viewport after placing the window. The
default is false.

See also the related `place-at-point' procedure which directly places
a window at the pointer position.
[From scheme/placement.scm:130]

(at-virtual-offset-placement x y)
- (app scwm placement)
Return a procedure that takes a window and places it at virtual offset X, Y.
The procedure will act just like calling `move-window' on the
window with the same X and Y arguments.
[From scheme/placement.scm:89]

(at-vp-offset-placement x y)
- (app scwm placement)
Return a procedure that takes a window and places it at viewport offset X, Y.
The procedure will act just like calling `move-window-viewport-position' on the
window with the same X and Y arguments.
[From scheme/placement.scm:95]

(auto-accept-dialog-placement #&optional (delay 500))
- (app scwm placement)
Return a procedure that auto-accepts a dialog box window.
DELAY is the number of msec to delay before sending the "Return"
keystroke to accept the dialog.
[From scheme/placement.scm:155]

(background-system command)
- (app scwm base)
Run CMD using /bin/sh -c CMD and return the exit status.
The CMD is run synchronously, and Bourne-shell meta characters
are interpreted by /bin/sh.  E.g., to start CMD in the background,
use a trailing "&" character.  See also guile's `system', but note
that it may permit signals on the controlling tty to be seen
by children (observed on Linux, Free/NetBSD, but not on Solaris or HP/UX.
This may be a bug (not meeting POSIX.2 specifications).
Returns the child-pid, or #f if the fork fails.
[From scheme/base.scm:770]

(beep)
- Built-in Primitive
Ring the standard X bell.
[From src/miscprocs.c:285]

(bell)
- (app scwm base)
Ring the X11 bell (just calls `beep').
[From scheme/base.scm:698]

(binary number)
- 
Return the integer that corresponds to string NUMBER as a binary value.
[From scheme/number-convert.scm:62]

(binary-read length #&optional (port (current-input-port)))
- (app scwm bincomm)
Reads LENGTH bytes of binary data from PORT and return it as a string.
[From scheme/bincomm.scm:175]

(binary-read-long #&optional (port (current-input-port)))
- 
Reads a binary representation of a C long and return as a scheme number.
The value is read from PORT, or the current-input-port.
[From scheme/bincomm.scm:185]

(binary-write str #&optional (port (current-output-port)))
- (app scwm bincomm)
Writes STR as binary data to PORT.
[From scheme/bincomm.scm:170]

(bind-four-modifier-key-events 
		modkey1 modkey2 modkey3 modkey4
		proc-press proc-release)
- (app scwm modifier-key-bindings)
Bind PROC-PRESS and PROC-RELEASE to be invoked on a multi-modifier key event.
MODKEY1, MODKEY2, MODKEY3, MODKEY4 are the four modifiers that, when pressed at the same time,
will invoke PROC-PRESS.  When either is released, PROC-RELEASE is invoked.
[From scheme/modifier-key-bindings.scm:108]

(bind-key contexts key proc #&optional release-proc)
- Built-in Primitive
Bind the given KEY within the CONTEXTS to invoke PROC.\n\
Return value is #t if the binding was made successfully, #f otherwise\n\
(e.g., if unbound modifiers or an unknown keysym is used, the binding will fail).\n\
CONTEXTS is a list of event-contexts (e.g., '(left-button-1 frame-sides)) KEY is\n\
a string giving the key-specifier (e.g., M-Delete for Meta+Delete)\n\
PROC is a procedure that will be invoked (with no arguments) when the\n\
specified key is pressed in the specified context. The optional\n\
argument RELEASE-PROC, if specified, is a procedure that will be\n\
invoked when the key is released.  The contexts include:\n\
\n\
'window\n\
'title\n\
'icon\n\
'root\n\
'frame-corners\n\
'frame-sides\n\
'client-window\n\
'root-window\n\
'left-button-N  (N=1-5)\n\
'right-button-N (N=1-5)\n\
[From src/binding.c:1031]

(bind-keycode contexts keycode modifier-mask proc #&optional release-proc)
- Built-in Primitive
Bind the given KEYCODE within the CONTEXTS to invoke PROC.\n\
CONTEXTS is a list of event-contexts (e.g., '(button1 sidebar))\n\
KEYCODE is an X/11 key code, MODIFIER-MASK is the bitmask of modifiers,\n\
PROC is a procedure that will be invoked (with no arguments) when the \n\
specified key is pressed in the specified context. \n\
RELEASE-PROC is a procedure that will be invoked (with no arguments) when the\n\
specified key is released in the specified context, or #f or omitted if \n\
nothing should be done on key release.
[From src/binding.c:1107]

(bind-mouse contexts button proc #&optional immediate-proc)
- Built-in Primitive
Bind the given mouse BUTTON within the CONTEXTS to invoke PROC.\n\
CONTEXTS is a list of event-contexts (e.g., '(button1 sidebar))\n\
BUTTON is a string or integer giving the mouse button number\n\
PROC is a procedure that will be invoked (with no arguments) when the \n\
specified button is pressed in the specified context. See `bind-key'\n\
for a list of the contexts. If IMMEDIATE-PROC is given, it will be\n\
executed immediately on a button-click.  If IMMEDIATE-PROC returns\n\
#f, then PROC will still get executed after determining the mouse click\n\
type.
[From src/binding.c:1161]

(bind-three-modifier-key-events 
		modkey1 modkey2 modkey3
		proc-press proc-release)
- (app scwm modifier-key-bindings)
Bind PROC-PRESS and PROC-RELEASE to be invoked on a multi-modifier key event.
MODKEY1, MODKEY2, MODKEY3 are the three modifiers that, when pressed at the same time,
will invoke PROC-PRESS.  When either is released, PROC-RELEASE is invoked.
[From scheme/modifier-key-bindings.scm:62]

(bind-two-modifier-key-events
		modkey1 modkey2 
		proc-press proc-release)
- (app scwm modifier-key-bindings)
Bind PROC-PRESS and PROC-RELEASE to be invoked on a multi-modifier key event.
MODKEY1 and MODKEY2 are the two modifiers that, when pressed at the same time,
will invoke PROC-PRESS.  When either is released, PROC-RELEASE is invoked.
[From scheme/modifier-key-bindings.scm:23]

(bind-wheel-mouse-prior-next matching-proc)
- (app scwm flux)
No documentation supplied.
[From scheme/flux.scm:373]

(bool->string arg)
- (app scwm stringops)
Return the string "false" if ARG is #f, "true" otherwise.
[From scheme/stringops.scm:25]

(border-normal?  #&optional win)
- Built-in Primitive
Return #t if WIN has a normal border, #f if it has a plain border.\n\
WIN defaults to the window context in the\n\
usual way if not specified.  See `normal-border' and\n\
`plain-border'.
[From src/window.c:3295]

(border-style #&key (active '())  
			      (inactive '()) #&allow-other-keys #&rest rest)
- (app scwm face)
Set the border style in the current decor.
This function takes the keyword arguments #:hidden-handles, 
#:no-inset, and #:pixmap, with effects as described under the
`Face Flags' and `Face Specification Flags' concepts (except
that #:pixmap is always tiled).  These keyword arguments can
either be included in the main argument list, or lists of these
arguments can be used as the ACTIVE or INACTIVE arguments.
[From scheme/face.scm:69]

(button-item pixmap-file #&key (action noop) (tooltip #f))
- 
Create a button item for a ScwmButtons window.
[From scheme/ScwmButtons.scm:192]

(button-style button #&key mwm
			      (active-up '()) 
			      (active-down '()) 
			      (inactive '()) #&allow-other-keys #&rest rest)
- (app scwm face)
Set the button style for button number BUTTON in the current decor.
MWM sets the button's mwm flag (see `set-button-mwm-flag!'.
This function also takes the keyword arguments #:justify, #:relief,
#:vertical-justify, #:use-style-of, #:solid, #:gradient, #:h-gradient,
#:v-gradient, #:relief-pattern, #:vector, #:pixmap, and #:tiled-pixmap,
with effects as described under the `Face Flags' and `Face
Specification Flags' concepts (with the additions that #:tiled-pixmap
is an always-tiled pixmap, #:vector is a synonym for #:relief-pattern,
and #:h-gradient and #:v-gradient are horizontal and vertical
gradients).  These extra keyword arguments can either be included
in the main argument list, or lists of these arguments can be used
as the ACTIVE-UP, ACTIVE-DOWN, or INACTIVE arguments.
[From scheme/face.scm:104]

(cached-program-exists? program-name)
- 
Return #t if PROGRAM-NAME is in the cache of programs that exist.
Returns #f otherwise.  If `debug-program-cache' is true, a message will 
print to stdout on hits and misses.  You must call 
`initialize-programs-that-exist' before calling this function; otherwise,
it reverts to the (inefficient) implementation of `program-exists?'.
[From scheme/path-cache.scm:41]

(call-interactively thunk #&optional debug)
- Built-in Primitive
Invoke THUNK interactively.\n\
THUNK can be either a procedure or a symbol.\n\
If it is a symbol it is dereferenced.\n\
Write a debug message if DEBUG is #t.
[From src/callbacks.c:853]

(call-with-decor decor thunk)
- (app scwm decor)
Eval THUNK using DECOR as the current decor.
[From scheme/decor.scm:28]

(capturing?)
- Built-in Primitive
Returns #t when the windows are being captured.\n\
This happens at two times: during initial startup, or during a\n\
recapture operation. In either case, placement procedures should\n\
probably avoid interaction and perhaps avoid moving the window being\n\
placed at all.
[From src/miscprocs.c:149]

(cascade #&key (only ()) (except ()) 
			 (by-stacking #f) (by-focus #f)
			 (reverse #f)
			 (all-viewports #f) (desk (current-desk))
			 (ignore-default-exceptions #f)
			 (start-pos '(0 0)) (max-size (display-size))
			 (resize #f) (raise #t) 
			 (x-increment (meta-apply + window-title-height
						  window-frame-border-width))
			 (y-increment (meta-apply + window-title-height
						  window-frame-border-width)))
- 
Cascade the windows on the specified desk.
The DESK option, defaulting to the current desk, specifies which desk;
ALL-VIEWPORTS, when true indicates that the windows in all viewports
of this desk should be cascaded, otherwise only the current viewport
is cascaded. 

The options ONLY, EXCEPT, BY-STACKING, BY-FOCUS and REVERSE indicate
the windows to use and the order to use them in, as with
`list-windows'. However, unless IGNORE-DEFAULT-EXCEPTIONS is #t,
transient, maximized, sticky and iconified windows will be always be
excluded.

START-POS, MAX-SIZE, RESIZE, RAISE, X-INCREMENT and Y-INCREMENT
control the cascading options as for `cascade-windows'.
[From scheme/cascade.scm:98]

(cascade-windows 
		 windows #&key (start-pos '(0 0)) 
		 (max-size (display-size)) (resize 'shrink-only)
		 (raise 'restack-only)
		 (x-increment (meta-apply + window-title-height
					  window-frame-border-width))
		 (y-increment (meta-apply + window-title-height
					  window-frame-border-width)))
- (app scwm cascade)
Cascade WINDOWS according to several parameters.  
Cascading places the windows in a diagonal order starting at
START-POS, (0 0) by default. Each window's size is limited to
MAX-SIZE, by default the display size.

RESIZE may be #f, 'shrink-only or 'always, indicating that the windows
should never be resized, that they should be resized to the max-size
only if they are bigger, or that they should always be resized to the
max size. The default is 'shrink-only.

RAISE may be #f, #t, or 'restack-only, indicating that the windows
should not be moved in the stacking order; that they should be raised
on top of other windows and placed in the cascade order with the upper
left window lowest in the stacking order; or that they should be
restacked as for #t but not raised above other windows,
respectively. The default is 'restack-only.

X-INCREMENT may be an integer or a procedure that takes a window and
returns an integer, and which will be applied to a window to get the
horizontal offset for the next in the cascade order. The default is
the sum of the window's border width and title height.

Y-INCREMENT may be an integer or a procedure that takes a window and
returns an integer, and which will be applied to a window to get the
vertical offset for the next in the cascade order. The default is the
sum of the window's border width and title height.
[From scheme/cascade.scm:39]

(caught-error descriptor args)
- (app scwm base)
No documentation supplied.
[From scheme/base.scm:813]

(cgi-escapify-space uri)
- (app scwm netscape)
Replace spaces in URI with the + escape code.
This is useful since netscape's remote command invocation does a stupid
syntactic scan of the passed url and treats commas as argument command
separators, so the url gets chopped off at the first literal comma.
[From scheme/netscape.scm:99]

(change-ui-constraints-buttons #&key (vertical toggle-vertical) (pixmap toggle-pixmap))
- (app scwm ui-constraints-buttons)
No documentation supplied.
[From scheme/ui-constraints-buttons.scm:188]

(char-value ch)
- (app scwm number-convert)
Return the integer that corresponds to the Ascii code for CH.
[From scheme/number-convert.scm:28]

(choices-from-favorites fav)
- (app scwm preferences)
No documentation supplied.
[From scheme/preferences.scm:91]

(chop-newline str)
- (app scwm stringops)
Return STR up to but not including the first newline character.
[From scheme/stringops.scm:62]

(chop-string str)
- (app scwm flux-gtk)
No documentation supplied.
[From scheme/flux-gtk.scm:54]

(circulate-hit #&optional (win (get-window)))
- (app scwm winlist)
Include WIN among the windows in the circulate list.
This resets the 'circulate-skip property of WIN.  See also `circulate-skip'.
[From scheme/winlist.scm:92]

(circulate-hit-icon #&optional (win (get-window)))
- (app scwm winlist)
Include WIN's icon among the windows in the circulate list.
This resets the 'circulate-skip-icon property of WIN.  
See also `circulate-skip-icon'.
[From scheme/winlist.scm:107]

(circulate-skip #&optional (win (get-window)))
- (app scwm winlist)
Do not include WIN among the windows in the circulate list.
This sets the 'circulate-skip property of WIN.  See also `circulate-hit'.
[From scheme/winlist.scm:97]

(circulate-skip-icon #&optional (win (get-window)))
- (app scwm winlist)
Do not include WIN's icon among the windows in the circulate list.
This sets the 'circulate-skip-icon property of WIN.  
See also `circulate-hit-icon'.
[From scheme/winlist.scm:113]

(circulate-skip-icon? #&optional (win (get-window)))
- (app scwm winlist)
Return #t if WIN's icon is not among the windows in the circulate list.
Otherwise return #f.
[From scheme/winlist.scm:119]

(circulate-skip? #&optional (win (get-window)))
- (app scwm winlist)
Return #t if WIN is not among the windows in the circulate list.
Otherwise return #f.
[From scheme/winlist.scm:102]

(cl-set-solver-var s clv value)
- 
Set solver S's variable CLV to value VALUE.
[From scheme/simple-constraints.scm:149]

(class-match?? STRING TYPE CASE-SENSITIVE?)
- (app scwm wininfo)
Return a predicate that tests a window's resource class.  
When applied to a window, this predicate will return true if the
resource class matches STRING in the manner specified by the optional
argument TYPE, which may be 'exact, 'regexp, or 'wildcard. The
optional CASE-SENSITIVE argument determines whether the matching is
case-sensitive or not.
[From scheme/wininfo.scm:312]

(clear-color-cache-entry name)
- Built-in Primitive
Colors are cached by name. It is remotely possible that the\n\
meaning of a particular string as a color will change in your X\n\
server, if you try hard enough. For this unlikely eventuality,\n\
`clear-color-cache-entry' is provided - it removes the color\n\
associated with NAME from the color cache
[From src/color.c:272]

(clear-font-cache-entry name)
- Built-in Primitive
Fonts are cached by name. It is remotely possible that the\n\
meaning of a particular string as a fonts will change in your X\n\
server, if you try hard enough (perhaps if you add or remove font\n\
servers). For this unlikely eventuality, `clear-font-cache-entry' is\n\
provided - it removes the font associated with NAME from the font\n\
cache
[From src/font.c:306]

(clear-fvwm2-module-config module-type)
- (app scwm fvwm-module)
No documentation supplied.
[From scheme/fvwm-module.scm:420]

(clear-image-cache-entry name)
- Built-in Primitive
Images are cached by both name and full pathname. It is\n\
remotely possible that the file that should be used for a particular\n\
name will change, for example if you alter the image file or change\n\
your image path. For this unlikely eventuality,\n\
`clear-image-cache-entry' is provided - it removes the image\n\
associated with NAME from the image cache
[From src/image.c:633]

(clear-window-style)
- (app scwm style)
No documentation supplied.
[From scheme/style.scm:61]

(clever-place-window win)
- Built-in Primitive
Places WIN using fvwm2's "ReallySmart" algorithm.\n\
The placement is just as if being placed by fvwm2's SmartPlacement,\n\
as if SmartPlacementIsReallySmart were in effect. That is, it\n\
tries to place the window so as to minimize its area of\n\
overlap with other windows. Several parameters give different\n\
weight to various kinds of windows, but they are not tunable\n\
at runtime currently. If it fails to place the window, it\n\
returns #f; otherwise it returns #t.\n\
\n\
This is called as part of `default-placement-proc'.  It could also be\n\
used in user-defined placement procedures (see \n\
`set-window-placement-proc!').
[From src/placement.c:495]

(click-delay)
- Built-in Primitive
Returns the delay used in identifying mouse clicks and drags, in milliseconds. \n\
See also `set-click-delay!'
[From src/miscprocs.c:191]

(click-to-focus-passes-click?)
- Built-in Primitive
Returns #t iff a click-to-focus window is sent the click, else #f.
[From src/miscprocs.c:340]

(click-to-focus-raises?)
- Built-in Primitive
Returns #t iff a click-to-focus window gets raised on focus, else #f.
[From src/miscprocs.c:367]

(client-hostname-match?? STRING TYPE CASE-SENSITIVE?)
- (app scwm wininfo)
Return a predicate that tests a window's client hostname.  
When applied to a window, this predicate will return true if the
client hostname matches STRING in the manner specified by the optional
argument TYPE, which may be 'exact, 'regexp, or 'wildcard. The
optional CASE-SENSITIVE argument determines whether the matching is
case-sensitive or not.
[From scheme/wininfo.scm:339]

(clist-find clist cols pred)
- (app scwm prompt-binding)
Return the row number of the first row in CLIST that PRED answers #t for.
PRED is called with arguments that are strings of the first COLS columns of successive
rows of CLIST. Returns -1 if PRED never evaluates to #t.
[From scheme/prompt-binding.scm:50]

(clist-set-row-text clist row cols)
- (app scwm prompt-binding)
Set the text of ROW of CLIST to COLS.
COLS is a list of strings.
[From scheme/prompt-binding.scm:68]

(clone-resized-image image width height #&optional bgcolor)
- Primitive from (app scwm background)
Makes a new image from IMAGE of the given WIDTH and HEIGHT.
It does not scale IMAGE.  If the resized image is smaller than the
original, it is cropped; if larger, the extra space in the new image
is filled with BGCOLOR. See also `clone-scaled-image'
[From modules/background/background.c:76]

(clone-scaled-image image width height)
- Built-in Primitive
Returns a copy of IMAGE scaled to have dimensions WIDTH by HEIGHT. \n\
See also `clone-resized-image' from the background module.
[From src/image.c:683]

(close-all-xlogo-windows)
- (app scwm flux)
Close each window with class == XLogo.
Greg uses XLogo windows as a sample window, so this
is useful for clearing the xlogos away when there get to
be more than desired.
[From scheme/flux.scm:268]

(close-ScwmBiff sb)
- (app scwm ScwmBiff)
Close the ScwmBiff notification window.
[From scheme/ScwmBiff.scm:97]

(close-ScwmButtons sb)
- (app scwm ScwmButtons)
Close the ScwmButtons window of SB.
SB should be a handle returned from `run-ScwmButtons'.
[From scheme/ScwmButtons.scm:187]

(close-ScwmClock sc)
- (app scwm ScwmClock)
Close the ScwmClock with handle SC.
[From scheme/ScwmClock.scm:75]

(close-ScwmDeskButtons sdb)
- 
Close a ScwmDeskButtons object that was returned from `run-ScwmDeskButtons'.
[From scheme/ScwmDeskButtons.scm:67]

(close-ui-constraints-buttons)
- 
No documentation supplied.
[From scheme/ui-constraints-buttons.scm:201]

(close-window #&optional (win (get-window #t #t #t)))
- (app scwm winops)
Close WIN either by deleting it or destroying it.
WIN is only destroyed if it is not deleteable.
[From scheme/winops.scm:54]

(cncat list)
- (app scwm ui-constraints-composition)
No documentation supplied.
[From scheme/ui-constraints-composition.scm:159]

(color->string color)
- (app scwm stringops)
Convert scwm color object COLOR into an X11 name of that color.
The resulting string can, e.g., be used in command lines for executing
other applications.
[From scheme/stringops.scm:29]

(color-properties color)
- Built-in Primitive
Return an association list giving some properties of COLOR.\n\
Currently defined properties are 'name, the string name of the\n\
color, and 'pixel, the X pixel value it uses.
[From src/color.c:122]

(color-property color key)
- (app scwm base)
Return the KEY property of COLOR.
See `color-properties' for a list of the keys.
[From scheme/base.scm:604]

(color? obj)
- Built-in Primitive
Returns #t if OBJ is a color object, otherwise #f.
[From src/color.c:110]

(colormap-focus)
- Built-in Primitive
Return the colormap focus policy, as set by `set-colormap-focus!'. \n\
The value can be either be 'mouse, indicating that the window under\n\
the mouse pointer will always colormap installed, or 'focus to\n\
indicate that the window with the input focus should also get the\n\
colormap focus.
[From src/miscprocs.c:225]

(config-request-animate win icon? x y width height)
- (app scwm flux)
A procedure for `X-ConfigureRequest-hook' to do window configuration animatedly.
Use `add-hook!' to attach this to `X-ConfigureRequest-hook'.
[From scheme/flux.scm:446]

(constrained-window-in-focus? ui-constraint)
- (app scwm ui-constraints)
Returns #t if one of the windows in the constraint is in focus.
Returns #f otherwise or if UI-CONSTRAINT is not a ui-constraint.
[From scheme/ui-constraints.scm:547]

(constraint-satisfied? ui-constraint)
- (app scwm ui-constraints)
Returns the status of whether a UI-CONSTRAINT is satisfied.
errors if UI-CONSTRAINT is not an ui-constraint.
[From scheme/ui-constraints.scm:525]

(containing-aligned-viewport pos)
- (app scwm virtual)
Compute the viewport-position of the viewport that contains POS.
POS is a list of x and y virtual coordinates in that order. The
viewport coordinates returned will be in the same format and will be a
integral multiples of the desk size. If POS is not contained in any
valid viewport, for instance if it includes coordinates greater than
zero or greater than the desk size times the display size, the nearest
viewport will be returned instead.
[From scheme/virtual.scm:34]

(context->brief-context context)
- (app scwm reflection)
No documentation supplied.
[From scheme/reflection.scm:219]

(context->string context)
- (app scwm reflection)
No documentation supplied.
[From scheme/reflection.scm:224]

(copy-menu-look original-menu-look name #&optional extra)
- Built-in Primitive
Copy menu look ORIGINAL-MENU-LOOK with a new NAME and optional EXTRA.\n\
If EXTRA is not given, the EXTRA information from the original menu is\n\
used. The form and purpose of the EXTRA information varies with the\n\
menu look, and is documented with the original menu looks; currently,\n\
only the Xpm menu look uses the EXTRA information.
[From src/menulook.c:93]

(copy-window-configuration configuration #&optional (win (get-window)))
- (app scwm window-configuration)
Apply a saved state CONFIGURATION to window WIN.
[From scheme/window-configuration.scm:51]

(copy-window-title-to-cut-buffer #&optional (window (get-window)))
- (app scwm xprop-extras)
Set X cut buffer to be a string that is the title of WINDOW.
[From scheme/xprop-extras.scm:30]

(corba-evaluator-ior)
- Primitive from (app scwm corba)
Returns the "IOR" string for the scwm-scheme-evaluator servant.
[From modules/corba/scwmcorba.c:114]

(create-pixmap-cursor image #&optional fg-color bg-color x-hotspot y-hotspot)
- Built-in Primitive
Create and return a new cursor object from the pixmap image.\n\
IMAGE specifies the look of the cursor that will be returned.\n\
FG-COLOR and BG-COLOR specify the foreground and background colors\n\
respectively.  X-HOTSPOT, Y-HOTSPOT give the x and y offset for the\n\
cursor's hot spot (from the top-left of the cursor).
[From src/cursor.c:269]

(current-decor)
- Built-in Primitive
Return the current decor.
[From src/decor.c:259]

(current-desk)
- Built-in Primitive
Returns the integer identifying the current desk.
[From src/deskpage.c:81]

(current-viewport-offset-xx)
- (app scwm virtual)
Return the current viewport horizontal offset as a multiple of the display width.
The returned value will be a non-negative real number.
[From scheme/virtual.scm:67]

(current-viewport-offset-yy)
- (app scwm virtual)
Return the current viewport vertical offset as a multiple of the display height.
The returned value will be a non-negative real number.
[From scheme/virtual.scm:72]

(deactivate-ScwmBiff sb)
- 
Make ScwmBiff no longer notify, but leave visible.
[From scheme/ScwmBiff.scm:105]

(debug-clist-select clist-name row col event)
- (app scwm prompt-binding)
No documentation supplied.
[From scheme/prompt-binding.scm:174]

(decrement-in-range v low)
- (app scwm undo)
Return v-1 but no less than low.
[From scheme/undo.scm:48]

(decrement-undo-index)
- (app scwm undo)
Decrement the undo-index.
[From scheme/undo.scm:53]

(default-decor)
- Built-in Primitive
Return the default decor.
[From src/decor.c:230]

(default-move-opaquely? win)
- (app scwm winops)
Return #t if WIN has area <= *opaque-move-percent* of the screen, else #f.
If *opaque-move-percent* is a boolean, not a number, just return it.
[From scheme/winops.scm:217]

(default-placement-proc win)
- Built-in Primitive
Use various flags to call an appropriate placement function.\n\
This is the default placement procedure for non-transient windows. It\n\
tries `smart-place-window', `clever-place-window',\n\
`random-place-window', or `interactive-move' (to achieve interactive\n\
placement) on WIN depending on several style flags. (See\n\
`set-smart-placement-is-really-smart!', `set-smart-placement!',\n\
and `set-random-placement!'.) However, if one of the following \n\
factors holds, the window will instead be placed exactly as \n\
requested by the program: the position was specified by the user, \n\
the position was specified by the program and #:no-PPosition-hint \n\
is not set, or the window starts iconic.
[From src/placement.c:571]

(default-resize-opaquely? win)
- (app scwm winops)
Return #t if WIN has area <= *opaque-resize-percent* of the screen, else #f.
If *opaque-resize-percent* is a boolean, not a number, just return it.
[From scheme/winops.scm:208]

(default-transient-placement-proc win)
- Built-in Primitive
This is the default placement procedure for transient windows.\n\
It simply leaves the window WIN in place, exactly as requested.
[From src/placement.c:647]

(define-scwm-group-proc sym name #&key (docstring #f) (icon #f) (widget #f))
- (app scwm defoption)
Helper procedure for `define-scwm-group'-- use that instead.
[From scheme/defoption.scm:76]

(define-scwm-option-proc var sym docstring default #&key
		  (type #f)
		  (name #f)
		  (permit-disable #f)
		  (range #f)
		  (favorites #f)
		  (group #f)
		  (layout-hint #f)
		  (setter #f)
		  (getter #f))
- (app scwm defoption)
Helper procedure for `define-scwm-option'.
See `define-scwm-option'.
[From scheme/defoption.scm:156]

(deiconify-group #&optional (group (get-window)) x y)
- (app scwm group)
Deiconify all members of GROUP.
[From scheme/group.scm:147]

(deiconify-group-or-window #&optional (win (get-window)) x y)
- (app scwm group)
Deiconify WIN, and perhaps all members of its group.
If WIN's icon was the result of an `iconify-group', all members of the group
are deiconified; otherwise, only WIN is affected.
[From scheme/group.scm:155]

(deiconify-to-current-viewport #&optional (win (get-window)))
- (app scwm virtual)
De-iconify WIN and make it visible in the current viewport.
[From scheme/virtual.scm:136]

(deiconify-window  #&optional win x y)
- Built-in Primitive
Deiconify WIN.\n\
Hides its icon, and shows its regular window.\n\
WIN defaults to the window context in the usual way if not\n\
specified.\n\
If X and Y are given, then move WIN to virtual position (X . Y)\n\
before de-iconifying.  If X is specified, Y must be specified, too.\n\
These arguments are useful since `move-window' and `move-to' will\n\
refer to the icon window (not the frame window) if a window is iconified.\n\
Without being able to specify a position on de-iconification, the window\n\
cannot, e.g., cleanly be brought back onto the current viewport.
[From src/window.c:2076]

(delete-all-constraints)
- (app scwm ui-constraints)
Delete all constraints in the global instance list.
[From scheme/ui-constraints.scm:676]

(delete-duplicates l)
- (app scwm listops)
Return a list that has the elements of L with duplicates omitted.
The first instance of any alement that appears more than once is retained,
all other instances are removed.
[From scheme/listops.scm:215]

(delete-inferred-ui-constraints-involving-window! win)
- (app scwm ui-constraints)
Delete all the ui-constraint objects that involve WIN.
This removes the constraints from the global-constraint-instance-list.
[From scheme/ui-constraints.scm:580]

(delete-multiple-windows-interactively)
- (app scwm flux)
Delete multiple windows as they are interactively clicked on.
[From scheme/flux.scm:348]

(delete-ui-constraint! ui-constraint)
- (app scwm ui-constraints)
Removes the UI-CONSTRAINT permanently.
SIDE-EFFECT: removes instance object from the global list
[From scheme/ui-constraints.scm:363]

(delete-ui-constraint-class! ui-constraint-class)
- (app scwm ui-constraints)
Removes UI-CONSTRAINT-CLASS from the global class list.
SIDE-EFFECT: removes class object from the global class list.
[From scheme/ui-constraints.scm:131]

(delete-ui-constraints-involving-window! win)
- (app scwm ui-constraints)
Delete all the ui-constraint objects that involve WIN.
This removes the constraints from the global-constraint-instance-list.
[From scheme/ui-constraints.scm:575]

(delete-window  #&optional win)
- Built-in Primitive
Request that WIN remove itself from the display.\n\
This is the friendly way of closing a window, but it will not work if\n\
the application does not cooperate. WIN defaults to the window context\n\
in the usual way if not specified.
[From src/window.c:1733]

(delta-position xy-list dx dy)
- (app scwm base)
Return a new coordinate list that is DX,DY offset from XY-LIST.
E.g., if XY-LIST is (2 10) and DX is 5, DY is 7, returns (7 17).
[From scheme/base.scm:345]

(describe-event)
- (app scwm describe)
Display a message giving the bindings of the next event, key or mouse.
[From scheme/describe.scm:27]

(describe-key)
- (app scwm describe)
Display a message giving the bindings of the next key event.
[From scheme/describe.scm:35]

(describe-mouse)
- 
Display a message giving the bindings of the next mouse event.
[From scheme/describe.scm:42]

(desk-background desk #&key
				 (reset #f) 
				 (color #f) 
				 (image #f)
				 (image-style 'centered))
- (app scwm desk-background)
Set the background to use on desk DESK.
RESET determines whether to reset the background to the standard X 
crosshatch before enacting any other settings.
COLOR is a background color to set, either a color name or a color object.
IMAGE is a background image, either an image name or an image object.
IMAGE-STYLE is either 'tiled or 'centered.
The default may be set by setting the background for DESK #t.
[From scheme/desk-background.scm:25]

(desk-size)
- Built-in Primitive
Returns the size of the current desk.\n\
The returned value is in units of the physical screen size, as a list\n\
of the width and the height.
[From src/deskpage.c:327]

(destroy-window  #&optional win)
- Built-in Primitive
Forcibly remove WIN from the screen.\n\
This will kill the application without giving it a chance to save its\n\
state or do any other shutdown, but is guaranteed to work. WIN\n\
defaults to the window context in the usual way if not specified.
[From src/window.c:1758]

(dir-focus dir #&optional (win (window-with-pointer)))
- (app scwm dir-focus)
Move focus to the closest window in direction DIR.
DIR must be one of the symbols 'north, 'south, 'east, or 'west.
[From scheme/dir-focus.scm:50]

(dir-focus-east)
- 
Switch focus to the window to the east.
[From scheme/dir-focus.scm:86]

(dir-focus-north)
- (app scwm dir-focus)
Switch focus to the window to the north.
[From scheme/dir-focus.scm:81]

(dir-focus-south)
- (app scwm dir-focus)
Switch focus to the window to the south.
[From scheme/dir-focus.scm:76]

(dir-focus-west)
- (app scwm dir-focus)
Switch focus to the window to the west.
[From scheme/dir-focus.scm:71]

(disable-all-constraints)
- (app scwm ui-constraints)
Disable all constraints in the global instance list.
[From scheme/ui-constraints.scm:665]

(disable-autosave-netscape-dialog)
- (app scwm netscape)
Disable the netscape autosaving "Save as..." dialog.
[From scheme/netscape.scm:166]

(disable-gnome-hints)
- (app scwm gnome-hints)
Disable support for GNOME hints.
GNOME hint support allows for better integration with the GNOME
desktop environment, including support for the GNOME panel and 
pager applet. Reverses the effect of `enable-gnome-hints'.
[From scheme/gnome-hints.scm:540]

(disable-ui-constraint ui-constraint)
- (app scwm ui-constraints)
Disables the constraint in the constraint solver
errors if UI-CONSTRAINT is not a ui-constraint
returns the constraint
[From scheme/ui-constraints.scm:505]

(display-message-briefly msg #&optional (sec-timeout 3))
- (app scwm message-window)
Display MSG in the message window for SEC-TIMEOUT seconds.
See `display-message' for details about MSG.
[From scheme/message-window.scm:276]

(display-size)
- Built-in Primitive
Returns the size of the physical screen in pixels.\n\
The return value is list of the width and the height. The\n\
width is the `car', the height is the `cadr' of the returned list. \n\
See also the variables "display-width" and "display-height".
[From src/deskpage.c:341]

(documentation func #&optional (port (current-output-port)))
- (app scwm doc)
Print the documentation for the string or symbol.
Works by searching through the files listed in `doc-files'.
Returns #t if any documentation was found, #f otherwise.
[From scheme/doc.scm:25]

(done-startup?)
- Built-in Primitive
Return #t iff Scwm is fully initialized, else #f.\n\
Windows must all be captured and the `startup-hook' must have\n\
already run for this to return #t.
[From src/miscprocs.c:646]

(draw-all-constraints #&key (draw-disabled #t))
- (app scwm ui-constraints)
Draw all constraints in the global instance list.
[From scheme/ui-constraints.scm:651]

(draw-constraint ui-constraint)
- (app scwm ui-constraints)
Draw the UI-CONSTRAINT.  error if UI-CONSTRAINT is not
an ui-constraint.
[From scheme/ui-constraints.scm:607]

(draw-constraints-of-window win #&key (draw-disabled #t))
- (app scwm ui-constraints)
Draw all constraints associated with WIN.
If WIN is not specified, the user is prompted to select a window.
[From scheme/ui-constraints.scm:635]

(draw-line mx my endx endy)
- (app scwm smart-push)
No documentation supplied.
[From scheme/smart-push2.scm:59]

(draw-overlay-plane)
- Primitive from (app scwm overlay-plane)
Draw a box in the overlay plane.
This is just for demonstration and testing purposes for now.
[From modules/overlay-plane/overlay-plane.c:100]

(dummy-prompt-hbox prompt initval)
- (app scwm preferences)
Create and return a dummy-prompting hbox and entry.
PROMPT is the prompt, and INITVAL is the initial string.
The returned value is a list: (hbox getter entry).
See also `prompt-string'.
[From scheme/preferences.scm:137]

(edge-move-threshold)
- Built-in Primitive
Return the edge move threshold as set by `set-edge-move-threshold!'.
[From src/deskpage.c:283]

(edge-scroll-delay)
- Built-in Primitive
Return the edge scroll delay (in ms) as set by `set-edge-scroll-delay!'.
[From src/deskpage.c:255]

(edge-x-scroll)
- Built-in Primitive
Return the horizontal edge scroll increment as set by `set-edge-x-scroll!'.
[From src/deskpage.c:147]

(edge-x-wrap)
- Built-in Primitive
Return the current horizonatal edge wrap setting as set by `set-edge-x-wrap!'.
[From src/deskpage.c:200]

(edge-y-scroll)
- Built-in Primitive
Return the vertical edge scroll increment as set by `set-edge-y-scroll!'.
[From src/deskpage.c:175]

(edge-y-wrap)
- Built-in Primitive
Return the current vertical edge wrap setting as set by `set-edge-y-wrap!'.
[From src/deskpage.c:225]

(edges->nonant horiz vert)
- (app scwm snap-constraints)
Return a nonant number from a list of edges that are involved.
HORIZ can be 'left, 'right. or 'none (or #f).
VERT can be 'top, 'bottom, or 'none (or #f).
[From scheme/snap-constraints.scm:143]

(elapsed-time)
- Built-in Primitive
Return the elapsed time in milliseconds since O.S. has been up.
[From src/miscprocs.c:431]

(enable-all-constraints)
- (app scwm ui-constraints)
Enable all constraints in the global instance list.
[From scheme/ui-constraints.scm:671]

(enable-autosave-netscape-dialog)
- (app scwm netscape)
Enable the netscape autosaving "Save as..." dialog.
[From scheme/netscape.scm:161]

(enable-dynamic-netscape-actions)
- (app scwm netscape)
Enable the netscape download-closed action.
See `netscape-download-closed-action'.
[From scheme/netscape.scm:171]

(enable-gnome-hints)
- (app scwm gnome-hints)
Enable support for GNOME hints.
GNOME hint support allows for better integration with the GNOME
desktop environment, including support for the GNOME panel and 
pager applet. See also `disable-gnome-hints'.
[From scheme/gnome-hints.scm:505]

(enable-image-path-suggestor)
- 
Turn on the image path suggestor.
This can substantially slow down loading of a .scwmrc if there
are lots of missing images.
[From scheme/image-path-suggestor.scm:15]

(enable-ui-constraint ui-constraint)
- (app scwm ui-constraints)
Enables the constraint in the constraint solver.
errors if UI-CONSTRAINT is not a ui-constraint.
returns the constraint.
[From scheme/ui-constraints.scm:484]

(enclosing-rectangle wins)
- 
Return the smallest rectangle that encloses the windows WINS.
Return value's car is the top left of the rectangle, cdr is
the bottom right.
That is, the returned list is: ((nw-x nw-y) se-x se-y).
[From scheme/rectangle.scm:31]

(end-constraints)
- (app scwm constraints)
Terminate using the constraint solver.  
Can restart with a fresh solver by using `start-constraints'.
[From scheme/constraints.scm:43]

(end-highlighting-current-window 
		 #&optional (win current-highlighted-window))
- (app scwm highlight-current-window)
Remove the hook procedures that make the window with mouse be highlighted.
See also `start-highlighting-current-window'.
[From scheme/highlight-current-window.scm:60]

(end-highlighting-selected-window)
- (app scwm highlight-current-window)
Stop highlighting the current window during window selections.
[From scheme/highlight-current-window.scm:45]

(esd-reconnect  #&optional host)
- Primitive from (app scwm esdsound)
Connect to the ESound daemon on the machine named HOST.
If HOST is not set, the $ESPEAKER environmental variable will be used. If this
is unset too, localhost is contacted.
The esdsound module normally connects at startup. This function is useful
if the connection was lost, esd was not running at startup, or its location
unknown.
[From modules/esdsound/sound.c:119]

(eval-after-load module proc)
- 
Run PROC after MODULE is loaded.
Run PROC immediately if MODULE has already been loaded.
[From scheme/minimal.scm:158]

(eval-fvwm-command command #&optional (fmod #f) 
				   (window #f))
- 
Evaluate an fvwm2 command.
Implemented for compatibility with fvwm2 modules, which can send
commands back to the window manager for evaluation.  Not all fvwm2
commands are implemented; see the end of fvwm-eval.scm for a list of
working commands.
[From scheme/fvwm-eval.scm:546]

(exe command)
- (app scwm base)
Return a procedure that, when invoked, executes COMMAND in the background.
[From scheme/base.scm:613]

(exe-on-selection command #&optional (selection "PRIMARY"))
- (app scwm std-menus)
Return a procedure that runs COMMAND in the background on the X selection.
If there is no selection, then uses the `X-cut-buffer-string'.  SELECTION
default to "PRIMARY".
[From scheme/std-menus.scm:48]

(execute command)
- (app scwm base)
Execute COMMAND in the background.
See also `execute-with-pidprop' if you want to know the
process id of COMMAND and want to use `window-id' to be
able to map back from the windows the process creates
to the process id.
[From scheme/base.scm:755]

(execute-on-selection command #&optional (selection "PRIMARY"))
- (app scwm std-menus)
Run COMMAND in the background, with arguments supplied by the X selection.
If there is no selection, then uses the `X-cut-buffer-string'.  SELECTION
default to "PRIMARY".
[From scheme/std-menus.scm:37]

(execute-with-pidprop command)
- 
Execute COMMAND in the background and permit use of `window-pid' on its windows.
Returns the PID of COMMAND.
[From scheme/file.scm:121]

(extreme pred lst)
- (app scwm flux)
Find extreme value e of PRED in LST.
If PRED defines a semi-ordering, `(PRED e x)' will hold for all members x
of LST not equal to e. E.g. `(extreme < ...)' returns the lowest number.
[From scheme/flux.scm:300]

(filename-is-complete? fname)
- (app scwm file)
Return true if FNAME is a fully qualified pathname.
This is considered to be the case if the string FNAME starts with "/",
"./" or "../", following the convention of many Unix programs.
[From scheme/file.scm:34]

(filter pred l)
- (app scwm listops)
Return a list of those elements of L for which PRED is true.
The elements appear in the result list in the same order in which they
appeared in L.
[From scheme/listops.scm:84]

(filter-map proc first . rest)
- (app scwm listops)
Process FIRST and the lists comprising REST as `map' would.
However, do not include any false returns from PROC in the result
list.
[From scheme/listops.scm:192]

(filter-only-except l only except)
- (app scwm winlist)
Return a filtered list of the elements from L.
The returned list will contain only elements from L
that have the predicate ONLY accepts but EXCEPT
does not accept.
[From scheme/winlist.scm:38]

(find-file-in-path fname path)
- (app scwm file)
Search for file named FNAME in PATH.
FNAME is a string specifying a file; if it is a fully qualified filename,
as indicated by `filename-is-complete?', it is checked for as is. Otherwise,
each element of the list PATH is used as a directory name to check for the
file. If the file is found, the full pathname to it is returned; if not,
#f is returned.
[From scheme/file.scm:48]

(find-window-by pred)
- (app scwm wininfo)
Return a window satisfying predicate PRED.
If there are multiple such windows, an unspecified one of them
will be returned.
[From scheme/wininfo.scm:427]

(find-window-by-class-resource class resource)
- 
Return a window by its CLASS and RESOURCE names (as strings).
If there are multiple such windows, an unspecified one of them
will be returned. See also `find-window-by', `class-match??' 
and `title-match??'
[From scheme/wininfo.scm:442]

(find-window-by-name window-name)
- (app scwm wininfo)
Return a window with name WINDOW-NAME.
If there are multiple such windows, an unspecified one of them
will be returned.  See also `find-window-by' and `title-match??'.
[From scheme/wininfo.scm:436]

(first-line-output-of-system-cmd cmd)
- (app scwm file)
Return the first line of output of command shell execution of CMD.
CMD is run synchronously and its output is piped into the return value
of this function, as a string.  See also `output-of-system-cmd'
if you want to read all of the output of CMD.
[From scheme/file.scm:111]

(flash-window #&optional (win (get-window)) #&key
			      (color "red")
			      (unflash-delay .5)
			      (continually #f))
- (app scwm flash-window)
Flash WIN's titlebar and boundary color to COLOR for UNFLASH-DELAY seconds.
UNFLASH-DELAY may be #f to not automatically revert back to the original
color.  See `unflash-window'.
[From scheme/flash-window.scm:18]

(flash-window-on #&optional (win (get-window))
				 (color "red"))
- (app scwm flash-window)
Flash WIN's titlebar and boundary color to COLOR indefinitely.
Returns the window changed.  Use `unflash-window' to rever the
window to its normal colors.
[From scheme/flash-window.scm:9]

(flatten list-of-lists)
- (app scwm listops)
Return LIST-OF-LISTS as a single flat list.
[From scheme/listops.scm:246]

(float->integer x)
- (app scwm flux)
No documentation supplied.
[From scheme/flux.scm:413]

(focus-change-warp-pointer #&optional (win (get-window)))
- (app scwm winops)
Deiconify, focus, raise, and warp-to WIN.
This is initially the default behaviour when WIN is selected from the window list.
[From scheme/winops.scm:432]

(focus-last-mapped-window)
- 
Focus and warp to the window that was mapped most recently.
See also `last-mapped-window'.
[From scheme/last-mapped-window.scm:24]

(focus-or-toggle-raise #&optional (win (window-with-pointer)))
- (app scwm winops)
Focus on WIN if it does not have the focus, else toggle-raise WIN.
[From scheme/winops.scm:62]

(focus-to-register #&optional (register (get-register-name)))
- (app scwm register)
Save the currently-focused window to REGISTER.
[From scheme/register.scm:56]

(focus-window  #&optional win)
- Built-in Primitive
Give WIN the keyboard input focus.\n\
This will typically result in drawing WIN's frame in a special style\n\
as well. WIN defaults to the window context in the usual way if not\n\
specified. Note that WIN is not raised by giving it the focus;  see\n\
`raise-window' if that is your intent.
[From src/window.c:1818]

(focus-window-with-pointer)
- (app scwm flux)
Set the focus to be the window containing the pointer.
[From scheme/flux.scm:456]

(focussable-window?  #&optional win)
- Built-in Primitive
Return #t iff WIN may receive the keyboard focus.\n\
This will return #f, e.g., if WIN's focus style is 'none, or\n\
its X11 hints do not permit it to receive the focus.
[From src/focus.c:79]

(fold-menu-list
		ml #&optional (max-lines (optget *menu-max-fold-lines*)))
- (app scwm menus-extras)
Split ML into chained menus of no more than MAX-LINES items.
ML is a list of menuitem objects. MAX-LINES is a number, which
defaults to `default-menu-max-fold-lines'.
[From scheme/menus-extras.scm:59]

(fold-menu-list-by-group ml-cons #&rest rest)
- 
Split ML-CONS into chained menus based on their group.
ML-CONS is a list of lists. Each sublist's car is the name of the
group, and the cdr is a list of the menuitems for that group.
The list must be sorted by GROUP.  Returns a list of menu items
for each group, popping up the group's MENUITEMs.
[From scheme/menus-extras.scm:85]

(font-properties font)
- Built-in Primitive
Return an association list giving some properties of FONT.\n\
Currently defined properties are 'name, the string name of the\n\
color, and 'height, its total height in pixels.
[From src/font.c:232]

(font-property font key)
- (app scwm base)
Return the KEY property of FONT.
See `font-properties' for a list of the keys.
[From scheme/base.scm:599]

(font? obj)
- Built-in Primitive
Returns #t if OBJ is a font object, otherwise #f.
[From src/font.c:222]

(for-all? l pred)
- (app scwm listops)
Return true if PRED is true for all elements of L, otherwise false.
[From scheme/listops.scm:102]

(for-each-column string char proc)
- (app scwm gtk-table-display)
No documentation supplied.
[From scheme/gtk-table-display.scm:31]

(force-reset-window-frame!  #&optional win)
- Built-in Primitive
This redraws the window frame and decorations of WIN.\n\
Ideally it would never be necessary, but it is useful for debugging\n\
and for new window objects set via object properties.
[From src/window.c:1087]

(force-segv-for-testing)
- Built-in Primitive
Cause a segmentation violation.\n\
Do not do this unless you are testing segv handling!
[From src/miscprocs.c:658]

(frame-id->window window-id)
- Built-in Primitive
Return the window object corresponding to a frame WINDOW-ID.\n\
WINDOW-ID should be the X id of a scwm frame window. If there is no\n\
such window object, return #f.
[From src/window.c:2805]

(fvwm-exec command)
- (app scwm fvwm-compat)
Run COMMAND as fvwm would.
See also `fvwm-exec-use-shell'.
[From scheme/fvwm-compat.scm:43]

(fvwm-exec-use-shell #&optional (shell #f))
- (app scwm fvwm-compat)
Use SHELL when emulating fvwm "EXEC" commands.
Defaults to <envar>$SHELL</envar> or <filename>/bin/sh</filename>.
[From scheme/fvwm-compat.scm:32]

(fvwm-nop . args)
- (app scwm fvwm-compat)
No documentation supplied.
[From scheme/fvwm-compat.scm:73]

(fvwm-pipe-read command)
- (app scwm fvwm-compat)
No documentation supplied.
[From scheme/fvwm-compat.scm:53]

(fvwm2-pager-window)
- (app scwm fvwm-module)
Return a fvwm2 pager window, or #f if there is none.
[From scheme/fvwm-module.scm:592]

(gdk-draw-arc! top_left width height angle1 angle2)
- 
Draw an arc on the root window.
[From scheme/ui-constraints-gdk-drawing.scm:98]

(gdk-draw-line! p1 p2)
- (app scwm ui-constraints-gdk-drawing)
Draw a line on the root window.
[From scheme/ui-constraints-gdk-drawing.scm:88]

(gdk-draw-rectangle! top-left width height)
- (app scwm ui-constraints-gdk-drawing)
Draw a rectangle on the root window.
[From scheme/ui-constraints-gdk-drawing.scm:80]

(gdk-drawing-get-drawable)
- (app scwm ui-constraints-gdk-drawing)
Returns the drawable object used to draw on the root window.
[From scheme/ui-constraints-gdk-drawing.scm:68]

(gdk-drawing-get-gc)
- (app scwm ui-constraints-gdk-drawing)
Returns the gc used to draw on the root window.
[From scheme/ui-constraints-gdk-drawing.scm:64]

(gdk-drawing-initialize)
- (app scwm ui-constraints-gdk-drawing)
Setup the draw functions for drawing onto the root window.
Requires the ui-constraints-buttons window be initialized and
made visible, otherwise initialization will not occur.
[From scheme/ui-constraints-gdk-drawing.scm:44]

(gdk-drawing-initialized?)
- (app scwm ui-constraints-gdk-drawing)
Returns whether or not the module has been initialized.
[From scheme/ui-constraints-gdk-drawing.scm:60]

(gdk-drawing-set-line-width! width)
- (app scwm ui-constraints-gdk-drawing)
Set the width of the line to draw with.
[From scheme/ui-constraints-gdk-drawing.scm:76]

(get-fvwm2-module-config module-type)
- (app scwm fvwm-module)
No documentation supplied.
[From scheme/fvwm-module.scm:408]

(get-input-hooks-list)
- Built-in Primitive
Return the input-hooks list.
[From src/callbacks.c:762]

(get-key-event)
- Built-in Primitive
Return a represention of the next key event.\n\
The return value is (string modmask keycode). The\n\
`cdr' of the return value can be used as the arguments to \n\
`undo-passive-grab' and `redo-passive-grab'.\n\
The string is usable as a key binding string.  Modifiers \n\
are listed first, separated by "-" followed by a "-" and the\n\
keysym name.  E.g., "S-C-M-z" is Shift+Control+Meta + 'z' key.\n\
If the event is only modifier keys, then the string will\n\
end in a "-"; e.g., "S-C-M-".  See also `get-next-event'.
[From src/miscprocs.c:858]

(get-mouse-event)
- Built-in Primitive
Return a represention of the next mouse event.\n\
The return value is (string modmask button-number #t).  The\n\
`cdr' of the return value can be used as the arguments to \n\
`undo-passive-grab' and `redo-passive-grab'.\n\
The string is usable as a mouse binding string.  Modifiers \n\
are listed first, separated by "-" followed by a "-" and the\n\
button number.  E.g., "S-C-M-1" is Shift+Control+Meta + button 1.\n\
See also `get-next-event'.
[From src/miscprocs.c:923]

(get-next-event)
- Built-in Primitive
Return a represention of the next key or mouse event.\n\
The return value is (string modmask keycode) for key events\n\
or (string modmask button-number #t). The\n\
`cdr' of the return value can be used as the arguments to \n\
`undo-passive-grab' and `redo-passive-grab'.\n\
The string is usable as a key binding string.  Modifiers \n\
are listed first, separated by "-" followed by a "-" and the\n\
keysym name.  E.g., "S-C-M-z" is Shift+Control+Meta + 'z' key.\n\
If the event is only modifier keys, then the string will\n\
end in a "-"; e.g., "S-C-M-".\n\
See also `get-mouse-event' and `get-key-event'.
[From src/miscprocs.c:761]

(get-proplist-with-description desc)
- Primitive from (app scwm proplist)
Return a property list by parsing DESC in GNUstep proplist format.
[From modules/proplist/scwmproplist.c:843]

(get-proplist-with-path filename)
- Primitive from (app scwm proplist)
Return the proplist from path FILENAME.
[From modules/proplist/scwmproplist.c:826]

(get-register register)
- (app scwm register)
Return contents of Scwm register named REGISTER, or #f if none.
[From scheme/register.scm:37]

(get-register-name)
- (app scwm register)
Prompt for a register name and return a corresponding symbol.
[From scheme/register.scm:13]

(get-timer-hooks-list)
- Built-in Primitive
Return the timer-hooks list.
[From src/callbacks.c:612]

(get-ui-constraint-class-by-name name)
- (app scwm ui-constraints)
No documentation supplied.
[From scheme/ui-constraints.scm:171]

(get-window  #&optional select? release? cursor)
- Built-in Primitive
Retrieve the window context or select interactively.\n\
If there is no window context, a window is selected interactively.\n\
The boolean SELECT? argument (default #t) determines whether or not a\n\
window should be selected interactively if there is no current window\n\
context. The RELEASE? argument (default #t) determines whether or not\n\
interactive selection (if any) should wait for a mouse release event\n\
or just a press. The latter behavior is useful if the action being\n\
performed on the window is an interactive one involving mouse\n\
drags. The CURSOR argument is either a cursor object or #t to use\n\
the "skull and crossbones" cursor, or #f to use the standard\n\
circle cursor.
[From src/window.c:1046]

(get-window-colors  #&optional win)
- Built-in Primitive
Return a two-element list, '(fg bg), the colors for WIN.
[From src/window.c:3507]

(get-window-highlight-colors  #&optional win)
- Built-in Primitive
Return a two-element list, '(fg bg), the highlight colors for WIN.\n\
fg or bg may be #f, which means that the color is inherited from the decor.
[From src/window.c:3521]

(get-window-nonant select-list)
- (app scwm nonants)
SELECT-LIST is a list of (win x y), returns the nonant selected.
The nonant is a number in [0,8] referring to which of the tic-tac-toe board
squares x,y is in of WIN. x,y are root-window relative viewport positions.
`select-viewport-position' returns lists of the form needed by this procedure.
[From scheme/nonants.scm:180]

(get-window-with-nonant #&optional (window #f) (nonant 4))
- (app scwm nonants)
Select a WINDOW and a NONANT, defaulting to the current window context.  
If the WINDOW is not specified and there is no window context, 
perform interactive selection.  If WINDOW is passed in but 
NONANT is not specified, the center nonant is used.  The nonant
is stored as an object-property of the window for use with the
window-selection and constraints modules.
[From scheme/nonants.scm:44]

(get-window-with-nonant-interactively #&optional (orientation #f))
- (app scwm nonants)
Interactively select a window and a nonant.
The nonant is stored as an object-property of the window
for use with the window-selection and constraints modules.
ORIENTATION can be either 'horizontal or 'vertical to designate
whether we are picking a horizontal slice or a vertical slice
of a window; when #f, we are picking a nonant, not a slice.
[From scheme/nonants.scm:136]

(get-wm-command win)
- (app scwm xprop-extras)
Get the "WM_COMMAND" X-Property of WIN and return that string.
WIN is a Scwm window object. The "WM_COMMAND" X-Property is the application's
notion of what the command line was used to run the application.
[From scheme/xprop-extras.scm:73]

(get-x-cursor name-or-number)
- Built-in Primitive
Return the cursor object corresponding to NAME-OR-NUMBER.\n\
NAME-OR-NUMBER can be either a string naming an X11 cursor (e.g.,\n\
"trek") or a number specifying the cursor number.  See \n\
<file>X11/cursorfont.h</file> for the standard cursors.  Note\n\
that the "XC_" macro prefix should be omitted when used with\n\
this procedure..
[From src/cursor.c:244]

(global-window-configuration)
- (app scwm window-configuration)
Return an object abstracting all of the current windows' states.
[From scheme/window-configuration.scm:65]

(global-window-configuration-to-register
		 #&optional (register (get-register-name)))
- (app scwm register)
Save the global configuration of windows to REGISTER.
[From scheme/register.scm:71]

(gnome-desktop-click n)
- (app scwm gnome-hints)
Send a button-press N to the gnome desktop manager.
[From scheme/gnome-hints.scm:442]

(gnome-desktop-click-1)
- (app scwm gnome-hints)
Send a button-press 1 and button-release 1 to the gnome desktop manager.
[From scheme/gnome-hints.scm:466]

(gnome-desktop-click-2)
- (app scwm gnome-hints)
Send a button-press 1 and button-release 2 to the gnome desktop manager.
[From scheme/gnome-hints.scm:471]

(gnome-desktop-click-3)
- (app scwm gnome-hints)
Send a button-press 1 and button-release 3 to the gnome desktop manager.
[From scheme/gnome-hints.scm:476]

(gnome-desktop-menu)
- (app scwm gnome-hints)
Pop-up the gnome desktop menu.
[From scheme/gnome-hints.scm:446]

(gnome-desktop-press n)
- (app scwm gnome-hints)
Send a button-press N to the gnome desktop manager.
[From scheme/gnome-hints.scm:438]

(gnome-desktop-press-1)
- (app scwm gnome-hints)
Send a button-press 1 to the gnome desktop manager.
[From scheme/gnome-hints.scm:451]

(gnome-desktop-press-2)
- (app scwm gnome-hints)
Send a button-press 1 to the gnome desktop manager.
[From scheme/gnome-hints.scm:456]

(gnome-desktop-press-3)
- (app scwm gnome-hints)
Send a button-press 1 to the gnome desktop manager.
[From scheme/gnome-hints.scm:461]

(gnome-install-window-styles)
- (app scwm gnome-hints)
Initialize various window styles for GNOME support.
This handles desktop icons, splash screens, and the panel.
[From scheme/gnome-hints.scm:566]

(gravity->alignments gravity)
- (app scwm message-window)
Return a list of two numeric alignments corresponding to a GRAVITY.
GRAVITY can be one of 'nw, 'n, 'ne, 'w, 'center, 'e, 'sw, 's, 'se
or spelled-out versions of these.
[From scheme/message-window.scm:23]

(gravity->string gravity)
- (app scwm stringops)
Returns a string representation of the numerical GRAVITY.
[From scheme/stringops.scm:55]

(group->windows group)
- (app scwm group)
Returns a list of windows belonging to GROUP.
GROUP can be any window belonging to the group. All its peers, including
itself, are returned.  If GROUP is a list, it is treated
as the list of windows and is just returned.  This permits
all the group action procedures to be used on lists of windows, too.
[From scheme/group.scm:52]

(group-window group)
- (app scwm group)
Returns a distinguished window of GROUP.
Since a group is represented either by a single window or by a
list, this returns either GROUP or the `car' of the list.
[From scheme/group.scm:44]

(gtk-about title text #&optional (pixmap #f) (width 500) (height 400))
- (app scwm gtk-about)
No documentation supplied.
[From scheme/gtk-about.scm:15]

(gtk-about-scwm)
- (app scwm gtk-about)
No documentation supplied.
[From scheme/gtk-about.scm:38]

(gtk-clist-get-row-values clist row col)
- (app scwm gtk)
Return a list of the COL columns of row ROW of CLIST.
[From scheme/gtk.scm:105]

(gtk-message message #&key (close-message "close") (title "message"))
- 
It display a message on the display, using a gtk window
MESSAGE is a string representing the message to be displayed on the screen.
[From scheme/gtk-message.scm:44]

(gtk-pixmap-new-search-scwm-path pixmap-name button)
- (app scwm gtk)
Return the new pixmap object as `gtk-pixmap-new' does, but search Scwm's image-load-path for it.
[From scheme/gtk.scm:61]

(gtk-proc-selection-cancel-button proc-dialog)
- (app scwm prompt-proc)
Returns the cancel button from PROC-DIALOG.
[From scheme/prompt-proc.scm:215]

(gtk-proc-selection-clist-widget proc-dialog)
- (app scwm prompt-proc)
Returns the clist widgetfrom PROC-DIALOG.
[From scheme/prompt-proc.scm:219]

(gtk-proc-selection-get-procedure proc-dialog)
- (app scwm prompt-proc)
Returns the currently selected procedure from PROC-DIALOG.
[From scheme/prompt-proc.scm:231]

(gtk-proc-selection-get-procname proc-dialog)
- (app scwm prompt-proc)
Returns the currently selected procedure name from PROC-DIALOG.
[From scheme/prompt-proc.scm:223]

(gtk-proc-selection-new title #&optional (proclist #f))
- (app scwm prompt-proc)
Returns a new procedure-selecting dialog box.
[From scheme/prompt-proc.scm:129]

(gtk-proc-selection-ok-button proc-dialog)
- (app scwm prompt-proc)
Returns the ok button from PROC-DIALOG.
[From scheme/prompt-proc.scm:211]

(gtk-proc-selection-toplevel-widget proc-dialog)
- (app scwm prompt-proc)
Returns the toplevel window widget from PROC-DIALOG.
[From scheme/prompt-proc.scm:207]

(gtk-scrolled-window-set-hadjustment-value sw float)
- 
Set the hadjustment for SW, a scrolled window, to FLOAT.
[From scheme/gtk.scm:127]

(gtk-scrolled-window-set-vadjustment-value sw float)
- (app scwm gtk)
Set the vadjustment for SW, a scrolled window, to FLOAT.
[From scheme/gtk.scm:123]

(gtk-table-from-string string select-proc)
- 
No documentation supplied.
[From scheme/gtk-table-display.scm:51]

(gtk-text-replace textwidget text)
- (app scwm gtk)
Replace all the text in TEXTWIDGET with TEXT.
[From scheme/gtk.scm:116]

(gtk-window->scwm-window gtkwin)
- (app scwm gtk)
Return the Scwm window object corresponding to GTKWIN.
GTKWIN is a GTk+ window object returned from `gtk-window-new'.
Return value is #f if no corresponding window exists now.
Also will return #f if your guile-gtk implementation does
not support this procedure (you should upgrade!).
[From scheme/gtk.scm:76]

(gui-set sym)
- (app scwm preferences)
No documentation supplied.
[From scheme/preferences.scm:99]

(half x)
- (app scwm base)
Return the closest integer to half of X.
[From scheme/base.scm:65]

(handle-pending-events)
- Built-in Primitive
Handle all pending Scwm events, returns number of dispatched events.\n\
This is useful to maintain responsiveness of Scwm when in the middle\n\
of a long computation.
[From src/events.c:343]

(has-overlay-plane?)
- Primitive from (app scwm overlay-plane)
Return #t if the current screen has an overlay plane, #f otherwise.
[From modules/overlay-plane/overlay-plane.c:42]

(help obj #&optional (port (current-output-port)))
- (app scwm doc)
Print all possible documentation for string or symbol.
[From scheme/doc.scm:61]

(help-mesg . funcs)
- (app scwm prefs-menu)
No documentation supplied.
[From scheme/prefs-menu.scm:76]

(hex number)
- (app scwm number-convert)
Return the integer that corresponds to string NUMBER as a hexadecimal value.
[From scheme/number-convert.scm:54]

(hide-overlay-plane)
- Primitive from (app scwm overlay-plane)
Draw a box in the overlay plane.
This is just for demonstration and testing purposes for now.
[From modules/overlay-plane/overlay-plane.c:113]

(hide-selected-nonants)
- 
Hide nonant markers on window when they are selected.
[From scheme/window-selection.scm:239]

(hide-side-decorations win)
- (app scwm style)
No documentation supplied.
[From scheme/style.scm:194]

(hide-titlebar  #&optional win in-place?)
- Built-in Primitive
Cause WIN not to be decorated with a titlebar.\n\
Keeps the client window at its current location if IN-PLACE? is #t.\n\
See also `show-titlebar'.\n\
WIN defaults to the window context in the usual way if not\n\
specified.
[From src/window.c:3199]

(hide-titlebar-in-place #&optional (win (get-window)))
- (app scwm winops)
Turn off display of the titlebar for WIN without moving the client window.
This may move the frame to keep the application client window area in
the same position as before the call.
[From scheme/winops.scm:87]

(highlight-background)
- Built-in Primitive
Return the default background color for windows with the input focus.\n\
Applies to the current decor. This is used only for windows that don't\n\
have their own background color.
[From src/color.c:883]

(highlight-current-window . modifiers)
- (app scwm highlight-current-window)
No documentation supplied.
[From scheme/highlight-current-window.scm:68]

(highlight-factor)
- Built-in Primitive
Return the current highlight factor.
[From src/color.c:675]

(highlight-foreground)
- Built-in Primitive
Return the default foreground color for windows with the input focus.\n\
Applies to the current decor. This is used only for windows that don't\n\
have their own foreground color.
[From src/color.c:808]

(hook-documentation hook)
- (app scwm doc)
Return the docstring for HOOK.
[From scheme/doc.scm:19]

(icon-font)
- Built-in Primitive
Return the font used for drawing icon titles.
[From src/font.c:261]

(icon-position  #&optional win)
- Built-in Primitive
Return the position of the icon for WIN.\n\
The position is returned as a list of the x coordinate and the y\n\
coordinate in pixels.  If the icon is sticky, the position will\n\
always be in the 0,0 viewport. WIN defaults to the window context in the usual\n\
way if not specified.
[From src/window.c:2615]

(icon-size  #&optional win)
- Built-in Primitive
Return the size of the icon for WIN.\n\
The position is returned as a list of the width and height in pixels.\n\
WIN defaults to the window context in the usual way if not\n\
specified.
[From src/window.c:2635]

(icon-sticky?  #&optional win)
- Built-in Primitive
Return #t if WIN is "sticky", #f otherwise.\n\
See `stick-icon' and `stick-window'. WIN defaults to the window context in\n\
the usual way if not specified.
[From src/window.c:3389]

(icon-title-match?? STRING TYPE CASE-SENSITIVE?)
- (app scwm wininfo)
Return a predicate that tests a window's icon title.  
When applied to a window, this predicate will return true if the icon
title matches STRING in the manner specified by the optional argument
TYPE, which may be 'exact, 'regexp, or 'wildcard. The optional
CASE-SENSITIVE argument determines whether the matching is
case-sensitive or not.
[From scheme/wininfo.scm:330]

(icon-viewport-position #&optional (win (get-window)))
- (app scwm base)
Return the position of WIN's icon in pixels within the viewport.
The position is returned as a list of the x coordinate and the y
coordinate in pixels. WIN defaults to the window context in the usual
way if not specified.  See also `icon-position'.
[From scheme/base.scm:386]

(iconified-window?  #&optional win)
- Built-in Primitive
Return #t if WIN is iconified, otherwise return #f.\n\
WIN defaults to the window context in the usual way if not\n\
specified.
[From src/window.c:2103]

(iconify-group #&optional (group (get-window)))
- (app scwm group)
Iconify GROUP into one icon.
The icon is that of the window GROUP represents.
`deiconify-group-or-window' will deiconify this icon into the whole GROUP.
[From scheme/group.scm:163]

(iconify-window  #&optional win)
- Built-in Primitive
Iconify WIN.\n\
Iconifying hides the regular window, and shows the window's icon.\n\
WIN defaults to the window context in the usual way if not\n\
specified.
[From src/window.c:2056]

(id->message-window winid)
- Built-in Primitive
Return the message-window of an X/11 window id (a long integer).\n\
Returns #f if WINID does not correspond to a message-window.\n\
You can use the xwininfo program to get the window id of an arbitrary\n\
window on your X/11 display.
[From src/message-window.c:306]

(id->window window-id)
- Built-in Primitive
Return the window object corresponding to an application WINDOW-ID.\n\
WINDOW-ID should be the X id of the application window. If there is no\n\
such window object, return #f.
[From src/window.c:2788]

(ignore-dubious-modifiers?)
- Built-in Primitive
Return the status of the ignore-dubious-modifiers flag.\n\
See `set-ignore-dubious-modifiers!'.
[From src/binding.c:1552]

(image->gtk-pixmap img button)
- (app scwm gtk)
Return a gtk-pixmap widget for IMG for use in BUTTON.
[From scheme/gtk.scm:66]

(image-name->cursor name #&optional (x-hotspot 8) (y-hotspot 8))
- (app scwm cursor)
Make a cursor given only the NAME.
X-HOTSPOT and Y-HOTSPOT can specify the hotspot coordinates for the cursor.
[From scheme/cursor.scm:12]

(image-not-found-message filename)
- (app scwm base)
Report a missing image filename, but do not error.
[From scheme/base.scm:893]

(image-properties image)
- Built-in Primitive
Return an association list giving some properties of IMAGE.\n\
Currently defined properties are 'filename, the fully expanded\n\
pathname of the image, 'width, its width, 'height, its height, and\n\
depth, its color depth.
[From src/image.c:172]

(image-property image key)
- (app scwm base)
Return the KEY property of IMAGE.
See `image-properties' for a list of the keys.
[From scheme/base.scm:594]

(image-short-name image)
- Built-in Primitive
Return the short name of IMAGE. \n\
Use `image-properties' to access other properties of IMAGE\n\
including its full name.
[From src/image.c:206]

(image-size image)
- Built-in Primitive
Return the size of IMAGE as a list (width height).
[From src/image.c:226]

(image? obj)
- Built-in Primitive
Returns #t if OBJ is an image object, otherwise #f.
[From src/image.c:162]

(ImageMagick-loader fname)
- (app scwm image-loaders)
Tries to load an arbitrary image using ImageMagick's `convert'.
Uses `convert' to try to convert the file to an xpm, then
attempts to load it as such.
[From scheme/image-loaders.scm:28]

(in-viewport-any-desk? #&optional (win (get-window)))
- (app scwm wininfo)
Return #t if WIN is in the current viewport ignoring the desk, else #f.
[From scheme/wininfo.scm:73]

(in-viewport-placement xx yy)
- (app scwm placement)
Return a procedure that takes a window and places it in viewport (XX, YY).
The procedure will act just like calling `place-in-viewport' on the
window with the same XX and YY arguments.
[From scheme/placement.scm:102]

(increment-in-range v high)
- (app scwm undo)
Return v+1 but no more than high.
[From scheme/undo.scm:42]

(increment-undo-index)
- (app scwm undo)
Increment the undo-index.
[From scheme/undo.scm:57]

(initialize-programs-that-exist)
- (app scwm path-cache)
Initializes the cache with programs that exist in the current $PATH.
This creates a list that `cached-program-exists?' then checks when
queried whether a program exists or not.  Currently, this procedure
spawns a zsh process to get the list of files in the $PATH very quickly.
[From scheme/path-cache.scm:22]

(initialize-ui-constraints-buttons #&key (vertical #f) (pixmap #t) (show #f))
- (app scwm ui-constraints-buttons)
No documentation supplied.
[From scheme/ui-constraints-buttons.scm:138]

(insert-undo-global)
- (app scwm undo)
Insert the global state into the undo list at undo-index.
See also `push-undo-global'.
[From scheme/undo.scm:68]

(insert-undo-state state)
- (app scwm undo)
Insert STATE into the undo list at undo-index.
[From scheme/undo.scm:80]

(install-visibility-reporter)
- (app scwm visibility-reporter)
Install procedures to print debugging messages on window visibility change events.
[From scheme/visibility-reporter.scm:11]

(interactive-move 
		 #&optional (win (get-window #t #f #f))
		 (opaquely? (if win ((optget *move-opaquely-proc*) win))))
- (app scwm winops)
Move WINDOW interactively and possibly opaquely. 
If OPAQUELY? is specified, it is used to determine if the window
should be moved opaquely, or using a rubber-band. If it is not
spcified, `interactive-move' calls `*move-opaquely-proc*' on WIN and moves
opaquely if that returns #t and uses a rubber-band if it returns #f.
[From scheme/winops.scm:239]

(interactive-move-group #&optional (group (get-window #t #f #f)))
- (app scwm group)
Move GROUP interactively.
You can drag around the window GROUP represents. The other windows in GROUP
will move along.
[From scheme/group.scm:119]

(interactive-move-rubberband #&optional (win (get-window)))
- (app scwm flux)
Move interactively, using the rubberband (unless constraint solver is active.
[From scheme/flux.scm:436]

(interactive-move-selected-group-or-window)
- 
Interactively move either the selected windows or the current window.
The current window alone is moved if no windows are selected.
[From scheme/group.scm:244]

(interactive-move-window-with-focus)
- (app scwm winops)
Interactively move the window which currently has the focus.
`*move-opaquely-proc*' is used to control whether a rubberband
outline or the window itself is moved.
[From scheme/winops.scm:370]

(interactive-move-window-with-pointer)
- (app scwm winops)
Interactively move the window which currently contains the pointer.
`move-opaquely?' is used to control whether a rubberband
outline or the window itself is moved.
[From scheme/winops.scm:384]

(interactive-placement #&key (resize #f) (switch #t)
  (return #f))
- (app scwm placement)
Return a procedure that takes a window and places it interactively.
If the RESIZE argument is true, the resulting procedure will
interactively resize the window immediately after placing it. If
SWITCH is true, the returned procedure will switch to the virtual desk
and viewport of its window argument before placing it. This is the
default. If RETURN is false, the returned procedure will switch back
to the previous desk and viewport after placing the window. The
default is false.

See also the related `interactive-place' procedure which directly
places a window interactively.
[From scheme/placement.scm:114]

(interactive-procedure-apropos rgx)
- (app scwm reflection)
Returns a list of interactive procedures that match RGX.
This returns a simple list of procedure objects.
[From scheme/reflection.scm:205]

(interactive-procedure-apropos-with-modules rgx)
- (app scwm reflection)
Returns a list of procedures that match RGX and that can take no arguments.
I.e., they are interactive procedures useful for bindings.
The returned list contains pairs (modulesym . procsym)
[From scheme/reflection.scm:193]

(interactive-resize 
		 #&optional (win (get-window #t #f #f))
		 (opaquely? (if win ((optget *resize-opaquely-proc*) win))))
- (app scwm winops)
Resize WINDOW interactively and possibly opaquely. 
If OPAQUELY? is specified, it is used to determine if the window
should be resized opaquely, or using a rubber-band. If it is not
spcified, `interactive-resize' calls `*resize-opaquely-proc*' on WIN and
moves opaquely if that returns #t and uses a rubber-band if it returns
#f.
[From scheme/winops.scm:250]

(interactive-resize-rubberband #&optional (win (get-window)))
- (app scwm flux)
Resize interactively, using the rubberband (unless constraint solver is active.
[From scheme/flux.scm:441]

(interactive-resize-window-with-focus)
- (app scwm winops)
Interactively resize the window which currently has the focus.
`*resize-opaquely-proc*' is used to control whether a rubberband
outline or the window itself is resized.
[From scheme/winops.scm:377]

(interactive-resize-window-with-pointer)
- (app scwm winops)
Interactively resize the window which currently contains the pointer.
`resize-opaquely?' is used to control whether a rubberband
outline or the window itself is resized.
[From scheme/winops.scm:391]

(interactive-set-window-gravity!)
- (app scwm winops)
Permit user to click on an area of a window and anchor that nonant.
E.g., if the user clicks on the northeast corner of a window, that
window will be set to have northeast gravity so future resizes keep
that corner fixed.
[From scheme/winops.scm:346]

(intersection-area x1 y1 w1 h1 x2 y2 w2 h2)
- (app scwm wininfo)
Returns the size of the intersection of two rectangles.
X1,Y1 and W1 x H1 are the position and size of the first rectangle.
X2,Y2 and W2 x H2 are the position and size of the second rectangle.
[From scheme/wininfo.scm:52]

(invert-nonant nonant)
- (app scwm snap-constraints)
Return the opposite nonant from NONANT.
E.g., passing 0 answers 8, passing 1 answers 7, etc.
[From scheme/snap-constraints.scm:169]

(iota n)
- (app scwm listops)
Generate a list of the integers from 0 to N-1 in order.
[From scheme/listops.scm:41]

(is-mouse-event? event)
- (app scwm describe)
Return #t iff EVENT is a mouse event.
EVENT should be a list returned by `get-next-event',
`get-key-event', or `get-mouse-event'.
[From scheme/describe.scm:10]

(jump-to-register #&optional (register (get-register-name)))
- (app scwm register)
Restore the state saved in REGISTER.
[From scheme/register.scm:78]

(keep-above w1 w2 #&optional (enable? #f))
- (app scwm simple-constraints)
Keep W1 wholly above W2.
[From scheme/simple-constraints.scm:48]

(keep-adjacent-horizontal w1 w2 #&optional (enable? #f))
- (app scwm simple-constraints)
Keep W1's right edge aligned with W2's left edge.
[From scheme/simple-constraints.scm:96]

(keep-adjacent-vertical w1 w2 #&optional (enable? #f))
- (app scwm simple-constraints)
Keep W1's bottom edge aligned with W2's top edge.
[From scheme/simple-constraints.scm:104]

(keep-at-left-edge w #&optional (enable? #f))
- (app scwm simple-constraints)
Keep W's left edge at the left edge of the desktop.
[From scheme/simple-constraints.scm:112]

(keep-at-right-edge w #&optional (enable? #f))
- (app scwm simple-constraints)
Keep W's right edge at the right edge of the desktop.
[From scheme/simple-constraints.scm:126]

(keep-at-top-edge w #&optional (enable? #f))
- (app scwm simple-constraints)
Keep W's top edge at the top edge of the desktop.
[From scheme/simple-constraints.scm:119]

(keep-bottoms-even w1 w2 #&optional (enable? #f))
- (app scwm simple-constraints)
Keep W1 and W2 aligned at the bottom.
[From scheme/simple-constraints.scm:24]

(keep-constant-size w #&optional (enable? #f))
- (app scwm simple-constraints)
Keep W's size from changing.
[From scheme/simple-constraints.scm:142]

(keep-constant-width w width #&optional (enable? #f))
- (app scwm simple-constraints)
Keep W's width at WIDTH.
[From scheme/simple-constraints.scm:133]

(keep-full-height w1 w2 #&optional (enable? #f))
- (app scwm simple-constraints)
Keep W1 and W2 sum of heights equal to the display's height.
[From scheme/simple-constraints.scm:88]

(keep-full-width w1 w2 #&optional (enable? #f))
- (app scwm simple-constraints)
Keep W1 and W2 sum of widths equal to the display's width.
[From scheme/simple-constraints.scm:80]

(keep-left-at-v w1 v #&optional (enable? #f))
- (app scwm simple-constraints)
Keep W1's left at cl-variable V's pixel value.
Use `cl-set-solver-var' to change V.
[From scheme/simple-constraints.scm:64]

(keep-lefts-even w1 w2 #&optional (enable? #f))
- (app scwm simple-constraints)
Keep W1 and W2 aligned at the left.
[From scheme/simple-constraints.scm:16]

(keep-on-top  #&optional win)
- Built-in Primitive
Ensure that WIN is kept on top of all other windows.\n\
Obviously, other windows that are also on-top may obscure WIN.\n\
WIN defaults to the window context in the usual way if not specified.
[From src/window.c:3058]

(keep-right-at-v w1 v #&optional (enable? #f))
- (app scwm simple-constraints)
Keep W1's right at cl-variable Vs pixel value.
Use `cl-set-solver-var' to change V.
[From scheme/simple-constraints.scm:72]

(keep-rights-even w1 w2 #&optional (enable? #f))
- (app scwm simple-constraints)
Keep W1 and W2 aligned at the right.
[From scheme/simple-constraints.scm:32]

(keep-to-left-of w1 w2 #&optional (enable? #f))
- (app scwm simple-constraints)
Keep W1 to the left of W2.
[From scheme/simple-constraints.scm:40]

(keep-top-at-v w1 v #&optional (enable? #f))
- (app scwm simple-constraints)
Keep W1's top at cl-variable V's pixel value.
Use `cl-set-solver-var' to change V.
[From scheme/simple-constraints.scm:56]

(keep-tops-even w1 w2 #&optional (enable? #f))
- (app scwm simple-constraints)
Keep W1 and W2 aligned at the top.
[From scheme/simple-constraints.scm:8]

(kept-on-top?  #&optional win)
- Built-in Primitive
Return #t if WIN is an on-top window, #f otherwise.\n\
WIN defaults to the window context in the usual way if not\n\
specified.
[From src/window.c:3116]

(key-mouse-moves modifiers pct-of-screen left down up right)
- (app scwm key-mover)
Bind four keys to move the mouse in compass directions by PCT-OF-SCREEN.
MODIFIERS specifies which modifiers must be depressed for the bindings
to be active.
LEFT, DOWN, UP, and RIGHT are the four keysym names to use for each
of the directions.
[From scheme/key-mover.scm:14]

(key-viewport-moves modifiers pct-of-screen left down up right)
- 
Bind four keys to move the viewport in compass directions by PCT-OF-SCREEN.
MODIFIERS specifies which modifiers must be depressed for the bindings
to be active.
LEFT, DOWN, UP, and RIGHT are the four keysym names to use for each
of the directions.
[From scheme/key-mover.scm:29]

(keycode->keysym keycode)
- (app scwm base)
Return a string containing the X11 keysym for key with code KEYCODE.
[From scheme/base.scm:853]

(keymask->string keymask)
- Built-in Primitive
Return a string representing KEYMASK.\n\
E.g., (keymask->string 4) => "C-". Returns #f on an error.
[From src/binding.c:1658]

(keymask-keycode->string keymask keycode)
- Built-in Primitive
Return a string representing the key press with mask KEYMASK, code KEYCODE.\n\
E.g., (keymask-keycode->string 4 44) => "C-j". Returns #f on an error.
[From src/binding.c:1678]

(keysym->keycode keysym-name)
- Built-in Primitive
Returns a list of X/11 keycodes that generate the keysym, KEYSYM-NAME.\n\
KEYSYM-NAME should be a string.  E.g., "Control_L".  Return #f if KEYSYM-NAME\n\
is not a valid keysym.
[From src/binding.c:966]

(kill-all-fvwm2-modules)
- (app scwm fvwm-module)
No documentation supplied.
[From scheme/fvwm-module.scm:579]

(kill-fvwm2-module fmod)
- (app scwm fvwm-module)
No documentation supplied.
[From scheme/fvwm-module.scm:576]

(kill-fvwm2-modules-by-name module-name)
- (app scwm fvwm-module)
No documentation supplied.
[From scheme/fvwm-module.scm:582]

(kwm-emulation-initialize)
- (app scwm kde-hints)
No documentation supplied.
[From scheme/kde-hints.scm:218]

(kwm-emulation-reset)
- (app scwm kde-hints)
No documentation supplied.
[From scheme/kde-hints.scm:256]

(kwm-send-window-list)
- (app scwm kde-hints)
No documentation supplied.
[From scheme/kde-hints.scm:190]

(last-mapped-window)
- (app scwm last-mapped-window)
Return the window that was mapped most recently.
Returns #f if the most recently mapped window is already
gone. See also `focus-last-mapped-window'.
[From scheme/last-mapped-window.scm:16]

(line-slope x1 y1 x2 y2)
- (app scwm smart-push)
No documentation supplied.
[From scheme/smart-push2.scm:12]

(list-all-windows)
- Built-in Primitive
Return a list of all of the top-level window objects.\n\
The list is in a semi-arbitrary order that is convenient for the sake\n\
of circulation
[From src/window.c:2963]

(list-focus-order)
- Built-in Primitive
Return a list of all the top-level window objects in focus order.\n\
The order is from most recently focussed to least recently focussed.
[From src/window.c:3027]

(list-index l obj)
- (app scwm listops)
Return the integer position of OBJ in list L.
[From scheme/listops.scm:145]

(list-non-overlapping-windows win)
- (app scwm wininfo)
Return a list of windows that do not overlap WIN.
Iconified windows are ignored. See also `windows-overlap?'.
[From scheme/wininfo.scm:109]

(list-overlapping-windows win)
- (app scwm wininfo)
Return a list of windows that overlap WIN.
Iconified windows that would overlap when deiconified
are not included.  See also `windows-overlap?'.
[From scheme/wininfo.scm:103]

(list-stacking-order)
- Built-in Primitive
Return a list of all non-iconified the top-level window objects, from top to bottom.\n\
The order is the stacking order of the windows. The first element is\n\
the topmost window, the last is the bottommost
[From src/window.c:2982]

(list-windows #&key (only '()) (except '())
			      (by-stacking #f)
			      (by-focus #f)
			      (reverse #f))
- (app scwm winlist)
Return the list of windows matching ONLY and not matching EXCEPT.
The windows are returned their stacking order (top first) if
BY-STACKING is #t (and that option omits iconified windows).
They are returned sorted by their last focussed
time (most recently focussed first) if BY-FOCUS is #t. If REVERSE is
true, they are returned in the reverse of the usual order. ONLY and
EXCEPT each are procedures which take a single window argument and
returns #t if the window should be included (for ONLY) or 
excluded (for EXCEPT), or #f otherwise.
[From scheme/winlist.scm:53]

(list-windows-above w #&key (only ()) (except()))
- (app scwm stacking)
List the windows above w from bottom to top.
Returns a list in the reverse of the stacking order of the windows
above W, in other words, from the one immediately above, to the topmost
window; the ONLY and EXCEPT keyword arguments operate as is usual for
procedures that deal with the window list.
[From scheme/stacking.scm:30]

(list-windows-below w #&key (only ()) (except()))
- (app scwm stacking)
List the windows below w from top to bottom.
Returns a list in the stacking order of the windows below in, in other
words, from the one immediately below, to the bottommost window; the
ONLY and EXCEPT keyword arguments operate as is usual for procedures
that deal with the window list.
[From scheme/stacking.scm:42]

(list-without-elem l e)
- (app scwm listops)
Return the list L with element E deleted.
Uses `eq?' for testing equality with E.
[From scheme/listops.scm:228]

(listify-if-atom l)
- (app scwm winlist)
Make L into a list if it is not.
[From scheme/winlist.scm:34]

(load-cached-theme fname #&optional force?)
- (app scwm themes)
No documentation supplied.
[From scheme/themes.scm:104]

(load-imlib-image full-path)
- Built-in Primitive
Load an image file using imlib identified by the pathname FULL-PATH.
[From src/image.c:372]

(load-preferences #&optional 
				 (filename (string-append (getenv "HOME") "/.scwm-options")))
- 
Load FILENAME to restore the Scwm preferences.
Since the options file is just a bunch of S-expressions,
this currently just `load's the file to evaluate it.
Returns #t iff the load was successful, false otherwise.
[From scheme/preferences.scm:519]

(load-theme fname)
- (app scwm themes)
Returns a theme FNAME which is loaded from `*theme-path*'.
The theme should be either a directory, or a (possibly gzipped)
tar file with extension .tar, .tar.gz, or .tgz.
[From scheme/themes.scm:79]

(load-theme-image fname)
- (app scwm theme-impl)
No documentation supplied.
[From scheme/theme-impl.scm:56]

(load-xbm full-path)
- Built-in Primitive
Load an X Bitmap file identified by the pathname FULL-PATH.
[From src/image.c:269]

(load-xpm full-path)
- Built-in Primitive
Load an X Pixmap file identified by the pathname FULL-PATH.
[From src/image.c:303]

(logo-remove)
- 
Remove the Scwm lambda startup logo.
This is added to `startup-hook' by `logo-setup' and
usually will not need to be invoked directly.
[From scheme/lambda-startup-logo.scm:51]

(logo-setup #&optional (should-rotate #f))
- (app scwm lambda-startup-logo)
Setup to display the startup logo.
If SHOULD-ROTATE is #t, then the logo will animate (this
has some cost in perfromance and memory, but is useful
as startup can be longer than ideal).
[From scheme/lambda-startup-logo.scm:26]

(lookup-key contexts key)
- Built-in Primitive
Return the procedures bound to KEY within the CONTEXTS.\n\
KEY is a modifiers and keysym string.\n\
CONTEXTS is a list of event-contexts (e.g., '(left-button-1 frame-sides))\n\
The return value is a list: (press-proc release-proc), or #f\n\
if there is no matching binding.
[From src/binding.c:880]

(lookup-mouse contexts button)
- Built-in Primitive
Return the procedure bound to mouse BUTTON within the CONTEXTS.\n\
BUTTON is a string that may contain modifier prefixes, e.g.,\n\
"C-S-M-1". \n\
CONTEXTS is a list of event-contexts (e.g., '(button1 sidebar))\n\
BUTTON is a string or integer giving the mouse button number and any\n\
modifiers as a prefix.\n\
The return values is the procedure object, or #f if there is no\n\
matching binding.
[From src/binding.c:1236]

(lookup-procedure-bindings  #&optional proc context)
- Built-in Primitive
Return any bindings that invoke PROC in context CONTEXT.\n\
If PROC is omitted or #f, match all bindings in context CONTEXT.\n\
If CONTEXT is omitted or #f, match bindings regardless of context.\n\
If both PROC and CONTEXT are omitted or #f, return all bindings.\n\
The return value is a list of binding descriptions.  Each binding\n\
description is a list: (mouse? contexts modmask keycode-or-butnum press-proc\n\
release-or-immediate-proc).  mouse? is a boolean, contexts is a list of\n\
symbols.
[From src/binding.c:1294]

(lower-by-one #&optional (w (get-window)))
- (app scwm stacking)
Lower window W below the next window down that overlaps it.
W defaults to the window context in the usual way.
[From scheme/stacking.scm:69]

(lower-fvwm2-pager)
- 
Lower a fvwm2 pager window in the stacking order.
[From scheme/fvwm-module.scm:605]

(lower-group #&optional (group (get-window)))
- (app scwm group)
Raise members of GROUP above all other windows.
Keeps the relative stacking order of the members intact.
[From scheme/group.scm:94]

(lower-window  #&optional win)
- Built-in Primitive
Lower WIN to the bottom of the window stack. WIN defaults to\n\
the window context in the usual way if not specified.
[From src/window.c:1890]

(lower-window-below w w2)
- (app scwm stacking)
Restack window W immediately below W2.
[From scheme/stacking.scm:58]

(make-all-submenus structured-list #&optional title)
- (app scwm gnome-panel-menus)
No documentation supplied.
[From scheme/gnome-panel-menus.scm:542]

(make-color cname)
- Built-in Primitive
Return the color object corresponding to the X color specifier CNAME.\n\
If CNAME is not a valid X color name, or cannot be\n\
allocated, an error results.
[From src/color.c:236]

(make-conditional-style condition . args)
- (app scwm style)
No documentation supplied.
[From scheme/style.scm:125]

(make-context-menu)
- (app scwm std-menus)
Create a menu of actions applicable to the filename in the X selection.
The selection must contain a single full pathname.
[From scheme/std-menus.scm:104]

(make-debianapps-menu #&key
				      (title default-debianapps-menu-title)
				      (menu-file "scwm_menus")
				      #&allow-other-keys
				      #&rest rest)
- 
Read menu-file and return a menu object.
TITLE is the string to be used as title of the menu.  
MENU-FILE is the file used to create the menu entries, 
as generated by the menu program in the Debian systems. 
The rest of the arguments are passed to the menu procedure
[From scheme/debianapps-menu.scm:72]

(make-decor  #&optional name)
- Built-in Primitive
Create a new decor object. NAME optionally provides a string\n\
that is used to name the decor, and is displayed when the decor is\n\
printed.
[From src/decor.c:209]

(make-face flags specs)
- Built-in Primitive
Create a new face.\n\
FLAGS is a list of face flags (see concept) and\n\
SPECS is a list of face specifiers.
[From src/face.c:442]

(make-file-menu file . rest)
- (app scwm flux)
Return a menu-object for viewing or editing FILE.
REST is a list of other menu-items to include in the returned menu.
[From scheme/flux.scm:90]

(make-font fname)
- Built-in Primitive
Return the font object for the X font specifier FNAME.\n\
If FNAME is not a valid X font name, or cannot be\n\
allocated, an error results.
[From src/font.c:97]

(make-hosts-menu host-list #&optional (user (user-name)))
- (app scwm std-menus)
Create a telnet menu.
To use this, add the following to the menu of your choice:
  (menuitem "telnet" #:action (make-hosts-menu '("host1" "host2" ...)))
An optional USER argument specifies the user to telnet as.
The element of the list of hosts can be a host (in which case telnet is
used) or a cons of (host . command).
[From scheme/std-menus.scm:54]

(make-image name)
- Built-in Primitive
Loads an image from the file NAME.\n\
To load the image, the appropriate image loaders will be invoked as\n\
needed. If NAME starts with "/", "./" or "../", it is treated as a\n\
fully qualified pathname; otherwise, the image path is searched for an\n\
appropriate file.
[From src/image.c:565]

(make-image-or-warn filename)
- (app scwm base)
Return an image object for FILENAME and report a warning if it fails.
See `make-image' for details.  Return value is #f on failure,
but no error is thrown; `image-not-found-message' is used to 
write a warning instead.
[From scheme/base.scm:882]

(make-keep-winclass-centered class)
- (app scwm placement)
Return a procedure that keeps windows of CLASS centered in the viewport.
The resulting procedure should be used put in the `X-ConfigureRequest-hook'.
[From scheme/placement.scm:204]

(make-list n . init)
- (app scwm listops)
Return a list containing N elements equal to the optional second argument.
If INIT is empty indicating the optional argument was not provided,
use the empty list as the element.
[From scheme/listops.scm:157]

(make-menu list-of-menuitems bg-color text-color stipple-color font #&optional picture-side side-picture-align side-bg-color picture-bg extra-options)
- Built-in Primitive
Make and return a menu object from the given arguments.\n\
LIST-OF-MENUITEMS is a non-empty scheme list of menu items -- see `make-menuitem';\n\
BG-COLOR, TEXT-COLOR and STIPPLE-COLOR are color objects or symbols;\n\
FONT is a font object or symbol;\n\
PICTURE-SIDE is an image object to draw on the left side of the menu;\n\
SIDE-PICTURE-ALIGN is one of 'top, 'center, or 'bottom;\n\
SIDE-BG-COLOR is a color object or symbol;\n\
PICTURE-BG is an image object;\n\
EXTRA-OPTIONS can be anything understood by the menu-look
[From src/menu.c:237]

(make-menu-another-level #&optional
					 (path (string-append (getenv "HOME") "/.gnome/apps-redhat"))
					 (title "AnotherLevel Menus"))
- (app scwm gnome-panel-menus)
No documentation supplied.
[From scheme/gnome-panel-menus.scm:608]

(make-menu-focus-options #&optional (win (get-window)))
- (app scwm winops-menu)
Create a menu of focus options for WIN.
[From scheme/winops-menu.scm:85]

(make-menu-from-list-of-structured-directories directory-list
							       title
							       #&optional title-list)
- (app scwm gnome-panel-menus)
No documentation supplied.
[From scheme/gnome-panel-menus.scm:577]

(make-menu-from-structured-directory directory #&optional title)
- (app scwm gnome-panel-menus)
No documentation supplied.
[From scheme/gnome-panel-menus.scm:564]

(make-menu-global-theme #&optional force?)
- (app scwm std-menus)
Return a menu that lets the user set the theme for all windows.
If FORCE? is #t, then the cached theme file is reloaded.
[From scheme/std-menus.scm:138]

(make-menu-gnome-system #&optional
					(path "/usr/share/gnome/apps")
					(title "System Menus"))
- (app scwm gnome-panel-menus)
No documentation supplied.
[From scheme/gnome-panel-menus.scm:601]

(make-menu-gnome-user #&optional
				      (path (string-append (getenv "HOME") "/.gnome/apps"))
				      (title "User Menus"))
- (app scwm gnome-panel-menus)
No documentation supplied.
[From scheme/gnome-panel-menus.scm:615]

(make-menu-kde #&optional
			       (path "/usr/share/applnk")
			       (title "KDE Menus"))
- 
No documentation supplied.
[From scheme/gnome-panel-menus.scm:622]

(make-menu-window-theme #&optional force?)
- (app scwm std-menus)
Return a menu that lets the user set the theme for a single window.
If FORCE? is #t, then the cached theme file is reloaded.
[From scheme/std-menus.scm:125]

(make-menuitem label action #&optional extra-label picture-above picture-left hover-action unhover-action hotkey-prefs submenu?)
- Built-in Primitive
Return a newly created menuitem object using the given arguments.\n\
LABEL is a string giving the main text label of the menu item;\n\
ACTION is a procedure or menu object -- if it is a procedure, it gets\n\
invoked when the menuitem is selected, if it is a menu object, that\n\
menu is attached as a submenu from the enclosing menu that the created \n\
menuitem is put in.  You can also force ACTION to be treated as a\n\
submenu by setting SUBMENU? to #t.\n\
EXTRA-LABEL is extra text describing the menu item -- often this\n\
contains a shortcut key description, or some other descriptive text.\n\
PICTURE-ABOVE and PICTURE-LEFT are picture objects which correspond to \n\
images to display within the bounding region of the menuitem.\n\
HOVER-ACTION and UNHOVER-ACTION are procedures to be invoked when the\n\
mouse pointer hovers over the item and is moved away after hovering\n\
over the item, respectively.\n\
HOTKEY-PREFS is a string listing preferred alphanumeric shortcut-keys\n\
for the given menu-item; the menu creation routine uses these as hints \n\
for assigning shortcut keys to the various menuitems.\n\
For a higher-level interface to this function, see `menuitem'.
[From src/menuitem.c:128]

(make-menuitems-from-menu-information-list menu-info-list)
- (app scwm flux)
Return a list of menu-items from a list of detailed programs list.
The format is subject to change.  See sample.scwmrc/gjb.scwmrc for
example usage.
[From scheme/flux.scm:177]

(make-message-window message)
- Built-in Primitive
Returns a newly created message window object with string MESSAGE.\n\
MESSAGE is the initial string for the message window. \n\
Uses defaults from the ScreenInfo struct for the other values.
[From src/message-window.c:260]

(make-message-window-clone-default str)
- (app scwm message-window)
Return a new message window that has the default style.
This is done by cloning the style (see `message-window-style') of
the variable `default-message-window'.
[From scheme/message-window.scm:252]

(make-message-window-win-copy #&optional (win 'root-window))
- (app scwm message-window)
Return a message window with a background that is a copy of the image in WIN.
The message-window will have no text and no relief, and be the same size
as WIN.
[From scheme/message-window.scm:284]

(make-message-window-with-image img #&optional (shaped? #f))
- (app scwm message-window)
Return a new message window with IMG as a background, sized appropriately.
Initially the message window is centered in the display.
[From scheme/message-window.scm:242]

(make-relief-color color factor)
- Built-in Primitive
Convert a color into a new color appropriate for a relief.\n\
Multiplies the luminosity and saturation of COLOR by the\n\
positive floating point number FACTOR. Using a FACTOR smaller than 1\n\
will result in a dimmer color, suitable for use as a darker\n\
relief. Using a factor greater than 1 will result in a brighter color\n\
which is suitable for use as a highlight.
[From src/color.c:586]

(make-reversed-color color)
- Built-in Primitive
Return a new color that is opposite COLOR.\n\
Note that the returned color will not necessarily contrast with\n\
COLOR; (make-reversed-color "gray50") is almost indistinguishable\n\
from "gray50".
[From src/color.c:606]

(make-rhosts-menu)
- (app scwm flux)
Returns a menu which lets you rlogin to each host mentioned in your .rhosts
[From scheme/flux.scm:235]

(make-small-window-ops-menu w)
- (app scwm winops-menu)
Return a short menu of window operations for window W.
The menu lets you move, resize, maximize, minimize, set gravity,
stick, shove, set the style, group, etc.
[From scheme/winops-menu.scm:23]

(make-string-usable-for-resource-key string)
- (app scwm stringops)
Return a converted string from STRING that can be used as an X resource key.
The returned string will have all non-alphanumeric characters replaced with
underscores, so that the resulting string can be used as a key for
`X-resource-get' and `X-resource-put'.
[From scheme/stringops.scm:12]

(make-style . args)
- (app scwm style)
No documentation supplied.
[From scheme/style.scm:64]

(make-theme name #&key (window-style (make-style #t))
			   (background-style (lambda () ())))
- (app scwm theme-impl)
Creates a theme object with the given NAME, WINDOW-STYLE, and BACKGROUND-STYLE.
[From scheme/theme-impl.scm:62]

(make-toggling-winop pred neg pos)
- (app scwm winops)
Returns a procedure which takes a window WIN and toggles a property of it.
PRED, NEG, and POS should be functions which take a window and
check whether the property holds for the window, reset the property
on the window, and set the property on the window, respectively.
[From scheme/winops.scm:41]

(make-ui-constraint ui-constraint-class arg-list #&key (visible? #t))
- (app scwm ui-constraints)
UI-CONSTRAINT-CLASS specified the type of constraint to be created.
WIN-LIST specifies the windows to be constrained.  Returns a new constraint
object that is NOT enabled.  errors if UI-CONSTRAINT-CLASS is not valid.
Returned objects are #(obid-ui-constraint CLASS CN ENABLED? LIST-OF-WINDOWS OPTS BUT DHOOKS)
The OPTS param is a spot for optional data to be specified by the ui-constraint-class 
constructor.  If data returns from that constructor in list form, the first element of
the list is assumed to be the CN and the cdr is stuck in OPTS.
BUT may contain a reference to the gtk button for the constraint instance in the 
toggle menu if that feature is in use.
DHOOKS is a list of hook procedures that should be called when the enable is changed on this
constraint.  These hook functions may only be added after an instance is created.
SIDE-EFFECT: adds new instance object to the global list.
[From scheme/ui-constraints.scm:306]

(make-ui-constraint-class name description num-windows ctr ui-ctr draw-proc satisfied-proc pixmap-name pixmap2-name menuname-proc)
- (app scwm ui-constraints)
Creates a new ui-constraint-class object.
CTR takes a set of arguments and installs the appropriate constraints in the solver.  A number of
windows should be included in those arguments, falling somewhere in the range of NUM-WINDOWS.  
NUM-WINDOWS is a list of '(min-win max-win) where the values specify the minimum and maximum number
of windows which may be constrained.  Max-win may optionally be specified as a non-number (preferably
as #t), in which case the constraint is taken to be able to constraint an infinite number of windows.
SATISFIED-PROC is a procedure that takes a single argument, the cn, and tells if it is satisfied
UI-CTR should return the arguments (as a list) for CTR to build the constraint with.  UI-CTR should
return #f if the user cancels the construction or fails to follow the interface correctly.  PIXMAP-NAME
is the name of the pixmap to associate with this constraint-class in the user interface.
MENUNAME-PROC is a proc that takes a UI-CONSTRAINT as an arg and returns the name that should be used
for the constraint in the toggle menu.  
This routine returns a new constraint class object based on the parameters.
SIDE-EFFECT: addes new class obj to the global class list.
[From scheme/ui-constraints.scm:81]

(make-ui-constraint-interactively ui-constraint-class)
- (app scwm ui-constraints)
Uses the UI constructor of the constraint class to prompt the user to
specify options for the constraint.  errors if UI-CONSTRAINT-CLASS is 
not a ui-constraint-class.  Calls make-ui-constraint (see above).
[From scheme/ui-constraints.scm:342]

(make-window-group-menu w)
- (app scwm group)
Return a menu for window group operations.
[From scheme/group.scm:174]

(make-window-list-menu #&key (only '()) (except '())
				       (by-stacking #f)
				       (by-focus #f)
				       (by-resource #f)
				       (reverse #f)
				       (proc window-list-proc)
				       (flash-window-proc flash-window-on)
				       (unflash-window-proc unflash-window)
				       (hover-delay 0)
				       (popup-delay #f)
				       (show-geometry #f)
				       (show-last-focus-time #f)
				       (ignore-winlist-skip #f)
				       (show-mini-icon #t)
				       (enumerate-hotkeys #t))
- (app scwm winlist-menu)
Popup a window list menu and permit a selection to be made.
ONLY and EXCEPT are procedures that control which windows will appear
in the list -- see `list-windows' for details. BY-STACKING, BY-FOCUS
and REVERSE control the order in which windows appear. See
`list-windows' for more on these as well.

PROC is the procedure which will be called on the selected window. 

FLASH-WINDOW-PROC and UNFLASH-WINDOW-PROC are set as the hover-action
and unhover-action (respectively) of the items in the menu.  (See
`menuitem'.)

If SHOW-GEOMETRY is #t, the geometries of the windows will be listed
in each menuitem.  

If SHOW-LAST-FOCUS-TIME is #t, the last focus time of the windows will be listed
in each menuitem.

If SHOW-MINI-ICON is #t, the mini-icon of the windows will be
displayed with each menuitem.

If WARP-TO-FIRST is #t, the mouse pointer will be warped to the first
menuitem (see `popup-menu').  

If BY-RESOURCE is #t, the window list is split into sublists by the
window resource name (this is also the behaviour if too many windows
exist to fit vertically on the menu).

If ENUMERATE-HOT-KEYS is #t, then add alpha-numeric hot keys for the window-list.
For the hotkey, the characters 1 through 9 are used first, followed by
the letters a through z.  Currently this is turned off if BY-RESOURCE is #t.

[From scheme/winlist-menu.scm:18]

(make-window-style-menu #&optional (win (get-window)))
- (app scwm stylist)
Offer a choice to style the window, like named windows, or a whole class.
WIN is the window to style and defaults to the window-context.
[From scheme/stylist.scm:159]

(make-wmconfig-menu 
		 #&optional (wmconfig-title default-wmconfig-title)
		 (wmconfig-dir default-wmconfig-dir))
- 
Return a menu object for the window-manager configuration menu.
[From scheme/wmconfig-menu.scm:97]

(make-X-geometry #&key (x-size #f) (y-size #f) (x-offset #f) (y-offset #f))
- (app scwm flux)
No documentation supplied.
[From scheme/flux.scm:418]

(make-xlock-menu #&optional (lock? #f))
- 
Create an xlock menu.
To use this, add the following to the menu of your choice:
   (menuitem "Screensaver" #:action (make-xlock-menu #f))
or (menuitem "Lock Screen" #:action (make-xlock-menu #t))
[From scheme/xlock-menus.scm:73]

(map-in-order proc first . rest)
- (app scwm listops)
Process FIRST and the lists comprising REST as `map' would.
However, PROC is guaranteed to be called on these elements in the
order in which they appear in the lists.
[From scheme/listops.scm:173]

(marshal-fvwm2-config-info win)
- Built-in Primitive
Constructs a fvwm2 BroadcastInfo module packet.\n\
The return value is the contents of a BroadcastInfo fvwm2\n\
module packet for WIN as a Scheme string.
[From src/module-interface.c:133]

(marshal-fvwm2-iconify-info win)
- Built-in Primitive
Constructs a fvwm2 "M_ICONIFY" module packet.\n\
The return value is the contents of an "M_ICONIFY" fvwm\n\
module packet for WIN as a Scheme string.
[From src/module-interface.c:176]

(mask->keycodes mask)
- (app scwm quote)
Return a list of keycodes corresponding to keys that generate the modifiers in MASK.
[From scheme/quote.scm:76]

(maximize nw nh #&optional (win (get-window)))
- (app scwm winops)
Maximize WIN to new pixel width NW and new pixel height NH.
If NW or NH is 0, that dimension is not changed.
[From scheme/winops.scm:118]

(maximize-both #&optional (win (get-window)))
- (app scwm winops)
Maximize WIN both horizontally and vertically.
[From scheme/winops.scm:427]

(maximize-horizontal #&optional (win (get-window)))
- (app scwm winops)
Maximize WIN horizontally.
[From scheme/winops.scm:422]

(maximize-vertical #&optional (win (get-window)))
- (app scwm winops)
Maximize WIN vertically.
[From scheme/winops.scm:417]

(maximized? #&optional (win (get-window)))
- (app scwm winops)
Return #t if WIN is maximized, #f otherwise.
[From scheme/winops.scm:151]

(maybe-make-color obj)
- (app scwm base)
Try to make OBJ into a color and return that color object.
Returns #f if OBJ is not a color object or a string.
[From scheme/base.scm:75]

(menu list-of-menuitems #&key
		      (image-side 'menu-side-image)
		      (image-align 'top)
		      (color-bg-image-side 'menu-side-bg-color)
		      (image-bg 'menu-bg-image)
		      (color-text 'menu-text-color)
		      (color-bg 'menu-bg-color)
		      (color-stipple 'menu-stipple-color)
		      (hl-color-fg 'menu-hl-fg-color)
		      (hl-color-bg 'menu-hl-bg-color)
		      (hl-relief? #t)
		      (font 'menu-font)
		      (look 'menu-look)
		      popup-delay hover-delay
		      (extra #f))
- (app scwm base)
Return a menu object with the given attributes.
LIST-OF-MENUITEMS is a list of menuitem objects (each created with
`make-menuitem' or `menuitem').  IMAGE-SIDE is an image object to be
displayed along the left edge of the menu.  IMAGE-ALIGN determines
whether to align that image to the 'top, 'center or 'bottom of the
menu.  COLOR-BG-IMAGE-SIDE is the background color for that image
object.  COLOR-TEXT is a color object or string for the foreground
text color of menu items.  COLOR-BG is a color object or string for
the background color for the menu and menu items.  COLOR-STIPPLE is a
color object for stippled ("grayed") menu items.  FONT is a font
object for the font of the menu items.  EXTRA is an extra argument
specific to the menu look used for this menu.
[From scheme/base.scm:526]

(menu-highlight-colors menu)
- Built-in Primitive
Return list text-color, bg-color, the highlight colors for MENU.
[From src/menu.c:460]

(menu-highlight-factor)
- Built-in Primitive
Return the current menu highlight factor.
[From src/color.c:739]

(menu-highlight-relief? menu)
- Built-in Primitive
Return #t if MENU's selected item is relieved, #f otherwise.
[From src/menu.c:471]

(menu-hotkeys-activate-item?)
- Built-in Primitive
Return #t if hotkeys invoke item, #f if they just select the item.
[From src/menu.c:1638]

(menu-hover-delay menu)
- Built-in Primitive
Return MENU's hover action delay.\n\
See `set-menu-hover-delay!'.
[From src/menu.c:359]

(menu-look? obj)
- Built-in Primitive
Return #t if OBJ is a menulook object, #f otherwise.
[From src/menulook.c:52]

(menu-max-fold-lines)
- (app scwm menus-extras)
Return an approximation of the number of menuitems that will fit vertically on screen.
[From scheme/menus-extras.scm:31]

(menu-popup-delay menu)
- Built-in Primitive
Return MENU's submenu popup delay.\n\
See `set-menu-popup-delay!'.
[From src/menu.c:334]

(menu-prefs . opts)
- 
Generate the `Preferences' menu.
All the arguments are passed directly to the `menu' function.
[From scheme/prefs-menu.scm:213]

(menu-properties menu)
- Built-in Primitive
Returns the a list of the menu properties of MENU, a menu object.\n\
The properties returned are: \n\
'(menu-title menu-items side-image side-image-align side-bg-color bg-color\n\
text-color stipple-color\n\
image-bg font extra-options used-shortcut-keys popup-delay hover-delay)
[From src/menu.c:199]

(menu-shadow-factor)
- Built-in Primitive
Return the current menu shadow factor.
[From src/color.c:762]

(menu-style #&key
		     (fg #f) (foreground #f)
		     (bg #f) (background #f)
		     (hl-fg #f) (hl-foreground #f)
		     (hl-bg #f) (hl-background #f)
		     (bg-image #f)
		     (stipple #f) (font #f)
		     (title-font #f)
		     (look #f)
		     (side-image #f) (side-bg 'unset))
- (app scwm base)
Set various properites for the menus.
See `make-menu' for options on creation of individual menus.
[From scheme/base.scm:411]

(menu-title label . rest)
- (app scwm base)
Return a menuitem object that is a title.
All arguments that `menuitem' takes are accepted as usual,
except the font defaults to `*menu-title-font*' instead of
`*menu-font*'.
[From scheme/base.scm:472]

(menu? obj)
- Built-in Primitive
Return #t if and only if OBJ is a menu object.
[From src/menu.c:136]

(menuitem label #&key image-above image-left
			  (fg #f) (bg #f) (font #f)
			  extra-label action submenu hover-action unhover-action
			  hotkey-prefs)
- (app scwm base)
Return a menuitem object with the given attributes.
LABEL is a string for the name on the item.
IMAGE-ABOVE is an image object to show above the label.
IMAGE-LEFT is an image object to show to the left of the label.
EXTRA_LABEL is a second label shown on the item.
ACTION is a menu object or a procedure; if it is a menu object,
the item will popup ACTION as a sub-menu, if it is a procedure,
the procedure will be invoked when the item is selected.
HOVER-ACTION is an procedure to be invoked when the item is
highlighted but not invoked for a moment; UNHOVER-ACTION is
a procedure to be invoked after the HOVER-ACTION is invoked
when the item is unhighlighted.  HOTKEY-PREFS is a string listing
the characters which are appropriate shortcut-keys for the item;
the first not-yet-used-in-this-menu character will be used for
the shortcut key for the menu item.
[From scheme/base.scm:479]

(menuitem->scwm-gtk-menuitem mi)
- (app scwm gtk-menu)
No documentation supplied.
[From scheme/gtk-menu.scm:60]

(menuitem-colors menuitem)
- Built-in Primitive
Returns a list of the fg and bg colors for MENUITEM.\n\
Will return #f for either/both components if MENUITEM inherits its color from\n\
the menu in which it is embedded.
[From src/menuitem.c:226]

(menuitem-font menuitem)
- Built-in Primitive
Returns the font of MENUITEM.\n\
Returns #f if MENUITEM inherits its font\n\
from the menu in which it is embedded.
[From src/menuitem.c:256]

(menuitem-properties menu-item)
- Built-in Primitive
Return a list of the properties of the given MENU-ITEM.\n\
MENU-ITEM is a menuitem object, created by `make-menuitem'.  The\n\
returned list contains the following, in this order:\n\
'(label action extra-label picture-above picture-left hover-action\n\
unhover-action hotkey-preferences force-submenu?)\n\
Note that this is the same as the arguments to the `make-menuitem'\n\
primitive.
[From src/menuitem.c:101]

(menuitem? obj)
- Built-in Primitive
Return #t if and only if OBJ is a menu item object.
[From src/menuitem.c:91]

(message . str)
- (app scwm flux)
Display the string arguments STR in a message window.
Requires the program `xmessage'.
[From scheme/flux.scm:104]

(message-window-colors mwn)
- Built-in Primitive
Returns the colors that the message window MWN is displayed with.  \n\
These are returned in a list of the form (fg_color,bg_color).
[From src/message-window.c:662]

(message-window-copy-style! msgwin msgwin-source)
- (app scwm message-window)
Copy the visual style of MSGWIN-SOURCE to the style for MSGWIN.
Returns a list of the font, fg-color, bg-color of msgwin-source
[From scheme/message-window.scm:260]

(message-window-font mwn)
- Built-in Primitive
Returns the font that the message window MWN uses for displaying text.
[From src/message-window.c:640]

(message-window-hide! mwn)
- Built-in Primitive
Hide the message window MWN.\n\
See also `message-window-show'.
[From src/message-window.c:554]

(message-window-id mwn)
- Built-in Primitive
Returns the X11 id of message window MWN.
[From src/message-window.c:651]

(message-window-image mwn)
- Built-in Primitive
Returns the image that message window MWN displays.
[From src/message-window.c:594]

(message-window-message mwn)
- Built-in Primitive
Returns the message that message window MWN displays.
[From src/message-window.c:583]

(message-window-options action #&key enable
					follow-window 
					position gravity offset 
					proportional-offset)
- (app scwm message-window)
Allow specification of message-window behavior for standard actions.

ACTION specifies the action for which this behavior should be
used. Currently, 'interactive-move and 'interactive-resize are the
only useful values. 

ENABLE is a boolean value inidicating whether to use a message window
for that action at all.

GRAVITY indicates which point on the message window is used as the
control point for placing it. See `gravity->alignmnents' for a list of
valid gravity specs.

If FOLLOW-WINDOW is true, the message window will track the window on
which an action is being performed, if applicable. In this case,
POSITION is ignored; OFFSET is taken as a list of the X and Y offsets
from the window's top left corner, and PROPORTIONAL-OFFSET is taken as
a list of factors to multiply by the window's size. For instance, an
OFFSET of (0 0) and a PROPORTIONAL-OFFSET of (0.5 0.5) will place the
message window at the center of of the window being operated on.

However, if FOLLOW-WINDOW is false, or there is no applicable window,
POSITION is interpreted as a list of x, y coordinates at which to
place the message window.

These options are cumulative for repeated calls to
`message-window-options' for the same action.
[From scheme/message-window.scm:52]

(message-window-position mwn)
- Built-in Primitive
Returns the position that message window MWN is/will be displayed at. \n\
This is returned as a four element list: (x y x-align y-align).
[From src/message-window.c:605]

(message-window-relief? mwn)
- Built-in Primitive
Returns the relief setting for the message window MWN.
[From src/message-window.c:674]

(message-window-set-colors! mwn fg-color bg-color)
- Built-in Primitive
Set the fore- and background colors to be used for the message window MWN.\n\
The foreground color will be FG-COLOR and the background color will be BG-COLOR
[From src/message-window.c:418]

(message-window-set-font! mwn fnt)
- Built-in Primitive
Set the font to be used for the message window MWN.\n\
The font will be FNT
[From src/message-window.c:394]

(message-window-set-image! mwn image #&optional fg-color bg-color shaped?)
- Built-in Primitive
Changes the background image for the message window MWN to IMAGE. \n\
FG-COLOR, BG-COLOR are the colors for the image, SHAPED? is whether it\n\
should use a shaped message window. If IMAGE is #f, then no image\n\
is used for MWN.
[From src/message-window.c:351]

(message-window-set-message! mwn message)
- Built-in Primitive
Changes the message displayed by the message window MWN.\n\
The message will be MESSAGE
[From src/message-window.c:330]

(message-window-set-position! mwn x y #&optional x-align y-align)
- Built-in Primitive
Set the position to be used for the message window MWN.\n\
X and Y specify the position of the control point of the window,\n\
while X-ALIGN and Y-ALIGN specify a fraction of the width and\n\
height of the message window to offset it from the specified position.\n\
X-ALIGN and Y-ALIGN should each be in the range [-1,0].  E.g.,\n\
If X-ALIGN and Y-ALIGN are both -0.5, the window will be\n\
centered at viewport pixel position X, Y.  Any of the parameters\n\
excep MWN can be #f to mean not to change the existing value.
[From src/message-window.c:457]

(message-window-set-relief! mwn draw-relief?)
- Built-in Primitive
Sets the relief for the window MWN.\n\
Relief will be drawn if and only if DRAW-RELIEF? is #t.
[From src/message-window.c:509]

(message-window-set-size! mwn width height)
- Built-in Primitive
Set the size of message window MWN to WIDTH pixels by HEIGHT pixels.\n\
If WIDTH or HEIGHT is #f, that direction is automatically sized\n\
based on the message content. This procedure is especially useful when a message window\n\
is used to display an image.
[From src/message-window.c:484]

(message-window-show! mwn)
- Built-in Primitive
Displays the message window MWN on the screen. \n\
Be sure to keep the displayed message window somewhere\n\
do that you can call `message-window-hide!' (otherwise\n\
the window will not ever disappear).
[From src/message-window.c:526]

(message-window-size mwn)
- Built-in Primitive
Returns the size of message window MWN in pixels.\n\
Returns as a two element list: (width height).
[From src/message-window.c:621]

(message-window-style msgwin #&key (font #f) (fg #f) (bg #f))
- (app scwm message-window)
Set visual style of MSGWIN.
FONT specifies the font, FG the foreground color, and BG the
background color.
[From scheme/message-window.scm:234]

(message-window-visible? mwn)
- Built-in Primitive
Return #t if the message window MWN is visible, #f otherwise.\n\
See also `message-window-show', `message-window-hide'.
[From src/message-window.c:570]

(message-window? mwn)
- Built-in Primitive
Returns #t if MWN is a msgwindow object, otherwise #f.
[From src/message-window.c:90]

(midpoint x1 x2)
- (app scwm smart-push)
No documentation supplied.
[From scheme/smart-push2.scm:8]

(mod-desk-size! dx dy)
- (app scwm prefs-menu)
Modify the current desktop size by the given parameter.
[From scheme/prefs-menu.scm:71]

(mod-mask-alt)
- Built-in Primitive
Return the bit-mask for the Alt modifier key, or #f.\n\
Returns #f if and only if there is no key bound to act as Alt, otherwise\n\
returns a power of two corresponding to the bit-mask of the modifier
[From src/binding.c:1468]

(mod-mask-control)
- Built-in Primitive
Return the bit-mask for the Control modifier key, or #f.\n\
Returns #f if and only if there is no key bound to act as Control, otherwise\n\
returns a power of two corresponding to the bit-mask of the modifier
[From src/binding.c:1452]

(mod-mask-hyper)
- Built-in Primitive
Return the bit-mask for the Hyper modifier key, or #f.\n\
Returns #f if and only if there is no key bound to act as Hyper, otherwise\n\
returns a power of two corresponding to the bit-mask of the modifier
[From src/binding.c:1476]

(mod-mask-meta)
- Built-in Primitive
Return the bit-mask for the Meta modifier key, or #f.\n\
Returns #f if and only if there is no key bound to act as Meta, otherwise\n\
returns a power of two corresponding to the bit-mask of the modifier
[From src/binding.c:1460]

(mod-mask-numlock)
- Built-in Primitive
Return the bit-mask for the NumLock modifier key, or #f.\n\
Returns #f if and only if there is no key bound to act as NumLock, otherwise\n\
returns a power of two corresponding to the bit-mask of the modifier
[From src/binding.c:1494]

(mod-mask-scrolllock)
- Built-in Primitive
Return the bit-mask for the ScrollLock modifier key, or #f.\n\
Returns #f if and only if there is no key bound to act as ScrollLock, otherwise\n\
returns a power of two corresponding to the bit-mask of the modifier
[From src/binding.c:1503]

(mod-mask-shift)
- Built-in Primitive
Return the bit-mask for the Shift modifier key, or #f.\n\
Returns #f if and only if there is no key bound to act as Shift, otherwise\n\
returns a power of two corresponding to the bit-mask of the modifier
[From src/binding.c:1444]

(mod-mask-super)
- Built-in Primitive
Return the bit-mask for the Super modifier key, or #f.\n\
Returns #f if and only if there is no key bound to act as Super, otherwise\n\
returns a power of two corresponding to the bit-mask of the modifier
[From src/binding.c:1485]

(module-and-proc-names->proc module-name proc-name)
- 
Return the procedure named PROC-NAME from module named MODULE-NAME.
PROC-NAME and MODULE-NAME are both strings.  Note that module name
must be a full name such as "app scwm base".
[From scheme/prompt-proc.scm:235]

(module-event-name-from-number num)
- 
Return the string module event name for event number NUM.
[From scheme/module-types.scm:64]

(mouse-event-type)
- Built-in Primitive
Return a symbol corresponding to the type of the most recent mouse event.\n\
Return value is one of 'motion, 'click, 'one-and-a-half-clicks, 'double-click.\n\
You can `case' on this symbol in a procedure bound to a mouse event\n\
to determine, e.g., whether the user single clicked or double clicked.
[From src/binding.c:1424]

(mouse-focus-click-raises?)
- Built-in Primitive
Returns a boolean value indicating whether a mouse-focus-click will raise the window.
[From src/miscprocs.c:397]

(move-after-deleting-constraints #&optional (win (get-window)))
- (app scwm ui-constraints)
Move WIN after deleting all constraints that involve it.
See also `delete-ui-constraints-involving-window!'.
[From scheme/ui-constraints.scm:746]

(move-after-deleting-inferred-constraints #&optional (win (get-window)))
- 
Move WIN after deleting all inferred constraints that involve it.
See also `delete-inferred-ui-constraints-involving-window!'.
[From scheme/ui-constraints.scm:753]

(move-group x y #&optional (group (get-window)))
- (app scwm group)
Move GROUP to virtual coordinates X, Y.
Move the window GROUP represents to X, Y, and keep the other windows in GROUP
in the same relative positions to this window.
[From scheme/group.scm:107]

(move-group-relative dx dy #&optional (group (get-window)))
- (app scwm group)
Move all members of GROUP by DX, DY pixels.
[From scheme/group.scm:102]

(move-group-to-desk desk #&optional (group (get-window)))
- (app scwm group)
Move all members of GROUP to DESK.
See `move-window-to-desk'.
[From scheme/group.scm:114]

(move-inside-aligned-viewport win xx yy)
- (app scwm virtual)
Ensure that WIN is entirely inside the XX, YY viewport if possible.
XX and YY are given in units of the display size.
[From scheme/virtual.scm:122]

(move-inside-current-viewport win)
- (app scwm virtual)
Ensure that WIN is entirely inside the current viewport, if possible.
[From scheme/virtual.scm:127]

(move-inside-own-viewport win)
- (app scwm virtual)
Ensure that WIN is entirely inside the closest viewport to its center.
The viewport selected will be an integral multiple of the desk size.
[From scheme/virtual.scm:131]

(move-inside-viewport win x y)
- (app scwm virtual)
Ensure that WIN is entirely inside the X, Y viewport if possible.
X and Y are given in pixels.
[From scheme/virtual.scm:110]

(move-nonsticky-windows-relative x y)
- (app scwm flux)
Move all windows right X, down Y pixels.
See `move-window-relative.'
[From scheme/flux.scm:355]

(move-pointer x y)
- (app scwm base)
Move the X11 pointer X pixels to the right, and Y pixels down.
If X is negative, moves to the left.  If Y is negative moves up.
[From scheme/base.scm:320]

(move-pointer-to sx sy)
- Built-in Primitive
Move the mouse pointer to viewport coordinates SX, SY.
[From src/miscprocs.c:253]

(move-to x y 
			#&optional (win (get-window)))
- (app scwm base)
Move WIN to viewport position X, Y.
If X or Y is #f, then do not move along that axis (use existing
value for that coordinate).
See `move-window' if you wish to move a window to a virtual position.
[From scheme/base.scm:328]

(move-to-viewport xx yy)
- (app scwm virtual)
Move to the viewport numbered (XX,YY).
The (0,0) viewport is the starting viewport.  XX and YY are
full display-size increments (e.g., (1,0) is the viewport
just to the right of the home (0,0) viewport).
[From scheme/virtual.scm:147]

(move-viewport x y)
- (app scwm base)
Move the viewport onto the virtual desktop relatively.
Moves X pixels horizontally, to the right if positive, to the left if
negative, and Y pixels vertically, down if positive, up if negative.
[From scheme/base.scm:395]

(move-window x y #&optional win)
- Built-in Primitive
Move WIN to virtual coordinates X, Y.\n\
If X is #f, then X defaults to the current X position of WIN.\n\
If Y is #f, then Y defaults to the current Y position of WIN.\n\
WIN defaults to the window context in the usual way if not\n\
specified.
[From src/window.c:2376]

(move-window-relative x y #&optional (win (get-window)))
- (app scwm base)
Move WIN X, Y pixels from where it is currently.
Positive X moves right, negative moves left.
Positive Y moves down, negative moves up.
[From scheme/base.scm:351]

(move-window-to-desk desk #&optional win)
- Built-in Primitive
Move WIN to DESK. DESK is an integer desk identifier. WIN\n\
defaults to the window context in the usual way if not specified.
[From src/window.c:2504]

(move-window-to-viewport xx yy #&optional (win (get-window)))
- (app scwm virtual)
Move WIN to the viewport numbered (XX,YY).
The (0,0) viewport is the starting viewport.  XX and YY are
full display-size increments (e.g., (1,0) is the viewport
just to the right of the home (0,0) viewport).  Uses 
`window-position-in-viewport' to select the position within
the viewport.
[From scheme/virtual.scm:101]

(msec->usec msec)
- (app scwm time-convert)
Convert MSEC milliseconds into an equivalent number of microseconds.
Especially useful for `usleep' and other timing related procedures
that take microseconds.
[From scheme/time-convert.scm:30]

(mwm-decorations->string decor)
- (app scwm xprop-extras)
Converts the MWM decoration flags into a readable form.
[From scheme/xprop-extras.scm:179]

(mwm-functions->string func)
- (app scwm xprop-extras)
Converts the MWM function flags into a readable form.
[From scheme/xprop-extras.scm:158]

(near-window-placement window-getter #&key (offset '(0 0))
				       (proportional-offset '(-0.5 -0.5))
				       (relative-to 'center))
- (app scwm placement)
Return a procedure that places a window near the window returned by WINDOW-GETTER.

If RELATIVE-TO is specified, it gives a symbolic location in the
existing window returned by WINDOW-GETTER to use as the control point
for the window placement.  RELATIVE-TO may be any of northwest north
northeast west center east southwest south southeast.

If OFFSET is specified, it is interpreted as a list of x and y offsets
to add to the control point.

If PROPORTIONAL-OFFSET is specified, it is interpreted as a list of
numbers to multiply by the being-placed window's width and height, and
is treated as an extra offset added to the control point.

The defaults are (0 0) for OFFSET and (-0.5 -0.5) for
PROPORTIONAL-OFFSET, with the result that by default the window is
centered at the control point of the existing window.
[From scheme/placement.scm:162]

(nearest-aligned-viewport pos)
- (app scwm virtual)
Compute the nearest valid integral viewport position to POS.
POS is a list of x and y virtual coordinates in that order. The
viewport coordinates returned will be in the same format and will be a
integral multiples of the desk size.
[From scheme/virtual.scm:47]

(netpbm-loader fname)
- (app scwm image-loaders)
Tries to load an arbitrary image using the netpbm packge.
Uses `anytoppm' and `ppmtoxpm' to try to convert the file to an xpm,
then attempts to load it as such.
[From scheme/image-loaders.scm:38]

(netscape-av-search word)
- (app scwm netscape)
Use Netscape to do an AltaVista search for WORD.
Just go to the AltaVista home page if WORD is #f.
[From scheme/netscape.scm:193]

(netscape-av-search-selection-url #&optional (selection "PRIMARY"))
- 
Use Netscape to do a AltaVista search of the selection, SELECTION.
SELECTION defaults to "PRIMARY" if not specified.
[From scheme/netscape.scm:217]

(netscape-bookmark-search)
- 
Prompt for a string, and popup a list of matching netscape bookmarks.
[From scheme/flux-gtk.scm:59]

(netscape-download-closed-action win)
- (app scwm netscape)
Execute the closed action for WIN, a netscape download window.
This plays `*netscape-download-closed-wav*' iff WIN has been
up from at least `*netscape-download-closed-threshold-seconds*'.
[From scheme/netscape.scm:148]

(netscape-google-search word)
- (app scwm netscape)
Use Netscape to do a google search for WORD.
Just go to the google home page if WORD is #f.
[From scheme/netscape.scm:186]

(netscape-google-search-cut-buffer)
- (app scwm netscape)
Use Netscape to do a Google search of the `X-cut-buffer-string'.
[From scheme/netscape.scm:201]

(netscape-google-search-selection-url #&optional (selection "PRIMARY"))
- (app scwm netscape)
Use Netscape to do a Google search of the selection, SELECTION.
SELECTION defaults to "PRIMARY" if not specified.
[From scheme/netscape.scm:208]

(netscape-goto-cut-buffer-url 
		 #&optional (new *netscape-new-window*))
- (app scwm netscape)
Goto the url that is held in the X11 cut buffer.
See `X-cut-buffer' and `netscape-goto-url'.  NEW can be #f to
not open a new netscape frame.
[From scheme/netscape.scm:140]

(netscape-goto-selection-url 
		 #&optional (new *netscape-new-window*) (selection "PRIMARY"))
- (app scwm netscape)
Goto the url that is held in the X11 selection, SELECTION.
Uses the cut buffer instead if no selection exists.
See `X-handle-selection-string' and `netscape-goto-url'.  NEW can be #f to
not open a new netscape frame. SELECTION defaults to "PRIMARY" if not given.

[From scheme/netscape.scm:127]

(netscape-goto-url url 
                #&optional
		(completion #f)
		(new *netscape-new-window*)
		#&key (start-netscape-as-needed #f))
- (app scwm netscape)
Make netscape go to the location URL.
Calls COMPLETION when done.
The optional argument specifies whether a new window should be opened.
It defaults to `*netscape-new-window*'.
[From scheme/netscape.scm:106]

(netscape-win)
- (app scwm netscape)
Return a netscape window, prefer a visible netscape window.
Should return the window containing the pointer if that is a Netscape window.
May error if no netscape windows are present.
[From scheme/netscape.scm:43]

(next-visible-non-iconified-window)
- (app scwm winops)
Switch focus to the next visible and not iconified window.
[From scheme/winops.scm:307]

(next-window #&key (window (get-window #f #f))
			     (only '()) (except '()) (proc window-list-proc))
- (app scwm winlist)
Switch to the next matching window.
If WINDOW is given, switch to that window.
ONLY and EXCEPT control which windows match --- see `list-windows' for 
details.
PROC is a procedure of one argument which does the work after the
window list is re-ordered.  PROC defaults to `window-list-proc'.
By specifiying, e.g., "#:proc focus-change-warp-pointer" the
new window will be raised, focussed, and the pointer will be warped
to the window.
See also `prev-window'.
[From scheme/winlist.scm:172]

(nonant->dirvector nonant)
- (app scwm ui-constraints-classes)
No documentation supplied.
[From scheme/ui-constraints-classes.scm:221]

(nonant->gravity nonant)
- (app scwm winops)
Return a gravity symbol given NONANT in [0,8].
0 is northwest, 1 is north, 2 is northeast, etc.
See also `get-window-nonant'.
[From scheme/winops.scm:362]

(nonant->string nonant)
- 
Return the brief string name for NONANT, an integer.
E.g., an argument of 1 returns `N'.
[From scheme/nonants.scm:198]

(nonant-decoration win nonant)
- (app scwm nonants)
Return the window id numbers of the decoration for WIN corresponding to NONANT.
E.g., NONANT == 0 will answer the id of the northwest corner window.
[From scheme/nonants.scm:71]

(nonant-highlight-color)
- Built-in Primitive
Return the color used for highlighting nonants.
[From src/window.c:3662]

(normal-border  #&optional win)
- Built-in Primitive
Cause WIN to be decorated with a normal border.\n\
This means that there will be resize handles in the corners. WIN\n\
defaults to the window context in the usual way if not specified.
[From src/window.c:3239]

(not-menu-background)
- Built-in Primitive
Return the default background color for icons, window frames, etc.
[From src/color.c:952]

(not-menu-foreground)
- Built-in Primitive
Return the default foreground color for icons, titlebars, etc.
[From src/color.c:917]

(number->hex-string n)
- (app scwm stringops)
A convenience wrapper around `number->string' that returns N in base-16.
[From scheme/stringops.scm:40]

(number-in-base number base #&optional value)
- (app scwm number-convert)
Return the integer that corresponds to string NUMBER in base BASE.
VALUE is the optional value of any prefix to NUMBER.
[From scheme/number-convert.scm:38]

(number-of-mouse-buttons)
- Built-in Primitive
Return the number of mouse buttons of the current mouse.
[From src/binding.c:1437]

(object-documentation sym)
- (app scwm doc)
Return documentation attached to SYM or to (eval SYM).
[From scheme/doc.scm:75]

(oct number)
- (app scwm number-convert)
Return the integer that corresponds to string NUMBER as an octal value.
[From scheme/number-convert.scm:58]

(on-current-desk? #&optional (win (get-window)))
- (app scwm wininfo)
Return #t if WIN is on the current desk.
[From scheme/wininfo.scm:42]

((on-desk-n? n) #&optional (win (get-window)))
- (app scwm wininfo)
Returns a function which takes WIN and returns #t if WIN is on desk N, else #f.
[From scheme/wininfo.scm:38]

(on-desk-placement desk)
- (app scwm placement)
Return a procedure that takes a window and places it on DESK.
The procedure will act just like calling `place-on-desk' on the
window with the same DESK argument.
[From scheme/placement.scm:108]

(on-desk? n #&optional (win (get-window)))
- (app scwm wininfo)
Return #t if WIN is on desk N, else #f.
[From scheme/wininfo.scm:34]

(one-window-prompter name #&optional (p1 "select window"))
- (app scwm ui-constraints-classes)
No documentation supplied.
[From scheme/ui-constraints-classes.scm:135]

(opaque-move  #&optional win)
- Built-in Primitive
Move WIN interactively, opaquely.\n\
Returns a list '(X Y) which is the new viewport position of WIN.\n\
This allows the user to drag the window itself around the screen. WIN\n\
defaults to the window context in the usual way if not specified.
[From src/move.c:576]

(opaque-resize  #&optional win)
- Built-in Primitive
Resize WIN interactively, opaquely.\n\
Returns a list '(width height) that is the new size of WIN.\n\
This allows the user to drag the boundaries of the window to set its\n\
size. WIN defaults to the window context in the usual way if not\n\
specified. The window is updated immediately as the size changes take\n\
place.
[From src/resize.c:723]

(option-menu sym)
- (app scwm preferences)
No documentation supplied.
[From scheme/preferences.scm:197]

(option-widget-and-getter sym)
- (app scwm preferences)
No documentation supplied.
[From scheme/preferences.scm:155]

(or-map proc first . rest)
- (app scwm listops)
Apply PROC repeatedly, returning the first true value.
PROC is applied to elements of FIRST and the lists comprising REST
much as `map' would do it. If PROC never returns a true value, return
#f instead. If all the lists are empty, return #f.
[From scheme/listops.scm:128]

(output-of-system-cmd cmd)
- (app scwm file)
Return the output of command shell execution of CMD.
CMD is run synchronously and its output is piped into the return value
of this function, as a string.
[From scheme/file.scm:102]

(pair-virtual->viewport pt)
- (app scwm window-locations)
Convert a pair point from virtual to viewport coordinates.
Return value is (viewport-x . viewport-y).
[From scheme/window-locations.scm:10]

(paste-window-title-from-cut-buffer #&optional (window (get-window)))
- (app scwm xprop-extras)
Set the window title of WINDOW to be the string in the X cut buffer.
Do nothing if the cut buffer does not contain a string.
[From scheme/xprop-extras.scm:34]

(path-list->string-with-colons l)
- (app scwm file)
Convert L, a list of string directory names, to a single colon-separated string.
Returns that string.
[From scheme/file.scm:67]

(percent-visible #&optional (win (get-window)))
- (app scwm wininfo)
Return the percent of WIN currently in the viewport as a real in [0,100].
Note that this does not consider other windows which may
obscure WIN;  it only checks what fraction of WIN would be visible
if it were on top (unobscured).
[From scheme/wininfo.scm:126]

(pix->%x pix)
- (app scwm base)
Return the percent of the display width that PIX is.
[From scheme/base.scm:159]

(pix->%y pix)
- (app scwm base)
Return the percent of the display height that PIX is.
[From scheme/base.scm:163]

(place-at-center win)
- (app scwm placement)
Place window in the center of the current viewport.
[From scheme/placement.scm:76]

(place-at-point win #&key (offset '(0 0))
			       (proportional-offset '(-0.5 -0.5)))
- (app scwm placement)
Place WIN at the pointer position.

If the keyword argument OFFSET is specified, it is interpreted as a
list of x and y offsets to add to the pointer position.

If the keyword argument PROPORTIONAL-OFFSET is specified, it is
interpreted as a list of numbers to multiply by the window's width and
height, and is treated as an extra offset.

The defaults are (0 0) for OFFSET and (-0.5 -0.5) for
PROPORTIONAL-OFFSET, with the result that by default the window is
centered at the mouse pointer position.
[From scheme/placement.scm:59]

(place-in-viewport win xx yy)
- (app scwm placement)
Move WIN to the (XX, YY) viewport.
XX and YY are full display-size increments (e.g., (1,0) is the
viewport just to the right of the home (0,0) viewport).
This is equivalent to `move-window-to-viewport', just named
differently for clarity and convenience.
[From scheme/placement.scm:36]

(place-interactively win #&key (resize #f))
- (app scwm placement)
Place WIN interactively.

Firts WIN is moved interactively with a rubber-band style move, then,
if the optional RESIZE argument is provided, it is resized
interactively immediately after it is placed.
[From scheme/placement.scm:50]

(place-nonant-marker #&optional (w (get-window-with-nonant)))
- (app scwm window-selection)
Place a nonant marker on W.
[From scheme/window-selection.scm:172]

(place-on-default-desk win)
- Built-in Primitive
Place WIN on a desk according to the default algorithm.\n\
Place a window with it's window group, with a window it is transient\n\
for, on the desk it was on previous to a restart, on the desk\n\
specified with the starts-on-desk flag,\n\
\n\
This is called as part of `default-placement-proc'.  It could also be\n\
used in user-defined placement procedures (see \n\
`set-window-placement-proc!').
[From src/placement.c:430]

(place-on-desk win desk)
- (app scwm placement)
Move window WIN to desk DESK.
This is equivalent to `move-window-to-desk', just named
differently for clarity and convenience.
[From scheme/placement.scm:44]

(plain-border  #&optional win)
- Built-in Primitive
Cause WIN to be decorated with a plain border.\n\
This means that there will be no resize handles in the corners. WIN\n\
defaults to the window context in the usual way if not specified.
[From src/window.c:3268]

(pointer-position)
- Built-in Primitive
Return the current position of the mouse pointer in pixels.\n\
The return value is a two-element list of the x and y coordinates.
[From src/miscprocs.c:238]

(pop-window-configuration #&optional (win (get-window)))
- (app scwm window-configuration)
Restore the last configuration of WIN that was saved on its stack of previous configurations.
[From scheme/window-configuration.scm:120]

(popup-docs-for var)
- (app scwm preferences)
No documentation supplied.
[From scheme/preferences.scm:80]

(popup-menu menu #&optional warp-to-index x-pos y-pos left-side? permit-alt-release-selection?)
- Built-in Primitive
Popup MENU, a menu object, and warp to the item WARP-TO-INDEX if it is a number.\n\
X-POS, Y-POS specify a desired position for the menu, and LEFT-SIDE? should be\n\
#t if the menu should be left justified against X-POS, or #f if it should be\n\
right justified against X-POS. If PERMIT-ALT-RELEASE-SELECTION? is #t, then releasing\n\
the Alt/Meta modifier select a menu item.
[From src/menu.c:1648]

(popup-menu-from-decoration menu win button-number)
- (app scwm base)
Popup MENU from WIN's decoration numbered BUTTON-NUMBER.
This positions the popup menu appropriately.
[From scheme/base.scm:575]

(popup-option-menu sym)
- (app scwm preferences)
No documentation supplied.
[From scheme/preferences.scm:222]

(popup-ui-constraints-toggle-menu)
- 
Popup a menu that can be used to turn added constraints on and off.
See also `constraint-toggle-menu'.
[From scheme/ui-constraints-toggle-menu.scm:68]

(popup-window-group-menu)
- (app scwm group)
Popup the window group menu.
[From scheme/group.scm:234]

(popup-window-group-menu-no-warp)
- (app scwm group)
Popup the window group menu without warping to the first menu item.
[From scheme/group.scm:239]

(position-message-window! msgwin x y gravity)
- (app scwm message-window)
Move the move/resize message window's GRAVITY point to (X,Y).
GRAVITY can be one of 'nw, 'n, 'ne, 'w, 'center, 'e, 'sw, 's, 'se
or spelled-out versions of these. See also `gravity->alignments'.
[From scheme/message-window.scm:40]

(prev-visible-non-iconified-window)
- (app scwm winops)
Switch focus to the previous visible and not iconified window.
[From scheme/winops.scm:316]

(prev-window #&key (window (get-window #f #f))
			     (only '()) (except '()) (proc window-list-proc))
- 
Circulate to the previous matching window.
If WINDOW is given, circulate to that window.
ONLY and EXCEPT control which windows match --- see `list-windows' for 
details.
PROC is a procedure of one argument which does the work after the
windows are circulated.  PROC defaults to `window-list-proc'.
See also `next-window'.
[From scheme/winlist.scm:187]

(printable-char->keysym-string char)
- (app scwm send-string)
Return the keysym string corresponding to a printable character.
CHAR is a scheme character.  The return value is appropriate for
use by `send-key'.  See also `X-synthetic-send-string'.
[From scheme/send-string.scm:12]

(proc-doc proc)
- 
Return documentation for PROC.
[From scheme/doc.scm:97]

(procedure->bindings-description proc)
- 
No documentation supplied.
[From scheme/reflection.scm:247]

(procedure->string proc)
- (app scwm reflection)
No documentation supplied.
[From scheme/reflection.scm:27]

(procedure-apropos rgx)
- (app scwm reflection)
Returns a list of procedures that match RGX.
This returns a simple list of procedure objects.
[From scheme/reflection.scm:187]

(procedure-apropos-with-modules rgx)
- (app scwm reflection)
Returns a list of procedures that match RGX along with defined-in modules.
The returned list contains pairs (modulesym . procsym)
[From scheme/reflection.scm:179]

(procedure-arity proc)
- (app scwm reflection)
Return the arity values for PROC.
Three values are returned in a list: (num-required num-optional rest-argument-p).
[From scheme/reflection.scm:36]

(procedure-formals proc)
- (app scwm reflection)
Return a list of the formal arguments for PROC.
Works for both primitives and procedures. If PROC was
created using an optargs *-format macro, this 
procedure will not provide much useful information.
See instead `procedure-keyword-arguments' and 
`procedure-optional-arguments'.
[From scheme/reflection.scm:57]

(procedure-interactive-spec proc)
- (app scwm reflection)
No documentation supplied.
[From scheme/reflection.scm:171]

(procedure-is-interactive? proc)
- (app scwm reflection)
Return #t iff PROC is interactive.
[From scheme/reflection.scm:174]

(procedure-keyword-formals proc)
- (app scwm reflection)
Returns an a-list of the optargs keyword arguments and default values for PROC.
[From scheme/reflection.scm:102]

(procedure-num-optional-args proc)
- (app scwm reflection)
Return the number of optional arguments for PROC.
[From scheme/reflection.scm:47]

(procedure-num-required-args proc)
- (app scwm reflection)
Return the number of required arguments for PROC.
[From scheme/reflection.scm:42]

(procedure-optargs-arglist proc)
- (app scwm reflection)
Return a list of the optargs keyword arguments for PROC.
Returns #f if PROC was not defined using keyword or optional
arguments (this includes procedures defined using standard . rest
syntax).  Otherwise returns a list such as '(foo #&optional bar).
Note that these currently do not display in their expected format
[From scheme/reflection.scm:92]

(procedure-optional-formals proc)
- (app scwm reflection)
Returns a list of the optional arguments for PROC.
[From scheme/reflection.scm:114]

(procedure-required-formals proc)
- (app scwm reflection)
Return a list of the required formal arguments for PROC.
Returns #f if PROC is a primitive.  This will not include
any "lambda*" formals generated using optargs. See also
`procedure-keyword-arguments' and `procedure-optional-arguments'.
[From scheme/reflection.scm:75]

(procedure-string->procedure proc-name)
- (app scwm reflection)
Return a procedure given its name.
[From scheme/reflection.scm:32]

(procedure-takes-rest-arg? proc)
- (app scwm reflection)
Return #t iff PROC take a rest argument.
[From scheme/reflection.scm:52]

(process-use-scwm-modules module-list)
- 
Returns a list of all the modules loaded in successfully.
Modules that failed to load have #f in their place in the
list instead of the module.
[From scheme/minimal.scm:184]

(program-exists? program-name)
- (app scwm path-cache)
Return #t iff PROGRAM-NAME is in the current $PATH.
[From scheme/path-cache.scm:16]

(prompt-binding #&optional (title "Scwm Bindings"))
- 
No documentation supplied.
[From scheme/prompt-binding.scm:531]

(prompt-binding-vbox)
- (app scwm prompt-binding)
No documentation supplied.
[From scheme/prompt-binding.scm:256]

(prompt-bool prompt proc #&key
			      (initval #f)
			      (title "prompt-bool"))
- (app scwm prompt-bool)
Prompt with PROMPT for a boolean value, and call PROC with result if Ok button is clicked.
[From scheme/prompt-bool.scm:43]

(prompt-bool-hbox prompt initval)
- 
Create and return a boolean-prompting hbox and button.
hbox is the gtk container widget, selected-proc?? is a proc
that when invoked returns #t or #f depending on the state
of the boolean displayed in hbox.
The returned value is a list: (hbox getter).
See also `prompt-bool'.
[From scheme/prompt-bool.scm:52]

(prompt-color prompt proc #&key
			      (initval #f)
			      (title "prompt-color")
			      (favorites #f))
- (app scwm prompt-color)
Prompt using PROMPT for a color and call PROC with value if Ok is clicked.
INITVAL is a default initial color as a color object or string.
TITLE is a window title.
[From scheme/prompt-color.scm:45]

(prompt-color-hbox prompt initval #&optional favorites)
- 
Create and return a color-prompting hbox, complete with link to full color dialog.
PROMPT is the prompt, INITVAL is the initial color as a color object or a string.
The returned value is a list: (hbox getter).
See also `prompt-color'.
[From scheme/prompt-color.scm:70]

(prompt-enum prompt choices proc #&key
			      (initval #f)
			      (title "prompt-enum"))
- (app scwm prompt-enum)
Prompt with PROMPT for one of CHOICES, and call PROC with result.
CHOICES is an a-list of symbols and strings.
[From scheme/prompt-enum.scm:33]

(prompt-enum-hbox prompt choices initval)
- 
Create and return an enum-prompting hbox and button.
hbox is the gtk container widget, selected-proc?? is a proc
that when invoked returns #t or #f depending on the state
of the boolean displayed in hbox. 
The returned value is a list: (hbox getter).
PROMPT is the prompt to display, CHOICES is an a-list of
symbols and strings. INITVAL is a symbol in the CHOICES a-list.
See also `prompt-enum'.
[From scheme/prompt-enum.scm:43]

(prompt-file prompt proc #&key
			      (initval #f)
			      (title #f)
			      (favorites #f))
- (app scwm prompt-file)
Prompt using PROMPT for a file and call PROC with value if Ok is clicked.
INITVAL is a default initial file as a string.
TITLE is a window title.
[From scheme/prompt-file.scm:31]

(prompt-file-hbox prompt initval #&optional favorites)
- 
Create and return a file-prompting hbox, complete with link to full file dialog.
PROMPT is the prompt, INITVAL is the initial file as a string.
The returned value is a list: (hbox getter).
See also `prompt-file'.
[From scheme/prompt-file.scm:64]

(prompt-font prompt proc #&key
			      (initval #f)
			      (title #f))
- (app scwm prompt-font)
Prompt using PROMPT for a font and call PROC with value if Ok is clicked.
INITVAL is a default initial font as a font object or string.
TITLE is a window title.
[From scheme/prompt-font.scm:43]

(prompt-font-hbox prompt initval)
- 
Create and return a font-prompting hbox, complete with link to full font dialog.
PROMPT is the prompt, INITVAL is the initial font as a font object or a string.
The returned value is a list: (hbox getter).
See also `prompt-font'.
[From scheme/prompt-font.scm:54]

(prompt-from-symbol sym)
- (app scwm defoption)
Return a string prompt that is appropriate for the option symbol SYM.
[From scheme/defoption.scm:148]

(prompt-integer-range prompt range proc #&key
				      (initval #f) (title #f))
- (app scwm prompt-range)
Prompt using PROMPT for an integer value in RANGE, and call PROC with value if Ok is clicked.
RANGE is a cons cell (low . high); ranges are inclusive. 
INITVAL is a default initial value.
TITLE is a window title.
[From scheme/prompt-range.scm:59]

(prompt-integer-range-hbox prompt range initval)
- 
Create and return an integer-range-prompting hbox and scale, label.
PROMPT is the prompt, RANGE is the allowed rane, and INITVAL is the initial string.
The returned value is a list: (hbox getter).
See also `prompt-range', `prompt-integer-range', `prompt-range-hbox'.
[From scheme/prompt-range.scm:97]

(prompt-path-hbox prompt initval)
- (app scwm prompt-string)
Create and return a path-prompting hbox and entry.
PROMPT is the prompt, and INITVAL is the initial path (a list of strings).
The returned value is a list: (hbox getter entry).
See also `prompt-string'.
[From scheme/prompt-string.scm:75]

(prompt-proc prompt proc #&key
			      (initval #f)
			      (title #f)
			      (favorites #f))
- (app scwm prompt-proc)
Prompt using PROMPT for a proc and call PROC with value if Ok is clicked.
INITVAL is a default initial proc as a string.
TITLE is a window title.
[From scheme/prompt-proc.scm:40]

(prompt-proc-hbox prompt initval #&optional favorites)
- (app scwm prompt-proc)
Create and return a proc-prompting hbox, complete with link to full proc dialog.
PROMPT is the prompt, INITVAL is the initial proc as a string.
The returned value is a list: (hbox getter entry).
See also `prompt-proc'.
[From scheme/prompt-proc.scm:79]

(prompt-range prompt range proc #&key
			      (initval #f)
			      (title #f)
			      (digits 1))
- (app scwm prompt-range)
Prompt using PROMPT for a numeric value in RANGE, and call PROC with value if Ok is clicked.
RANGE is a cons cell (low . hight); ranges are inclusive. 
INITVAL is a default initial value.
TITLE is a window title.
[From scheme/prompt-range.scm:46]

(prompt-range-hbox prompt range initval #&optional (digits 1))
- (app scwm prompt-range)
Create and return a range-prompting hbox and scale, label.
PROMPT is the prompt, RANGE is the allowed rane, and INITVAL is the initial string.
The returned value is a list: (hbox getter).
See also `prompt-range'.
[From scheme/prompt-range.scm:72]

(prompt-string prompt proc #&key
			       (initval #f) (title "prompt-string"))
- (app scwm prompt-string)
Use PROMPT as prompt in text entry widget and call PROC with the entered string.
E.g., (prompt-string "Enter new name" (lambda (nm) (set-window-title! w nm)))
[From scheme/prompt-string.scm:35]

(prompt-string-hbox prompt initval)
- (app scwm prompt-string)
Create and return a string-prompting hbox and entry.
PROMPT is the prompt, and INITVAL is the initial string.
The returned value is a list: (hbox getter entry).
See also `prompt-string'.
[From scheme/prompt-string.scm:59]

(prompting-shell proc title hbox getter)
- 
Create a GTk+ shell window and return a procedure that closes it.
PROC is the procedure to run when the okay button is clicked, and
it is called with a single argument, the result of applying
GETTER to no arguments.  TITLE is the title of the window,
and HBOX is a Gtk HBox widget that the shell should contain.
[From scheme/prompting-shell.scm:28]

(propagate-selection-to-cut-buffer #&optional (selection "PRIMARY"))
- (app scwm xprop-extras)
Make the cut-buffer contain the current selection.
[From scheme/xprop-extras.scm:40]

(property-changed-debug prop win)
- (app scwm property-respond)
Print debugging information about the property change of PROP on WIN.
See also `X-PropertyNotify-hook'.
[From scheme/property-respond.scm:51]

(property-changed-respond prop win)
- (app scwm property-respond)
Handle various property changes of PROP on WIN.
See also `X-PropertyNotify-hook'.  Currently handles
"flashing" and "flash".
[From scheme/property-respond.scm:90]

(proplist-append-array-element pl-array item)
- Primitive from (app scwm proplist)
Return the PL-ARRAY after appending ITEM to the end.
[From modules/proplist/scwmproplist.c:289]

(proplist-deep-copy pl)
- Primitive from (app scwm proplist)
Return a deep copy of property list PL.
[From modules/proplist/scwmproplist.c:360]

(proplist-delete-domain pl-domain-name kick-me?)
- Primitive from (app scwm proplist)
Delete domain PL-DOMAIN-NAME.
If KICK-ME? is #f, any callback registered for the domain will not be called.
[From modules/proplist/scwmproplist.c:719]

(proplist-get-all-dictionary-keys pl-dict)
- Primitive from (app scwm proplist)
Return a proplist array object that contains all the keys of PL-DICT.
[From modules/proplist/scwmproplist.c:485]

(proplist-get-array-element pl index)
- Primitive from (app scwm proplist)
Return the element at INDEX offset of PL.
[From modules/proplist/scwmproplist.c:456]

(proplist-get-container pl)
- Primitive from (app scwm proplist)
Return the array or dictionary of which PL is an element.
[From modules/proplist/scwmproplist.c:444]

(proplist-get-data pl)
- Primitive from (app scwm proplist)
Returns the raw data from PL (a data proplist object) as a string.
[From modules/proplist/scwmproplist.c:558]

(proplist-get-data-description pl)
- Primitive from (app scwm proplist)
Returns a description of PL (a data proplist object) in GNUstep format.
[From modules/proplist/scwmproplist.c:536]

(proplist-get-dictionary-entry pl-dict key)
- Primitive from (app scwm proplist)
Return the proplist dictionary entry associated with entry KEY in PL-DICT.
Returns #f if KEY is not in PL-DICT.
[From modules/proplist/scwmproplist.c:498]

(proplist-get-domain pl-domain-name)
- Primitive from (app scwm proplist)
Return a property list represeting the domain PL-DOMAIN-NAME.
[From modules/proplist/scwmproplist.c:735]

(proplist-get-domainnames)
- Primitive from (app scwm proplist)
Return a array proplist containing all registered domain names.
[From modules/proplist/scwmproplist.c:747]

(proplist-get-filename pl)
- Primitive from (app scwm proplist)
Return the filename of PL.
[From modules/proplist/scwmproplist.c:758]

(proplist-get-number-of-elements pl)
- Primitive from (app scwm proplist)
Return the number of elements in PL.
If PL is a string or data objects, this returns 0.  If it
is an array or dictionary, it is the number of elements
or pairs.
[From modules/proplist/scwmproplist.c:471]

(proplist-get-string pl)
- Primitive from (app scwm proplist)
Returns the string from PL (a string proplist object).
Note that numerous procedures automatically convert string
proplist objects into Guile strings, so this may not often be necessary.
[From modules/proplist/scwmproplist.c:583]

(proplist-get-string-description pl)
- Primitive from (app scwm proplist)
Retuns a description of PL (a string proplist object) in GNUstep format.
If the string contains whitespace or special characters, the string returned will
be enclosed in quotes.
[From modules/proplist/scwmproplist.c:513]

(proplist-insert-array-element pl-array item index)
- Primitive from (app scwm proplist)
Return the PL-ARRAY after inserting ITEM at offset INDEX.
[From modules/proplist/scwmproplist.c:272]

(proplist-insert-dictionary-entry pl-dict key Value)
- Primitive from (app scwm proplist)
Return PL-DICT after inserting (KEY,VALUE) into it.
[From modules/proplist/scwmproplist.c:304]

(proplist-is-array pl)
- Primitive from (app scwm proplist)
Return #t iff PL is an array proplist object, #f otherwise.
[From modules/proplist/scwmproplist.c:626]

(proplist-is-compound pl)
- Primitive from (app scwm proplist)
Return #t iff PL is a dictionary or array proplist object, #f otherwise.
[From modules/proplist/scwmproplist.c:659]

(proplist-is-data pl)
- Primitive from (app scwm proplist)
Return #t iff PL is a data proplist object, #f otherwise.
[From modules/proplist/scwmproplist.c:615]

(proplist-is-dictionary pl)
- Primitive from (app scwm proplist)
Return #t iff PL is a dictionary proplist object, #f otherwise.
[From modules/proplist/scwmproplist.c:637]

(proplist-is-equal plA plB)
- Primitive from (app scwm proplist)
Return #t iff PLA is equal to PLB.
This does a case sensitive comparison by default.
See `proplist-set-string-cmp-hook' for changing the behaviour.
[From modules/proplist/scwmproplist.c:372]

(proplist-is-simple pl)
- Primitive from (app scwm proplist)
Return #t iff PL is a string or data proplist object, #f otherwise.
[From modules/proplist/scwmproplist.c:648]

(proplist-is-string pl)
- Primitive from (app scwm proplist)
Return #t iff PL is a string proplist object, #f otherwise.
[From modules/proplist/scwmproplist.c:604]

(proplist-make-array-from-elements  . items)
- Primitive from (app scwm proplist)
Return a newly created array object populated with elements ITEMS.
[From modules/proplist/scwmproplist.c:185]

(proplist-make-data data)
- Primitive from (app scwm proplist)
Return a proplist argument containing arbitrary data from DATA.
This is often unnecessary as the proplist procedures will
permit Guile strings to be used anywhere a string proplist object is expected.
[From modules/proplist/scwmproplist.c:424]

(proplist-make-dictionary-from-entries  . items)
- Primitive from (app scwm proplist)
Return a newly created dictionary object with elements ITEMS.
The elements in ITEMS should be a flat list (key1 value1 key2 value2 ...).
[From modules/proplist/scwmproplist.c:216]

(proplist-merge-dictionaries pl-dict-dest pl-dict-source)
- Primitive from (app scwm proplist)
Return PL-DICT-DEST after merging in all entries from PL-DICT-SOURCE.
[From modules/proplist/scwmproplist.c:334]

(proplist-register pl-domain-name callback)
- Primitive from (app scwm proplist)
Register thunk CALLBACK to be called when PL-DOMAIN-NAME changes.
[From modules/proplist/scwmproplist.c:682]

(proplist-remove-array-element pl-array index)
- Primitive from (app scwm proplist)
Return PL-ARRAY after deleting the element at position INDEX.
[From modules/proplist/scwmproplist.c:257]

(proplist-remove-dictionary-entry pl-dict key)
- Primitive from (app scwm proplist)
Return PL-DICT after removing KEY and its corresponding value from it.
[From modules/proplist/scwmproplist.c:320]

(proplist-save pl atomically?)
- Primitive from (app scwm proplist)
Save PL, atomically if ATOMICALLY? is #t.
[From modules/proplist/scwmproplist.c:800]

(proplist-set-domain pl-domain-name value kick-me?)
- Primitive from (app scwm proplist)
Set PL-DOMAIN-NAME to have VALUE.
If KICK-ME? is #f, any callback registered for the domain will not be called.
[From modules/proplist/scwmproplist.c:701]

(proplist-set-filename! pl filename)
- Primitive from (app scwm proplist)
Set the filename for PL to be FILENAME.
[From modules/proplist/scwmproplist.c:770]

(proplist-set-string-cmp-hook pred)
- Primitive from (app scwm proplist)
Use PRED as a predicate for doing proplist string comparisons.
PRED should take two proplist objects and return #t or #f to answer
whether they are equal in whatever sense it chooses.
[From modules/proplist/scwmproplist.c:387]

(proplist-shallow-copy pl)
- Primitive from (app scwm proplist)
Return a shallow copy of property list PL.
[From modules/proplist/scwmproplist.c:348]

(proplist-synchronize pl)
- Primitive from (app scwm proplist)
Synchronize the in-memory proplist PL with the disk contents.
[From modules/proplist/scwmproplist.c:814]

(proplist-unregister pl-domain-name)
- Primitive from (app scwm proplist)
No longer invoke callback when domain associated with PL-DOMAIN-NAME is changed.
[From modules/proplist/scwmproplist.c:670]

(publish-scwm-evaluator-servant)
- 
Publish the scwm-evaluator-servant by putting its IOR as a property on the root window.
The "SCWM_EVALUATOR_IOR" property of the root window will contain a
printable string for Corba clients to use to access the scwm-scheme-evaluator interface.
[From scheme/corba.scm:30]

(push-undo-global)
- (app scwm undo)
Push the global state onto the undo list.
See also `insert-undo-global' which honours
the current position in the undo-list, undo-index.
[From scheme/undo.scm:61]

(push-undo-state state)
- (app scwm undo)
Push STATE onto the undo list.
[From scheme/undo.scm:74]

(push-window-configuration #&optional (win (get-window)))
- (app scwm window-configuration)
Save the configuration of WIN on its stack of previous configurations.
[From scheme/window-configuration.scm:110]

(put-string-in-palm-clipboard str)
- (app scwm flux)
No documentation supplied.
[From scheme/flux.scm:328]

(quote-key-event)
- (app scwm quote)
Quote the next key event and let it pass to the application.
[From scheme/quote.scm:34]

(quote-key-events?)
- Built-in Primitive
Return #t iff key events are being qutoed.\n\
See also `set-quote-key-events!'.
[From src/binding.c:868]

(quote-mouse-event)
- (app scwm quote)
Quote the next mouse event and let it pass to the application.
[From scheme/quote.scm:43]

(quote-next-event)
- (app scwm quote)
Quote the next mouse or keyboard event and let it pass to the application.
[From scheme/quote.scm:52]

(quotify-single-quotes str)
- (app scwm flux)
Return a string that has single quote characters backslashified.
[From scheme/flux.scm:99]

(raise-and-stop-flashing #&optional (win (get-window)))
- 
Turn off window flashing of WIN and raise it.
Also return #f so that this can be used as an bound IMMEDIATE-PROC.
[From scheme/flash-window.scm:82]

(raise-by-one #&optional (w (get-window)))
- 
Raise window W above the next window up that overlaps it.
W defaults to the window context in the usual way.
[From scheme/stacking.scm:77]

(raise-fvwm2-pager)
- (app scwm fvwm-module)
Raise a fvwm2 pager window in the stacking order.
[From scheme/fvwm-module.scm:599]

(raise-group #&optional (group (get-window)))
- (app scwm group)
Raise members of GROUP above all other windows.
Keeps the relative stacking order of the members intact.
[From scheme/group.scm:86]

(raise-window  #&optional win)
- Built-in Primitive
Raise WIN to the top of the window stack.\n\
Stays-on-top windows still take priority. WIN defaults to the window\n\
context in the usual way if not specified.
[From src/window.c:1866]

(raise-window-above w w2)
- (app scwm stacking)
Restack window W immediately above W2.
[From scheme/stacking.scm:62]

(raised?  #&optional win)
- Built-in Primitive
Return #t if WIN is currently raised, #f if not.\n\
WIN defaults to the window context in the usual way if not\n\
specified. A window is considered to be raised if the application\n\
window (not the frame) is unobscured (or if this was the last\n\
window you called `raise-window' on).
[From src/window.c:1995]

(random-place-window win)
- Built-in Primitive
Places WIN just as if being placed by fvwm2's RandomPlacement.\n\
This placement is not truly random; it is based on two state variables\n\
which are incremented for the x and y coordinates, and which wrap\n\
around once a window would be forced off the screen. The placement is\n\
fairly arbitrary, but always succeeds, and so avoids user\n\
interaction. #t is always returned.\n\
\n\
This is called as part of `default-placement-proc'.  It could also be\n\
used in user-defined placement procedures (see \n\
`set-window-placement-proc!').
[From src/placement.c:533]

(raw-binding->key-descriptor binding)
- (app scwm prompt-binding)
No documentation supplied.
[From scheme/prompt-binding.scm:102]

(raw-binding->string raw-binding)
- (app scwm reflection)
No documentation supplied.
[From scheme/reflection.scm:227]

(read-and-append-to p #&optional (l '()))
- (app scwm rgb-database)
Read in the lines from port P and return them.
L is a the tail of the accumulating list. 
[From scheme/rgb-database.scm:26]

(read-until-eof in)
- (app scwm file)
Return all the text from input port IN until eof.
IN should be a newline-terminated Ascii input port.
[From scheme/file.scm:92]

(recapture)
- Built-in Primitive
Recapture all the windows.\n\
This destroys all the current frame windows and recreate them from\n\
scratch. This is hopefully not necessary during normal operation.
[From src/miscprocs.c:269]

(rectangle-overlap? x1 y1 w1 h1 x2 y2 w2 h2)
- (app scwm wininfo)
Returns #t iff the two specified rectangles overlap.
X1,Y1 and W1 x H1 are the position and size of the first rectangle.
X2,Y2 and W2 x H2 are the position and size of the second rectangle.
[From scheme/wininfo.scm:46]

(redo)
- (app scwm undo)
Redo the last undone operation.
This re-applyiesthe state at undo-index - 1.
[From scheme/undo.scm:111]

(redo-all-passive-grabs)
- Built-in Primitive
Re-instate all passive grabs of keys and buttons of bindings.\n\
See `undo-all-passive-grabs' for temporarily removing those bindings.\n\
This procedure might be useful for re-establishing bindings after\n\
quoting numerous keystrokes or mouse events.  Beware that it can\n\
take several seconds to execute. \n\
This procedure considers the state of `ignore-dubious-modifiers?'
[From src/binding.c:1579]

(redo-passive-grab modmask keycode-or-butnum #&optional mouse?)
- Built-in Primitive
Re-instate the passive grab of KEYCODE-OR-BUTNUM with MODMASK on all windows. \n\
If MOUSE? is #t, then treat KEYCODE-OR-BUTNUM as a button number and remove\n\
a grabe of a mouse binding.  Otherwise remove a keyboard passive grab.
[From src/binding.c:1616]

(reduce proc init l)
- (app scwm listops)
Repeatedly apply PROC to a current value and a member of L.  The
initial current value is the first member of the list. The list is
processed from left to right. The final result is returned, unless the
list is empty, in which case INIT is returned. Compare to
`accumulate'.
[From scheme/listops.scm:61]

(refresh)
- Built-in Primitive
Make sure all windows and their decorations are up to date.\n\
This forces a redraw of the entire current viewport. Should not be\n\
necessary during normal operation.
[From src/miscprocs.c:163]

(refresh-window  #&optional win)
- Built-in Primitive
Refresh the decorations on window WIN.\n\
Refreshing ensuring that everything, including the decorations is up\n\
to date. `refresh' does this in a more efficient way for all windows,\n\
as well as the root. WIN defaults to the window context in the usual\n\
way if not specified.
[From src/window.c:2473]

(register-fvwm2-module-config module-type . args)
- (app scwm fvwm-module)
No documentation supplied.
[From scheme/fvwm-module.scm:413]

(register-image-loader extension proc)
- Built-in Primitive
Register PROC as the loader to use for images ending in EXTENSION.\n\
EXTENSION must be a string beginning with a period, the\n\
empty string (for files with no extension), or the string "default"\n\
(for files that no other image loader succeeds in loading). PROC will\n\
be called with the full pathname of the image and should return an\n\
image object, or #f if it succeeds.
[From src/image.c:407]

(remove-input-hook! handle)
- Built-in Primitive
Remove an input hook identified by HANDLE.\n\
HANDLE should be an object that was returned by `add-input-hook!'. An\n\
input hook may safely remove itself.
[From src/callbacks.c:730]

(remove-motion-handler! proc)
- Built-in Primitive
No longer call PROC on XMotionEvents.\n\
Handling motion events can considerably slow Scwm down so use it only when\n\
necessary.  See `add-motion-handler' and `reset-motion-handlers'.
[From src/events.c:2186]

(remove-nonant-marker #&optional (w (get-window)))
- (app scwm window-selection)
Remove a nonant marker from W.
[From scheme/window-selection.scm:184]

(remove-suffix str suffix)
- (app scwm stringops)
Return STR with trailing SUFFIX removed if it exists.
[From scheme/stringops.scm:94]

(remove-timer-hook! handle)
- Built-in Primitive
Remove a timer hook identified by HANDLE.\n\
The HANDLE should be an object that was returned by\n\
`add-timer-hook!'. No warning or error will occur if HANDLE is for a\n\
timer hook that has already been triggered.
[From src/callbacks.c:587]

(rename-window-interactively #&optional (win (get-window)))
- (app scwm flux-gtk)
Prompt for a new name for WIN and change its title.
WIN defaults as usual to the current window context.
[From scheme/flux-gtk.scm:29]

(repeat . args)
- (app scwm listops)
Builds a list of repeating values.
ARGS must contain NUMBERs followed by VALUEs. Each VALUE is repeated NUMBER
times in the resulting list. E.g. (repeat 3 'a 2 'b 1 'c) => (a a a b b c)
[From scheme/listops.scm:235]

(replace-proxies-with-windows alist wlist)
- (app scwm ui-constraints-composition)
No documentation supplied.
[From scheme/ui-constraints-composition.scm:165]

(report-scwm-usage)
- 
Log your usage of scwm to a central host.
The data sent includes the version of scwm you are running and your
hostname. If the environment variable SCWM_DO_NOT_LOG_USAGE is set,
however, no message will be sent even if this function is called.
[From scheme/report-usage.scm:42]

(reset-background!)
- Primitive from (app scwm background)
Resets the root window to the default "weave".
[From modules/background/background.c:198]

(reset-buttons!)
- (app scwm titlebar-buttons)
Resets button numbers.
This makes `add-left-button' and `add-right-button' start
from the edges again.
[From scheme/titlebar-buttons.scm:26]

(reset-constraints)
- (app scwm constraints)
Reset the constraint solving system.
This switches to a fresh new master solver object, and resets
the global list of ui-constraint instances (so the menu of
constraints is reset to empty).
[From scheme/constraints.scm:22]

(reset-input-hook!)
- Built-in Primitive
Remove all procedures from the input hook.
[From src/callbacks.c:747]

(reset-motion-handlers!)
- Built-in Primitive
Call no procedures on XMotionEvents.\n\
Handling motion events can considerably slow Scwm down so use it only when\n\
necessary.  See `add-motion-handler' and `remove-motion-handler'.
[From src/events.c:2202]

(reset-on-segv)
- Built-in Primitive
Return the number of segv signals Scwm will reset on.\n\
See `set-reset-on-segv!'.
[From src/miscprocs.c:684]

(reset-scwmexec-protocol)
- Built-in Primitive
Reset the scwmexec protocol.\n\
This procedure removes the "XA_SCWMEXEC_REQUEST" property on the\n\
root window.  It should not be necessary but may be useful in case\n\
your X server goes awry (and otherwise you would have to restart your\n\
X server).  Use if scwmexec or scwmrepl are not returning (e.g.,\n\
if your Emacs hangs when you try evaluating a scwm expression).
[From src/events.c:637]

(reset-timer-hook!)
- Built-in Primitive
Remove all timer-hook procedures.
[From src/callbacks.c:601]

(reset-ui-constraint-classes!)
- (app scwm ui-constraints)
Empty the global list of ui-constraint-classes.
[From scheme/ui-constraints.scm:139]

(reset-undo!)
- (app scwm undo)
Reset the undo system.
Clears the list of states.
[From scheme/undo.scm:33]

(resize-frame w h #&optional win x y)
- Built-in Primitive
Resize WIN to a size of W by H in pixels.\n\
Also moves WIN to virtual coordinates X, Y if both of them are specified.\n\
The size includes the window decorations. WIN defaults to the window\n\
context in the usual way if not specified.  The resulting size\n\
of the frame may not be W by H due to rounding to the nearest\n\
acceptable size for the client window (e.g., Emacs windows can\n\
only be sizes that are multiples of the basic character size)
[From src/window.c:2403]

(resize-fullscreen)
- (app scwm winops)
Resize the current window with the pointer to 90% of the full screen size.
[From scheme/winops.scm:336]

(resize-halfscreen)
- (app scwm winops)
Resize the current window with the pointer to full height and half the screen size in width.
[From scheme/winops.scm:330]

(resize-quarterscreen)
- (app scwm winops)
Resize the current window with the pointer to 1/4 of the screen.
[From scheme/winops.scm:324]

(resize-window w h #&optional (win (get-window)) x y)
- (app scwm winops)
Resize WIN's client area to a size of W by H in pixels. 
The size does not include the window decorations -- only the client
application size. WIN defaults to the window context in the usual way
if not specified.
[From scheme/winops.scm:275]

(resource-match?? STRING TYPE CASE-SENSITIVE?)
- (app scwm wininfo)
Return a predicate that tests a window's resource instance.  
When applied to a window, this predicate will return true if the
resource instance matches STRING in the manner specified by the
optional argument TYPE, which may be 'exact, 'regexp, or
'wildcard. The optional CASE-SENSITIVE argument determines whether the
matching is case-sensitive or not.
[From scheme/wininfo.scm:321]

(restack-windows winlist)
- Built-in Primitive
Restack the windows in WINLIST from front to back.\n\
The first element of WINLIST will be kept in its current stacking\n\
order, the remainder will be stacked immediately below it in the order\n\
given. (Note: This will currently confuse the heck out of the pager\n\
and possibly other legacy fvwm2 modules).
[From src/window.c:1905]

(restart  #&optional command)
- Built-in Primitive
Restart the window manager. \n\
If COMMAND is specified, use that, as the new window manager to\n\
run. If COMMAND is not specified or is exactly equal to "scwm",\n\
restart scwm with the same command-line arguments as given previously.
[From src/shutdown.c:179]

(restarted?)
- Built-in Primitive
Returns true if scwm is being restarted by itself.
[From src/miscprocs.c:140]

(restore-global-window-configuration global-configuration)
- (app scwm window-configuration)
Restore the states of all windows from GLOBAL-CONFIGURATION.
[From scheme/window-configuration.scm:98]

(restore-scwm-handlers)
- Primitive from (app scwm scwmgtkhelper)
Restore the scwm behavior for signals and for X errors.
This is automatically called when (app scwm gtk) is loaded, to clean up
after the (gtk gtk) module.
[From modules/scwmgtkhelper/scwmgtkhelper.c:74]

(restore-window-configuration global-configuration 
					     #&optional (win (get-window)))
- (app scwm window-configuration)
Restore the state of WIN from GLOBAL-CONFIGURATION.
[From scheme/window-configuration.scm:59]

(reverse-iota n)
- (app scwm listops)
Generate a list of the integers from N-1 to 0 in order.
[From scheme/listops.scm:49]

(rgb-colors)
- 
Read in the rgb-colors database.
Requires uniq, awk, /usr/X11R6/lib/X11/rgb.txt.
[From scheme/rgb-database.scm:34]

(round/ x y)
- (app scwm base)
Return the closest integer to X divided by Y.
[From scheme/base.scm:61]

(rubber-band-move  #&optional win)
- Built-in Primitive
Move WIN interactively, using a rubber band frame.\n\
Returns a list '(X Y) which is the new viewport position of WIN.\n\
This allows the user to drag a rubber band frame around the\n\
screen. WIN defaults to the window context in the usual way if not\n\
specified.
[From src/move.c:557]

(rubber-band-resize  #&optional win)
- Built-in Primitive
Resize WIN interactively, using a rubber band frame.\n\
Returns a list '(width height) that is the new size of WIN.\n\
This allows the user to drag a rubber band frame to set the size of\n\
the window. WIN defaults to the window context in the usual way if not\n\
specified.
[From src/resize.c:691]

(run-dot-xclients-at-startup)
- (app scwm base)
After done reading your startup file, run your ~/.xclients script.
Uses the `startup-hook' and `run-dot-xclients-script' to do so.
[From scheme/base.scm:848]

(run-dot-xclients-script)
- (app scwm base)
Runs the ~/.xclients script.
[From scheme/base.scm:844]

(run-fvwm2-module module-name #&optional
				  (other-args '())	       
				  (config-file "~/.fvwm2rc")
				  (config-info
				   (append (aux-config-info)
                                           (get-fvwm2-module-config
					    (basename module-name)))))
- (app scwm fvwm-module)
No documentation supplied.
[From scheme/fvwm-module.scm:431]

(run-in-netscape command completion #&optional (netwin (netscape-win)))
- (app scwm netscape)
Runs COMMAND in a Netscape window, calling COMPLETION when done, if set.
Uses Netscape window NETWIN if specifies, or one found by (netscape-win)
otherwise; it is an error if NETWIN refers to a non-Netscape window.
[From scheme/netscape.scm:61]

(run-in-xterm cmd . opts)
- (app scwm base)
Return a procedure that runs CMD in an xterm.
Uses the variable `*xterm-command*' to determine how
to run an xterm.  CMD may include options to the command.
The rest of the arguments are passed as options to the xterm command.
[From scheme/base.scm:644]

(run-ScwmButtons button-item-list #&key (orientation 'horizontal)
				 (name "ScwmButtons") (auto-orient #t)
				 (auto-orient-margin 100))
- (app scwm ScwmButtons)
Start a ScwmButtons window giving a simple toolbar button/action interface.
ORIENTATION can be either 'horizontal or 'vertical;
NAME is the name of the window.
AUTO-ORIENT is #t if you wish the window to switch orientations when
the window approaches an edge of the viewport, and AUTO-ORIENT-MARGIN
determines how wide the "edge" of a viewport is (in pixels).
[From scheme/ScwmButtons.scm:86]

(run-ScwmClock #&key (24-hour #t) (show-timezone #t)
			       (update-interval 1) (parent #f))
- (app scwm ScwmClock)
Start a ScwmClock window display.
24-HOUR is #t if you want to use military time, #f for am/pm display.
SHOW-TIMEZONE is #t to display the timezeon.
UPDATE-INTERVAL is how often (in seconds) that the clock should be updated.
PARENT is a parent window to use for the clock.
[From scheme/ScwmClock.scm:33]

(run-ScwmDeskButtons desks #&key desk-names)
- (app scwm ScwmDeskButtons)
Start a ScwmDeskButtons toolbar interface.
DESKS is the number of desktops, and DESK-NAMES can be given to
specify names for each of the desks.  Answers an object that
is used in `close-ScwmDeskButtons' to close the window.
[From scheme/ScwmDeskButtons.scm:39]

(safe-load fname)
- Built-in Primitive
Load file FNAME while trapping and displaying errors.\n\
Each individual top-level-expression is evaluated separately and all\n\
errors are trapped and displayed.  You should use this procedure if\n\
you need to make sure most of a file loads, even if it may contain\n\
errors.
[From src/callbacks.c:505]

(save-preferences #&optional 
				 (filename (string-append (getenv "HOME") "/.scwm-options")))
- (app scwm preferences)
Save the current Scwm preferences to FILENAME.
FILENAME defaults to $HOME/.scwm-options if not specified.
The string written is generated by `scwm-options-string'.
[From scheme/preferences.scm:508]

(save-settings)
- (app scwm prefs-menu)
No documentation supplied.
[From scheme/prefs-menu.scm:50]

(scwm-gdk-X-fdes)
- Primitive from (app scwm scwmgtkhelper)
Return the integer connection number of the gdk_display.
Returns -1 if gdk_display is not initialized.
[From modules/scwmgtkhelper/scwmgtkhelper.c:35]

(scwm-group-docstring sym)
- (app scwm defoption)
Return the prettified name for group SYM.
[From scheme/defoption.scm:94]

(scwm-group-icon sym)
- (app scwm defoption)
Return the icon for group SYM.
[From scheme/defoption.scm:99]

(scwm-group-name sym)
- (app scwm defoption)
Return the prettified name for group SYM.
[From scheme/defoption.scm:89]

(scwm-group-properties sym)
- (app scwm defoption)
Return the group properties for group SYM.
[From scheme/defoption.scm:85]

(scwm-gtk-menu list-of-menuitems #&key
			       (image-side 'menu-side-image)
			       (image-align 'top)
			       (color-bg-image-side 'menu-side-bg-color)
			       (image-bg 'menu-bg-image)
			       (color-text 'menu-text-color)
			       (color-bg 'menu-bg-color)
			       (color-stipple 'menu-stipple-color)
			       (hl-color-fg 'menu-hl-fg-color)
			       (hl-color-bg 'menu-hl-bg-color)
			       (hl-relief? #t)
			       (font 'menu-font)
			       (look 'menu-look)
			       popup-delay hover-delay
			       (extra #f))
- (app scwm gtk-menu)
No documentation supplied.
[From scheme/gtk-menu.scm:70]

(scwm-gtk-menu-title label #&key image-left)
- (app scwm gtk-menu)
No documentation supplied.
[From scheme/gtk-menu.scm:11]

(scwm-gtk-menuitem label #&key image-above image-left
				   (fg #f) (bg #f) (font #f)
				   extra-label action submenu hover-action unhover-action
				   hotkey-prefs)
- (app scwm gtk-menu)
No documentation supplied.
[From scheme/gtk-menu.scm:18]

(scwm-gtk-popup-menu menu #&optional warp-to-index x-pos y-pos left-side? permit-alt-release-selection?)
- (app scwm gtk-menu)
No documentation supplied.
[From scheme/gtk-menu.scm:96]

(scwm-gtk-sync)
- (app scwm gtk)
Dispatch all pending gtk-events.
This ought to be called from inside Scwm-controlled loops that do not return
to the main event loop
[From scheme/gtk.scm:43]

(scwm-is-constraint-enabled?)
- (app scwm base)
Return #t if scwm has the constraint solver primitives, #f otherwise.
[From scheme/base.scm:730]

(scwm-last-timestamp)
- Built-in Primitive
Return the timestamp of the last event Scwm handled.
[From src/miscprocs.c:458]

(scwm-module-loaded? module)
- 
Return #t iff MODULE has been loaded.
[From scheme/minimal.scm:139]

(scwm-option-documentation sym)
- (app scwm defoption)
Return the documentation for SYM.
[From scheme/defoption.scm:198]

(scwm-option-favorites sym)
- (app scwm defoption)
Return the favorites for SYM.
[From scheme/defoption.scm:218]

(scwm-option-getter sym)
- (app scwm defoption)
Return the getter for SYM.
[From scheme/defoption.scm:208]

(scwm-option-group sym)
- (app scwm defoption)
Return the group for SYM.
[From scheme/defoption.scm:223]

(scwm-option-layout-hint sym)
- (app scwm defoption)
Return the permit-disable flag for SYM.
[From scheme/defoption.scm:233]

(scwm-option-module sym)
- (app scwm defoption)
Return the module in which option SYM was defined.
[From scheme/defoption.scm:188]

(scwm-option-name sym)
- (app scwm defoption)
Return the name of SYM.
[From scheme/defoption.scm:193]

(scwm-option-permit-disable sym)
- (app scwm defoption)
Return the permit-disable flag for SYM.
[From scheme/defoption.scm:228]

(scwm-option-range sym)
- (app scwm defoption)
Return the range for SYM.
[From scheme/defoption.scm:213]

(scwm-option-setter sym)
- (app scwm defoption)
Return the setter for SYM.
[From scheme/defoption.scm:203]

(scwm-option-short-documentation sym)
- (app scwm preferences)
No documentation supplied.
[From scheme/preferences.scm:67]

(scwm-option-symget sym)
- 
Get option SYM's value.
[From scheme/defoption.scm:272]

(scwm-option-symset! sym value)
- (app scwm defoption)
Set option SYM to VALUE.
[From scheme/defoption.scm:263]

(scwm-option-type sym)
- (app scwm defoption)
Return the type for SYM.
[From scheme/defoption.scm:238]

(scwm-options-dialog)
- (app scwm preferences)
Popup a scwm options dialog box.
You may need to use-modules all the modules that contain
scwm-options to have this work for now.
Put "(load-preferences)" in your .scwmrc where you
want the saved preferences to take effect.
[From scheme/preferences.scm:268]

(scwm-options-listbook done-action cancel-action)
- (app scwm preferences)
No documentation supplied.
[From scheme/preferences.scm:327]

(scwm-options-menu)
- (app scwm preferences)
No documentation supplied.
[From scheme/preferences.scm:239]

(scwm-options-notebook done-action cancel-action)
- (app scwm preferences)
No documentation supplied.
[From scheme/preferences.scm:307]

(scwm-options-string #&optional (syms scwm-options))
- (app scwm preferences)
Return a string that, when evalled, resets preferences to current values.
SYMS is a list of all the preference settings you wish to be included in
the string.  It defaults to the value of `scwm-options', the list of all
the options in the current session.  At present this means that if some
modules are not loaded, those options will not be included.
The returned string will contain multiple S-expressions, one for each Scwm preference
value.
[From scheme/preferences.scm:478]

(scwm-options-vbox-page parent done-action cancel-action title syms)
- (app scwm preferences)
Popup a scwm options dialog box.
[From scheme/preferences.scm:368]

(scwm-path-exec-prefix)
- Built-in Primitive
Return the <envar>$EXEC_PREFIX</envar> directory path that scwm was installed with.
[From src/miscprocs.c:500]

(scwm-path-prefix)
- Built-in Primitive
Return the <envar>$PREFIX</envar> directory path that scwm was installed with.
[From src/miscprocs.c:490]

(scwm-quit  . args)
- Built-in Primitive
Exit scwm cleanly. `quit' is redefined as this within scwm.\n\
ARGS is ignored
[From src/shutdown.c:201]

(scwm-run-test-hook-0 count)
- Built-in Primitive
Invoke `scwm-test-hook-0' COUNT times.
[From src/miscprocs.c:730]

(scwm-run-test-hook-1 count arg)
- Built-in Primitive
Invoke `scwm-test-hook-1' COUNT times with ARG as the single argument.
[From src/miscprocs.c:744]

(scwm-system cmd)
- (app scwm base)
Run CMD using /bin/sh -c CMD and return a list: (exit-status child-pid).
Note that the child pid is of the executed sh, not CMD.
The CMD is run synchronously, and Bourne-shell meta characters
are interpreted by /bin/sh.  E.g., to start CMD in the background,
use a trailing "&" character.  See also guile's `system', but note
that it may permit signals on the controlling tty to be seen
by children (observed on Linux, Free/NetBSD, but not on Solaris or HP/UX.
This may be a bug (not meeting POSIX.2 specifications).
[From scheme/base.scm:734]

(scwm-version)
- Built-in Primitive
Return the version of scwm running.
[From src/miscprocs.c:469]

(scwm-version-date)
- Built-in Primitive
Return the date that the running scwm was last changed as a string.
[From src/miscprocs.c:479]

(sec->msec sec)
- (app scwm time-convert)
Convert SEC seconds into an equivalent number of milliseconds.
Especially useful for `add-timer-hook!' and other timing related procedures
that take milliseconds.
[From scheme/time-convert.scm:24]

(sec->usec sec)
- 
Convert SEC seconds into an equivalent number of microseconds.
Especially useful for `usleep' and other timing related procedures
that take microseconds.  See also `sleep'.
[From scheme/time-convert.scm:36]

(segment-ray-intersects-segment
		center size endx endy segment)
- (app scwm smart-push)
Return the point of intersection for a edge moving to ENDX,ENDY and a SEGMENT.
ENDX should be the left x coordinate of the destination for the
start-segment edge.
[From scheme/smart-push2.scm:65]

(select-matching-windows proc)
- (app scwm window-selection)
Select windows for which predicate PROC returns #t.
PROC might be one of `resource-match??', `class-match??', etc.
[From scheme/window-selection.scm:93]

(select-multiple-windows-interactively
		 #&optional (max 32000) (proc-when-selected #f))
- (app scwm window-selection)
Return a list of user-selected windows, up to MAX.
The list is in the reverse order from the way by which they were selected.
PROC-WHEN-SELECTED will be run on each window as it is selected.
[From scheme/window-selection.scm:130]

(select-viewport-position  #&optional cursor release?)
- Built-in Primitive
Select a viewport position and return the window there.  \n\
Use a special cursor and let the user click to select a viewport\n\
position Returns a list of three items: (selected-window viewport-x\n\
viewport-y).  selected-window is either the window object\n\
corresponding to the selected window, a window id as an integer, \n\
or #f if no window was selected.\n\
viewport-x and viewport-y give the position in the viewport that the\n\
cursor was located when the selection was finalized.  RELEASE?\n\
indicates whether to whether to wait for a mouse release or act\n\
immediately on the click.  CURSOR is the cursor object to use, or\n\
#t for the "skull and cross-bones" kill cursor\n\
(recommended for destructive operations like delete-window and\n\
destroy-window), or #f or omitted for the standard circle cursor.
[From src/window.c:981]

(select-window #&optional (cursor #f) (release? #f))
- (app scwm base)
Select a window interactively, and return the specified window.
Use a special cursor and let the user click to select the window. 
The optional CURSOR argument can be either a cursor object or #t to
indicate to use the "skull and cross-bones" kill cursor (recommended for destructive
operations like delete-window and destroy-window).
The optional argument RELEASE? indicates whether to wait
for a mouse release or act immediately on the click. 
Returns #f if no window was selected.
[From scheme/base.scm:801]

(select-window-add #&optional (w (get-window-with-nonant)))
- (app scwm window-selection)
Select a single window, highlight it, and add it to the selected-windows-list.
The selected window is returned and will remain highlighted
until `unflash-window' is called on that window.  The selected
window is also added to a selected-windows list that can be
accessed via `selected-windows-list'.
[From scheme/window-selection.scm:62]

(select-window-from-window-list #&key
						(only '()) (except '())
						(ignore-winlist-skip #f))
- (app scwm winlist-menu)
Permit selecting a window from a window list.
Return the selected window object, or #f if none was selected
[From scheme/winlist-menu.scm:143]

(select-window-group)
- (app scwm flux)
Prompt for multiple windows and return the list of selected windows.
Windows are highlighted (see `flash-window') as they are selected.  The
returned list can be used to un-highlight the windows:
 (let ((winlist (select-window-group)))
   (for-each (lambda (w) (unflash-window w)) winlist))
[From scheme/flux.scm:197]

(select-window-interactively #&optional (msg #f) (message-window #f))
- (app scwm base)
Return an interactively-selected window after prompting (optionally) with MSG.
If given, use message window MESSAGE-WINDOW to display the message, otherwise create
a new message window.
[From scheme/base.scm:828]

(select-window-remove #&optional (w (get-window-with-nonant)))
- (app scwm window-selection)
Unselect a single window, de-highlight it, and remove it from the selected-windows-list.
The selected window is removed from the selected-windows list that can be
accessed via `selected-windows-list'.
[From scheme/window-selection.scm:78]

(select-window-toggle #&optional (w (get-window-with-nonant)))
- (app scwm window-selection)
Toggle the selectedness of W.
See `select-window-add' and `select-window-remove'.
[From scheme/window-selection.scm:53]

(selected-windows-list)
- (app scwm window-selection)
Returns the list of windows selected by `select-window-interactively-and-highlight'.
[From scheme/window-selection.scm:45]

(send-button button #&optional win kind propagate? dx dy)
- Built-in Primitive
Send a synthetic mouse button/release event.\n\
Create a synthetic event of a press of mouse button BUTTON. The usual\n\
mouse button specification format (with modifiers) is used. Send the\n\
event to window WIN if specified; otherwise the window to be used\n\
defaults to the window context in the usual way. By default, both a\n\
press and a release are sent---a click. KIND can be one of 'press, 'release,\n\
'click, 'desk-press, 'desk-release, or 'desk-click.\n\
If DX or DY is set, that value is used as the offset within WIN for\n\
the button events to occur.  If one is not specified or #f, then the\n\
pointer offset of that coordinate is used instead.\n\
PROPAGATE? indicates whether the propagate flag is set\n\
on the event; the default is #f. You should not have to worry about\n\
this unless you know what it means.
[From src/events.c:2265]

(send-button-1)
- (app scwm synth-events)
Send a mouse-1 button press and release event.
[From scheme/synth-events.scm:7]

(send-button-2)
- (app scwm synth-events)
Send a mouse-2 button press and release event.
[From scheme/synth-events.scm:12]

(send-button-3)
- 
Send a mouse-3 button press and release event.
[From scheme/synth-events.scm:17]

(send-client-message win atom . data)
- Built-in Primitive
Send WIN the message "ATOM DATA".\n\
WIN can be 'root-window or an X window identification number.\n\
Useful for supporting other WMs module communication protocols. \n\
ATOM is the X11 atom representing the message type (e.g.,\n\
"XA_WM_PROTOCOLS") and DATA is up to 4 32-bit integers of data.\n\
for the message. DATA will be the used to create the message data, \n\
and the lastTimestamp will be appended as the last integer in\n\
the data message.
[From src/ICCCM.c:68]

(send-key key #&optional win key-press? key-release? propagate?)
- Built-in Primitive
Send a synthetic press/release of KEY.  \n\
The usual key specification format (with modifiers) is used. The event\n\
is sent to window WIN if specified; otherwise the window to be used\n\
defaults to the window context in the usual way. By default, both a\n\
press and a release are sent. However, the boolean parameters\n\
KEY-PRESS? and KEY-RELEASE?  allow you to specify which are sent\n\
individually. PROPAGATE? indicates whether the propagate flag is set\n\
on the event; the default is #f. You should not have to worry about\n\
this unless you know what it means.
[From src/events.c:2218]

(send-key-press-down)
- (app scwm flux)
Send a synthetic "Down" keypress.
[From scheme/flux.scm:395]

(send-key-press-next)
- (app scwm flux)
Send a synthetic "Next" keypress.
[From scheme/flux.scm:403]

(send-key-press-prior)
- (app scwm flux)
Send a synthetic "Prior" keypress.
[From scheme/flux.scm:399]

(send-key-press-up)
- (app scwm flux)
Send a synthetic "Up" keypress.
[From scheme/flux.scm:391]

(set-*-procedure-properties proc arglist interactive-spec)
- (app scwm optargs)
Add the ARGLIST and INTERACTIVE-SPEC properties to procedure PROC.
This is used internally by the optargs macro system.
[From scheme/optargs.scm:284]

(set-animation! vector)
- Primitive from (app scwm c-animation)
Set the animation parameters to VECTOR. VECTOR is a vector of
floats which give the fractions of the final position that the window
should appear at. For instance, #(0.0 0.25 0.5 0.75 1.0 1.1 1.0) would
make the window appear at the initial position, 1/4 of the way, 1/2 of
the way, 3/4 of the way, overshoot the final position slightly, and
finally slide back into place. This parameter is used for both
animated window shades and animated moves.
[From modules/c-animation/c-animation.c:304]

(set-auto-raise! auto-raise? #&optional (win (get-window)))
- (app scwm auto-raise)
Turn auto-raise on (#t) or off (#f) for WIN.
Auto-raise makes a window automatically raise when the mouse pointer
enters the window frame.  See `set-auto-raise-delay!' for controlling
the delay before the window raises.
[From scheme/auto-raise.scm:103]

(set-auto-raise-delay! delay #&optional (win (get-window)))
- (app scwm auto-raise)
Set the auto-raise delay to DELAY (in ms) for WIN.
DELAY is the number of milliseconds after the pointer enters
WIN that WIN will be raised.  See `set-auto-raise!' to turn
auto-raise on or off for a given window.
[From scheme/auto-raise.scm:110]

(set-auto-raise-focus-proc! fproc #&optional (win (get-window)))
- (app scwm auto-raise)
Set the auto-raise-focus-proc for WIN.
The auto-raise-focus-proc is the procedure which is invoked
after the auto-raise-delay after the pointer enters WIN's frame.
[From scheme/auto-raise.scm:124]

(set-auto-raise-unfocus-delay! delay #&optional 
					       (win (get-window)))
- (app scwm auto-raise)
Set the timeout to DELAY (in ms) for the unfocus-proc of WIN.
After DELAY milliseconds after the pointer leaves WIN's frame,
the auto-raise-unfocus-proc will be called.
[From scheme/auto-raise.scm:117]

(set-auto-raise-unfocus-proc! ufproc 
					     #&optional (win (get-window)))
- (app scwm auto-raise)
Set the auto-raise-unfocus-proc for WIN.
The auto-raise-unfocus-proc is the procedure which is invoked
after the auto-raise-unfocus-delay after the pointer leaves WIN's frame.
[From scheme/auto-raise.scm:130]

(set-background-color! color)
- Primitive from (app scwm background)
Sets the color of the root window to COLOR.
[From modules/background/background.c:49]

(set-background-image! image #&optional style)
- Primitive from (app scwm background)
Sets the background of the root window to be IMAGE.
STYLE can be either 'centered or 'tiled.
[From modules/background/background.c:156]

(set-border-face! active #&optional inactive)
- Built-in Primitive
Set the face for the border In the current decor.\n\
Use ACTIVE as the face for the border when the window is active. Use\n\
INACTIVE when the window is inactive. INACTIVE defaults to the same as\n\
ACTIVE when not specified.
[From src/face.c:957]

(set-border-width! width #&optional win)
- Built-in Primitive
Set the border width of WIN's border to WIDTH pixels.\n\
WIN defaults to the window context in the usual way if not specified.
[From src/window.c:3308]

(set-button-face! button active-up #&optional active-down inactive)
- Built-in Primitive
Set the button faces for the various window states.\n\
See `set-left-button-face!' and `set-right-button-face!' for a\n\
more natural interface for this.\n\
In the current decor, use ACTIVE-UP as the face for the\n\
button specified by the integer BUTTON when active and not pressed\n\
in. Use ACTIVE-DOWN when BUTTON is active and pressed in, and INACTIVE\n\
when the window is inactive. Both INACTIVE and ACTIVE-DOWN default to\n\
ACTIVE-UP when not specified. Note that ACTIVE-DOWN will magically\n\
reverse the sense of the relief flag, so if the button is raised in\n\
the ACTIVE-UP state, it will be sunk in the ACTIVE-DOWN state by\n\
default.
[From src/face.c:884]

(set-button-mwm-flag! button flag)
- Built-in Primitive
Specify the Mwm flag for BUTTON.\n\
If FLAG is #t, the button's relief pattern (if any) will appear to\n\
reverse in depth sense (i.e., flip from sunken in to extruding out)\n\
when the window is maximized (has a non-#f "maximized" window\n\
property).
[From src/face.c:930]

(set-click-delay! msec)
- Built-in Primitive
Set the delay used in identifying mouse clicks and drags.\n\
MSEC is specified in milliseconds. After MSEC milliseconds, a mouse-down\n\
without a mouse-up is considered a drag.  Also, after MSEC milliseconds, a\n\
single click is definitively identified as not a double click.
[From src/miscprocs.c:176]

(set-click-to-focus-passes-click! flag)
- Built-in Primitive
Determine whether a click-to-focus window receives the click.\n\
If FLAG is #t, the window will receive the event, if #f, scwm\n\
will not pass the event on to the client.
[From src/miscprocs.c:328]

(set-click-to-focus-raises! flag)
- Built-in Primitive
Determine whether a click to focus raises the clicked-on window.\n\
If FLAG is #t, clicks which transfer focus will also raise the target \n\
window.
[From src/miscprocs.c:352]

(set-colormap-focus! ftype)
- Built-in Primitive
Set the colormap focus policy to FTYPE. \n\
FTYPE can either be 'mouse, indicating that the window under the mouse\n\
pointer should always have its colormap installed, or 'focus to\n\
indicate that the window with the input focus should also get the\n\
colormap focus. This makes a difference only when using focus policies\n\
other than 'mouse.
[From src/miscprocs.c:201]

(set-current-decor! decor)
- Built-in Primitive
Set the current decor to DECOR. Operations described as\n\
setting options "in the current decor" will now operate on this\n\
one.
[From src/decor.c:240]

(set-current-desk! desk)
- Built-in Primitive
Change the current desk to DESK. DESK should be an integer\n\
small enough to fit in one machine word.
[From src/deskpage.c:67]

(set-decorate-transient! flag #&optional win)
- Built-in Primitive
Set decoration of transients property on WIN.\n\
If FLAG is #t, then if WIN is transient it will be fully\n\
decorated. Transient windows that are not fully decorated will be\n\
given only a border and no titlebar regardless of other settings. WIN\n\
defaults to the window context in the usual way if not specified.
[From src/window.c:4092]

(set-default-menu-background! bg)
- (app scwm base)
Set the default background for menus to BG.
[From scheme/base.scm:264]

(set-default-menu-bg-image! image)
- (app scwm base)
Set the default menu background image to IMAGE.
[From scheme/base.scm:288]

(set-default-menu-font! font)
- (app scwm base)
Set the default font for menu text to FONT.
[From scheme/base.scm:271]

(set-default-menu-foreground! fg)
- (app scwm base)
Set the default color for menu text to FG.
[From scheme/base.scm:261]

(set-default-menu-hl-bg-color! bg)
- (app scwm base)
Set the default menu highlight background color to BG.
[From scheme/base.scm:297]

(set-default-menu-hl-fg-color! fg)
- (app scwm base)
Set the default menu highlight foreground color to FG.
[From scheme/base.scm:294]

(set-default-menu-look! look)
- (app scwm base)
Set the default menu look to LOOK.
[From scheme/base.scm:291]

(set-default-menu-side-background! bg)
- (app scwm base)
Set the default background for the menu side image to BG.
If BG is #f, use the default menu background
[From scheme/base.scm:280]

(set-default-menu-side-image! image)
- (app scwm base)
Set the default menu side image to IMAGE.
[From scheme/base.scm:277]

(set-default-menu-stipple! stipple)
- (app scwm base)
Set the default color for stippled (inactive) menu text to STIPPLE.
[From scheme/base.scm:268]

(set-default-menu-title-font! font)
- (app scwm base)
Set the default font for menu title text to FONT.
[From scheme/base.scm:274]

(set-desk-size! width height)
- Built-in Primitive
Sets the desk size to WIDTH, HEIGHT.\n\
Both numbers are given in units of the physical screen size.  For\n\
example <informalexample><programlisting>(set-desk-size! 3 3)\n\
</programlisting></informalexample> creates a virtual world 9 times the\n\
size of the physical display.
[From src/deskpage.c:294]

(set-edge-move-threshold! pixels)
- Built-in Primitive
Set the edge move threshold to PIXELS.\n\
Attempts to move a window so that it is off the edge of the screen by\n\
fewer than PIXELS pixels will leave the window entirely onscreen.
[From src/deskpage.c:267]

(set-edge-resistance! s m)
- (app scwm base)
Set the edge scroll delay to S, and the edge move threshold to M.
See also `set-edge-scroll-delay!' and `set-edge-move-threshold!'.
[From scheme/base.scm:702]

(set-edge-scroll! x y)
- (app scwm base)
Set the edge scroll values to X and Y, respectively.
These values are the number of pixels that the viewport
moves when the pointer hits the edge of the screen.  Use
`%x' and `%y' to convert from a percentage of a screen
dimension to a number of pixels.
[From scheme/base.scm:716]

(set-edge-scroll-delay! ms)
- Built-in Primitive
Set the edge scroll delay to MS milliseconds.\n\
When the mouse pointer hits the edge of the screen, it must stay there\n\
for at least the edge scroll delay amount before the desktop will be\n\
scrolled. If this parameter is #f, the viewport will not scroll at all\n\
at the screen edge.
[From src/deskpage.c:235]

(set-edge-wrap! x y)
- (app scwm base)
Set the edge x and y wrap values to X and Y, respectively.
These values should be #t to mean that the pointer should
wrap in the given direction, or #f to not wrap around.
See also `set-edge-x-wrap!' and `set-edge-y-wrap!'.
[From scheme/base.scm:708]

(set-edge-x-scroll! pixels)
- Built-in Primitive
Set the horizontal edge scroll increment to PIXELS.\n\
The horizontal edge scroll setting is the amount by which the viewport\n\
will scroll when the mouse hits the left or right edge. Use `%x' to\n\
convert from a percent of screen size to pixels.
[From src/deskpage.c:130]

(set-edge-x-wrap! flag)
- Built-in Primitive
Set whether to wrap pointer around horizontal edges.\n\
If the boolean value FLAG is #t, the pointer will wrap from the right\n\
edge of the desktop to the left of the display as it moves off the\n\
right edge, and vice-versa. See also `set-edge-y-wrap!'
[From src/deskpage.c:186]

(set-edge-y-scroll! pixels)
- Built-in Primitive
Set the vertical edge scroll increment to PIXELS.\n\
The vertical edge scroll setting is the amount by which the viewport\n\
will scroll when the mouse hits the top or bottom edge. Use `%y' to\n\
convert from a percent of screen size to pixels.
[From src/deskpage.c:157]

(set-edge-y-wrap! flag)
- Built-in Primitive
Set whether to wrap pointer around vertical edges.\n\
If the boolean value FLAG is #t, the pointer will wrap from the bottom\n\
edge of the desktop to the top of the display as it moves off the very\n\
bottom edge, and vice-versa. See also `set-edge-x-wrap!'
[From src/deskpage.c:210]

(set-face-flag! face flag flagval)
- Built-in Primitive
Set the given FLAG to the given FLAGVAL for face FACE.\n\
See the section on the `Face Flags' concept.
[From src/face.c:345]

(set-force-icon! flag #&optional win)
- Built-in Primitive
Set the window-manager-overriding property for WIN to boolean FLAG.\n\
If #t, the icon specified for WIN by the user through scwm will override an\n\
application-provided icon.  WIN defaults to the window context in the usual\n\
way if not specified.
[From src/window.c:3924]

(set-handle-segv! flag)
- Built-in Primitive
If FLAG, tell Scwm to catch segv signals.\n\
This is the default, but if you catch a segv and really need it to \n\
dump right away to figure out what is wrong then use this.  No\n\
cleanup is done if handling segv is #f.  Be sure to have an extra\n\
terminal handy on a console or separate X server.\n\
For developers and hackers only.
[From src/miscprocs.c:697]

(set-highlight-background! bg)
- Built-in Primitive
Use BG as the background color for a window with the input focus.\n\
Applies to the current decor. This is used only for windows that don't\n\
have their own background color.
[From src/color.c:828]

(set-highlight-colors! #&optional (bg #f) (fg #f))
- (app scwm base)
Set the highlight window's background color to BG, foreground color to FG.
The "highlight window" is the window with the current input focus.
[From scheme/base.scm:307]

(set-highlight-factor! factor)
- Built-in Primitive
Use FACTOR to generate highlight colors for the current decor.\n\
FACTOR is a positive floating point number.
[From src/color.c:654]

(set-highlight-foreground! fg)
- Built-in Primitive
Use FG for the foreground color of a window with the input focus.\n\
Applies to the current decor. This is used only for windows that don't\n\
have their own foreground color.
[From src/color.c:783]

(set-hint-override! flag #&optional win)
- Built-in Primitive
Set whether or not Mwm and Open Look function hints are used.\n\
If FLAG is #t, the hints, which indicate what operations should be\n\
allowed on a window, will be ignored for WIN.  If FLAG is #f, the hints will\n\
be honoured. WIN defaults to the window context in the usual way if\n\
not specified.
[From src/window.c:4074]

(set-hover-focus! hover-focus? #&optional (win (get-window)))
- (app scwm hover-focus)
Turn hover-focus on (#t) or off (#f) for WIN.
hover-focus makes a window automatically get focus when the mouse pointer
remains in a window frame.  See `set-hover-focus-delay!' for controlling
the delay before the window gets focus.
[From scheme/hover-focus.scm:77]

(set-hover-focus-delay! delay #&optional (win (get-window)))
- (app scwm hover-focus)
Set the hover-focus delay to DELAY (in ms) for WIN.
DELAY is the number of milliseconds after the pointer enters
WIN that WIN will be focused.  See `set-hover-focus!' to turn
hover-focus on or off for a given window.
[From scheme/hover-focus.scm:66]

(set-icon! image #&optional win)
- Built-in Primitive
Set the image to use for the icon of WIN to IMAGE.\n\
As usual, an image object or a filename string may be given. #f May\n\
also be specified, indicating no icon image. WIN defaults to the window\n\
context in the usual way if not specified.
[From src/window.c:3961]

(set-icon-box! x y w h #&optional win)
- Built-in Primitive
Set the icon box in which WIN's icon will be placed.\n\
This set the box to the rectangle at coordinates X, Y with width W and\n\
height H. WIN defaults to the window context in the usual way if not\n\
specified.
[From src/window.c:3402]

(set-icon-font! font)
- Built-in Primitive
Set the font used for drawing icon titles to FONT.
[From src/font.c:246]

(set-icon-title! flag #&optional win)
- Built-in Primitive
Set the visibility of WIN's icon title according to FLAG. WIN\n\
defaults to the window context in the usual way if not specified.
[From src/window.c:3908]

(set-ignore-dubious-modifiers! flag)
- Built-in Primitive
If FLAG is #t, ignore scoll/num/lock modifiers on all bindings made.\n\
Otherwise do not.  If dubious locks are being ignored, multiple XGrabKey invocations\n\
must occur for each binding made;  this can result in a noticeable delay when, e.g.,\n\
a new window is created.  If this bothers you, call this procedure with FLAG set\n\
to #f. The default is #t.
[From src/binding.c:1538]

(set-left-button-face! button active-up #&optional
				      (active-down #f) (inactive #f))
- (app scwm face)
Set the button face for the left-button numbered BUTTON.
E.g., if BUTTON is 1, this will set the leftmost button of your
titlebar.  See `set-button-face!' for a description of ACTIVE-UP,
ACTIVE-DOWN, and INACTIVE.
[From scheme/face.scm:85]

(set-lenience! flag #&optional win)
- Built-in Primitive
Set or reset the input focus lenience flag.\n\
Determine whether or not to try to give WIN the input focus\n\
when asked, even if the window claims according to hints that it\n\
cannot receive the input focus, according to the boolean value\n\
FLAG. WIN defaults to the window context in the usual way if not\n\
specified.
[From src/window.c:4205]

(set-load-processing-frequency! num-lines)
- Built-in Primitive
Invoke hooks on `load-processing-hook' every NUM-LINES lines. \n\
Returns the old value.
[From src/callbacks.c:530]

(set-markwin-offset! win nonant markwin)
- (app scwm window-selection)
No documentation supplied.
[From scheme/window-selection.scm:159]

(set-menu-background-picture! menu picture)
- Built-in Primitive
Use PICTURE as the background image for MENU.
[From src/menu.c:533]

(set-menu-colors! menu text-color bg-color #&optional stipple-color)
- Built-in Primitive
Use TEXT-COLOR and BG-COLOR as the colors for MENU.\n\
STIPPLE-COLOR is optional, and if given will be used for the\n\
stipple color for the MENU.
[From src/menu.c:399]

(set-menu-extra-options! menu options)
- Built-in Primitive
Set MENU's extra options to OPTIONS.
[From src/menu.c:549]

(set-menu-font! menu font)
- Built-in Primitive
Use FONT as the font for MENU.
[From src/menu.c:483]

(set-menu-highlight-colors! menu text-color bg-color)
- Built-in Primitive
Use TEXT-COLOR and BG-COLOR as the highlight colors for MENU.\n\
These colors will be used for the selected item.
[From src/menu.c:425]

(set-menu-highlight-factor! factor)
- Built-in Primitive
Use FACTOR to generate highlight colors for menus. \n\
FACTOR is a positive floating point number
[From src/color.c:726]

(set-menu-highlight-relief! menu highlight-relief?)
- Built-in Primitive
If HIGHLIGHT-RELIEF? is #t, then draw a relief on selected items in MENU.\n\
Otherwise, do not.  See also `set-menu-highlight-colors!'.
[From src/menu.c:446]

(set-menu-hotkeys-activate-item! activate?)
- Built-in Primitive
If ACTIVATE? is #t, let menu hotkeys invoke the item.\n\
If #f, a menuitem hotkey just makes that item selected and still requires\n\
a Return or Space keypress to activate the item.
[From src/menu.c:1626]

(set-menu-hover-delay! menu hover-delay)
- Built-in Primitive
Set MENU's hover delay to HOVER-DELAY.\n\
HOVER-DELAY is the number of ms to wait before invoking the hover action.
[From src/menu.c:347]

(set-menu-look! menu menu-look)
- Built-in Primitive
Use MENU-LOOK as the menu-look for MENU.
[From src/menu.c:371]

(set-menu-popup-delay! menu popup-delay)
- Built-in Primitive
Set MENU's submenu popup delay to POPUP-DELAY.\n\
POPUP-DELAY is the number of ms to wait before popping up submenus.
[From src/menu.c:321]

(set-menu-shadow-factor! factor)
- Built-in Primitive
Use FACTOR to generate shadow colors for menus. \n\
FACTOR is a positive floating point number
[From src/color.c:749]

(set-menu-side-picture! menu picture #&optional align bg-color)
- Built-in Primitive
Use PICTURE as the side picture for MENU.\n\
Set its alignment to ALIGN, and its background\n\
color to BG-COLOR.
[From src/menu.c:499]

(set-menu-title! menu menu-title)
- Built-in Primitive
Use MENU-TITLE as the title for MENU.
[From src/menu.c:385]

(set-menuitem-colors! menuitem fg bg)
- Built-in Primitive
Sets the fg and bg colors of MENUITEM to FG and BG respectively.\n\
Use #f for either/both component to have MENUITEM inherit that color\n\
from the menu in which it is embedded.
[From src/menuitem.c:205]

(set-menuitem-font! menuitem font)
- Built-in Primitive
Sets the font of MENUITEM to FONT.\n\
Use #f to have MENUITEM inherit its font\n\
from the menu in which it is embedded.
[From src/menuitem.c:239]

(set-mini-icon! image #&optional win)
- Built-in Primitive
Set the image to use for the mini-icon of WIN to IMAGE. As\n\
usual, an image object or a filename string may be given. WIN defaults\n\
to the window context in the usual way if not specified.
[From src/window.c:4005]

(set-mod-mask-numlock! mask)
- Built-in Primitive
Set the bit-mask for the NumLock modifier key.\n\
MASK must be a power of 2. The NumLock modifier mask is\n\
set automatically, but you can use this procedure if you\n\
need to override the built-in algorithm.
[From src/binding.c:1511]

(set-mod-mask-scrolllock! mask)
- Built-in Primitive
Set the bit-mask for the ScrollLock modifier key.\n\
MASK must be a power of 2. The ScrollLock modifier mask is\n\
set automatically, but you can use this procedure if you\n\
need to override the built-in algorithm.
[From src/binding.c:1524]

(set-mouse-focus-click-raises! flag)
- Built-in Primitive
Determine whether a mouse-focus-click will raise the window.\n\
If FLAG is #t it will raise the window. Not sure if this function\n\
makes sense any more.
[From src/miscprocs.c:384]

(set-mwm-border! flag #&optional win)
- Built-in Primitive
Set the mwm-border style flag of WIN to boolean FLAG.\n\
The Mwm style has shallower bevels than the default scwm/fvwm2 style.\n\
WIN defaults to the window context in the usual way if not\n\
specified.
[From src/window.c:3864]

(set-mwm-buttons! flag #&optional win)
- Built-in Primitive
Set the mwm-buttons flag of WIN to boolean FLAG.\n\
The mwm-buttons flag controls whether any of this window's\n\
flags obey their mwm-flags. See `set-button-mwm-flag!'. WIN defaults\n\
to the window context in the usual way if not specified.
[From src/window.c:3848]

(set-mwm-decor-hint! flag #&optional win)
- Built-in Primitive
Set whether or not Motif decoration hints are used for WIN.\n\
If FLAG is #t, the Mwm decor hint will be given for WIN.  WIN defaults\n\
to the window context in the usual way if not specified.
[From src/window.c:4108]

(set-mwm-func-hint! flag #&optional win)
- Built-in Primitive
Set whether or not Motif function hints are used for WIN.\n\
If FLAG is #t, the Motif function hints are respected for WIN.\n\
WIN defaults to the window context in the usual way if not\n\
specified.
[From src/window.c:4122]

(set-nonant-highlight-color! color)
- Built-in Primitive
Use COLOR for highlighting nonants.
[From src/window.c:3650]

(set-not-menu-background! bg)
- Built-in Primitive
Use BG as the default background color for icons, window frames, etc.
[From src/color.c:926]

(set-not-menu-foreground! fg)
- Built-in Primitive
Use FG as the default foreground color for icons, titlebars, etc.
[From src/color.c:898]

(set-OL-decor-hint! flag #&optional win)
- Built-in Primitive
Determine whether or not to respect Open Look decoration hints.\n\
If FLAG is #t, the decoration hints will be respected for WIN. WIN\n\
defaults to the window context in the usual way if not specified.
[From src/window.c:4154]

(set-PPosition-hint! flag #&optional win)
- Built-in Primitive
Set or reset the program-specified position hint for WIN.\n\
If FLAG is #t, the hint will be set, otherwise reset.  This only\n\
matters when using the default placement procedure. Some programs\n\
allegedly set this hint to a useless value like (0,0) always, so\n\
ignoring it is recommended. WIN defaults to the window context in the\n\
usual way if not specified.
[From src/window.c:4137]

(set-quote-key-events! quoting-on?)
- Built-in Primitive
Set key event quoting to QUOTING-ON?.
[From src/binding.c:857]

(set-random-placement! flag #&optional win)
- Built-in Primitive
Set the random-placement flag of WIN to boolean FLAG.\n\
This flag only matters if the default placement procedure is\n\
being used. WIN defaults to the window context in the usual way if not\n\
specified.
[From src/window.c:3782]

(set-register register value)
- (app scwm register)
Set contents of Scwm register named REGISTER to VALUE.  Returns VALUE.
[From scheme/register.scm:27]

(set-reset-on-segv! number-to-reset)
- Built-in Primitive
Reset Scwm to the main event loop on the next NUMBER-TO-RESET segv signals.\n\
The default is 100, but if you catch a segv and and are willing to \n\
track it or send in a bug report, use this to permit a C-level backtrace\n\
by setting it to 0.  See also `set-handle-segv!'.
[From src/miscprocs.c:670]

(set-right-button-face! button active-up #&optional
				       (active-down #f) (inactive #f))
- (app scwm face)
Set the button face for the right-button numbered BUTTON.
E.g., if BUTTON is 1, this will set the rightmost button of your
titlebar.  See `set-button-face!' for a description of ACTIVE-UP,
ACTIVE-DOWN, and INACTIVE.
[From scheme/face.scm:94]

(set-rubber-band-mask! value)
- Built-in Primitive
Set the rubber band mask used when dragging or resizing.\n\
VALUE is XORed with the background when dragging non-opaque move or\n\
resize frames. VALUE should be an integer.
[From src/resize.c:334]

(set-shadow-factor! factor)
- Built-in Primitive
Use FACTOR to generate shadow colors in the current decor. \n\
FACTOR is a positive floating point number
[From src/color.c:690]

(set-show-icon! flag #&optional win)
- Built-in Primitive
Set whether or not the icon of WIN will be visible.  If FLAG\n\
is #t, the icon will be displayed, if #f, it will not appear when the\n\
window is iconified (it will still be in the window list, of course).\n\
WIN defaults to the window context in the usual way if not\n\
specified.
[From src/window.c:3942]

(set-skip-mapping! flag #&optional win)
- Built-in Primitive
Set or reset whether scwm should not change desktops on a map.\n\
This only affect the behaviour upon initial mapping of WIN. If FLAG is\n\
#t, the virtual desktop will not be changed when WIN is mapped.  WIN\n\
defaults to the window context in the usual way if not specified.
[From src/window.c:4190]

(set-smart-placement! flag #&optional win)
- Built-in Primitive
Set the smart-placement flag of WIN to boolean FLAG.\n\
This flag only matters if the default placement procedure is\n\
being used. WIN defaults to the window context in the usual way if not\n\
specified.
[From src/window.c:3797]

(set-smart-placement-is-really-smart! flag)
- Built-in Primitive
Determine whether or not `clever-place-window' will be used when smart-placing.\n\
If FLAG is #t, then `clever-place-window' will be used instead of\n\
`smart-place-window' when the default placement procedure is used, and\n\
the window's smart-placement flag is on.
[From src/miscprocs.c:296]

(set-start-on-desk! desk #&optional win)
- Built-in Primitive
Make WIN start on DESK when first mapped. WIN defaults to the\n\
window context in the usual way if not specified.
[From src/window.c:4168]

(set-title-face! active-up #&optional active-down inactive)
- Built-in Primitive
Set the titlebar faces for the various window states.\n\
In the current decor, use ACTIVE-UP as the face for the title\n\
bar when active and not pressed in. Use ACTIVE-DOWN when the title bar\n\
is active and pressed in, and INACTIVE when the window is\n\
inactive. Both INACTIVE and ACTIVE-DOWN default to ACTIVE-UP when not\n\
specified. Note that ACTIVE-DOWN will magically reverse the sense of\n\
the relief flag, so if your titlebar bar is raised in the ACTIVE-UP\n\
state, it will be sunk in the ACTIVE-DOWN state by default.
[From src/face.c:856]

(set-title-font! font)
- Built-in Primitive
Set the font for window titles In the current decor to FONT.
[From src/font.c:271]

(set-title-height! height)
- Built-in Primitive
Set the height of the titlebar in pixels to HEIGHT.\n\
Applies to the current decor.
[From src/miscprocs.c:99]

(set-title-justify! just)
- Built-in Primitive
Set the justification for the title to JUST.\n\
JUST should be one of 'right, 'left, or 'center. Applies to the\n\
current decor.
[From src/miscprocs.c:51]

(set-viewport-position! x y)
- Built-in Primitive
Position the upper left corner of the viewport at coordinates X, Y.\n\
X and Y are given in pixels.  Does not affect the current desk.
[From src/deskpage.c:102]

(set-window-background! bg #&optional win)
- Built-in Primitive
Set the background color of WIN to BG.\n\
This color is used to draw most of the window decorations, along with\n\
the relief colors generated from it, which are used to draw the\n\
window's 3-D bevels.  WIN defaults to the window context in the usual\n\
way if not specified. See also `get-window-colors'.
[From src/window.c:3694]

(set-window-button! n flag #&optional win)
- Built-in Primitive
Set the visibility of button number N on window WIN.\n\
If FLAG is #t, the button will be visible, otherwise it won't be\n\
drawn.  WIN defaults to the window context in the usual way if not\n\
specified. (Note: the titlebar will not expand if you disable\n\
a button via this procedure -- the decoration code is still\n\
far from perfect.)
[From src/window.c:3812]

(set-window-colors! #&optional (bg #f) (fg #f) (win (get-window)))
- (app scwm base)
Set WIN's background color to BG, foreground color to FG.
[From scheme/base.scm:313]

(set-window-context! win)
- Built-in Primitive
Set the current window context to WIN and return the old context.\n\
WIN can be either a window, or #f, to reset the current window-context.\n\
See also `with-window' and `get-window'.
[From src/window.c:1101]

(set-window-cursor! win cursor)
- Built-in Primitive
Set the default cursor for WIN to CURSOR. \n\
If CURSOR is #f, this undefines the cursor for WIN and\n\
makes that window use its parent window's cursor.\n\
See `get-x-cursor', and `create-pixmap-cursor' for ways\n\
to create cursor objects.
[From src/cursor.c:222]

(set-window-decor! win decor)
- Built-in Primitive
Set WIN's decor to DECOR, updating its decorations appropriately.
[From src/decor.c:273]

(set-window-focus! sym #&optional win)
- Built-in Primitive
Set the focus style of WIN to SYM. SYM may be 'click, 'mouse,\n\
'sloppy or 'none. WIN defaults to the window context in the usual way\n\
if not specified.
[From src/window.c:3450]

(set-window-foreground! fg #&optional win)
- Built-in Primitive
Set the foreground color of WIN to FG.\n\
This color is used to draw the title text currently. In the future, it\n\
may have other uses as well. WIN defaults to the window context in the\n\
usual way if not specified. See also `get-window-colors'
[From src/window.c:3672]

(set-window-gravity! gravity #&optional win)
- Built-in Primitive
Sets the gravity for WIN to GRAVITY.\n\
GRAVITY must be one of the following: \n\
'forget, 'northwest, 'north, 'northeast,\n\
'west, 'center, 'east, 'southwest 'south, 'southeast,\n\
'static.
[From src/window.c:2570]

(set-window-highlight-background! bg #&optional win)
- Built-in Primitive
Set the highlighted background color of WIN to BG.\n\
This color is used when WIN has the focus to draw most of the window\n\
decorations, along with the relief colors generated from it, which are\n\
used to draw the window's 3-D bevels.  WIN defaults to the window context\n\
in the usual way if not specified. If BG is #f, then lets the decor\n\
highlight background color be used (turns off a special highlight color\n\
for WIN).  See also `get-window-highlight-colors'.
[From src/window.c:3747]

(set-window-highlight-foreground! fg #&optional win)
- Built-in Primitive
Set the highlighted foreground color of WIN to FG.\n\
This color is used to draw the title text when WIN has the focus.\n\
In the future, it may have other uses\n\
as well. WIN defaults to the window context in the usual way\n\
if not specified. If FG is #f, then lets the decor highlight\n\
foreground color be used (turns off a special highlight\n\
color for WIN). See also `get-window-highlight-colors'.
[From src/window.c:3723]

(set-window-highlighted-nonant! nonant #&optional win)
- Built-in Primitive
Highlight NONANT for WIN.\n\
NONANT is a number between 0 and 8, inclusive, or #f to unhighlight.\n\
Also, NONANT can be 'left, 'hcenter, 'right, 'top, 'vmiddle, 'bottom\n\
to highlight each of those window regions.
[From src/window.c:3608]

(set-window-id-background! bg #&optional winid)
- Built-in Primitive
Set the background color of X11 window with id WINID to BG. \n\
This is not necessarily persistent.  In particular, if you set \n\
the background color of a window decoration, that decoration\n\
will revert to its usual color.  See also `window-decoration-ids'.
[From src/window.c:3564]

(set-window-placement-proc! proc win)
- (app scwm style)
Set the 'placement-proc property of WIN to PROC.
When the window manager tries to place WIN, it will call PROC to
actually set its position.  This function must be called before the 
window is placed (i.e., from before-new-window-hook); see `window-style'
for a way to make sure this function is called at the correct time.
[From scheme/style.scm:266]

(set-window-property! win prop val)
- Built-in Primitive
Set window property PROP of WIN to VAL.\n\
PROP should be a symbol. VAL may be any Scheme object. This name/value\n\
pair will be associated with the window, and may be retrieved with\n\
`window-property'. Passing #f as the value will delete the property\n\
instead. Soon, some properties will have magical meanings, altering\n\
particular fields in the window structure. Also, a\n\
window-property-change-hook mechanism will soon be implemented for\n\
notification of all window property changes. This is not yet done. The\n\
window property primitives should be considered in flux.
[From src/winprop.c:84]

(set-window-title! win title)
- (app scwm xprop-extras)
Change the window title X-Property of WIN to TITLE.
WIN is a Scwm window object, TITLE is a string.  This procedure alters the
window title by changing the WM_NAME X-Property.
[From scheme/xprop-extras.scm:13]

(set-window-transient-placement-proc! proc win)
- (app scwm style)
Like `set-window-placement-proc!' (which see), but for transient
windows.
[From scheme/style.scm:274]

(set-X-server-synchronize! flag)
- Built-in Primitive
Set X server sychronization flag to FLAG.\n\
If FLAG is #t, then Scwm will turn on synchronous X behaviour; if FLAG \n\
is #f, Scwm will turn off synchronous behaviour.  Scwm is slower in\n\
synchronous mode, but can be easier to debug.
[From src/miscprocs.c:510]

(shade-window  #&optional win)
- Built-in Primitive
Cause WIN to become "window-shaded".\n\
That is, to roll up into just a titlebar. By default, the change takes\n\
place instantaneously. WIN defaults to the window context in the usual\n\
way if not specified. See also `window-unshade'.\n\
A shaded window has the "WM_STATE" hint set to WithdrawnState, since \n\
the client application window is not visible.
[From src/window.c:2226]

(shaded-window?  #&optional win)
- Built-in Primitive
Return #t if WIN is shaded.\n\
WIN defaults to the window context in the usual way if not\n\
specified.
[From src/window.c:2304]

(shadow-factor)
- Built-in Primitive
Return the current shadow factor.
[From src/color.c:712]

(should-circulate-skip? #&optional (win (get-window)))
- (app scwm winlist)
Return #t if WIN should now be skipped when circulating, #f otherwise.
Uses the current state of WIN (whether it is iconified or not) in
determining the result.
[From scheme/winlist.scm:126]

(shove-window-prefix)
- (app scwm shove-window)
Display prompt to shove the current window to an edge or center.
[From scheme/shove-window.scm:14]

(show-com com)
- (app scwm flux)
Return a lambda to show the stdout generated by the COM shell pipeline.
[From scheme/flux.scm:120]

(show-file filename)
- (app scwm flux)
Return a lambda to display the contents of filename in a window.
[From scheme/flux.scm:116]

(show-icon-list-menu)
- (app scwm winlist-menu)
Show a window list of only iconfied programs.
The selection procedure deiconifies the window and gives it focus.
[From scheme/winlist-menu.scm:164]

(show-mesg . str)
- (app scwm flux)
Return a lambda to display the string arguments STR in a message window.
See also `message'.
[From scheme/flux.scm:111]

(show-netscape-window-list-menu)
- 
Show a window list of only Netscape windows.
The selection procedure deiconifies the window and gives it focus.
[From scheme/winlist-menu.scm:183]

(show-selected-nonants)
- (app scwm window-selection)
Show nonant markers on window when they are selected.
[From scheme/window-selection.scm:234]

(show-side-decorations win)
- (app scwm style)
No documentation supplied.
[From scheme/style.scm:198]

(show-system-info)
- (app scwm flux)
Display the `system-info-string' system details in a window.
[From scheme/flux.scm:150]

(show-titlebar  #&optional win in-place?)
- Built-in Primitive
Cause WIN to be decorated with a titlebar.\n\
Keeps the client window at its current location if IN-PLACE? is #t.\n\
See also `hide-titlebar'.\n\
WIN defaults to the window context in the usual way if not\n\
specified.
[From src/window.c:3171]

(show-titlebar-in-place #&optional (win (get-window)))
- (app scwm winops)
Turn on display of the titlebar for WIN without moving the client window.
This may move the frame to keep the application client window area in
the same position as before the call.
[From scheme/winops.scm:94]

(show-window-list-matching-interactively)
- (app scwm flux-gtk)
Prompt for a wildcard, and popup a list of matching windows (by title).
Stars are added to either end of the entered string so the default
is a substring search.
[From scheme/flux-gtk.scm:40]

(show-window-list-menu warp-to-index permit-alt-release-selection? #&rest rest)
- (app scwm winlist-menu)
Popup a window list menu.
Warps the pointer to the WARP-TO-INDEX menu item iff it is an integer.
If PERMIT-ALT-RELEASE-SELECTION? is #t, then the release of the Alt/Meta
modifier will select the item (this is a bit of a hack to make a nicer
task-switching menu).
Accepts all keyword arguments that `make-window-list-menu' takes.
[From scheme/winlist-menu.scm:133]

(show-X-properties #&optional (win (get-window)))
- (app scwm flux)
Displays the X properties of WIN in a message window.
WIN is a window object, an X window id, or 'root-window.
[From scheme/flux.scm:365]

(show-xterm-window-list-menu)
- (app scwm winlist-menu)
Show a window list of only xterms.
The selection procedure deiconifies the window and gives it focus.
[From scheme/winlist-menu.scm:172]

(shutdown-options #&key switch-to-home-viewport
				  move-windows-to-current-viewport)
- (app scwm shutdown-opts)
Configure shutdown preferences.

Both SWITCH-TO-HOME-VIEWPORT and MOVE-WINDOWS-TO-CURRENT-VIEWPORT may
be be any of #f, #t, 'shutdown-only or 'restart-only. These options
indicate when scwm should switch to the (0 0) viewport on shutdown,
and whether all windows are moved to to the current viewport on
shutdown, respectively.

The possible settings mean never, always, only when shutting down or
only when restarting, respectively.

Any window movement is done after any viewport switching.
[From scheme/shutdown-opts.scm:32]

(simple-prompt-proc-hbox prompt initval)
- 
Create and return a procedure-prompting hbox and entry.
PROMPT is the prompt, and INITVAL is the initial path (a procedure).
The returned value is a list: (hbox getter entry).
See also `prompt-string'.
[From scheme/prompt-string.scm:87]

(simple-title-style #&key font height justify)
- (app scwm base)
Set the style for titlebars.
FONT is a font object or a string, HEIGHT is a number of points,
JUSTIFY is a legal argument to `set-title-justify!' such as 'left,
'right, or 'center.
[From scheme/base.scm:439]

(simplebiff #&key (mail-spool-dir "/var/spool/mail")
			    (username (getenv "USER"))
			    (activate-proc beep)
			    (deactivate-proc noop)
			    (check-interval 10))
- (app scwm simplebiff)
Run a simple xbiff-like notification system.
MAIL-SPOOL-DIR tells where the mail files live, USERNAME is
the username of the file to watch (defaults to environement
variable "USER".  ACTIVATE-PROC is the procedure to apply when the
file grows, DEACTIVATE-PROC is the procedure to apply when the
file changes without growing (by shrinking or staying the same size).
CHECK-INTERVAL is the number of seconds between checks.
Returns an object to pass to `stop-simplebiff' to turn off
the notifier.
[From scheme/simplebiff.scm:46]

(size->string sz #&optional (sep "x"))
- (app scwm stringops)
Convert a two-element list to a string.
Use the optional second argument as the separator.
[From scheme/stringops.scm:35]

(sleep-ms ms)
- (app scwm base)
Delay for MS milliseconds.
Note that timer-hooks are much more useful in nearly all
cases.  See `add-timer-hook!'.
[From scheme/base.scm:69]

(SM-error-message)
- Built-in Primitive
Return a string, describing why session management is not available.\n\
Only valid, if `SM-register' returned #f.
[From src/session-manager.c:477]

(SM-register)
- Built-in Primitive
Register Scwm with the session manager, and return the client id.\n\
The return value is either an id string, or #f if the session manager could not be\n\
initialized - `SM-error-message' can be used to get more information in this\n\
case.\n\
If Scwm is already registered, this function just returns the client id.
[From src/session-manager.c:487]

(smart-place-window win)
- Built-in Primitive
Places WIN using fvwm2's SmartPlacement algorithm.\n\
The placement is just as if SmartPlacementIsReallySmart were not in\n\
effect. That is, it tries to place the window so that it does not\n\
overlap any other. If it fails to do so, it returns #f; otherwise it\n\
returns #t.\n\
\n\
This is called as part of `default-placement-proc'.  It could also be\n\
used in user-defined placement procedures (see \n\
`set-window-placement-proc!').
[From src/placement.c:450]

(smart-placement-is-really-smart?)
- Built-in Primitive
Return whether or not `clever-place-window' will be used when smart-placing.\n\
If the value is #t, then `clever-place-window' will be used instead of\n\
smart-place-window when the default placement procedure is used, and\n\
the window's smart-placement flag is on.
[From src/miscprocs.c:311]

(snap-initialize #&optional (sw 25))
- 
Turn on auto-snapping during interactive moves.
[From scheme/snap.scm:179]

(snap-reset)
- (app scwm snap)
Turn off auto-snapping during interactive moves.
[From scheme/snap.scm:170]

(sort ls #&optional (compare <))
- 
Returned LS sorted according to COMPARE (defaults to ascending numerical order).
[From scheme/sort.scm:41]

(sort-options-by-type symlist)
- (app scwm preferences)
No documentation supplied.
[From scheme/preferences.scm:301]

(sort-windows-by-middle-pos winlist #&key (horiz #t) (ascending #t))
- (app scwm winops)
Sort WINLIST (a list of windows) by their middle positioins.
Sort on horizontal position (x coordinate) if HORIZ is #t, otherwise
sort on vertical position (y coordiate) otherwise.  Sort in 
ascending order if ASCENDING is #t, otherwise descending.
[From scheme/winops.scm:290]

(sorted-by-car-string l)
- (app scwm menus-extras)
Sort the elements of list L based on the string value of their `car'.
[From scheme/menus-extras.scm:38]

(sound-load file #&optional name)
- Primitive from (app scwm esdsound)
Load sound from FILE, tagging it with NAME.
If NAME is not given, "scwm" is used.
Returns a sound object usable with the other sound functions.
[From modules/esdsound/sound.c:34]

(sound-play sound)
- Primitive from (app scwm esdsound)
Play SOUND.
SOUND must be an object returned by `sound-load'.
[From modules/esdsound/sound.c:91]

(sound-unload sound)
- Primitive from (app scwm esdsound)
Unload SOUND, freeing any resources it occupies.
SOUND must be an object returned by `sound-load'.
[From modules/esdsound/sound.c:70]

(split-list-by-group ls #&optional (rest #f))
- (app scwm menus-extras)
Split the a-list LS into groups according to the car of each of its cells.
[From scheme/menus-extras.scm:68]

(start-animating-scwm-resolves)
- (app scwm constraint-animation)
Turn on animating windows to new positions following re-solves.
[From scheme/constraint-animation.scm:20]

(start-constraint-investigator)
- 
Start the GTk+-based constraint investigator window.
[From scheme/constraint-investigator.scm:208]

(start-constraints #&key (draw-constraints-with-focus #f) (draw-disabled-constraints #t))
- (app scwm constraints)
Start using the constraint solver.
DRAW-CONSTRAINTS-WITH-FOCUS is used to specify whether
you'd like all constraints drawn or just the ones which
are associated with the current focus window.
[From scheme/constraints.scm:33]

(start-handling-gtk-events)
- (app scwm gtk)
No documentation supplied.
[From scheme/gtk.scm:57]

(start-highlighting-current-window #&optional (win (window-context)))
- (app scwm highlight-current-window)
Add appropriate hook procedures to make the window with the mouse be highlighted.
See also `end-highlighting-current-window'.
[From scheme/highlight-current-window.scm:51]

(start-highlighting-selected-window)
- (app scwm highlight-current-window)
Highlight the current window during window selections.
[From scheme/highlight-current-window.scm:39]

(start-program-in-xterm program title resource-name)
- (app scwm flux)
Return a string to be the arguments to xterm for starting PROGRAM in it.
TITLE is the desired title, and RESOURCE-NAME is the desired Xrdb resource
property.
[From scheme/flux.scm:166]

(start-property-respond)
- (app scwm property-respond)
Turn on property-change responses.
See `property-changed-respond' and `X-PropertyNotify-hook'.
[From scheme/property-respond.scm:99]

(start-ui-constraints-buttons)
- (app scwm ui-constraints-buttons)
No documentation supplied.
[From scheme/ui-constraints-buttons.scm:193]

(start-xlogo)
- (app scwm flux)
Start an XLogo window.
[From scheme/flux.scm:172]

(start-xterm #&optional (opt (optget *xterm-user-shell-options*)))
- (app scwm base)
Start an xterm using `*xterm-command*' and `*xterm-user-shell-options*'.
[From scheme/base.scm:654]

(stick-icon  #&optional win)
- Built-in Primitive
Cause WIN's icon to become "sticky". \n\
A sticky window stays at its current viewport position\n\
no matter how where the viewport is in the virtual desktop.\n\
See `stick-window'. \n\
WIN defaults to the window context in the usual way if not specified.
[From src/window.c:3348]

(stick-window  #&optional win)
- Built-in Primitive
Make WIN "sticky" so that it stays stationary in the viewport.\n\
WIN defaults to the window context in the usual way if not\n\
specified.
[From src/window.c:2123]

(sticky-window?  #&optional win)
- Built-in Primitive
Return #t if WIN is "sticky", #f otherwise.\n\
See `stick-window' for an explanation. WIN defaults to the\n\
window context in the usual way if not specified.
[From src/window.c:2191]

(stop-animating-scwm-resolves)
- 
Turn off animating windows to new positions following re-solves.
[From scheme/constraint-animation.scm:24]

(stop-flashing-window #&optional (win (get-window)))
- (app scwm flash-window)
Turn off window flashing of WIN.
Has no effect if WIN is not flashing.
N.B. flashing and highlight-selection of windows currently use the
same mechanism, so turning off flashing will also visually un-select
WIN.
[From scheme/flash-window.scm:71]

(stop-property-respond)
- 
Turn off property-change responses.
See `property-changed-respond' and `X-PropertyNotify-hook'.
[From scheme/property-respond.scm:104]

(stop-simplebiff sb)
- 
Call this with the object returned from `simplebiff' to turn off the notifier
[From scheme/simplebiff.scm:86]

(string->proplist string)
- Primitive from (app scwm proplist)
Return a proplist object containing STRING.
This is often unnecessary as the proplist procedures will
permit Guile strings to be used anywhere a string proplist object is expected.
[From modules/proplist/scwmproplist.c:406]

(string->scwm-module module-name)
- 
Return the module corresponding to the given string.
Format may be any of "base", "app scwm base", or
"(app scwm base)".
[From scheme/session.scm:18]

(string->X-atom string)
- Built-in Primitive
Returns an X atom representing STRING.\n\
If STRING contains NULL-characters, the behaviour is undefined.
[From src/xproperty.c:384]

(string-ci-has-prefix string prefix)
- 
Return #t iff STRING starts with PREFIX ignoring case.
[From scheme/stringops.scm:113]

(string-has-prefix string prefix)
- (app scwm stringops)
Return #t iff STRING starts with PREFIX.
[From scheme/stringops.scm:109]

(string-join delimit strings)
- (app scwm stringops)
Concatenates the list STRINGS into a single string.
DELIMIT is put between every two elements of STRINGS.
[From scheme/stringops.scm:79]

(string-with-colons->path-list s)
- (app scwm file)
Convert S, a colon-separated directory pathlist, into a list of directory strings.
Returns that list.
[From scheme/file.scm:86]

(style-one-window win . args)
- (app scwm style)
No documentation supplied.
[From scheme/style.scm:37]

(style-option:cumulative? window-style-options key)
- 
No documentation supplied.
[From scheme/style-options.scm:78]

(style-option:handler key)
- (app scwm style-options)
No documentation supplied.
[From scheme/style-options.scm:74]

(style-option:type key)
- (app scwm style-options)
No documentation supplied.
[From scheme/style-options.scm:76]

(support-image-conversion)
- 
Set things up to try to load arbitrary images.
Works by setting `try-everything-loader' as the image loader for
unknown extensions.  Generally not needed with ImLib.
[From scheme/image-loaders.scm:55]

(switch-to-first-desk)
- (app scwm virtual)
Switch to the first desktop.
[From scheme/virtual.scm:198]

(switch-to-second-desk)
- 
Switch to the second desktop.
[From scheme/virtual.scm:203]

(system-info-string)
- (app scwm flux)
Return a string with various system information.
Use `show-system-info' to display it in a window.
[From scheme/flux.scm:60]

(take-screenshot
		 #&optional (template (string-append
				       (user-home)
				       "/screenshot%y%m%d%H%M%S.xwd")))
- (app scwm flux)
Take a snapshot of the whole screen.
The screenshot will be saved in xwd format in the filename constructed from
TEMPLATE. %-escapes in TEMPLATE will be replaced by time-elements, according
to strftime rules. TEMPLATE defaults to the file "screenshot%y%m%d%H%M%S.xwd"
in the user's home directory.
[From scheme/flux.scm:308]

(theme-names)
- 
No documentation supplied.
[From scheme/themes.scm:189]

(theme:background-style theme)
- 
No documentation supplied.
[From scheme/theme-impl.scm:73]

(theme:name theme)
- (app scwm theme-impl)
No documentation supplied.
[From scheme/theme-impl.scm:67]

(theme:window-style theme)
- (app scwm theme-impl)
No documentation supplied.
[From scheme/theme-impl.scm:70]

(there-exists? l pred)
- (app scwm listops)
Return true if PRED is true for at least one elements of L, otherwise false.
[From scheme/listops.scm:95]

(tile #&key (only ()) (except ()) 
			 (by-stacking #f) (by-focus #f)
			 (reverse #f)
			 (all-viewports #f) (desk (current-desk))
			 (ignore-default-exceptions #f)
			 (start-pos '(0 0)) 
			 (end-pos (display-size)) (resize 'always)
			 (raise 'restack-only)
			 (max-windows #f)
			 (order 'horizontal))
- (app scwm tile)
Tile the windows on the specified desk.
The DESK option, defaulting to the current desk, specifies which desk;
ALL-VIEWPORTS, when true indicates that the windows in all viewports
of this desk should be tiled, otherwise only the current viewport
is tiled. 

The options ONLY, EXCEPT, BY-STACKING, BY-FOCUS and REVERSE indicate
the windows to use and the order to use them in, as with
`list-windows'. However, unless IGNORE-DEFAULT-EXCEPTIONS is #t,
transient, maximized, sticky and iconified windows will be always be
excluded.

START-POS, END-POS, RESIZE, RAISE, MAX-WINDOWS and ORDER
control the tiling options as for `tile-windows'.
[From scheme/tile.scm:126]

(tile-windows
		 windows #&key (start-pos '(0 0)) 
		 (end-pos (display-size)) (resize 'always)
		 (raise 'restack-only)
		 (max-windows #f)
		 (order 'horizontal))
- (app scwm tile)
Tile WINDOWS according to several parameters.  

Tiling places the windows according to a grid from START-POS, (0 0) by
default, to END-POS, the size of the display by default. 

If MAX-WINDOWS is specified and not #f, at most MAX-WINDOWS elements
of WINDOWS will be operated on.

If ORDER is 'horizontal, the windows will be tiled in row-major order;
if it is 'vertical they will be tiled in column-major oder.

RESIZE may be #f, 'shrink-only or 'always, indicating that the windows
should never be resized, that they should be resized to the max-size
only if they are bigger, or that they should always be resized to the
max size. The default is 'shrink-only.

RAISE may be #f, #t, or 'restack-only, indicating that the windows
should not be moved in the stacking order; that they should be raised
on top of other windows and placed in the tile order with the upper
left window lowest in the stacking order; or that they should be
restacked as for #t but not raised above other windows,
respectively. The default is 'restack-only.
[From scheme/tile.scm:36]

(tile-windows-interactively #&optional (order 'vertical))
- 
Tile a set of selected windows either vertically or horizontally.
ORDER can be either 'horizontal or 'vertical.
The windows used are selected either by `selected-windows-list' or 
`select-window-group'.
If `selected-windows-list' is empty, then `select-window-group' is used.
See also the undo module and `insert-undo-global' to save the window 
configuration before executing this in case the effect is not what you
expected.
[From scheme/tile.scm:168]

(time-t->seconds-ago timet)
- (app scwm wininfo)
Return the number of seconds that have passed since TIMET was the current time.
[From scheme/wininfo.scm:166]

(title-font)
- Built-in Primitive
Return the font used for drawing window titles in the current decor.
[From src/font.c:293]

(title-height)
- Built-in Primitive
Return the height of the titlebar in pixels, as set by `set-title-height!'.\n\
Applies to the current decor.
[From src/miscprocs.c:126]

(title-justify)
- Built-in Primitive
Return the current justification for the title, as set by `set-title-justify!'.\n\
The return value will be one of 'right, 'left, or 'center. Applies to the\n\
current decor.
[From src/miscprocs.c:77]

(title-match?? STRING TYPE CASE-SENSITIVE?)
- (app scwm wininfo)
Return a predicate that tests a window's title.  
When applied to a window, this predicate will return true if the title
matches STRING in the manner specified by the optional argument TYPE,
which may be 'exact, 'regexp, or 'wildcard. The optional
CASE-SENSITIVE argument determines whether the matching is
case-sensitive or not.
[From scheme/wininfo.scm:303]

(title-style #&key font height justify
			     (active-up '()) 
			     (active-down '()) 
			     (inactive '()) #&allow-other-keys #&rest rest)
- (app scwm face)
Set the title style in the current decor.
FONT is the window title font, a font object or a string.
HEIGHT is the height of the title bar, in points.
JUSTIFY is one of 'left, 'right, or 'center.
This function also takes the keyword arguments #:relief, #:solid,
#:gradient, #:h-gradient, #:v-gradient, and #:pixmap, with effects
as described under the `Face Flags' and `Face Specification Flags'
concepts (except that #:pixmap is always tiled, and #:h-gradient
and #:v-gradient are horizontal and vertical gradients).  These
extra keyword arguments can either be included in the main argument
list, or lists of these arguments can be used as the ACTIVE-UP,
ACTIVE-DOWN, or INACTIVE arguments.  For instance:
  (title-style #:solid "red" #:inactive (list #:solid "green"))
would set the title to be red in either active state, and green
in the inactive state, leaving FONT, HEIGHT, and JUSTIFY in their
current state, and returning everything else about the title
to their default state.
[From scheme/face.scm:37]

(titlebar-shown?  #&optional win)
- Built-in Primitive
Return #t if WIN is decorated with a titlebar, #f otherwise.\n\
\n\
WIN defaults to the window context in the usual way if not\n\
specified.
[From src/window.c:3225]

(to-string . rest)
- (app scwm stringops)
Dump all arguments into a string.
[From scheme/stringops.scm:75]

(toggle-docs-for var)
- (app scwm preferences)
No documentation supplied.
[From scheme/preferences.scm:85]

(toggle-focus)
- 
Focus window that had the focus before the current one.
[From scheme/winops.scm:465]

(toggle-maximize nw nh #&optional (win (get-window)))
- (app scwm winops)
Maximize to width NW, height NH if not maximized, or unmaximize.
[From scheme/winops.scm:171]

(toggle-maximize-both #&optional (win (get-window)))
- (app scwm winops)
Toggle the WIN's maximization (both vertically and horizontally).
[From scheme/winops.scm:407]

(toggle-maximize-horizontal #&optional (win (get-window)))
- (app scwm winops)
Toggle the WIN's maximized-horizontally state.
[From scheme/winops.scm:403]

(toggle-maximize-vertical #&optional (win (get-window)))
- (app scwm winops)
Toggle the current window's maximized-vertically state.
[From scheme/winops.scm:398]

(toggle-maximize-vertical-part #&optional (win (get-window)))
- (app scwm winops)
Toggle the WIN's maximization-vertically to 95% of the screen height.
[From scheme/winops.scm:412]

(transient?  #&optional win)
- Built-in Primitive
Return #t if WIN is transient, #f if not.\n\
WIN defaults to the window context in the usual way if not\n\
specified.
[From src/window.c:2014]

(try-everything-loader fname)
- (app scwm image-loaders)
Tries to load an arbitrary image, using any available loader.
[From scheme/image-loaders.scm:49]

(turn-off-only-focus-window-has-titlebar)
- (app scwm focus-titlebar)
Do not display titlebars on only the focuessed window.
This forces titlebars on all other windows (ignoring window-style
commands).
[From scheme/focus-titlebar.scm:38]

(turn-on-only-focus-window-has-titlebar)
- (app scwm focus-titlebar)
Start displaying a titlebar only on the focussed window.
This forces titlebars off all other windows (ignoring window-style
commands).
[From scheme/focus-titlebar.scm:30]

(two-window-or-more-nonant-prompter name #&key (p1 "first window") (p2 "second window") (orientation #f))
- (app scwm ui-constraints-classes)
No documentation supplied.
[From scheme/ui-constraints-classes.scm:146]

(two-window-or-more-prompter name p1 p2)
- (app scwm ui-constraints-classes)
No documentation supplied.
[From scheme/ui-constraints-classes.scm:120]

(two-window-prompter name p1 p2)
- (app scwm ui-constraints-classes)
No documentation supplied.
[From scheme/ui-constraints-classes.scm:102]

(ui-constraint-add-enable-hook ui-constraint hook)
- (app scwm ui-constraints)
Adds a HOOK proc which will be called when UI-CONSTRAINT enable state changes.
HOOK should take one argument which is the new state of the UI-CONSTRAINT.
Errors if UI-CONSTRAINT is not a ui-constraint object.
[From scheme/ui-constraints.scm:720]

(ui-constraint-button ui-constraint)
- (app scwm ui-constraints)
Returns the a reference to panel representing the UI-CONSTRAINT in the toggle menu.
Returns #f if the gtk toggle menu feature is not in use.
[From scheme/ui-constraints.scm:447]

(ui-constraint-class ui-constraint)
- (app scwm ui-constraints)
Returns the UI-CONSTRAINT-CLASS from the ui-constraint object UI-CONSTRAINT.
errors if UI-CONSTRAINT is not an ui-constraint.
[From scheme/ui-constraints.scm:412]

(ui-constraint-class-creator class)
- (app scwm ui-constraints)
Return a list that contains a code snippet can create CLASS.
The resulting list can then be evaluated to create that constraint class.
Be sure to (use-scwm-modules ui-constraints-classes ui-constraints-composition) 
before evaling the list.
[From scheme/ui-constraints.scm:106]

(ui-constraint-class-ctr ui-constraint-class)
- (app scwm ui-constraints)
Returns the constructor for instance of the constraint class.  errors
if UI-CONSTRAINT-CLASS is not a ui-constraint-class.
[From scheme/ui-constraints.scm:214]

(ui-constraint-class-description ui-constraint-class)
- (app scwm ui-constraints)
Returns the description for the constraint class.  
Erors if UI-CONSTRAINT-CLASS is not a ui-constraint-class.
[From scheme/ui-constraints.scm:188]

(ui-constraint-class-draw-proc ui-constraint-class)
- (app scwm ui-constraints)
returns the drawing procedure for instances of the constraint class.
errors if UI-CONSTRAINT-CLASS is not a ui-constraint-class
[From scheme/ui-constraints.scm:240]

(ui-constraint-class-menuname-proc ui-constraint-class)
- (app scwm ui-constraints)
Return the proc for determining the name for the constraint in
the toggle menu.  Errors if object is not a ui-constraint-class object.
[From scheme/ui-constraints.scm:278]

(ui-constraint-class-name ui-constraint-class)
- (app scwm ui-constraints)
Returns the name of the constraint class.
Errors if UI-CONSTRAINT-CLASS is not a ui-constraint-class.
[From scheme/ui-constraints.scm:180]

(ui-constraint-class-num-windows ui-constraint-class)
- (app scwm ui-constraints)
Returns the number of windows constrainable by instances of the constraint 
class.  errors if UI-CONSTRAINT-CLASS is not a ui-constraint-class.
[From scheme/ui-constraints.scm:201]

(ui-constraint-class-pixmap-name ui-constraint-class)
- (app scwm ui-constraints)
Return the pixmap-name of UI-CONSTRAINT-CLASS.
Errors if object is not a ui-constraint-class object.
[From scheme/ui-constraints.scm:262]

(ui-constraint-class-pixmap2-name ui-constraint-class)
- (app scwm ui-constraints)
Return the pixmap2-name of UI-CONSTRAINT-CLASS.
Errors if object is not a ui-constraint-class object.
[From scheme/ui-constraints.scm:269]

(ui-constraint-class-satisfied-proc ui-constraint-class)
- (app scwm ui-constraints)
Returns the satisfaction checking procedure for instances of the
constraint class.  errors if UI-CONSTRAINT-CLASS is not a ui-constraint-class
[From scheme/ui-constraints.scm:253]

(ui-constraint-class-ui-ctr ui-constraint-class)
- (app scwm ui-constraints)
Returns the UI constructor for instances of the constraint class.
errors if UI-CONSTRAINT-CLASS is not a ui-constraint-class
[From scheme/ui-constraints.scm:227]

(ui-constraint-class? ui-constraint-class)
- (app scwm ui-constraints)
Returns a boolean: true if UI-CONSTRAINT-CLASS is a vector and starts with the
correct obid.  False otherwise.
[From scheme/ui-constraints.scm:152]

(ui-constraint-cn ui-constraint)
- (app scwm ui-constraints)
Returns the CN list from the ui-constraint object UI-CONSTRAINT.
errors if UI-CONSTRAINT is not a ui-constraint.
[From scheme/ui-constraints.scm:387]

(ui-constraint-enable-hooks ui-constraint)
- (app scwm ui-constraints)
Returns a list of the enable-hook functions added to the UI-CONSTRAINT.
Errors if UI-CONSTRAINT is not a ui-constraint object.
[From scheme/ui-constraints.scm:737]

(ui-constraint-enabled? ui-constraint)
- (app scwm ui-constraints)
Returns the ENABLE from the ui-constraint object UI-CONSTRAINT.
errors if UI-CONSTRAINT is not an ui-constraint.
[From scheme/ui-constraints.scm:400]

(ui-constraint-opts ui-constraint)
- (app scwm ui-constraints)
Returns the list of optional data that may be added by the constraint class.
Returns #f if no such data exists.  errors if UI-CONSTRAINT is not a ui-constraint.
[From scheme/ui-constraints.scm:437]

(ui-constraint-remove-enable-hook ui-constraint hook)
- (app scwm ui-constraints)
Removes a HOOK proc from the list in UI-CONSTRAINT.
Errors if UI-CONSTRAINT is not a ui-constraint object.
[From scheme/ui-constraints.scm:729]

(ui-constraint-set-button! ui-constraint button)
- (app scwm ui-constraints)
Sets the reference to the gtk button for this instance in the toggle menu.
Errors if UI-CONSTRAINT is not a ui-constraint.
[From scheme/ui-constraints.scm:457]

(ui-constraint-windows ui-constraint)
- (app scwm ui-constraints)
Returns the LIST-OF-WINDOWS from the ui-constraint object UI-CONSTRAINT.
errors if UI-CONSTRAINT is not an ui-constraint.
[From scheme/ui-constraints.scm:425]

(ui-constraint? ui-constraint)
- (app scwm ui-constraints)
Returns #t if UI-CONSTRAINT is a ui-constraint.
returns #f otherwise.
[From scheme/ui-constraints.scm:376]

(ui-constraints-composition-begin)
- (app scwm ui-constraints-composition)
Begin recording the constraints used for the creation of a composition.
End this recording by calling 'ui-constraints-composition-end'.
[From scheme/ui-constraints-composition.scm:47]

(ui-constraints-composition-end #&optional (cancel? #f))
- (app scwm ui-constraints-composition)
End the recording of a constraint composition.  NAME is the name to be 
given to the new composition.  Optionally, CANCEL may be specified to cancel
the construction of a composition.
[From scheme/ui-constraints-composition.scm:87]

(ui-constraints-involving-two-windows win1 win2)
- (app scwm ui-constraints)
Returns the list of ui-constraint objects that involve WIN1 and WIN2.
The entire global-constraint-instance-list is checked.
[From scheme/ui-constraints.scm:565]

(ui-constraints-involving-window win)
- (app scwm ui-constraints)
Returns the list of ui-constraint objects that involve WIN.
The entire global-constraint-instance-list is checked.
[From scheme/ui-constraints.scm:555]

(ui-constraints-toggle-menu)
- (app scwm ui-constraints-toggle-menu)
Return a menu of constraints that permits toggling their enabled? state.
[From scheme/ui-constraints-toggle-menu.scm:30]

(un-keep-on-top  #&optional win)
- Built-in Primitive
Remove the on-top property from WIN, if it has it.\n\
See `keep-on-top'. WIN defaults to the window context in the usual\n\
way if not specified.
[From src/window.c:3088]

(unbind-four-modifier-key-events
		modkey1 modkey2 modkey3 modkey4 #&optional ignore1 ignore2 )
- (app scwm modifier-key-bindings)
Unbind events attached to a multi-modifier key event.
MODKEY1, MODKEY2, MODKEY3, MODKEY4 are the four modifiers that are having the binding
eliminated for.  IGNORE1 and IGNORE2 can be anything, and are
provided to conveniently allow an unbinding invocation to 
have the same arguments as the analagous binding operation.
[From scheme/modifier-key-bindings.scm:117]

(unbind-key contexts key #&optional ignored-proc1 ignored-proc2)
- Built-in Primitive
Remove any bindings attached to KEY in given CONTEXTS.\n\
CONTEXTS is a list of event-contexts (e.g., '(left-button-1 frame-sides))\n\
KEY is a string giving the key-specifier (e.g., M-Delete for Meta+Delete).\n\
The return value is #t if the binding was removed successfully, #f \n\
otherwise. \n\
IGNORED-PROC1 and IGNORED-PROC2 can both be given, but are\n\
ignored;  they permit the identical arguments to be used\n\
as for `bind-mouse'.
[From src/binding.c:928]

(unbind-keycode contexts keycode modifier-mask #&optional ignored-proc1 ignored-proc2)
- Built-in Primitive
Unbind the given KEYCODE within the CONTEXTS.\n\
KEYCODE is an X/11 key code, MODIFIER-MASK is the bitmask of modifiers.\n\
IGNORED-PROC1 and IGNORED-PROC2 can both be given, but are\n\
ignored;  they permit the identical arguments to be used\n\
as for `bind-keycode'.
[From src/binding.c:1136]

(unbind-mouse contexts button #&optional ignored-proc1 ignored-proc2)
- Built-in Primitive
Remove any bindings attached to mouse BUTTON in given CONTEXTS.\n\
CONTEXTS is a list of event-contexts (e.g., '(left-button-1 frame-sides))\n\
BUTTON is a string or integer giving the mouse button number.\n\
IGNORED-PROC1 and IGNORED-PROC2 can both be given, but are\n\
ignored;  they permit the identical arguments to be used\n\
as for `bind-mouse'.
[From src/binding.c:1001]

(unbind-three-modifier-key-events
		modkey1 modkey2 modkey3 #&optional ignore1 ignore2)
- (app scwm modifier-key-bindings)
Unbind events attached to a multi-modifier key event.
MODKEY1, MODKEY2, MODKEY3 are the three modifiers that are having the binding
eliminated for.  IGNORE1 and IGNORE2 can be anything, and are
provided to conveniently allow an unbinding invocation to 
have the same arguments as the analagous binding operation.
[From scheme/modifier-key-bindings.scm:71]

(unbind-two-modifier-key-events
		modkey1 modkey2)
- (app scwm modifier-key-bindings)
Unbind events attached to a multi-modifier key event.
[From scheme/modifier-key-bindings.scm:33]

(undo)
- (app scwm undo)
Undo the last operation that was undoable.
Undoable operations save changed state using `insert-undo-global'
before they perform their action.
[From scheme/undo.scm:96]

(undo-all-passive-grabs)
- Built-in Primitive
Remove all passive grabs of keys and buttons of bindings.\n\
See `redo-all-passive-grabs' for re-establishing those bindings.\n\
This procedure can be useful for quoting numerous keystrokes or\n\
mouse events. Beware that it can take several seconds to execute. \n\
This procedure considers the state of `ignore-dubious-modifiers?'
[From src/binding.c:1564]

(undo-passive-grab modmask keycode-or-butnum #&optional mouse?)
- Built-in Primitive
Remove the passive grabs of KEYCODE-OR-BUTNUM with MODMASK on all windows. \n\
If MOUSE? is #t, then treat KEYCODE-OR-BUTNUM as a button number and remove\n\
a grabe of a mouse binding.  Otherwise remove a keyboard passive grab.
[From src/binding.c:1595]

(undo-state-at-index index)
- (app scwm undo)
Return the state from undo-list at INDEX, or #f if bad index.
[From scheme/undo.scm:88]

(undo-use index)
- 
Apply the state from the undo-list contained at INDEX.
[From scheme/undo.scm:124]

(undraw-all-constraints #&key (draw-disabled #t))
- (app scwm ui-constraints)
Undraw all constraints in the global instance list.
[From scheme/ui-constraints.scm:658]

(undraw-constraint ui-constraint)
- (app scwm ui-constraints)
Undraw the UI-CONSTRAINT.  error if UI-CONSTRAINT is not
an ui-constraint.
[From scheme/ui-constraints.scm:615]

(undraw-constraints-of-window win #&key (draw-disabled #t))
- (app scwm ui-constraints)
Undraw all constraints associated with WIN.
If WIN is not specified, the user is prompted to select a window.
[From scheme/ui-constraints.scm:643]

(unflash-window #&optional (win (get-window)))
- (app scwm flash-window)
Revert WIN's titlebar and boundary color to state before a `flash-window'.
Return the window changed.
[From scheme/flash-window.scm:56]

(unfocus)
- Built-in Primitive
Remove the input focus from any window that may have it.
[From src/window.c:1837]

(uninstall-hover-focus)
- 
Remove the hover-focus procedures from the Scwm hooks.
This will turn off hover focus for any windows that it was
on for.
[From scheme/hover-focus.scm:140]

(uninstall-visibility-reporter)
- 
Uninstall procedures that print debugging messages on window visibility change events.
[From scheme/visibility-reporter.scm:17]

(unmaximize #&optional (win (get-window)))
- (app scwm winops)
Unmaximize WIN so it returns to its size/position before maximization.
[From scheme/winops.scm:156]

(unregister-image-loader extension)
- Built-in Primitive
Unregister the loader, if any, for images ending in EXTENSION.\n\
EXTENSION must be a string beginning with a period, the\n\
empty string (for files with no extension), or the string "default"\n\
(for files that no other image loader succeeds in loading).
[From src/image.c:428]

(unselect-all-windows)
- (app scwm window-selection)
Unselect all windows selected via `select-window-add'.
[From scheme/window-selection.scm:110]

(unselect-matching-windows proc)
- (app scwm window-selection)
Unselect windows for which predicate PROC returns #t.
PROC might be one of `resource-match??', `class-match??', etc.
[From scheme/window-selection.scm:99]

(unset-message-window-position!)
- (app scwm base)
Move the message window back to the default screen-center position.
[From scheme/base.scm:725]

(unshade-window  #&optional win)
- Built-in Primitive
Reverse the effect of `shade-window' on WIN.\n\
The change takes place instantaneously. WIN defaults to the window\n\
context in the usual way if not specified.\n\
A shaded window has the "WM_STATE" hint set to WithdrawnState, since \n\
the client application window is not visible.
[From src/window.c:2269]

(unstick-icon  #&optional win)
- Built-in Primitive
Cause WIN's icon to no longer be "sticky". \n\
A sticky window stays at its current viewport position\n\
no matter how where the viewport is in the virtual desktop.\n\
See `stick-icon' and `stick-window'. \n\
WIN defaults to the window context in the usual way if\n\
not specified.
[From src/window.c:3368]

(unstick-window  #&optional win)
- Built-in Primitive
Cause a window to no longer be "sticky", if it is.\n\
See `stick-window' for an explanation. WIN defaults to the window context in\n\
the usual way if not specified.
[From src/window.c:2157]

(uri-escapify-comma uri)
- (app scwm netscape)
Replace commas in URI with the %2C escape code.
This is useful since netscape's remote command invocation does a stupid
syntactic scan of the passed url and treats commas as argument command
separators, so the url gets chopped off at the first literal comma.
[From scheme/netscape.scm:92]

(use-change-desk-commands vector-of-commands)
- (app scwm flux)
Execute one of the VECTOR-OF-COMMANDS shell commands when the desk changes.
The 0th element of the vector is used for changes to desk 0,
the first element for changes to desk 1, etc.  Changes to desks which are
"off the end" of the vector do nothing.
[From scheme/flux.scm:280]

(use-gtk-error-window-for-scwm #&optional (on #t))
- (app scwm gtk)
No documentation supplied.
[From scheme/gtk.scm:90]

(use-placement-hint win)
- (app scwm base)
Do nothing when placing WIN, just let it be where hinted to be.
This is useful for, e.g., external programs such as the GNOME desktop
gmc which expect their windows to go where asked (like the desktop
icons in gmc).
[From scheme/base.scm:402]

(use-theme theme #&key (for-windows #t) 
			    (for-menus #t) (for-icons #t)
			    (for-background #t) 
			    (for-global-settings #t))
- (app scwm themes)
Use settings from THEME to set up the window manager.
THEME can be either a theme object (as returned by `load-theme') or a
string naming a theme, in which case that theme will be loaded and
used.  By default, window styles, menus, icons, backgrounds, and
global settings are all affected; if the FOR-WINDOWS, FOR-MENUS,
FOR-ICONS, FOR-BACKGROUND, or FOR-GLOBAL-SETTINGS arguments are #f,
the corresponding areas are not affected.  (Note: at this time,
only windows and backgrounds are affected; the other components
of themes have yet to be implemented.)
[From scheme/themes.scm:56]

(user-home)
- Built-in Primitive
Return the current user's home directory.\n\
This is set to one of the following (in order of relevance):\n\
<envar>$HOME</envar>,\n\
the directory field of the current uid's entry in the password file,\n\
the constant string "/tmp".
[From src/miscprocs.c:630]

(user-name)
- Built-in Primitive
Return the current user's name.\n\
This is set to one of the following (in order of relevance):\n\
<envar>$USER</envar>, <envar>$LOGNAME</envar>,\n\
the name field of the current uid's entry in the password file,\n\
the constant string "nobody".
[From src/miscprocs.c:617]

(viewport->virtual x y)
- (app scwm base)
Return the virtual coordinates for viewport X,Y.
[From scheme/base.scm:191]

(viewport-center-x)
- (app scwm base)
Return the x coordinate of the center of the current viewport.
[From scheme/base.scm:183]

(viewport-center-y)
- (app scwm base)
Return the y coordinate of the center of the current viewport.
[From scheme/base.scm:187]

(viewport-position)
- Built-in Primitive
Returns the current position of the viewport in pixels.\n\
The returned value is a list of the x and y positions.
[From src/deskpage.c:117]

(viewport-x-position)
- (app scwm base)
Return the x coordinate of the current viewport.
[From scheme/base.scm:175]

(viewport-y-position)
- (app scwm base)
Return the y coordinate of the current viewport.
[From scheme/base.scm:179]

(virtual->viewport x y)
- (app scwm base)
Return the viewport coordinates for virtual X,Y.
[From scheme/base.scm:195]

(virtual-size)
- (app scwm base)
Return the size of the virtual screen in pixels.
[From scheme/base.scm:227]

(virtual-switch-placement proc #&key (switch #t) (return #f))
- (app scwm placement)
Wrap placement procedure PROC with virtual switching code.
PROC is a procedure that takes a single window argument. The return
value is also a procedure of one one window argument which has the
same effect, except that it may switch to the desk and viewport of the
passed window before executing PROC, and may return to the previous
desk and viewport, depending on the values of SWITCH and RETURN
respectively.
[From scheme/placement.scm:194]

(visible? #&optional (win (get-window)))
- (app scwm wininfo)
Return #t if any of WIN is currently potentially visible, else #f.
Note that this just checks if WIN is in the current viewport
and on the current desk.  It may still return #t if WIN is completely
obscured by other windows.
[From scheme/wininfo.scm:117]

(vpx->vx x)
- (app scwm base)
Convert from a viewport to a virtual X coordinate.
If X is #f, just return #f.
[From scheme/base.scm:199]

(vpy->vy y)
- (app scwm base)
Convert from a viewport to a virtual Y coordinate.
If Y is #f, just return #f.
[From scheme/base.scm:206]

(vv-close)
- Primitive from (app scwm viavoice)
Close connect to the ViaVoice speech recognizer.
[From modules/viavoice/scwmviavoice.c:561]

(vv-connect  #&optional proc)
- Primitive from (app scwm viavoice)
Connect to the ViaVoice speech recognizer, calling PROC after connected.
See <filename>modules/viavoice/README</filename> for details. See also `vv-initialize'.
[From modules/viavoice/scwmviavoice.c:535]

(vv-connected?)
- Primitive from (app scwm viavoice)
Return #t if we are connected to the ViaVoice speech recognizer.
Returns #f if we are not connected.
[From modules/viavoice/scwmviavoice.c:573]

(vv-define-grammar name grammar-file #&optional proc)
- Primitive from (app scwm viavoice)
Use GRAMMAR-FILE as the ViaVoice grammar and give it name NAME.
Returns #f if not connected, otherwise returns the return
code from DoSimpleGrammar. PROC is invoked with the response
code when the asynchronous procedure completes.
[From modules/viavoice/scwmviavoice.c:584]

(vv-disconnect  #&optional proc)
- Primitive from (app scwm viavoice)
Disconnect from the ViaVoice speech recognizer, calling PROC after disconnected.
[From modules/viavoice/scwmviavoice.c:549]

(vv-enable-vocab name #&optional proc)
- Primitive from (app scwm viavoice)
Enable vocabulary/grammar NAME.
PROC is invoked with the response code when the asynchronous procedure completes.
[From modules/viavoice/scwmviavoice.c:613]

(vv-initialize)
- (app scwm viavoice)
Use this to start ViaVoice recognition.
[From scheme/viavoice.scm:104]

(vv-initialize-environment)
- (app scwm viavoice)
No documentation supplied.
[From scheme/viavoice.scm:47]

(vv-recognition-actions accepted? command annotations)
- (app scwm viavoice)
No documentation supplied.
[From scheme/viavoice.scm:112]

(vv-recognition-debug accepted? word annotation)
- (app scwm viavoice)
No documentation supplied.
[From scheme/viavoice.scm:173]

(vv-setup-recognition-hook)
- (app scwm viavoice)
No documentation supplied.
[From scheme/viavoice.scm:84]

(vv-smrc->error value)
- (app scwm viavoice)
No documentation supplied.
[From scheme/viavoice.scm:43]

(vv-terminate)
- (app scwm viavoice)
Use this to terminate ViaVoice recognition.
This will release /dev/dsp for other uses.  Use
`vv-initialize' to restart (when /dev/dsp is no
longer in use by another process.
[From scheme/viavoice.scm:89]

(vv-turn-microphone-off  #&optional proc)
- Primitive from (app scwm viavoice)
Turn the microphone off to stop recognizing commands.
PROC is invoked with the response code when the asynchronous procedure completes.
[From modules/viavoice/scwmviavoice.c:646]

(vv-turn-microphone-on  #&optional proc)
- Primitive from (app scwm viavoice)
Turn the microphone on to start recognizing commands.
See also `vv-initialize'.
PROC is invoked with the response code when the asynchronous procedure completes.
[From modules/viavoice/scwmviavoice.c:629]

(vv-use-grammar #&optional (name "scwmgrammar")
				(file 
				 (string-append 
				  (scwm-path-prefix) 
				  "/share/scwm/ViaVoice/scwmgrammar.fsg")))
- (app scwm viavoice)
No documentation supplied.
[From scheme/viavoice.scm:66]

(vx- x)
- (app scwm base)
Return the virtual coordinate X pixels left of the right virtual edge.
[From scheme/base.scm:231]

(vx->vpx x)
- (app scwm base)
Convert from a virtual to a viewport X coordinate.
If X is #f, just return #f.
[From scheme/base.scm:213]

(vy- y)
- (app scwm base)
Return the virtual coordinate Y pixels up from the bottom virtual edge.
[From scheme/base.scm:235]

(vy->vpy y)
- (app scwm base)
Convert from a virtual to a viewport Y coordinate.
If Y is #f, just return #f.
[From scheme/base.scm:220]

(w%x x #&optional (w (get-window)))
- (app scwm base)
Return a pixel width X percent of the width of window W.
[From scheme/base.scm:247]

(w%y y #&optional (w (get-window)))
- (app scwm base)
Return a pixel height Y percent of the height of window W.
[From scheme/base.scm:251]

(warp-placement win)
- (app scwm winops)
Return a list, (%x %y), for the desired pointer placement for WIN.
The percentages are of the window size, and are gotten by using
the 'warp-placement object-property of WIN;  they default to (20 20)
if no such property is set. To change the default for all your windows
you can do something like:
  (add-hook! after-new-window-hook 
    (lambda (win) 
      (set-object-property! win 'warp-placement '(80 20))))
[From scheme/winops.scm:449]

(warp-to-window  #&optional win)
- Built-in Primitive
Move the mouse pointer to the upper left corner of WIN.\n\
If WIN is on a different desk or in a different viewport, these will\n\
be changed appropriately so that the window is visible. WIN defaults\n\
to the window context in the usual way if not specified.  Note that\n\
the target window is not raised, so if the target window's upper\n\
left corner is under another window, that other window may end up\n\
with the keyboard focus.
[From src/window.c:1848]

(warp-to-window-viewport win)
- (app scwm virtual)
Change to the desk and viewport of WIN.
The viewport selected is an integral multiple of the viewport size
which contains the center of the window, or the closest possible if
none does.
[From scheme/virtual.scm:159]

(wiggle-window #&optional (win (get-window)))
- (app scwm flux)
Animatedly window shade and then unshade WIN.
Just a toy--- perhaps could be useful to call attention to a window.
[From scheme/flux.scm:54]

(wildcard->regexp wildcard)
- (app scwm wininfo)
Return the regular expresision string corresponding to WILDCARD.
This involves quoting meta characters and replacing the wildcard
meta-characters "*" with ".*" and "?" with ".".
[From scheme/wininfo.scm:179]

(wildcard-match? wildcard #&optional (win (get-window))
				 #&key (full-regexp #f)
				 (regexp-options `(,regexp/icase)))
- (app scwm wininfo)
Returns #t if WILDCARD matches WIN (in the sense of `wildcard-matcher').
See `wildcard-matcher' for the meanings of FULL-REGEXP and REGEXP-OPTIONS.
[From scheme/wininfo.scm:229]

(wildcard-matcher wildcard #&key (full-regexp #f)
				  (regexp-options `(,regexp/icase)))
- (app scwm wininfo)
Return a procedure that matches WILDCARD against a window.
REGEXP-OPTIONS is passed to `make-regexp'.  If FULL-REGEXP is #t, 
the WILDCARD is considered to be a regular-expression instead of 
a shell-like wildcard.  The returned procedure takes a window
and returns #t if WILDCARD matches the title, class, or resource
of the window.
[From scheme/wininfo.scm:202]

(window->image win #&optional x-offset y-offset width height)
- Built-in Primitive
Return an image with the contents of window WIN.\n\
WIN can be a window id (as a long), a window object, or\n\
the symbol 'root-window. Captures the rectangle of the window\n\
at X-OFFSET, Y-OFFSET with width WIDTH and height HEIGHT.
[From src/image.c:650]

(window-aligned-viewport win)
- (app scwm virtual)
Return the viewport that contains the center of WIN.
The return value is an integral multiple of the viewport size which
contains the center of the window, or the closest possible if none
does.
[From scheme/virtual.scm:60]

(window-and-offsets->nonant win dx dy)
- (app scwm nonants)
Return a nonant number in [0,8] from a window position and an offset.
WIN is the window, DX and DY are positions relative to the top-left of WIN.
[From scheme/nonants.scm:171]

(window-background-color #&optional (win (get-window)))
- (app scwm flux)
No documentation supplied.
[From scheme/flux.scm:408]

(window-center-bottom win)
- (app scwm window-locations)
Return a pair (X . Y) that is the pixel position of the center, bottom of WIN
relative to the current viewport.
[From scheme/window-locations.scm:38]

(window-center-middle win)
- (app scwm window-locations)
Return pair (viewport-x . viewport-y) that is the middle of WIN.
[From scheme/window-locations.scm:18]

(window-center-position win)
- (app scwm wininfo)
Return the virtual coordinates of the center of WIN as a list of the X and Y coordinate.
[From scheme/wininfo.scm:144]

(window-center-top win)
- (app scwm window-locations)
Return a pair (X . Y) that is the pixel position of the center, top of WIN
relative to current viewport.
[From scheme/window-locations.scm:28]

(window-class #&optional (win (get-window)))
- (app scwm base)
Return the window resources class of WIN. 
WIN defaults to the window context in the usual way if not specified. 
Returns "NoClass" if the window has not set its class.
See also `window-class-hint'.
[From scheme/base.scm:857]

(window-class-hint  #&optional win)
- Built-in Primitive
DEPRECATED. Return the window resource class of WIN.\n\
WIN defaults to the window context in the usual way if not\n\
specified. You should prefer `window-class'.
[From src/window.c:2877]

(window-client-machine-name #&optional (win (get-window)))
- (app scwm wininfo)
Return the name of the client machine on which WIN is running.
[From scheme/wininfo.scm:195]

(window-configuration #&optional (win (get-window)))
- (app scwm window-configuration)
Return a list containing the state of WIN.
[From scheme/window-configuration.scm:32]

(window-configuration->xform-to-it cfg)
- (app scwm window-configuration)
Create a transformation element for going from the current state to CFG.
CFG should be a window configuration object.  See also `animate-windows'.
[From scheme/window-configuration.scm:74]

(window-configuration-to-register 
		 #&optional (win (or (window-with-focus) (get-window)))
		 (register (get-register-name)))
- (app scwm register)
Save the configuration of WIN to REGISTER.
[From scheme/register.scm:63]

(window-configuration? wcfg)
- (app scwm window-configuration)
Return #t if WCFG is a window configuration.
[From scheme/window-configuration.scm:43]

(window-context)
- Built-in Primitive
Returns the current window context, or #f if there is none.\n\
See also `with-window' and `set-window-context!'
[From src/window.c:1117]

(window-corners win)
- (app scwm rectangle)
Return the four coordinates of the corners of the location of WIN.
Return value's car is the top left, cdr is the bottom right.
That is, the returned list is: ((nw-x nw-y) se-x se-y).  Use
`rect-nw-x', `rect-nw-y', `rect-se-x', `rect-se-y' to take apart
the returned list.
[From scheme/rectangle.scm:12]

(window-creation-time  #&optional win)
- Built-in Primitive
Return the time that WIN was created in seconds since 1/1/70.
[From src/window.c:2929]

(window-decor win)
- Built-in Primitive
Return WIN's decor.
[From src/decor.c:302]

(window-decoration-ids  #&optional win)
- Built-in Primitive
Returns a list of long integer window ids of the decoration windows for WIN.\n\
Returned list is ( frame title_w (side-n side-e side-s side-w)\n\
(corner-nw corner-ne corner-se corner-sw) ).
[From src/window.c:3537]

(window-decoration-size win)
- Built-in Primitive
Return (decor-width decor-height) for WIN.\n\
These are the extra width/height (in pixels) of the frame\n\
beyond that of the client window width/height.
[From src/window.c:2361]

(window-deletable?  #&optional win)
- Built-in Primitive
Return #t if WIN is able to be deleted, #f otherwise.\n\
If this procedure returns #f, then a call to `delete-window' on WIN\n\
will do nothing.  WIN defaults to the window context in the usual way if not\n\
specified.
[From src/window.c:1804]

(window-desk  #&optional win)
- Built-in Primitive
Return the desk that WIN is currently on.\n\
WIN defaults to the window context in the usual way if not specified.
[From src/window.c:2842]

(window-flashing? #&optional (win (get-window)))
- (app scwm flash-window)
Return #t iff WIN is currently flashing, #f otherwise.
[From scheme/flash-window.scm:52]

(window-focus-style  #&optional win)
- Built-in Primitive
Get the focus style of WIN.\n\
Returns one of 'mouse, 'click, 'sloppy, or 'none.
[From src/window.c:3483]

(window-frame-area win)
- (app scwm winops)
Return the area of WIN's frame in square pixels.
[From scheme/winops.scm:199]

(window-frame-border-width  #&optional win)
- Built-in Primitive
Return the width of WIN's frame's border.\n\
WIN defaults to the window context in the usual way if not specified.
[From src/window.c:2745]

(window-frame-id  #&optional win)
- Built-in Primitive
Return the X window id for the outermost frame window of WIN.\n\
WIN defaults to the window context in the usual way if not\n\
specified.
[From src/window.c:2775]

(window-frame-size  #&optional win)
- Built-in Primitive
Return the size of the frame of WIN.\n\
The position is returned as a list of the width and the height in\n\
pixels. WIN defaults to the window context in the usual way if not\n\
specified. See `window-size' if you want the size of the application\n\
(client) window.
[From src/window.c:2657]

(window-fully-constructed? win)
- Built-in Primitive
Returns #t if WIN is a fully-constructed window, otherwise #f.\n\
In the `before-new-window-hook' windows are not yet fully constructed, and only\n\
a subset of procedures can be successfully called on them.
[From src/window.c:943]

(window-geometry-string #&optional (win (get-window)))
- (app scwm wininfo)
Return a string corresponding to the geometry specifications for WIN.
The virtual position and the frame size are used.  The resulting string
looks like "157x133+200+306".  If WIN is iconified, the string
returned is in parentheses.
[From scheme/wininfo.scm:151]

(window-gravity  #&optional win)
- Built-in Primitive
Return the gravity for WIN as a symbol.\n\
Return value is one of the following: \n\
'forget, 'northwest, 'north, 'northeast,\n\
'west, 'center, 'east, 'southwest 'south, 'southeast,\n\
'static.
[From src/window.c:2551]

(window-highlighted-nonant  #&optional win)
- Built-in Primitive
Returnt the highlighted nonant for WIN, or #f if none highlighted.
[From src/window.c:3634]

(window-icon  #&optional win)
- Built-in Primitive
Get the icon image being used for WIN.\n\
Returns #f if none is being used. WIN defaults to the window context\n\
in the usual way if not specified.
[From src/window.c:3991]

(window-icon-shaped? win)
- Built-in Primitive
Return #t if WIN has shaped icon, #f otherwise.\n\
WIN defaults to the window context in the usual way if not specified.
[From src/window.c:4060]

(window-icon-title  #&optional win)
- Built-in Primitive
Return the icon window title of WIN.\n\
This is the title as requested by the application. WIN defaults to\n\
the window context in the usual way if not specified.
[From src/window.c:2865]

(window-id  #&optional win)
- Built-in Primitive
Return the X window id for WIN.\n\
This is the X id for the actual application window. WIN defaults to\n\
the window context in the usual way if not specified.
[From src/window.c:2759]

(window-info #&optional (win (get-window)))
- (app scwm flux)
Display information about WIN in a message window.
[From scheme/flux.scm:124]

(window-is-selected? #&optional (w (get-window)))
- (app scwm window-selection)
Return #t if W is in the selected window list, else #f.
See also `select-window-add', `select-window-remove', and `selected-windows-list'.
[From scheme/window-selection.scm:40]

(window-last-focus-time  #&optional win)
- Built-in Primitive
Return the time that WIN was last focussed in seconds since 1/1/70.
[From src/window.c:2906]

(window-last-focus-time-string #&optional (win (get-window)))
- (app scwm wininfo)
Return a string corresponding to the last focus time for WIN.
[From scheme/wininfo.scm:170]

(window-last-focus-x-time  #&optional win)
- Built-in Primitive
Return the X11 time that WIN was last focussed. \n\
These are not reliable to compare over long times since they wrap\n\
too frequenly.
[From src/window.c:2916]

(window-left-bottom win)
- (app scwm window-locations)
Return a pair (X . Y) that is the pixel position of the left, bottom of WIN
relative to the current viewport.
[From scheme/window-locations.scm:76]

(window-left-middle win)
- (app scwm window-locations)
Return a pair (X . Y) that is the pixel position of the left, middle of WIN
relative to the current viewport.
[From scheme/window-locations.scm:49]

(window-left-top win)
- (app scwm window-locations)
Return a pair (X . Y) that is the pixel position of the left, top of WIN
relative to the current viewport.
[From scheme/window-locations.scm:70]

(window-map-pending? win)
- Built-in Primitive
Returns #t if the mapping of WIN is pending, otherwise returns #f.\n\
The map is pending from the moment the MapRequest is entered until the\n\
map is actually performed.
[From src/window.c:967]

(window-mapped? win)
- Built-in Primitive
Returns #t if WIN is mapped, otherwise returns #f.
[From src/window.c:956]

(window-mini-icon  #&optional win)
- Built-in Primitive
Get the mini-icon image being used for WIN.\n\
Returns #f if none is being used. WIN defaults to the window context\n\
in the usual way if not specified.
[From src/window.c:4033]

(window-other-id win)
- (app scwm xprop-extras)
Returns the other id string given to the process that created WIN.
Requires using the LD_PRELOAD environment variable for the
started process:

SCWM_OTHER_ID="answer" LD_PRELOAD=/path/to/scwm_set_pid_property.so

Returns #f if the property does not exist on WIN (most
likely because you did not use the LD_PRELOAD variable and
the SCWM_OTHER_ID environment variable).
See also `window-client-machine-name' to get the machine
name, and `window-pid' to get the process id.

[From scheme/xprop-extras.scm:114]

((window-overlaps-window? #&optional (win (get-window)))
		 #&optional (win2 (get-window)))
- (app scwm wininfo)
Return a function that takes WIN2 and returns #t if it overlaps WIN.
[From scheme/wininfo.scm:98]

(window-pid win)
- (app scwm xprop-extras)
Returns the process id of the process that created WIN.
Requires using the LD_PRELOAD environment variable for the
started process:

LD_PRELOAD=/path/to/scwm_set_pid_property.so

Returns #f if the property does not exist on WIN (most
likely because you did not use the LD_PRELOAD variable).
See also `window-client-machine-name' to get the machine
name on which the returned process id is valid, and
`window-other-id' to get the string in environment variable
SCWM_OTHER_ID.

[From scheme/xprop-extras.scm:96]

(window-position  #&optional win)
- Built-in Primitive
Return the position of WIN in pixels.\n\
The position is returned as a list of the x coordinate and the y\n\
coordinate in pixels. If the window is sticky, the position will\n\
always be in the 0,0 viewport. WIN defaults to the window context in the usual\n\
way if not specified.  See also `window-viewport-position'.
[From src/window.c:2594]

(window-position-in-viewport xx yy #&optional win)
- (app scwm virtual)
Return a virtual position for WIN that is in viewport (XX,YY).
The (0,0) viewport is the starting viewport.  XX and YY are
full display-size increments (e.g., (1,0) is the viewport
just to the right of the home (0,0) viewport).  This returns
the position that `move-window-to-viewport' moves the window to.
[From scheme/virtual.scm:82]

(window-property win prop)
- Built-in Primitive
Retrieve window property PROP of WIN.\n\
PROP should be a symbol. #f will be returned if the property does not\n\
exist (whether set by `set-window-property!' or otherwise). Soon, some\n\
properties will have magical meanings, accessing particular fields in\n\
the window structure. Also, a window-property-change-hook mechanism\n\
will soon be implemented for notification of all window property\n\
changes. This is not yet done. The window property primitives should\n\
be considered in flux.
[From src/winprop.c:127]

(window-resource #&optional (win (get-window)))
- (app scwm base)
Return the window resource instance of WIN. 
WIN defaults to the window context in the usual way if not specified. 
Returns "NoResource" if the window has not set its resource name.
See also `window-resource-hint'.
[From scheme/base.scm:865]

(window-resource-hint  #&optional win)
- Built-in Primitive
DEPRECATED. Return the window resource instance of WIN. \n\
WIN defaults to the window context in the usual way if not specified. \n\
You should prefer `window-resource'.
[From src/window.c:2890]

(window-right-bottom win)
- (app scwm window-locations)
Return a pair (X . Y) that is the pixel position of the right, bottom of WIN
relative to the current viewport.
[From scheme/window-locations.scm:96]

(window-right-middle win)
- (app scwm window-locations)
Return a pair (X . Y) that is the pixel position of the right, middle of WIN
relative to the current viewport.
[From scheme/window-locations.scm:59]

(window-right-top win)
- (app scwm window-locations)
Return a pair (X . Y) that is the pixel position of the right, top of WIN
relative to the current viewport.
[From scheme/window-locations.scm:86]

(window-segment segment win)
- (app scwm smart-push)
No documentation supplied.
[From scheme/smart-push2.scm:34]

(window-shaped?  #&optional win)
- Built-in Primitive
Return #t if WIN is a shaped window, #f otherwise.\n\
WIN defaults to the window context in the usual way if not specified.
[From src/window.c:4047]

(window-size  #&optional win)
- Built-in Primitive
Return the size of the application window of WIN.\n\
WIN defaults to the window context in the usual way if not specified.\n\
The position is returned as a list of four numbers. The first two are\n\
the width and the height in pixels, the third and fourth are the width\n\
and height in resize units (e.g., characters for an xterm).  See\n\
`window-frame-size' if you want the size of the frame window.
[From src/window.c:2699]

(window-size-hints win)
- Built-in Primitive
Return a list of the window size hints associated with WIN.\n\
The list returned contains 4 cons pairs containing:\n\
'((min-width . max-width) (min-height . max-height)\n\
(width-inc . height-inc) (base-width . base-height))
[From src/window.c:2444]

(window-state->string win-state)
- (app scwm stringops)
Returns a string representation of the numerical WIN-STATE.
[From scheme/stringops.scm:46]

(window-style condition . args)
- (app scwm style)
Specify various properties for windows matching CONDITION.
See the `Face Specification Flags' and `Window Style' sections
for details.  CONDITION can be a string in which case
`default-style-condition-handler' is used, or it can be a list
of two elements in which case the first is the X class name to match
and the second is the X resource name to match (both must match).
CONDITION can also be an arbitrary predicate that takes a window
and returns #t iff that window is to be considered a match.
[From scheme/style.scm:41]

(window-task-switcher-menu #&optional (last? #f) #&rest rest)
- (app scwm task-switcher)
Popup a task-switcher window list.
Start out on the window that last had the focus.
[From scheme/task-switcher.scm:10]

(window-task-switcher-menu-backwards . rest)
- 
Popup a task-switcher window list.
Start out on the window that had the focus longest ago.
[From scheme/task-switcher.scm:24]

(window-title  #&optional win)
- Built-in Primitive
Return the window title of WIN, as requested by the application.\n\
WIN defaults to the window context in the usual way if not specified.
[From src/window.c:2854]

(window-title-height #&optional (win (get-window)))
- (app scwm base)
Return WIN's titlebar's height.
See also `window-title-size', `window-title-width'.
[From scheme/base.scm:359]

(window-title-size  #&optional win)
- Built-in Primitive
Return a list with the width and height of WIN's titlebar.
[From src/window.c:2730]

(window-title-width #&optional (win (get-window)))
- (app scwm base)
Return WIN's titlebar's width.
See also `window-title-size', `window-title-height'.
[From scheme/base.scm:364]

(window-transient-for  #&optional win)
- Built-in Primitive
Return the window for which WIN is transient.\n\
If WIN is transient, and the window it is transient for is\n\
not the root window and is being managed by scwm, this returns the window\n\
object of the window that WIN is transient for, otherwise return\n\
#f. WIN defaults to the window context in the usual way if not\n\
specified.
[From src/window.c:2029]

(window-unstyle . style)
- (app scwm style)
Remove STYLE definition from list of window styles.
STYLE must be given exactly the same way as on invocation of `window-style'.
[From scheme/style.scm:55]

(window-valid? obj)
- Built-in Primitive
Returns #t if OBJ is window object and is still valid, otherwise returns #f.\n\
A window is no longer valid when it is destroyed or closed.  An iconified\n\
window that can be deiconified is still represented by a valid window object.
[From src/window.c:932]

(window-viewport-position #&optional (win (get-window)))
- (app scwm base)
Return the position of WIN in pixels within the viewport.
The position is returned as a list of the x coordinate and the y
coordinate in pixels. WIN defaults to the window context in the usual
way if not specified.  See also `window-position'.
[From scheme/base.scm:369]

(window-viewport-position-of sym win)
- 
Return a list (X Y) that is the viewport position of the SYM part of WIN.
SYM is one of northwest north northeast west center east southwest south southeast.
[From scheme/window-locations.scm:108]

(window-virtual-position #&optional (win (get-window)))
- (app scwm base)
Return the virtual position of WIN in pixels.
If WIN is sticky, this returns the position of the window in the
current viewport.
[From scheme/base.scm:378]

(window-visibility  #&optional win)
- Built-in Primitive
Return the visibility state for WIN.\n\
Returns either 'partially-obscured, 'fully-obscured, or 'unobscured.
[From src/window.c:2939]

(window-visible-frame-size win)
- (app scwm base)
Return the visible frame size of WIN.
This is just the `window-frame-size' unless WIN is shaded in
which case the height is just the titlebar height.
[From scheme/base.scm:873]

(window-with-focus)
- Built-in Primitive
Return the window that currently has the input focus.
[From src/window.c:1131]

(window-with-pointer)
- Built-in Primitive
Return the window that currently contains the mouse pointer.
[From src/window.c:1141]

(window? obj)
- Built-in Primitive
Returns #t if OBJ is a window object, otherwise returns #f.
[From src/window.c:923]

(windows-overlap? win win2)
- (app scwm wininfo)
Return #t if WIN and WIN2 overlap at all, else #f.
I.e., returns #t if the intersection of the windows' areas
is non-empty.  If either WIN or WIN2 is iconified this
will definitely return #f.  Also will return #f if WIN and
WIN2 are bound to the same window.
[From scheme/wininfo.scm:83]

(winlist-hit #&optional (win (get-window)))
- (app scwm winlist)
Permit WIN to be displayed in the window list by default.
This resets the 'winlist-skip property of WIN.  See also `winlist-skip'.
[From scheme/winlist.scm:74]

(winlist-skip #&optional (win (get-window)))
- (app scwm winlist)
Do not show WIN in the window list by default.
This sets the 'winlist-skip property of WIN.  See also `winlist-hit'.
[From scheme/winlist.scm:79]

(winlist-skip? #&optional (win (get-window)))
- (app scwm winlist)
Return #t if WIN is skipped in the window list, #f otherwise.
[From scheme/winlist.scm:84]

(with-frozen-root-window thunk)
- 
Execute THUNK with a frozen root window.
Creates an image containing the root window, and displays that
image in a message window covering the entire screen.  Executes
THUNK, then removes the message window.
[From scheme/message-window.scm:298]

(write-all port . lst)
- (app scwm stringops)
Write all arguments into the port. #t means `current-output-port'.
[From scheme/stringops.scm:69]

(x- x)
- (app scwm base)
Return the viewport pixel coordinate X pixels left of the right display edge.
[From scheme/base.scm:167]

(X-atom->string atom)
- Built-in Primitive
Returns the string represented by ATOM.\n\
Returns #f, if the X atom was not known.
[From src/xproperty.c:400]

(X-atomic-property-set-if-unset! window name value #&optional
						(type "STRING") (format 8))
- (app scwm xprop-extras)
Set property NAME on WINDOW to VALUE, if it's currently unset.
Returns #f if the property is already set, #t otherwise.
TYPE and FORMAT are as in X-property-set!
[From scheme/xprop-extras.scm:80]

(x-connection-number)
- Built-in Primitive
Return the X connection file descriptor number.
[From src/miscprocs.c:718]

(X-convert-selection selection target property requestor-window)
- Built-in Primitive
Ask the owner of selection SELECTION to provide its value.\n\
The owner should convert the selection to type TARGET and put set\n\
the X property PROPERTY on REQUESTOR-WINDOW when it is transferred.\n\
SELECTION, TARGET, and PROPERTY are each atoms.  REQUESTOR-WINDOW\n\
is a window object or 'root-window.
[From src/xproperty.c:444]

(X-cut-buffer->palm-clipboard)
- (app scwm flux)
No documentation supplied.
[From scheme/flux.scm:333]

(X-cut-buffer-string)
- (app scwm xprop-extras)
Return the text of the primary cut buffer.
This is the cut text selected by X clients.  Returns #f if the
cut buffer is empty or is not a string.
[From scheme/xprop-extras.scm:19]

(X-display-information)
- Built-in Primitive
Return some information about the screen. In particular,\n\
return a list of the horizontal resolution, the vertical resolution,\n\
the number of planes on the current screen (i.e. the bit depth), the\n\
bits per color supported by the hardware, the visual class (one of\n\
"StaticGray", "GrayScale", "StaticColor", "PseudoColor", "DirectColor"\n\
or "TrueColor") and a boolean indicating whether the display is color.\n\
The resolutions mentioned above should in theory be pixels per\n\
centimeter, rounded to the nearest integer. These parameters can be\n\
used for various workarounds or conditional decisions in a scwmrc to\n\
be shared among multiple machines.
[From src/miscprocs.c:547]

(X-fetch-bytes)
- Built-in Primitive
Returns a string representing the value of the cut buffer.\n\
XFetchBytes is called.
[From src/miscprocs.c:981]

(X-get-selection-owner atom)
- Built-in Primitive
Return the window that owns the selection denoted by ATOM.\n\
ATOM is likely one of the atoms: "PRIMARY" or "SECONDARY".\n\
See also `string->X-atom'.  Return value is either a window\n\
object, 'root-window, or an integer window Id.
[From src/xproperty.c:420]

(X-grab-server)
- Built-in Primitive
Grab the X server.\n\
This is very risky; you should almost definitely use\n\
`with-grabbed-server' instead.  This must be paired with\n\
X-ungrab-server.  This primitive is undefined at startup\n\
to make it hard to access directly. See also `X-server-grabs'
[From src/Grab.c:70]

(X-handle-selection-string selection value-handler)
- (app scwm xprop-extras)
Run VALUE-HANDLER on the selection SELECTION after retrieving it.
The VALUE-HANDLER should take a single argument, the string value
of the selection retrieved.  The X11 protocol for selections is
asynchronous, so so must this procedure be.
[From scheme/xprop-extras.scm:46]

(X-pointer-mapping)
- Built-in Primitive
Return the mapping of physical->logical pointer buttons as a list.\n\
The length of the returned list is the number of buttons available.  Each\n\
element in the list is an integer.  E.g., '(1 2 3) is a normally mapped\n\
3-button mouse, whereas '(3 2 1) is a 3-button mouse where the rightmost\n\
physical button acts as logical button 1, and the leftmost acts as button 3.
[From src/binding.c:1639]

(X-properties win)
- Built-in Primitive
Returns a list of WIN's X property names.\n\
WIN is the window to query, an X window id, or 'root-window.
[From src/xproperty.c:348]

(X-properties->string #&optional (win (get-window))
				      (recurse #t))
- 
Prints the X properties of WIN into a string.
WIN is a window object, an X window id, or 'root-window.
If RECURSE is non-#f, also list properties of referenced windows.
[From scheme/xprop-extras.scm:192]

(X-property-delete! win name)
- Built-in Primitive
Delete X property NAME of window WIN.\n\
WIN is the window to check, an X window id, or 'root-window.\n\
NAME is a string. The return value is unspecified.
[From src/xproperty.c:330]

(X-property-get win name #&optional consume?)
- Built-in Primitive
Get X property NAME of window WIN.\n\
WIN is the window to check, an X window id, or 'root-window.\n\
NAME is a string or an X/11 atom (long).\n\
If CONSUME? is #t, the X property is deleted after getting it. Default is\n\
not to delete.\n\
If the X property could not be found, #f is returned.\n\
If the X property could be found, a list '(value type format) is returned.\n\
"type" is a string.\n\
"format" is either 8, 16, or 32, giving the size of the elements of "value".\n\
"value" is a string, if "format" is 8, or a vector of integers otherwise.
[From src/xproperty.c:263]

(X-property-set! win name value #&optional type format action)
- Built-in Primitive
Set X property NAME on window WIN to VALUE.\n\
WIN is the window to set the X property on, an X window id, or 'root-window.\n\
NAME and TYPE are strings or X/11 atoms (longs). TYPE defaults to "STRING".\n\
FORMAT may be one of the integers 8, 16, and 32, defining the element size\n\
of the VALUE. It is 8 by default.\n\
If FORMAT is 8, VALUE may be a string or a list of null-terminated strings.\n\
Otherwise it will be a vector of FORMAT-bit integers.\n\
ACTION may be one of the symbols 'replace, 'prepend, or 'append signifying\n\
how the new VALUE should be merged (if at all) with the existing\n\
value.
[From src/xproperty.c:112]

(X-resource-database-save filename)
- Built-in Primitive
Save the Scwm resource database to FILENAME. \n\
Only the settings set or changed via `X-resource-put' go into\n\
the file.
[From src/xrm.c:90]

(X-resource-get name #&optional xclass)
- Built-in Primitive
Get X resource specified by NAME and XCLASS from Xrm database.\n\
Both NAME and XCLASS are strings, as is the returned value.  If\n\
XCLASS is omitted, it defaults to the same string as NAME.\n\
If there is no resource under the given key, #f is returned.
[From src/xrm.c:61]

(X-resource-put resource value)
- Built-in Primitive
Stores string VALUE as X resource RESOURCE (also a string).\n\
Later, the value can be retrieved using `X-resource-get'.
[From src/xrm.c:42]

(X-rotate-cut-buffers n)
- Built-in Primitive
Rotate the X cut buffers by N positions.\n\
This means buffer 0 becomes buffer n, buffer 1 becomes n + 1 mod 8,\n\
and so on.  This cut buffer numbering is global to the display.
[From src/miscprocs.c:408]

(X-server-grabs)
- Built-in Primitive
Return the number of nested server grabs.\n\
Nonzero means the server is currently grabbed. \n\
See also `with-grabbed-server', `X-grab-server' and `X-ungrab-server'
[From src/Grab.c:99]

(X-set-cut-buffer-string! string)
- (app scwm xprop-extras)
Set the text of the primary cut buffer.
This is the cut text selected by X clients.
[From scheme/xprop-extras.scm:25]

(X-store-bytes string)
- Built-in Primitive
Set the cut buffer to STRING by calling XStoreBytes.
[From src/miscprocs.c:1002]

(X-synthetic-send-string str #&optional (win (get-window)))
- 
Send string STR to WIN via synthetic X events.
See also `send-key'.
Note that some programs (e.g., xterm) by default do not
honour synthetic key events as they are a security hole.
[From scheme/send-string.scm:71]

(X-ungrab-server)
- Built-in Primitive
Ungrab the X server.\n\
Using `X-grab-server' and `X-ungrab-server' directly is risky; you \n\
should almost definitely use `with-grabbed-server' instead. This \n\
primitive is undefined at startup to make it hard to access directly. \n\
See also `X-server-grabs'
[From src/Grab.c:84]

(X-version-information)
- Built-in Primitive
Return some information about the version of the running X server.\n\
Return value is a list of the X protocol version, the X protocol\n\
revision, the X server vendor, and the vendor release number.
[From src/miscprocs.c:527]

(xlib-draw-arc! top-left width height angle1 angle2)
- Primitive from (app scwm xlib-drawing)
Draws a arc to the screen using the Xlib call XDrawArc.
The arc is specified in terms of a rectangle, in which it is wholly
enclosed.  TOP-LEFT is a point pair for the upper left corner of the rectangle.  The
rectangle is of size WIDTH by HEIGHT.  The arc is drawn from ANGLE1 to
ANGLE2. Angles are specified in degrees (0.0 to 360.0)
[From modules/xlib-drawing/drawing.c:125]

(xlib-draw-line! p1 p2)
- Primitive from (app scwm xlib-drawing)
Draws a line using the Xlib call XDrawLine.
The line is drawn from P1 to P2.
Both P1 and P2 are pairs (X . Y) representing a poin
[From modules/xlib-drawing/drawing.c:107]

(xlib-draw-rectangle! top-left width height)
- Primitive from (app scwm xlib-drawing)
Draws a rectangle to the screen using the Xlib call XDrawRectangle.
TOP-LEFT is the upper left point of the rectangle.  The rectangle is of size
WIDTH by HEIGHT.
TOP-LEFT is a point pair: (X . Y).
[From modules/xlib-drawing/drawing.c:87]

(xlib-set-drawing-mask! value)
- Primitive from (app scwm xlib-drawing)
Set the drawing mask used by the xlib-* primitives.
VALUE is XORed with the background when dragging non-opaque move or
resize frames. VALUE should be an integer.
[From modules/xlib-drawing/drawing.c:64]

(xlib-set-fill-style! style)
- Primitive from (app scwm xlib-drawing)
Sets the fill style of the DrawingGC to STYLE.
One of FillSolid (0), FillTiled (1), FillStippled (2), or FillOpaqueStippled (3)
should be given as STYLE.
[From modules/xlib-drawing/drawing.c:177]

(xlib-set-line-attributes! width #&optional style)
- Primitive from (app scwm xlib-drawing)
Sets the line width of the DrawingGC to WIDTH and style to STYLE.
One of 'solid (default), 'on-off-dash, or 'double-dash should
be given as STYLE.
[From modules/xlib-drawing/drawing.c:154]

(xlock-query-modes #&optional (xlock *xlock-query-program*))
- (app scwm xlock-menus)
Returns a list of mode names queried from the given XLOCK program.
Special modes "random", "bomb", and "blank" are not included in this list.
Use *xlock-query-program* to specify what program's output we should
read to compute the list of modes.  See also `make-xlock-menu'.
[From scheme/xlock-menus.scm:49]

(xterm-other-host hostname)
- (app scwm base)
Run an xterm on machine HOSTNAME.
Starts the XTerm with resource "remotexterm" and uses
`*xterm-command*' to determine which terminal program
to use and `*remote-shell-command*' to determine how to
start the shell remotely.
[From scheme/base.scm:659]

(xtest-fake-button-event button is-press? #&optional ms-delay)
- Primitive from (app scwm xtest)
Fake an X event of button number BUTTON after a delay of MS-DELAY.
The event is a mouse press if IS-PRESS? is #t, or a release otherwise. If
MS-DELAY is ommitted or is not a number, no delay is used
[From modules/xtest/scwmxtest.c:47]

(xtest-fake-key-event keycode is-press? #&optional ms-delay)
- Primitive from (app scwm xtest)
Fake an X event of key KEYCODE after a delay of MS-DELAY.
The event is a key press if IS-PRESS? is #t, or a release otherwise. If
MS-DELAY is ommitted or is not a number, no delay is used
[From modules/xtest/scwmxtest.c:71]

(xtest-fake-modmask mask delay press?)
- (app scwm quote)
No documentation supplied.
[From scheme/quote.scm:95]

(xtest-fake-modmask-button mask button #&optional (delay #f))
- 
No documentation supplied.
[From scheme/quote.scm:109]

(xtest-fake-modmask-key mask keycode #&optional (delay #f))
- (app scwm quote)
No documentation supplied.
[From scheme/quote.scm:101]

(xtest-fake-motion-event x y #&optional screen ms-delay)
- Primitive from (app scwm xtest)
Fake an X motion event to X,Y after a delay of MS-DELAY on SCREEN.
If SCREEN is ommitted, 0 is used.
If MS-DELAY is ommitted or is not a number, no delay is used
[From modules/xtest/scwmxtest.c:95]

(xtest-fake-relative-motion-event dx dy #&optional ms-delay)
- Primitive from (app scwm xtest)
Fake an X motion relative event of a move DX, DY after a delay of MS-DELAY.
If MS-DELAY is ommitted or is #f or 0, no delay is used
[From modules/xtest/scwmxtest.c:121]

(xtest-supported?)
- Primitive from (app scwm xtest)
Returns #t iff the XTest extension is supported on this server.
[From modules/xtest/scwmxtest.c:37]

(y- y)
- (app scwm base)
Return the viewport pixel coordinate Y pixels up from the bottom display edge.
[From scheme/base.scm:171]

