(%x x)
- (app scwm base)
Return the number of pixels that is X percent of the display width.
[From scheme/base.scm:48]


(%x- x)
- (app scwm base)
Return the pixel coordinate X percent of the width away from the right edge.
[From scheme/base.scm:92]


(%y y)
- (app scwm base)
Return the number of pixels that is Y percent of the display height.
[From scheme/base.scm:52]


(%y- y)
- (app scwm base)
Return the pixel coordinate Y percent of the height away from the bottom edge.
[From scheme/base.scm:96]


(add-boolean-hint-option key t-handler f-handler)
- 
No documentation supplied.
[From scheme/style-options.scm:41]


(add-boolean-style-option key t-handler f-handler)
- (app scwm style-options)
No documentation supplied.
[From scheme/style-options.scm:32]


(add-input-hook! port proc)
- Built-in Primitive
Add an input hook to run PROC on input from PORT.
Whenever input becomes available on PORT, procedure PROC will be called
with no arguments repeatedly until no unprocessed input remains on
PORT. PORT must be open, it must be an input port, and it must be a
file port (this includes pipes and sockets, but not string ports or
soft ports). A handle suitable for passing to `remove-input-hook!' is
returned.
[From scwm/callbacks.c:556]


(add-timer-hook! usec proc)
- Built-in Primitive
Add a timer hook to call PROC once sometime after USEC microseconds.
When at least USEC microseconds have passed, procedure PROC will be
called with no arguments. A handle suitable for passing to
`remove-timer-hook!' is returned.
[From scwm/callbacks.c:418]


(add-window-hint-option key handler)
- (app scwm style-options)
No documentation supplied.
[From scheme/style-options.scm:38]


(add-window-style-option key handler)
- (app scwm style-options)
No documentation supplied.
[From scheme/style-options.scm:29]


(animated-move-to x y #&optional (win (get-window)))
- (app scwm winops)
Move WIN to viewport position x, y animatedly.
If X or Y is 'x or 'y, respectively (or #f), then do not change
that coordinate during the move.  At least one of X and Y must be
a number.  This moves the pointer with the window.
[From scheme/winops.scm:219]


(animated-move-window x y #&optional (win (get-window)))
- (app scwm winops)
Move WIN to virtual position x, y animatedly.
If X or Y is 'x or 'y, respectively (or #f), then do not change
that coordinate during the move.  At least one of X and Y must be
a number.  This does not move the pointer with the window.
[From scheme/winops.scm:234]


(append-fvwm2-module-config module-type . args)
- (app scwm fvwm-module)
No documentation supplied.
[From scheme/fvwm-module.scm:384]


(ask-string prompt)
- (app scwm prefs-menu)
Ask for a string with PROMPT.
[From scheme/prefs-menu.scm:109]


(beep)
- Built-in Primitive
Ring the standard X bell.
[From scwm/miscprocs.c:318]


(binary-read length #&optional (port (current-input-port)))
- (app scwm bincomm)
Reads LENGTH bytes of binary data from PORT and return it as a string.
[From scheme/bincomm.scm:167]


(binary-read-long #&optional (port (current-input-port)))
- 
Reads a binary representation of a C long and return as a scheme number.
The value is read from PORT, or the current-input-port.
[From scheme/bincomm.scm:177]


(binary-write str #&optional (port (current-output-port)))
- (app scwm bincomm)
Writes STR as binary data to PORT.
[From scheme/bincomm.scm:162]


(bind-key contexts key proc)
- Built-in Primitive
Bind the given KEY within the CONTEXTS to invoke PROC.
CONTEXTS is a list of event-contexts (e.g., '(button1 sidebar))
KEY is a string giving the key-specifier (e.g., M-Delete for Meta+Delete)
PROC is a procedure (possibly a thunk) that should be invoked
[From scwm/binding.c:645]


(bind-mouse contexts button proc)
- Built-in Primitive
Bind the given mouse BUTTON within the CONTEXTS to invoke PROC.
CONTEXTS is a list of event-contexts (e.g., '(button1 sidebar))
BUTTON is a string or integer giving the mouse button number
PROC is a procedure (possibly a thunk) that should be invoked
[From scwm/binding.c:704]


(bool->str arg)
- (app scwm flux)
Return the string \"true\" if ARG is #t, \"false\" otherwise.
[From scheme/flux.scm:151]


(border-normal?  #&optional win)
- Built-in Primitive
Return #t if WIN has a normal border, #f otherwise.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:2935]


(border-style #&key (active '())  
			      (inactive '()) . rest)
- (app scwm face)
Set the current border style.
[From scheme/face.scm:49]


(button-style button #&key mwm
			      (active-up '()) 
			      (active-down '()) 
			      (inactive '()) . rest)
- (app scwm face)
Set the current button style for button number BUTTON.
[From scheme/face.scm:60]


(call-with-decor decor thunk)
- (app scwm decor)
Eval THUNK using DECOR as the current decor.
[From scheme/decor.scm:27]


(capturing?)
- Built-in Primitive
Returns #t when the windows are being captured.
This happens at two times: during initial startup, or during a
recapture operation. In either case, placement procedures should
probably avoid interaction and perhaps avoid moving the window being
placed at all.
[From scwm/miscprocs.c:141]


(circulate-hit #&optional (win (get-window)))
- (app scwm winlist)
Include WIN among the windows in the circulate list.
This resets the 'circulate-skip property of WIN.  See also `circulate-skip'.
[From scheme/winlist.scm:138]


(circulate-hit-icon #&optional (win (get-window)))
- (app scwm winlist)
Include WIN's icon among the windows in the circulate list.
This resets the 'circulate-skip-icon property of WIN.  
See also `circulate-skip-icon'.
[From scheme/winlist.scm:153]


(circulate-skip #&optional (win (get-window)))
- (app scwm winlist)
Do not include WIN among the windows in the circulate list.
This sets the 'circulate-skip property of WIN.  See also `circulate-hit'.
[From scheme/winlist.scm:143]


(circulate-skip-icon #&optional (win (get-window)))
- (app scwm winlist)
Do not include WIN's icon among the windows in the circulate list.
This sets the 'circulate-skip-icon property of WIN.  
See also `circulate-hit-icon'.
[From scheme/winlist.scm:159]


(circulate-skip-icon? #&optional (win (get-window)))
- (app scwm winlist)
Return #t if WIN's icon is not among the windows in the circulate list.
Otherwise return #f.
[From scheme/winlist.scm:165]


(circulate-skip? #&optional (win (get-window)))
- (app scwm winlist)
Return #t if WIN is not among the windows in the circulate list.
Otherwise return #f.
[From scheme/winlist.scm:148]


(clear-color-cache-entry name)
- Built-in Primitive
Colors are cached by name. It is remotely possible that the
meaning of a particular string as a color will change in your X
server, if you try hard enough. For this unlikely eventuality,
`clear-color-cache-entry' is provided - it removes the color
associated with NAME from the color cache.
[From scwm/color.c:175]


(clear-font-cache-entry name)
- Built-in Primitive
Fonts are cached by name. It is remotely possible that the
meaning of a particular string as a fonts will change in your X
server, if you try hard enough (perhaps if you add or remove font
servers). For this unlikely eventuality, `clear-font-cache-entry' is
provided - it removes the font associated with NAME from the font
cache.
[From scwm/font.c:387]


(clear-fvwm2-module-config module-type)
- (app scwm fvwm-module)
No documentation supplied.
[From scheme/fvwm-module.scm:388]


(clear-image-cache-entry name)
- Built-in Primitive
Images are cached by both name and full pathname. It is
remotely possible that the file that should be used for a particular
name will change, for example if you alter the image file or change
your image path. For this unlikely eventuality,
`clear-image-cache-entry' is provided - it removes the image
associated with NAME from the image cache.
[From scwm/image.c:533]


(clever-place-window win)
- Built-in Primitive
Places WIN using fvwm2's "ReallySmart" algorithm.
The placement is just as if being placed by fvwm2's SmartPlacement,
as if SmartPlacementIsReallySmart were in effect. That is, it
tries to place the window so as to minimize its area of
overlap with other windows. Several parameters give different
weight to various kinds of windows, but they are not tunable
at runtime currently. If it fails to place the window, it
returns #f; otherwise it returns #t.
[From scwm/placement.c:438]


(click-delay)
- Built-in Primitive
Retrun the delay used in identifying mouse clicks and drags, in microseconds.
See also `set-click-delay!'
[From scwm/miscprocs.c:184]


(click-to-focus-passes-click?)
- Built-in Primitive
Returns a boolean valude indicating whether a click-to-focus window receives the click.
[From scwm/miscprocs.c:373]


(click-to-focus-raises?)
- Built-in Primitive
Returns a boolean valude indicating whether a click-to-focus window gets raised on focus.
[From scwm/miscprocs.c:400]


(close-all-xlogo-windows)
- 
Close each window with class == XLogo.
Greg uses XLogo windows as a sample window, so this
is useful for clearing the xlogos away when there get to
be more than desired.
[From scheme/flux.scm:446]


(close-window #&optional (win (get-window #t)))
- (app scwm winops)
Close WIN either by deleting it or destroying it.
WIN is only destroyed if it is not deleteable.
[From scheme/winops.scm:48]


(color->string color)
- (app scwm flux)
Convert scwm color object COLOR into an X11 name of that color.
The resulting string can, e.g., be used in command lines for executing
other applications.
[From scheme/flux.scm:308]


(color-properties color)
- Built-in Primitive
Return an association list giving some properties of COLOR.
Currently defined properties are 'name, the string name of the
color, and 'pixel, the X pixel value it uses.
[From scwm/color.c:92]


(color-property color key)
- (app scwm base)
Return the KEY property of COLOR.
See `color-properties' for a list of the keys.
[From scheme/base.scm:313]


(color? obj)
- Built-in Primitive
Returns #t if OBJ is a color object, otherwise #f.
[From scwm/color.c:80]


(colormap-focus)
- Built-in Primitive
Return the colormap focus policy, as set by `set-colormap-focus!'.
The value can be either be 'mouse, indicating that the window under
the mouse pointer will always colormap installed, or 'focus to
indicate that the window with the input focus should also get the
colormap focus.
[From scwm/miscprocs.c:219]


(current-decor)
- Built-in Primitive
Return the current decor.
[From scwm/decor.c:291]


(current-desk)
- Built-in Primitive
Returns the integer identifying the current desk.
[From scwm/deskpage.c:74]


(current-window-with-focus)
- Built-in Primitive
Return the window that currently has the input focus.
[From scwm/window.c:781]


(current-window-with-pointer)
- Built-in Primitive
Return the window that currently contains the mouse pointer.
[From scwm/window.c:791]


(default-decor)
- Built-in Primitive
Return the default decor.
[From scwm/decor.c:251]


(default-placement-proc win)
- Built-in Primitive
Use various flags to call an appropriate placement function.
This is the default placement procedure for non-transient windows. It
tries `smart-place-window', `clever-place-window',
`random-place-window', or `interactive-move' (to achieve interactive
placement) on WIN depending on several style flags. However,
if one of the following factors holds, the window will instead be
placed exactly as requested by the program: the position was specified
by the user, the position was specified by the program, and
#:no-PPosition-hint is not set, or the window starts iconic.
[From scwm/placement.c:510]


(default-transient-placement-proc win)
- Built-in Primitive
This is the default placement procedure for transient windows.
It simply leaves the window WIN in place, exactly as requested.
[From scwm/placement.c:568]


(default-winlist-proc #&optional (win (get-window)))
- (app scwm winlist)
The default behaviour when WIN is selected from the window list.
[From scheme/winlist.scm:31]


(deiconify  #&optional win)
- Built-in Primitive
Deiconify WIN.
Unmap its icon window, and map its regular
window. WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:1844]


(delete-window  #&optional win)
- Built-in Primitive
Request that WIN remove itself from the display.
This is the friendly way of closing a window, but it will not work if
the application does not cooperate. WIN defaults to the window context
in the usual way if not specified.
[From scwm/window.c:1493]


(desk-size)
- Built-in Primitive
Returns the size of the current desk.
The returned value is in units of the physical screen size, as a list
of the width and the height.
[From scwm/deskpage.c:336]


(destroy-window  #&optional win)
- Built-in Primitive
Forcibly remove WIN from the screen.
This will kill the application without giving it a chance to save its
state or do any other shutdown, but is guaranteed to work. WIN
defaults to the window context in the usual way if not specified.
[From scwm/window.c:1524]


(display-message msg)
- Built-in Primitive
Show MSG (a string) as a single line in the message window.
Note that MSG should not contain newline characters as they will
not be honoured.  See also `hide-message'.  These primitives
may disappear when GTk support is sufficiently mature.
[From scwm/resize.c:86]


(display-message-briefly msg #&optional (sec-timeout 3))
- (app scwm flux)
Display MSG in the message window for SEC-TIMEOUT seconds.
See `display-message' for details about MSG.
[From scheme/flux.scm:439]


(display-size)
- Built-in Primitive
Returns the size of the physical screen in pixels.
The return value is list of the width and the height. The
width is the `car', the height is the `cadr' of the returned list.
See also the variables "display-width" and "display-height".
[From scwm/deskpage.c:350]


(documentation func #&optional (port (current-output-port)))
- (app scwm doc)
Print the documentation for the string or symbol.
Return #t if found anything, #f if no documentation.
[From scheme/doc.scm:24]


(edge-move-threshold)
- Built-in Primitive
Return the edge move threshold as set by `set-edge-move-threshold!'.
[From scwm/deskpage.c:288]


(edge-scroll-delay)
- Built-in Primitive
Return the edge scroll delay as set by `set-edge-scroll-delay!'.
[From scwm/deskpage.c:257]


(edge-x-scroll)
- Built-in Primitive
Return the horizontal edge scroll increment as set by `set-edge-x-scroll!'.
[From scwm/deskpage.c:140]


(edge-x-wrap)
- Built-in Primitive
Return the current horizonatal edge wrap setting as set by `set-edge-x-wrap!'.
[From scwm/deskpage.c:194]


(edge-y-scroll)
- Built-in Primitive
Return the vertical edge scroll increment as set by `set-edge-y-scroll!'.
[From scwm/deskpage.c:169]


(edge-y-wrap)
- Built-in Primitive
Return the current vertical edge wrap setting as set by `set-edge-y-wrap!'.
[From scwm/deskpage.c:219]


(elapsed-time)
- Built-in Primitive
Return the elapsed time in milliseconds since O.S. has been up.
[From scwm/miscprocs.c:461]


(end-window-list port)
- (app scwm fvwm-module)
No documentation supplied.
[From scheme/fvwm-module.scm:278]


(eval-fvwm-command command #&optional (fmod #f) 
				   (window #f))
- 
No documentation supplied.
[From scheme/fvwm-eval.scm:514]


(exe command)
- (app scwm base)
Return a procedure that runs the system command COMMAND.
[From scheme/base.scm:345]


(execute command)
- 
Execute COMMAND in the background.
[From scheme/base.scm:459]


(find-window-by-name window-name)
- (app scwm flux)
Return a window with name WINDOW-NAME.
If there are multiple such windows, an unspecified one of them
will be returned.
[From scheme/flux.scm:269]


(flash-window win #&optional
			      (color (make-color "red"))
			      (unflash-delay .5))
- (app scwm flux)
No documentation supplied.
[From scheme/flux.scm:365]


(focus  #&optional win)
- Built-in Primitive
Give WIN the input focus.
This will typically result in drawing WIN's frame in a special style
as well. WIN defaults to the window context in the usual way if not
specified. Note that WIN is not raised by giving it the focus;  see
`raise-window' if that is your intent.
[From scwm/window.c:1569]


(fold-menu-list
		ml #&optional (max-lines default-menu-max-fold-lines))
- (app scwm base)
Split ML into chained menus of no more than MAX-LINES items.
ML is a list of menuitem objects. MAX-LINES is a number, which
defaults to `default-menu-max-fold-lines'.
[From scheme/base.scm:336]


(font-properties font)
- Built-in Primitive
Return an association list giving some properties of FONT.
Currently defined properties are 'name, the string name of the
color, and 'height, it's total height in pixels.
[From scwm/font.c:241]


(font-property font key)
- (app scwm base)
Return the KEY property of FONT.
See `font-properties' for a list of the keys.
[From scheme/base.scm:308]


(font? obj)
- Built-in Primitive
Returns #t if OBJ is a font object, otherwise #f.
[From scwm/font.c:231]


(frame-id->window window-id)
- Built-in Primitive
Return the window object corresponding to a frame WINDOW-ID.
WINDOW-ID should be the X id of a scwm frame window. If there is no
such window object, return #f.
[From scwm/window.c:2598]


(fvwm-exec command)
- (app scwm fvwm-compat)
No documentation supplied.
[From scheme/fvwm-compat.scm:41]


(fvwm-exec-use-shell #&optional (shell #f))
- (app scwm fvwm-compat)
No documentation supplied.
[From scheme/fvwm-compat.scm:32]


(fvwm-none thunk #&key (only '()) (except '()))
- (app scwm fvwm-compat)
No documentation supplied.
[From scheme/fvwm-compat.scm:49]


(fvwm-nop . args)
- (app scwm fvwm-compat)
No documentation supplied.
[From scheme/fvwm-compat.scm:73]


(fvwm-pipe-read command)
- (app scwm fvwm-compat)
No documentation supplied.
[From scheme/fvwm-compat.scm:53]


(fvwm2-module-send-window-list port)
- (app scwm fvwm-module)
No documentation supplied.
[From scheme/fvwm-module.scm:208]


(get-fvwm2-module-config module-type)
- (app scwm fvwm-module)
No documentation supplied.
[From scheme/fvwm-module.scm:376]


(get-window  #&optional kill? select? release?)
- Built-in Primitive
Retrieve the context window or select interactively.
If there is no context window, a window is selected interactively.
The optional boolean argument KILL?  (default #f) determines whether
to use the "kill" cursor when selecting interactively. The boolean
SELECT? argument (default #t) determines whether or not a window
should be selected interactively if there is no current context
window. And finally the RELEASE? argument (default #t) determines
whether or not interactive selection (if any) should wait for a mouse
release event or just a press. The latter behavior is useful if the
action being performed on the window is an interactive one involving
mouse drags.
[From scwm/window.c:740]


(get-window-colors  #&optional win)
- Built-in Primitive
Return a two-element list, "(fg bg)", the colors for WIN.
[From scwm/window.c:3140]


(get-window-highlight-colors  #&optional win)
- Built-in Primitive
Return a two-element list, "(fg bg)", the highlight colors for WIN.
[From scwm/window.c:3154]


(get-wm-command win)
- (app scwm flux)
Get the 
[From scheme/flux.scm:320]


(help obj #&optional (port (current-output-port)))
- 
Print all possible documentation for string or symbol.
[From scheme/doc.scm:53]


(help-mesg . funcs)
- (app scwm prefs-menu)
No documentation supplied.
[From scheme/prefs-menu.scm:65]


(hide-message)
- Built-in Primitive
Hide the message window.
See also `display-message'.  These primitives may disappear when GTk
support is sufficiently mature.
[From scwm/resize.c:109]


(hide-titlebar  #&optional win)
- Built-in Primitive
Cause WIN not to be decorated with a titlebar.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:2835]


(hilight-background)
- Built-in Primitive
Return the background color for windows with the input focus.
Applies to the current decor.
[From scwm/color.c:705]


(hilight-factor)
- Built-in Primitive
Return the current hilight factor.
[From scwm/color.c:479]


(hilight-foreground)
- Built-in Primitive
Return the foreground color of the window with the input focus.
Applies to the focus in the current decor.
[From scwm/color.c:632]


(icon-font)
- Built-in Primitive
Return the font used for drawing icon titles.
[From scwm/font.c:281]


(icon-position  #&optional win)
- Built-in Primitive
Return the position of the icon for WIN.
The position is returned as a list of the x coordinate and the y
coordinate in pixels. WIN defaults to the window context in the usual
way if not specified.
[From scwm/window.c:2470]


(icon-sticky?  #&optional win)
- Built-in Primitive
Return #t if WIN is "sticky", #f otherwise.
See `stick-icon' and `stick'. WIN defaults to the window context in
the usual way if not specified.
[From scwm/window.c:3032]


(iconified?  #&optional win)
- Built-in Primitive
Return #t if WIN is iconified, otherwise return #f.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:1863]


(iconify  #&optional win)
- Built-in Primitive
Iconify WIN.
Iconifying unmaps the regular window, and map the window's icon
window. WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:1817]


(id->window window-id)
- Built-in Primitive
Return the window object corresponding to an application WINDOW-ID.
WINDOW-ID should be the X id of the application window. If there is no
such window object, return #f.
[From scwm/window.c:2577]


(image-properties image)
- Built-in Primitive
Return an association list giving some properties of IMAGE.
Currently defined properties are 'filename, the fully expanded
pathname of the image, 'width, it's width, 'height, it's height, and
depth, it's color depth.
[From scwm/image.c:159]


(image-property image key)
- (app scwm base)
Return the KEY property of IMAGE.
See `image-properties' for a list of the keys.
[From scheme/base.scm:303]


(image? obj)
- Built-in Primitive
Returns #t if OBJ is an image object, otherwise #f.
[From scwm/image.c:149]


(ImageMagick-loader fname)
- (app scwm image-loaders)
No documentation supplied.
[From scheme/image-loaders.scm:28]


(in-viewport xx yy)
- (app scwm flux)
Return a function of one argument, a window, moving it to the viewport.
[From scheme/flux.scm:93]


(in-viewport-any-desk? #&optional (win (get-window)))
- (app scwm wininfo)
Return #t if WIN is in the current viewport ignoring the desk, else #f.
[From scheme/wininfo.scm:64]


(interactive-move  #&optional win opaque?)
- Built-in Primitive
Move WIN interactively.
This allows the user to drag a rubber band frame or the window itself
around the screen. WIN defaults to the window context in the
usual way if not specified.  If OPAQUE? is #t, the move will be done
"opaquely", moving the actual X window, if #f a rubberband will be
used instead to save on server computation (note that the rubberband
requires a server "grab" which means that nothing else changes on
screen while the non-opaque move takes place.
[From scwm/move.c:675]


(interactive-move-maybe-opaque #&optional (win (get-window)))
- (app scwm winops)
Move WINDOW interactively and possibly opaquely.
Calls `move-opaquely?' and moves opaquely if that returns #,
uses a rubberband if it returns #f.
[From scheme/winops.scm:150]


(interactive-move-window-with-focus)
- (app scwm flux)
Interactively move the window which currently has the focus.
`interactive-move-maybe-opaque' is used to control whether a rubberband
outline or the window itself is moved.
[From scheme/flux.scm:29]


(interactive-move-window-with-pointer)
- (app scwm flux)
Interactively move the window which currently contains the pointer.
`interactive-move-maybe-opaque' is used to control whether a rubberband
outline or the window itself is moved.
[From scheme/flux.scm:41]


(interactive-resize  #&optional win opaque?)
- Built-in Primitive
Resize WIN interactively.
This allows the user to drag a rubber band frame to set the size of
the window. WIN defaults to the window context in the usual way if not
specified. If OPAQUE? is #t, the resize will be done
"opaquely", moving the actual X window, if #f a rubberband will be
used instead to save on server computation (note that the rubberband
requires a server "grab" which means that nothing else changes on
screen while the non-opaque resize takes place.
[From scwm/resize.c:670]


(interactive-resize-maybe-opaque #&optional (win (get-window)))
- (app scwm winops)
Move WINDOW interactively and opaquely.
Calls `resize-opaquely?' and moves opaquely if that returns #,
uses a rubberband if it returns #f.
[From scheme/winops.scm:156]


(interactive-resize-window-with-focus)
- (app scwm flux)
Interactively resize the window which currently has the focus.
`interactive-resize-maybe-opaque' is used to control whether a rubberband
outline or the window itself is resized.
[From scheme/flux.scm:35]


(interactive-resize-window-with-pointer)
- (app scwm flux)
Interactively resize the window which currently contains the pointer.
`interactive-resize-maybe-opaque' is used to control whether a rubberband
outline or the window itself is resized.
[From scheme/flux.scm:47]


(keep-on-top  #&optional win)
- Built-in Primitive
Ensure that WIN is kept on top of all other windows.
Obviously, other windows that are also on-top may obscure WIN.
WIN defaults to the window context in the usual way if not specified.
[From scwm/window.c:2731]


(kept-on-top?  #&optional win)
- Built-in Primitive
Return #t if WIN is an on-top window, #f otherwise.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:2774]


(key-mouse-moves modifiers pct-of-screen left down up right)
- (app scwm flux)
Bind four keys to move the mouse in compass directions by PCT-OF-SCREEN.
MODIFIERS specifies which modifiers must be depressed for the bindings
to be active.
LEFT, DOWN, UP, and RIGHT are the four keysym names to use for each
of the directions.
[From scheme/flux.scm:207]


(key-viewport-moves modifiers pct-of-screen left down up right)
- (app scwm flux)
Bind four keys to move the viewport in compass directions by PCT-OF-SCREEN.
MODIFIERS specifies which modifiers must be depressed for the bindings
to be active.
LEFT, DOWN, UP, and RIGHT are the four keysym names to use for each
of the directions.
[From scheme/flux.scm:222]


(kill-all-fvwm2-modules)
- (app scwm fvwm-module)
No documentation supplied.
[From scheme/fvwm-module.scm:528]


(kill-fvwm2-module fmod)
- (app scwm fvwm-module)
No documentation supplied.
[From scheme/fvwm-module.scm:525]


(kill-fvwm2-modules-by-name module-name)
- (app scwm fvwm-module)
No documentation supplied.
[From scheme/fvwm-module.scm:531]


(list-all-windows)
- Built-in Primitive
Return a list of all of the top-level window objects.
The list is in a semi-arbitrary order that is convenient for the sake
of circulation.
[From scwm/window.c:2681]


(list-stacking-order)
- Built-in Primitive
Return a list of all the top-level window objects, from top to bottom.
The order is the stacking order of the windows. The first element is
the topmost window, the last is the bottommost
[From scwm/window.c:2700]


(list-windows #&key (only '()) (except '())
			      (by-stacking #f))
- (app scwm winlist)
Return the list of windows matching ONLY or not matching EXCEPT.
The windows are returned their stacking order (top first) if
BY-STACKING is #t.  ONLY and EXCEPT each are procedures which
take a single window argument and returns #t if the window
should be included (for ONLY) or excluded (for EXCEPT), or #f otherwise.
[From scheme/winlist.scm:55]


(list-windows-above w #&key (only ()) (except()))
- (app scwm stacking)
List the windows above w from bottom to top.
Returns a list in the reverse of the stacking order of the windows
above W, in otherwords, from the one immediately above, to the topmost
window; the ONLY and EXCEPT keyword arguments operate as is usual for
procedures that deal with the window list.
[From scheme/stacking.scm:30]


(list-windows-below w #&key (only ()) (except()))
- (app scwm stacking)
List the windows below w from top to bottom.
Returns a list in the stacking order of the windows below in, in other
words, from the one immediately below, to the bottommost window; the
ONLY and EXCEPT keyword arguments operate as is usual for procedures
that deal with the window list.
[From scheme/stacking.scm:42]


(load-xbm full-path)
- Built-in Primitive
Load an X Bitmap file identified by the pathname FULL-PATH.
[From scwm/image.c:217]


(load-xpm full-path)
- Built-in Primitive
Load an X Pixmap file identified by the pathname FULL-PATH.
[From scwm/image.c:251]


(lower-by-one #&optional (w (get-window)))
- (app scwm stacking)
Lower window W below the next window down that overlaps it.
W defaults to the window context in the usual way.
[From scheme/stacking.scm:65]


(lower-window  #&optional win)
- Built-in Primitive
Lower WIN to the bottom of the window stack. WIN defaults to
the window context in the usual way if not specified.
[From scwm/window.c:1651]


(lower-window-below w w2)
- (app scwm stacking)
Lower window W immediately below W2.
[From scheme/stacking.scm:54]


(make-color cname)
- Built-in Primitive
Return the color object corresponding to the X color specifier CNAME.
If CNAME is not a valid X color name, or cannot be
allocated, an error results.
[From scwm/color.c:110]


(make-decor  #&optional name)
- Built-in Primitive
Create a new decor object. NAME optionally provides a string
that is used to name the decor, and is displayed when the decor is
printed.
[From scwm/decor.c:223]


(make-face flags specs)
- Built-in Primitive
Create a new face.
FLAGS is a list of face flags (see concept) and
SPECS is a list of face specifiers.
[From scwm/face.c:446]


(make-file-menu file . rest)
- (app scwm flux)
Return a menu-object for viewing or editing FILE.
REST is a list of other menu-items to include in the returned menu.
[From scheme/flux.scm:119]


(make-font fname)
- Built-in Primitive
Return the font object for the X font specifier FNAME.
If FNAME is not a valid X font name, or cannot be
allocated, an error results.
[From scwm/font.c:101]


(make-hosts-menu host-list #&optional (user USER))
- 
Create a telnet menu.
To use this, add the following to the menu of your choice:
  (menuitem \"telnet\" #:action (make-hosts-menu '(\"host1\" \"host2\" ...)))
An optional USER argument specifies the user to telnet as.
[From scheme/std-menus.scm:77]


(make-image name)
- Built-in Primitive
Loads an image from the file NAME.
To load the image, the appropriate image loaders will be invoked as
needed. If NAME starts with "/", "./" or "../", it is treated as a
fully qualified pathname; otherwise, the image path is searched for an
appropriate file.
[From scwm/image.c:464]


(make-menu list-of-menuitems #&optional picture-side side-bg-color bg-color text-color picture-bg font extra-options)
- Built-in Primitive
Make and return a menu object from the given arguments.
LIST-OF-MENUITEMS is a non-empty scheme list of menu items -- see `make-menuitem';
PICTURE-SIDE is an image object;
SIDE-BG-COLOR, BG-COLOR, TEXT-COLOR, PICTURE-BG are color objects;
FONT is a font object;
EXTRA-OPTIONS can be anything understood by the menu-specific
drawing code (not used currently).
[From scwm/menu.c:207]


(make-menuitem label action #&optional extra-label picture-above picture-left hover-action unhover-action hotkey-prefs)
- Built-in Primitive
Return a newly created menuitem object using the given arguments.
LABEL is a string giving the main text label of the menu item;
ACTION is a procedure or menu object -- if it is a procedure, it gets
invoked when the menuitem is selected, if it is a menu object, that
menu is attached as a submenu from the enclosing menu that the created
menuitem is put in.
EXTRA-LABEL is extra text describing the menu item -- often this
contains a shortcut key description, or some other descriptive text.
PICTURE-ABOVE and PICTURE-LEFT are picture objects which correspond to
images to display within the bounding region of the menuitem.
HOVER-ACTION and UNHOVER-ACTION are procedures to be invoked when the
mouse pointer hovers over the item and is moved away after hovering
over the item, respectively.
HOTKEY-PREFS is a string listing preferred alphanumeric shortcut-keys
for the given menu-item; the menu creation routine uses these as hints
for assigning shortcut keys to the various menuitems.
[From scwm/menuitem.c:118]


(make-menuitems-from-menu-information-list menu-info-list)
- (app scwm flux)
Return a list of menu-items from a list of detailed programs list.
The format is subject to change.  See sample.scwmrc/gjb.scwmrc for
example usage.
[From scheme/flux.scm:187]


(make-relief-color color factor)
- Built-in Primitive
Convert a color into a new color appropriate for a relief.
Multiplies the luminosity and saturation of COLOR by the
positive floating point number FACTOR. Using a FACTOR smaller than 1
will result in a dimmer color, suitable for use as a darker
relief. Using a factor greater than 1 will result in a brighter color
which is suitable for use as a hilight.
[From scwm/color.c:376]


(make-reversed-color color)
- Built-in Primitive
Return a new color that is opposite COLOR.
[From scwm/color.c:399]


(make-string-usable-for-resource-key string)
- (app scwm flux)
Return a converted string from STRING that can be used as an X resource key.
The returned string will have all non-alphanumeric characters replaced with
underscores, so that the resulting string can be used as a key for
`X-resource-get' and `X-resource-put'.
[From scheme/flux.scm:385]


(make-style . args)
- (app scwm style)
No documentation supplied.
[From scheme/style.scm:80]


((make-toggling-winop pred neg pos) 
		 #&optional (w (get-window)))
- (app scwm winops)
No documentation supplied.
[From scheme/winops.scm:42]


(make-wmconfig-menu 
		 #&optional (wmconfig-title default-wmconfig-title)
		 (wmconfig-dir default-wmconfig-dir))
- 
Return a menu object for the window-manager configuration menu.
[From scheme/wmconfig-menu.scm:93]


(make-xlock-menu #&optional (lock? #f))
- (app scwm std-menus)
Create an xlock menu.
To use this, add the following to the menu of your choice:
   (menuitem \"Screensaver\" #:action (make-xlock-menu #f))
or (menuitem \"Lock Screen\" #:action (make-xlock-menu #t))
[From scheme/std-menus.scm:63]


(marshal-fvwm2-config-info win)
- Built-in Primitive
Constructs a fvwm2 BroadcastInfo module packet.
The return value is the contents of a BroadcastInfo fvwm2
module packet for WIN as a Scheme string.
[From scwm/module-interface.c:84]


(marshal-fvwm2-iconify-info win)
- Built-in Primitive
Constructs a fvwm2 "M_ICONIFY" module packet.
The return value is the contents of an "M_ICONIFY" fvwm
module packet for WIN as a Scheme string.
[From scwm/module-interface.c:128]


(maximize nw nh #&optional (win (get-window)))
- (app scwm winops)
Maximize WIN to new width NW and new height NH.
If NW or NH is 0, that dimension is not changed.
[From scheme/winops.scm:98]


(maximized? #&optional (win (get-window)))
- (app scwm winops)
Return #t if WIN is maximized, #f otherwise.
[From scheme/winops.scm:115]


(menu list-of-menuitems #&key
		      image-side
		      (color-bg-image-side 'menu-bg-color)
		      (image-bg #f)
		      (color-text 'menu-text-color)
		      (color-bg 'menu-bg-color)
		      (font 'menu-font))
- (app scwm base)
Return a menu object with the given attributes.
LIST-OF-MENUITEMS is a list of menuitem objects (each created with
`make-menuitem' or `menuitem').  IMAGE-SIDE is an image object to be
displayed along the left edge of the menu.  COLOR-BG-IMAGE-SIDE is the
background color for that image object.  COLOR-TEXT is a color object
or string for the foreground text color of menu items.  COLOR-BG is a
color object or string for the background color for the menu and menu
items.  FONT is a font object for the font of the menu items.
[From scheme/base.scm:277]


(menu-background)
- Built-in Primitive
Return the default background color for menus.
[From scwm/color.c:809]


(menu-font)
- Built-in Primitive
Return the font used by default for drawing menus.
[From scwm/font.c:377]


(menu-foreground)
- Built-in Primitive
Return the default foreground color for menus.
[From scwm/color.c:745]


(menu-hilight-factor)
- Built-in Primitive
Return the current menu hilight factor.
[From scwm/color.c:559]


(menu-prefs . opts)
- 
Generate the `Preferences' menu.
All the arguments are passed directly to the `menu' function.
[From scheme/prefs-menu.scm:184]


(menu-properties menu)
- Built-in Primitive
Returns the a list of the menu properties of MENU, a menu object.
The properties returned are:
'(menu-items side-image side-bg-color bg-color text-color image-bg
font extra-options used-shortcut-keys)
[From scwm/menu.c:181]


(menu-shadow-factor)
- Built-in Primitive
Return the current menu shadow factor.
[From scwm/color.c:588]


(menu-stipple)
- Built-in Primitive
Return the default stipple color for menus.
May not be used any more.
[From scwm/color.c:855]


(menu-style #&key
		     (fg #f) (foreground #f)
		     (bg #f) (background #f)
		     (stipple #f) font)
- (app scwm base)
Set various properites for the menus.
Many of these are ignored.  See `make-menu' for options on
creation of individual menus.
[From scheme/base.scm:190]


(menu? obj)
- Built-in Primitive
Return #t if and only if OBJ is a menu object.
[From scwm/menu.c:123]


(menuitem label #&key image-above image-left
			  extra-label action hover-action unhover-action
			  hotkey-prefs)
- (app scwm base)
Return a menuitem object with the given attributes.
LABEL is a string for the name on the item.
IMAGE-ABOVE is an image object to show above the label.
IMAGE-LEFT is an image object to show to the left of the label.
EXTRA_LABEL is a second label shown on the item.
ACTION is a menu object or a procedure; if it is a menu object,
the item will popup ACTION as a sub-menu, if it is a procedure,
the procedure will be invoked when the item is selected.
HOVER-ACTION is an procedure to be invoked when the item is
highlighted but not invoked for a moment; UNHOVER-ACTION is
a procedure to be invoked after the HOVER-ACTION is invoked
when the item is unhighlighted.  HOTKEY-PREFS is a string listing
the characters which are appropriate shortcut-keys for the item;
the first not-yet-used-in-this-menu character will be used for
the shortcut key for the menu item.
[From scheme/base.scm:242]


(menuitem-properties menu-item)
- Built-in Primitive
Return a list of the properties of the given MENU-ITEM.
MENU-ITEM is a menuitem object, created by `make-menuitem'.  The
returned list contains the following, in this order:
'(label action extra-label picture-above picture-left hover-action
unhover-action hotkey-preferences)
Note that this is the same as the arguments to the `make-menuitem'
primitive
[From scwm/menuitem.c:90]


(message . str)
- (app scwm flux)
Display the string arguments STR in a message window.
[From scheme/flux.scm:133]


(message-window-mapped?)
- Built-in Primitive
Return #t if the message window is mapped, #f otherwise.
See also `display-message', `hide-message'.  These primitives may disappear when GTk
support is sufficiently mature.
[From scwm/resize.c:123]


(mod-desk-size! dx dy)
- (app scwm prefs-menu)
Modify the current desktop size by the given parameter.
[From scheme/prefs-menu.scm:60]


(mod-mask-alt)
- Built-in Primitive
Return the bit-mask for the Alt modifier key, or #f.
Returns #f if and only if there is no key bound to act as Alt, otherwise
returns a power of two corresponding to the bit-mask of the modifier
[From scwm/binding.c:842]


(mod-mask-hyper)
- Built-in Primitive
Return the bit-mask for the Hyper modifier key, or #f.
Returns #f if and only if there is no key bound to act as Hyper, otherwise
returns a power of two corresponding to the bit-mask of the modifier
[From scwm/binding.c:850]


(mod-mask-meta)
- Built-in Primitive
Return the bit-mask for the Meta modifier key, or #f.
Returns #f if and only if there is no key bound to act as Meta, otherwise
returns a power of two corresponding to the bit-mask of the modifier
[From scwm/binding.c:834]


(mod-mask-super)
- Built-in Primitive
Return the bit-mask for the Super modifier key, or #f.
Returns #f if and only if there is no key bound to act as Super, otherwise
returns a power of two corresponding to the bit-mask of the modifier
[From scwm/binding.c:859]


(module-event-name-from-number num)
- 
Return the string module event name for event number NUM.
[From scheme/module-types.scm:64]


(mouse-event-type)
- Built-in Primitive
Return a symbol corresponding to the type of the most recent mouse event.
Return value is one of 'motion, 'click, 'one-and-a-half-clicks, 'double-click.
You can `case' on this symbol in a procedure bound to a mouse event
to determine, e.g., whether the user single clicked or double clicked.
[From scwm/binding.c:821]


(mouse-focus-click-raises?)
- Built-in Primitive
Returns a boolean valude indicating whether a mouse-focus-click will raise the window..
[From scwm/miscprocs.c:430]


(move-opaquely? win)
- (app scwm winops)
Return #t if WIN has area < opaque-move-percent of the screen, else #f.
[From scheme/winops.scm:145]


(move-or-raise-maybe-opaque)
- (app scwm winops)
Perform a move, raise, or lower based on the mouse-event-type.
To be bound to a window decoration: click does `raise-window',
motion does `interactive-move-maybe-opaque', and double-click does
`lower-window'.
[From scheme/winops.scm:177]


(move-pointer x y)
- (app scwm base)
Move the X11 pointer X pixels to the right, and Y pixels down.
If X is negative, moves to the left.  If Y is negative moves up.
[From scheme/base.scm:144]


(move-pointer-to sx sy)
- Built-in Primitive
Move the mouse pointer to SX, SY (given in pixels).
[From scwm/miscprocs.c:247]


(move-to x y 
			#&optional (win (get-window))
			(animated? #f)
			(move-pointer-too? #f))
- (app scwm base)
Move WIN to viewport position X, Y.
If X or Y is #f, then do not move along that axis (use existing
value for that coordinate).
If ANIMATED? is #t, then animate the window there.
If MOVE-POINTER-TOO? is #t then also move the pointer as the window is moved.
See `move-window' if you wish to move a window to a virtual position.
[From scheme/base.scm:152]


(move-viewport x y)
- (app scwm base)
Move the viewport onto the virtual desktop relatively.
Moves X pixels horizontally, to the right if positive, to the left if
negative, and Y pixels vertically, down if positive, up if negative.
[From scheme/base.scm:183]


(move-window x y #&optional win animated? move-pointer-too?)
- Built-in Primitive
Move WIN to coordinates virtual coordinates X, Y.
If X is #f, then X defaults to the current X position of WIN.
If Y is #f, then Y defaults to the current Y position of WIN.
If ANIMATED? is specified and true, animate the motion of the window,
otherwise the move is instantaneous. If MOVE-POINTER-TOO? is specified
and true, move the mouse pointer by the same amount as the window,
animating the motion of the pointer along with the window if ANIMATED?
is true. WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:2156]


(move-window-to-desk desk #&optional win)
- Built-in Primitive
Move WIN to DESK. DESK is an integer desk identifier. WIN
defaults to the window context in the usual way if not specified.
[From scwm/window.c:2403]


(move-window-to-viewport xx yy #&optional win)
- (app scwm flux)
Move WIN to the viewport at (XX,YY).
The (0,0) viewport is the starting viewport.
[From scheme/flux.scm:84]


(ms->usec ms)
- (app scwm flux)
Convert MS milliseconds into an equivalent number of microseconds.
Especially useful for add-hook! and other timing related procedures
that take microseconds.
[From scheme/flux.scm:333]


(netpbm-loader fname)
- (app scwm image-loaders)
No documentation supplied.
[From scheme/image-loaders.scm:38]


(next-window #&key (window (get-window #f #f))
			     (only '()) (except '()) (proc window-list-proc))
- (app scwm winlist)
Circulate to the next matching window.
If WINDOW is given, circulate to that window.
ONLY and EXCEPT control which windows match --- see `list-windows' for 
details.
PROC is a procedure of one argument which does the work after the
windows are circulated.  PROC defaults to `window-list-proc'.
See also `prev-window'.
[From scheme/winlist.scm:203]


(normal-border  #&optional win)
- Built-in Primitive
Cause WIN to be decorated with a normal border.
This means that there will be resize handles in the corners. WIN
defaults to the window context in the usual way if not specified.
[From scwm/window.c:2872]


(on-current-desk? #&optional (win (get-window)))
- (app scwm wininfo)
Return #t if WIN is on the current desk.
[From scheme/wininfo.scm:39]


((on-desk-n? n) #&optional (win (get-window)))
- (app scwm wininfo)
No documentation supplied.
[From scheme/wininfo.scm:36]


(on-desk? n #&optional (win (get-window)))
- (app scwm wininfo)
Return #t if WIN is on desk N, else #f.
[From scheme/wininfo.scm:32]


(opaque-interactive-move #&optional (win (get-window)))
- (app scwm winops)
Move WINDOW interactively and opaquely.
[From scheme/winops.scm:188]


(opaque-interactive-resize #&optional (win (get-window)))
- (app scwm winops)
Resize WINDOW interactively and opaquely.
[From scheme/winops.scm:192]


(percent-visible #&optional (win (get-window)))
- (app scwm wininfo)
Return the percent of WIN currently in the viewport as a real in [0,100].
Note that this does not discount for other windows which may
obscure WIN;  it only checks what fraction of WIN would be visible
if it were on top (unobscured).
[From scheme/wininfo.scm:98]


(plain-border  #&optional win)
- Built-in Primitive
Cause WIN to be decorated with a plain border.
This means that there will be no resize handles in the corners, and the
window . WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:2904]


(pointer-position)
- Built-in Primitive
Return the current position of the mouse pointer in pixels.
The return value is a two-element list of the x and y coordinates.
[From scwm/miscprocs.c:232]


(popup-menu menu #&optional warp-to-first? x-pos y-pos left-side?)
- Built-in Primitive
Popup MENU, a menu object, and warp to the first item if WARP-TO-FIRST? is #t.
X-POS, Y-POS specify a desired position for the menu, and LEFT-SIDE? should be
#t if the menu should be left justified against X-POS, or #f if it should be
right justified against X-POS.
[From scwm/menu.c:1290]


(popup-menu-from-decoration menu win button-number)
- (app scwm flux)
Popup MENU from WIN's decoration numbered BUTTON-NUMBER.
This positions the popup menu appropriately.
[From scheme/flux.scm:353]


(prev-window #&key (window (get-window #f #f))
			     (only '()) (except '()) (proc window-list-proc))
- 
Circulate to the previous matching window.
If WINDOW is given, circulate to that window.
ONLY and EXCEPT control which windows match --- see `list-windows' for 
details.
PROC is a procedure of one argument which does the work after the
windows are circulated.  PROC defaults to `window-list-proc'.
See also `next-window'.
[From scheme/winlist.scm:215]


(print-window #&optional (win (get-window)))
- (app scwm winops)
Print WIN using xpr and lpr.
[From scheme/winops.scm:212]


(printable-char->keysym-string char)
- (app scwm flux)
Return the keysym string corresponding to a printable character.
CHAR is a scheme character.  The return value is appropriate for
use by `send-key-press'.  See also `X-synthetic-send-string'.
[From scheme/flux.scm:243]


(program-exists? program-name)
- (app scwm base)
Return #t if PROGRAM-NAME is found as an executable in the current $PATH.
Returns #f otherwise.
[From scheme/base.scm:108]


(quotify-single-quotes str)
- (app scwm flux)
Return a string that has single quote characters backslashified.
[From scheme/flux.scm:128]


(raise-by-one #&optional (w (get-window)))
- 
Raise window W above the next window up that overlaps it.
W defaults to the window context in the usual way.
[From scheme/stacking.scm:73]


(raise-window  #&optional win)
- Built-in Primitive
Raise WIN to the top of the window stack.
Stays-on-top windows still take priority. WIN defaults to the window
context in the usual way if not specified.
[From scwm/window.c:1625]


(raise-window-above w w2)
- (app scwm stacking)
Raise window W immediately above W2.
[From scheme/stacking.scm:58]


(raised?  #&optional win)
- Built-in Primitive
Return #t if WIN is currently raised, #f if not.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:1756]


(random-place-window win)
- Built-in Primitive
Places WIN just as if being placed by fvwm2's RandomPlacement.
This placement is not truly random; it is based on two state variables
which are incremented for the x and y coordinates, and which wrap
around once a window would be forced off the screen. The placement is
fairly arbitrary, but always succeeds, and so avoids user
interaction. #t is always returned.
[From scwm/placement.c:474]


(recapture)
- Built-in Primitive
Recapture all the windows.
This destroys all the current frame windows and recreate them from
scratch. This is hopefully not necessary during normal operation.
[From scwm/miscprocs.c:270]


(refresh)
- Built-in Primitive
Make sure all windows and their decorations are up to date.
This forces a redraw of the entire current viewport.
[From scwm/miscprocs.c:155]


(refresh-window  #&optional win)
- Built-in Primitive
Refresh the decorations on window WIN.
Refreshing ensuring that everything, including the decorations is up
to date. `refresh' does this in a more efficient way for all windows,
as well as the root. WIN defaults to the window context in the usual
way if not specified.
[From scwm/window.c:2379]


(register-fvwm2-module-config module-type . args)
- (app scwm fvwm-module)
No documentation supplied.
[From scheme/fvwm-module.scm:381]


(register-image-loader extension proc)
- Built-in Primitive
Register PROC as the loader to use for images ending in EXTENSION.
EXTENSION must be a string beginning with a period, the
empty string (for files with no extension), or the string "default"
(for files that no other image loader succeeds in loading). PROC will
be called with the full pathname of the image and should return an
image object, or #f if it succeeds.
[From scwm/image.c:299]


(remove-input-hook! handle)
- Built-in Primitive
Remove an input hook identified by HANDLE.
HANDLE should be an object that was returned by `add-input-hook!'. An
input hook may safely remove itself.
[From scwm/callbacks.c:586]


(remove-timer-hook! handle)
- Built-in Primitive
Remove a timer hook identified by HANDLE.
The HANDLE should be an object that was returned by
`add-timer-hook!'. No warning or error will occur if HANDLE is for a
timer hook that has already been triggered.
[From scwm/callbacks.c:461]


(reset-scwmexec-protocol)
- Built-in Primitive
Reset the scwmexec protocol.
This procedure removes the "XA_SCWMEXEC_REQUEST" property on the
root window.  It should not be necessary but may be useful in case
your X server goes awry (and otherwise you would have to restart your
X server).  Use if scwmexec or scwmrepl are not returning (e.g.,
if your Emacs hangs when you try evaluating a scwm expression).
[From scwm/events.c:464]


(resize-frame-to w h #&optional win)
- Built-in Primitive
Resize WIN to a size of W by H in pixels.
The size includes the window decorations. WIN defaults to the window
context in the usual way if not specified.
[From scwm/window.c:2309]


(resize-opaquely? win)
- (app scwm winops)
Return #t if WIN has area < opaque-resize-percent of the screen, else #f.
[From scheme/winops.scm:140]


(resize-or-raise-maybe-opaque)
- (app scwm winops)
Perform a resize, raise, or lower based on the mouse-event-type.
To be bound to a window decoration: click does `raise-window',
motion does `interactive-resize-maybe-opaque', and double-click does
`lower-window'.
[From scheme/winops.scm:167]


(resize-to w h #&optional win)
- Built-in Primitive
Resize WIN's client area to a size of W by H in pixels.
The size does not include the window decorations -- only the client
application size. WIN defaults to the window
context in the usual way if not specified.
[From scwm/window.c:2268]


(resize-window w h #&optional (win (get-window)))
- 
Resize WIN's client area to a size of W by H in pixels. 
The size does not include the window decorations -- only the client
application size. WIN defaults to the window context in the usual way
if not specified.
[From scheme/winops.scm:259]


(restack-windows winlist)
- Built-in Primitive
Restack the windows in WINLIST from front to back.
The first element of WINLIST will be kept in its current stacking
order, the remainder will be stacked immediately below it in the order
given. (Note: This will currently confuse the heck out of the pager
and possibly other legacy fvwm2 modules).
[From scwm/window.c:1668]


(restart  #&optional command)
- Built-in Primitive
Restart the window manager. If COMMAND is specified, use
that, as the new window manager to run. If COMMAND is not specified or
is exactly equal to "scwm", restart scwm with the same command-line
arguments as given previously.
[From scwm/shutdown.c:146]


(restarted?)
- Built-in Primitive
Returns true if scwm is being restarted by itself.
[From scwm/miscprocs.c:132]


(run-fvwm2-module module-name #&optional
				  (other-args '())	       
				  (config-file "~/.fvwm2rc")
				  (config-info
				   (get-fvwm2-module-config
				    (basename module-name))))
- (app scwm fvwm-module)
No documentation supplied.
[From scheme/fvwm-module.scm:396]


(run-in-xterm cmd . opts)
- (app scwm base)
Return a procedure that runs CMD in an xterm.
Uses the variable `xterm-command' to determine how
to run an xterm.  CMD may include options to the command.
The rest of the arguments are passed as options to the xterm command.
[From scheme/base.scm:364]


(safe-load fname)
- Built-in Primitive
Load file FNAME while trapping and displaying errors.
Each individual top-level-expression is evaluated separately and all
errors are trapped and displayed.  You Should use this procedure if
you need to make sure most of a file loads, even if it may contain
errors.
[From scwm/callbacks.c:239]


(save-settings)
- (app scwm prefs-menu)
No documentation supplied.
[From scheme/prefs-menu.scm:39]


(scwm-is-constraint-enabled?)
- (app scwm base)
Return #t if scwm has the constraint solver primitives, #f otherwise.
[From scheme/base.scm:435]


(scwm-path-exec-prefix)
- Built-in Primitive
Return the <envar>$EXEC_PREFIX</envar> directory path that scwm was installed with.
[From scwm/miscprocs.c:519]


(scwm-path-prefix)
- Built-in Primitive
Return the <envar>$PREFIX</envar> directory path that scwm was installed with.
[From scwm/miscprocs.c:509]


(scwm-quit  . args)
- Built-in Primitive
Exit scwm cleanly. `quit' is redefined as this within
scwm. ARGS is ignored.
[From scwm/shutdown.c:172]


(scwm-system cmd)
- (app scwm base)
Run CMD using /bin/sh -c CMD and return the exit status.
The CMD is run synchronously, and Bourne-shell meta characters
are interpreted by /bin/sh.  E.g., to start CMD in the background,
use a trailing \"&\" character.  See also guile's `system', but note
that it may permit signals on the controlling tty to be seen
by children (observed on Linux, Free/NetBSD, but not on Solaris or HP/UX.
This may be a bug (not meeting POSIX.2 specifications).
[From scheme/base.scm:439]


(scwm-version)
- Built-in Primitive
Return the version of scwm running.
[From scwm/miscprocs.c:488]


(scwm-version-date)
- Built-in Primitive
Return the date that the running scwm was last changed as a string.
[From scwm/miscprocs.c:498]


(sec->usec sec)
- (app scwm flux)
Convert SEC seconds into an equivalent number of microseconds.
Especially useful for add-hook! and other timing related procedures
that take microseconds.
[From scheme/flux.scm:327]


(select-multiple-windows-interactively #&optional (max 32000))
- (app scwm flux)
Return a list of user-selected windows, up to MAX.
The list is in the reverse order from the way by which they were selected.
[From scheme/flux.scm:284]


(select-window  #&optional kill? release?)
- Built-in Primitive
Select a window interactively.
Use a special cursor and let the user click to select the window. The
optional arguments KILL? and RELEASE? indicate whether to use the
"skull and cross-bones" kill cursor (recommended for destructive
operations like delete-window and destroy-window), and whether to wait
for a mouse release or act immediately on the click. The former is a
place-holder until we have proper cursor support in scwm.
[From scwm/window.c:671]


(select-window-from-window-list #&key (only '()) (except '()))
- (app scwm flux)
Permit selecting a window from a window list.
Return the selected window object, or #f if none was selected
[From scheme/flux.scm:299]


(select-window-interactively  #&optional msg)
- Built-in Primitive
Returns a window selected interactively while displaying MSG.
Returns #f if no window was selected. Display no message if MSG not given.
[From scwm/window.c:804]


(send-button-press button #&optional win button-press? button-release? propagate?)
- Built-in Primitive
Send a synthetic mouse press event.
Create a synthetic event of a press of mouse button BUTTON. The usual
mouse button specification format (with modifiers) is used. Send the
event to window WIN if specified; otherwise the window to be used
defaults to the window context in the usual way. By default, both a
press and a release are sent. However, the boolean parameters
BUTTON-PRESS? and BUTTON-RELEASE? allow you to specify which are sent
individually. PROPAGATE? indicates whether the propagate flag is set
on the event; the default is #f. You should not have to worry about
this unless you know what it means.
[From scwm/events.c:1830]


(send-key-press key #&optional win key-press? key-release? propagate?)
- Built-in Primitive
Send a synthetic press of KEY. The usual key specification
format (with modifiers) is used. The event is sent to window WIN if
specified; otherwise the window to be used defaults to the window
context in the usual way. By default, both a press and a release are
sent. However, the boolean parameters KEY-PRESS? and KEY-RELEASE?
allow you to specify which are sent individually. PROPAGATE? indicates
whether the propagate flag is set on the event; the default is #f. You
should not have to worry about this unless you know what it means.
[From scwm/events.c:1768]


(set-animation! vector)
- Built-in Primitive
Set the animation parameters to VECTOR. VECTOR is a vector of
floats which give the fractions of the final position that the window
should appear at. For instance, #(0.0 0.25 0.5 0.75 1.0 1.1 1.0) would
make the window appear at the initial position, 1/4 of the way, 1/2 of
the way, 3/4 of the way, overshoot the final position slightly, and
finally slide back into place. This parameter is used for both
animated window shades and animated moves.
[From scwm/window.c:2109]


(set-auto-raise! auto-raise? #&optional (win (get-window)))
- (app scwm auto-raise)
Turn auto-raise on (#t) or off (#f) for WIN.
Auto-raise makes a window automatically raise when the mouse pointer
enters the window frame.  See `set-auto-raise-delay!' for controlling
the delay before the window raises.
[From scheme/auto-raise.scm:92]


(set-auto-raise-delay! delay #&optional (win (get-window)))
- (app scwm auto-raise)
Set the auto-raise delay to DELAY (in ms) for WIN.
DELAY is the number of milliseconds after the pointer enters
WIN that WIN will be raised.  See `set-auto-raise!' to turn
auto-raise on or off for a given window.
[From scheme/auto-raise.scm:99]


(set-auto-raise-focus-proc! fproc #&optional (win (get-window)))
- (app scwm auto-raise)
Set the auto-raise-focus-proc for WIN.
The auto-raise-focus-proc is the procedure which is invoked
after the auto-raise-delay after the pointer enters WIN's frame.
[From scheme/auto-raise.scm:113]


(set-auto-raise-unfocus-delay! delay #&optional 
					       (win (get-window)))
- (app scwm auto-raise)
Set the timeout to DELAY (in ms) for the unfocus-proc of WIN.
After DELAY milliseconds after the pointer leaves WIN's frame,
the auto-raise-unfocus-proc will be called.
[From scheme/auto-raise.scm:106]


(set-auto-raise-unfocus-proc! ufproc 
					     #&optional (win (get-window)))
- (app scwm auto-raise)
Set the auto-raise-unfocus-proc for WIN.
The auto-raise-unfocus-proc is the procedure which is invoked
after the auto-raise-unfocus-delay after the pointer leaves WIN's frame.
[From scheme/auto-raise.scm:119]


(set-border-face! active #&optional inactive)
- Built-in Primitive
Set the face for the border In the current decor.
Use ACTIVE as the face for the border when the window is active. Use
INACTIVE when the window is inactive. INACTIVE defaults to the same as
ACTIVE when not specified.
[From scwm/face.c:983]


(set-border-width! width #&optional win)
- Built-in Primitive
Set the border width of WIN's border to WIDTH pixels.
WIN defaults to the window context in the usual way if not specified.
[From scwm/window.c:2947]


(set-button-face! button active-up #&optional active-down inactive)
- Built-in Primitive
Set the button faces for the various window states.
In the current decor, use ACTIVE-UP as the face for the
button specified by the integer BUTTON when active and not pressed
in. Use ACTIVE-DOWN when BUTTON is active and pressed in, and INACTIVE
when the window is inactive. Both INACTIVE and ACTIVE-DOWN default to
ACTIVE-UP when not specified. Note that ACTIVE-DOWN will magically
reverse the sense of the relief flag, so if the button is raised in
the ACTIVE-UP state, it will be sunk in the ACTIVE-DOWN state by
default.
[From scwm/face.c:889]


(set-button-mwm-flag! button flag)
- Built-in Primitive
Specify the Mwm flag for BUTTON.
If FLAG is #t, the button's relief pattern (if any) will appear to
reverse in depth sense (i.e., flip from sunken in to extruding out)
when the window is maximized.
[From scwm/face.c:950]


(set-click-delay! usec)
- Built-in Primitive
Set the delay used in identifying mouse clicks and drags.
USEC is specified in microseconds. After USEC microseconds, a mouse-down
without a mouse-up is considered a drag.  Also, after USEC microseconds, a
single click is definitively identified as not a double click.
[From scwm/miscprocs.c:167]


(set-click-to-focus-passes-click! flag)
- Built-in Primitive
Determine whether a click-to-focus window receives the click.
If FLAG is #t, the window will receive the event, if #f, scwm
will not pass the event on to the client.
[From scwm/miscprocs.c:361]


(set-click-to-focus-raises! flag)
- Built-in Primitive
Determine whether a click to focus raises the clicked-on window.
If FLAG is #t, clicks which transfer focus will also raise the target
window
[From scwm/miscprocs.c:385]


(set-colormap-focus! ftype)
- Built-in Primitive
Set the colormap focus policy to FTYPE.
FTYPE can either be 'mouse, indicating that the window under the mouse
pointer should always have it's colormap installed, or 'focus to
indicate that the window with the input focus should also get the
colormap focus. This makes a difference only when using focus policies
other than 'mouse.
[From scwm/miscprocs.c:194]


(set-current-decor! decor)
- Built-in Primitive
Set the current decor to DECOR. Operations described as
setting options "in the current decor" will now operate on this
one.
[From scwm/decor.c:261]


(set-current-desk! desk)
- Built-in Primitive
Change the current desk to DESK. DESK should be an integer
small enough to fit in one machine word.
[From scwm/deskpage.c:58]


(set-decorate-transient! flag #&optional win)
- Built-in Primitive
Set decoration of transients property on WIN.
If FLAG is #t, then if WIN is transient it will be fully
decorated. Transient windows that are not fully decorated will be
given only a border and no titlebar regardless of other settings. WIN
defaults to the window context in the usual way if not specified.
[From scwm/window.c:3615]


(set-desk-size! width height)
- Built-in Primitive
Sets the desk size to WIDTH, HEIGHT.
Both numbers are given in units of the physical screen size.  For
example <informalexample><programlisting>(set-desk-size 3 3)
</programlisting></informalexample> createsa virtual world 9 times the
size of the physical display.
[From scwm/deskpage.c:299]


(set-edge-move-threshold! pixels)
- Built-in Primitive
Set the edge move threshold to PIXELS.
This is the number of pixels past the edge of the screen that a window
must be moved before it will really move past the edge.
[From scwm/deskpage.c:269]


(set-edge-resistance! s m)
- (app scwm base)
Set the edge scroll delay to S, and the edge move threshold to M.
See also `set-edge-scroll-delay!' and `set-edge-move-threshold!'.
[From scheme/base.scm:406]


(set-edge-scroll! x y)
- (app scwm base)
Set the edge scroll values to X and Y, respectively.
These values are the number of pixels that the viewport
moves when the pointer hits the edge of the screen.  Use
`%x' and `%y' to convert from a percentage of a screen
dimension to a number of pixels.
[From scheme/base.scm:420]


(set-edge-scroll-delay! usec)
- Built-in Primitive
Set the edge scroll delay to USEC microseconds.
When the mouse pointer hits the edge of the screen, it must stay there
for at least the edge scroll delay amount before the desktop will be
scrolled. If this parameter is #f, the viewport will not scroll at all
at the screen edge.
[From scwm/deskpage.c:229]


(set-edge-wrap! x y)
- (app scwm base)
Set the edge x and y wrap values to X and Y, respectively.
These values should be #t to mean that the pointer should
wrap in the given direction, or #f to not wrap around.
See also `set-edge-x-wrap!' and `set-edge-y-wrap!'.
[From scheme/base.scm:412]


(set-edge-x-scroll! pixels)
- Built-in Primitive
Set the horizontal edge scroll increment to PIXELS.
The horizontal edge scroll setting is the amount by which the viewport
will scroll when the mouse hits the left or right edge. Use `%x' to
convert from a percent of screen size to pixels.
[From scwm/deskpage.c:121]


(set-edge-x-wrap! flag)
- Built-in Primitive
Set whether to wrap pointer around horizontal edges.
If the boolean value FLAG is #t, the pointer will wrap from the right
edge of the desktop to the left of the display as it moves off the
right edge, and vice-versa. See also `set-edge-y-wrap!'
[From scwm/deskpage.c:180]


(set-edge-y-scroll! pixels)
- Built-in Primitive
Set the vertical edge scroll increment to PIXELS.
The vertical edge scroll setting is the amount by which the viewport
will scroll when the mouse hits the top or bottom edge. Use `%y' to
convert from a percent of screen size to pixels.
[From scwm/deskpage.c:150]


(set-edge-y-wrap! flag)
- Built-in Primitive
Set whether to wrap pointer around vertical edges.
If the boolean value FLAG is #t, the pointer will wrap from the bottom
edge of the desktop to the top of the display as it moves off the very
bottom edge, and vice-versa. See also `set-edge-x-wrap!'
[From scwm/deskpage.c:204]


(set-face-flag! face flag flagval)
- Built-in Primitive
Set the given FLAG to the given FLAGVAL for face FACE.
See the section on the face-specification-flags concept.
[From scwm/face.c:345]


(set-force-icon! flag #&optional win)
- Built-in Primitive
Set the window-manager-overriding property for WIN to boolean FLAG.
If #t, the icon specified for WIN by the user through scwm will override an
application-provided icon.  WIN defaults to the window context in the usual
way if not specified.
[From scwm/window.c:3416]


(set-hilight-background! bg)
- Built-in Primitive
Use BG as the background color for the window with input focus.
Applies to the current decor.
[From scwm/color.c:651]


(set-hilight-factor! factor)
- Built-in Primitive
Use FACTOR to generate highlight colors for the current decor.
FACTOR is a positive floating point number.
[From scwm/color.c:456]


(set-hilight-foreground! fg)
- Built-in Primitive
Use FG for foreground color of the window with the input focus.
Applies to the current decor.
[From scwm/color.c:608]


(set-hint-override! flag #&optional win)
- Built-in Primitive
Set whether or not Mwm and Open Look function hints are used.
If FLAG is #t, the hints, which indicate what operations should be
allowed on a window, will be ignored for WIN.  If FLAG is #f, the hints will
be honoured. WIN defaults to the window context in the usual way if
not specified.
[From scwm/window.c:3598]


(set-icon! image #&optional win)
- Built-in Primitive
Set the image to use for the icon of WIN to IMAGE.
As usual, an image object or a filename string may be given. #f May
also be specified, indicating no icon image. WIN defaults to the window
context in the usual way if not specified.
[From scwm/window.c:3462]


(set-icon-box! x y w h #&optional win)
- Built-in Primitive
Set the icon box in which WIN's icon will be placed.
This set the box to the rectangle at coordinates X, Y with width W and
height H. WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:3045]


(set-icon-font! font)
- Built-in Primitive
Set the font used for drawing icon titles to FONT.
[From scwm/font.c:258]


(set-icon-title! flag #&optional win)
- Built-in Primitive
Set the visibility of WIN's icon title according to FLAG. WIN
defaults to the window context in the usual way if not specified.
[From scwm/window.c:3399]


(set-lenience! flag #&optional win)
- Built-in Primitive
Set or reset the input focus lenience flag.
Determine whether or not to try to give WIN the input focus
when asked, even if the window claims according to hints that it
cannot receive the input focus, according to the boolean value
FLAG. WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:3730]


(set-menu-background! bg)
- Built-in Primitive
Use BG as the default foreground color for menus.
[From scwm/color.c:755]


(set-menu-font! font)
- Built-in Primitive
Set the default font used for drawing menus to FONT.
[From scwm/font.c:354]


(set-menu-foreground! fg)
- Built-in Primitive
Use FG as the default foreground color for menus.
[From scwm/color.c:719]


(set-menu-hilight-factor! factor)
- Built-in Primitive
Use FACTOR to generate hilight colors for menus.
FACTOR is a positive floating point number
[From scwm/color.c:540]


(set-menu-shadow-factor! factor)
- Built-in Primitive
Use FACTOR to generate shadow colors for menus.
FACTOR is a positive floating point number
[From scwm/color.c:569]


(set-menu-stipple! st)
- Built-in Primitive
Use ST as the default stipple color for menus.
May not be used any longer.
[From scwm/color.c:820]


(set-message-window-attributes! font fg-color bg-color)
- Built-in Primitive
Set the attributes to be used for the message window.
The font will be FONT, foreground color FG-COLOR, and background color BG-COLOR.
This the window which is used to display the current size or position of the window
being moved or resized interactively.
[From scwm/resize.c:57]


(set-mini-icon! image #&optional win)
- Built-in Primitive
Set the image to use for the mini-icon of WIN to IMAGE. As
usual, an image object or a filename string may be given. WIN defaults
to the window context in the usual way if not specified.
[From scwm/window.c:3515]


(set-mouse-focus-click-raises! flag)
- Built-in Primitive
Determine whether a mouse-focus-click will raise the window.
If FLAG is #t it will raise the window. Not sure if this function
makes sense any more.
[From scwm/miscprocs.c:417]


(set-mwm-border! flag #&optional win)
- Built-in Primitive
Set the mwm-border style flag of WIN to boolean FLAG.
The Mwm style has shallower bevels than the default scwm/fvwm2 style.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:3354]


(set-mwm-buttons! flag #&optional win)
- Built-in Primitive
Set the mwm-buttons flag of WIN to boolean FLAG.
The mwm-buttons flag controls whether any of this window's
flags obey their mwm-flags. See `set-button-mwm-flag!'. WIN defaults
to the window context in the usual way if not specified.
[From scwm/window.c:3338]


(set-mwm-decor-hint! flag #&optional win)
- Built-in Primitive
Set whether or not Motif decoration hints are used for WIN.
If FLAG is #t, the Mwm decor hint will be given for WIN.  WIN defaults
to the window context in the usual way if not specified.
[From scwm/window.c:3631]


(set-mwm-func-hint! flag #&optional win)
- Built-in Primitive
Set whether or not Motif function hints are used for WIN.
If FLAG is #t, the Motif function hints are respected for WIN.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:3645]


(set-OL-decor-hint! flag #&optional win)
- Built-in Primitive
Determine whether or not to respect Open Look decoration hints.
If FLAG is #t, the decoration hints will be respected for WIN. WIN
defaults to the window context in the usual way if not specified.
[From scwm/window.c:3677]


(set-PPosition-hint! flag #&optional win)
- Built-in Primitive
Set or reset the program-specified position hint for WIN.
If FLAG is #t, the hint will be set, otherwise reset.  This only
matters when using the default placement procedure. Some programs
allegedly set this hint to a useless value like (0,0) always, so
ignoring it is recommended. WIN defaults to the window context in the
usual way if not specified.
[From scwm/window.c:3660]


(set-random-placement! flag #&optional win)
- Built-in Primitive
Set the random-placement flag of WIN to boolean FLAG.
This flag only matters if the default placement procedure is
being used. WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:3283]


(set-rubber-band-mask! value)
- Built-in Primitive
Set the rubber band mask used when dragging or resizing.
VALUE is XORed with the background when dragging non-opaque move or
resize frames. VALUE should be an integer.
[From scwm/resize.c:385]


(set-shadow-factor! factor)
- Built-in Primitive
Use FACTOR to generate shadow colors in the current decor.
FACTOR is a positive floating point number
[From scwm/color.c:498]


(set-show-icon! flag #&optional win)
- Built-in Primitive
Set whether or not the icon of WIN will be visible.  If FLAG
is #t, the icon will be displayed, if #f, it will not appear when the
window is iconified (it will still be in the window list, of course).
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:3443]


(set-skip-mapping! flag #&optional win)
- Built-in Primitive
Set or reset whether scwm should not change desktops on a map.
This only affect the behaviour upon initial mapping of WIN. If FLAG is
#t, the virtual desktop will not be changed when WIN is mapped.  WIN
defaults to the window context in the usual way if not specified.
[From scwm/window.c:3715]


(set-smart-placement! flag #&optional win)
- Built-in Primitive
Set the smart-placement flag of WIN to boolean FLAG.
This flag only matters if the default placement procedure is
being used. WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:3298]


(set-smart-placement-is-really-smart! flag)
- Built-in Primitive
Determine whether or not `clever-place-window' will be used when smart-placing.
If FLAG is #t, then `clever-place-window' will be used instead of
`smart-place-window' when the default placement procedure is used, and
the window's smart-placement flag is on.
[From scwm/miscprocs.c:329]


(set-start-on-desk! desk #&optional win)
- Built-in Primitive
Make WIN start on DESK when first mapped. WIN defaults to the
window context in the usual way if not specified.
[From scwm/window.c:3691]


(set-title-face! active-up #&optional active-down inactive)
- Built-in Primitive
Set the titlebar faces for the various window states.
In the current decor, use ACTIVE-UP as the face for the title
bar when active and not pressed in. Use ACTIVE-DOWN when the title bar
is active and pressed in, and INACTIVE when the window is
inactive. Both INACTIVE and ACTIVE-DOWN default to ACTIVE-UP when not
specified. Note that ACTIVE-DOWN will magically reverse the sense of
the relief flag, so if your titlebar bar is raised in the ACTIVE-UP
state, it will be sunk in the ACTIVE-DOWN state by default.
[From scwm/face.c:849]


(set-title-font! font)
- Built-in Primitive
Set the font for window titles In the current decor to FONT.
[From scwm/font.c:291]


(set-title-height! height)
- Built-in Primitive
Set the height of the titlebar in pixels to HEIGHT.
Applies to the current decor.
[From scwm/miscprocs.c:85]


(set-title-justify! just)
- Built-in Primitive
Set the justification for the title to JUST.
JUST should be one of 'right, 'left, or 'center. Applies to the
current decor
[From scwm/miscprocs.c:33]


(set-viewport-position! x y)
- Built-in Primitive
Position the upper left corner of the viewport at coordinates X, Y.
X and Y are given in pixels.  Does not affect the current desk.
[From scwm/deskpage.c:90]


(set-window-background! bg #&optional win)
- Built-in Primitive
Set the background color of WIN to BG.
This color is used to draw most of the window decorations, along with
the relief colors generated from it, which are used to draw the
window's 3-D bevels.  WIN defaults to the window context in the usual
way if not specified.
[From scwm/window.c:3191]


(set-window-button! n flag #&optional win)
- Built-in Primitive
Set the visibility of button number N on window WIN.
If FLAG is #t, the button will be visible, otherwise it won't be
drawn.  WIN defaults to the window context in the usual way if not
specified. (Note: this code may be broken right now.)
[From scwm/window.c:3313]


(set-window-colors! #&optional (bg #f) (fg #f) (win (get-window)))
- (app scwm base)
Set WIN's background color to BG, foreground color to FG.
[From scheme/base.scm:138]


(set-window-decor! win decor)
- Built-in Primitive
Set WIN's decor to DECOR, updating its decorations appropriately.
[From scwm/decor.c:305]


(set-window-focus! sym #&optional win)
- Built-in Primitive
Set the focus style of WIN to SYM. SYM may be 'click, 'mouse,
'sloppy or 'none. WIN defaults to the window context in the usual way
if not specified.
[From scwm/window.c:3105]


(set-window-foreground! fg #&optional win)
- Built-in Primitive
Set the foreground color of WIN to FG.
This color is used to draw the title text currently. In the future, it
may have other uses as well. WIN defaults to the window context in the
usual way if not specified.
[From scwm/window.c:3168]


(set-window-highlight-background! bg #&optional win)
- Built-in Primitive
Set the highlighted background color of WIN to BG.
This color is used when WIN has the focus to draw most of the window
decorations, along with the relief colors generated from it, which are
used to draw the window's 3-D bevels.  WIN defaults to the window
context in the usual way if not specified. If BG is #f, then lets the decor highlight
background color be used (turns off a special highlight
color for WIN.
[From scwm/window.c:3248]


(set-window-highlight-foreground! fg #&optional win)
- Built-in Primitive
Set the highlighted foreground color of WIN to FG.
This color is used to draw the title text when WIN has the focus.
In the future, it may have other uses
as well. WIN defaults to the window context in the usual way
if not specified. If FG is #f, then lets the decor highlight
foreground color be used (turns off a special highlight
color for WIN.
[From scwm/window.c:3221]


(set-window-property! win prop val)
- Built-in Primitive
Set window property PROP of WIN to VAL.
PROP should be a symbol. VAL may be any Scheme object. This name/value
pair will be associated with the window, and may be retrieved with
`window-property'. Passing #f as the value will delete the property
instead. Soon, some properties will have magical meanings, altering
particular fields in the window structure. Also, a
window-property-change-hook mechanism will soon be implemented for
notification of all window property changes. This is not yet done. The
window property primitives should be considered in flux.
[From scwm/window.c:3746]


(set-window-title! win title)
- (app scwm flux)
Change the window title X-Property of WIN to TITLE.
WIN is a Scwm window object, TITLE is a string.  This procedure alters the
window title by changing the WM_NAME X-Property.
[From scheme/flux.scm:314]


(set-X-server-synchronize! flag)
- Built-in Primitive
Set X server sychronization flag to FLAG.
If FLAG is #t, then Scwm will turn on synchronous X behaviour; if FLAG
is #f, Scwm will turn off synchronous behaviour.  Scwm is slower in
synchronous mode, but can be easier to debug.
[From scwm/miscprocs.c:529]


(shadow-factor)
- Built-in Primitive
Return the current shadow factor.
[From scwm/color.c:522]


(should-circulate-skip? #&optional (win (get-window)))
- (app scwm winlist)
Return #t if WIN should now be skipped when circulating, #f otherwise.
Using the current state of WIN (whether it is iconified or not) in
determining the result.
[From scheme/winlist.scm:170]


(show-com com)
- (app scwm flux)
No documentation supplied.
[From scheme/flux.scm:148]


(show-file filename)
- (app scwm flux)
Return a lambda to display the contents of filename in a window.
[From scheme/flux.scm:144]


(show-mesg . str)
- (app scwm flux)
Return a lambda to display the string arguments STR in a message window.
See also `message'.
[From scheme/flux.scm:139]


(show-system-info)
- (app scwm flux)
Display the `system-info-string' system details in a window.
[From scheme/flux.scm:183]


(show-titlebar  #&optional win)
- Built-in Primitive
Cause WIN to be decorated with a titlebar.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:2811]


(show-window-list-menu #&key (only '()) (except '())
				       (by-stacking #f)
				       (proc window-list-proc)
				       (show-geometry #f)
				       (warp-to-first #f)
				       (show-mini-icon #t))
- (app scwm winlist)
Popup a window list menu and permit a selection to be made.
ONLY and EXCEPT are procedures that control which windows will
appear in the list -- see `list-windows' for details.
PROC is the procedure which will be called on the selected window. 

If SHOW-GEOMETRY is #t, the geometries of the windows will be listed
in each menuitem.  

If SHOW-MINI-ICON is #t, the mini-icon of the windows will be
displayed with each menuitem.

If WARP-TO-FIRST is #t, the mouse pointer will be warped to the first
menuitem (see `popup-menu').  

[From scheme/winlist.scm:85]


(simple-title-style #&key font height justify)
- (app scwm base)
Set the style for titlebars.
FONT is a font object or a string, HEIGHT is a number of points,
JUSTIFY is a legal argument to `set-title-justify!' such as 'left,
'right, or 'center.
[From scheme/base.scm:207]


(size->str sz #&optional (sep "x"))
- (app scwm flux)
Convert a two-element list to a string.
Use the optional second argument as the separator.
[From scheme/flux.scm:155]


(sleep-ms ms)
- (app scwm flux)
Delay for MS milliseconds. 
Note that timer-hooks are much more useful in nearly all
cases.  See `add-timer-hook!'.
[From scheme/flux.scm:237]


(smart-place-window win)
- Built-in Primitive
Places WIN using fvwm2's SmartPlacement algorithm.
The placement is just as if SmartPlacementIsReallySmart were not in
effect. That is, it tries to place the window so that it does not
overlap any other. If it fails to do so, it returns #f; otherwise it
returns #t.
[From scwm/placement.c:395]


(smart-placement-is-really-smart?)
- Built-in Primitive
Return whether or not `clever-place-window' will be used when smart-placing.
If the value is #t, then `clever-place-window' will be used instead of
smart-place-window when the default placement procedure is used, and
the window's smart-placement flag is on.
[From scwm/miscprocs.c:344]


(sort ls #&optional (compare >))
- 
Returned LS sorted according to COMPARE (defaults to ascending numerical order).
[From scheme/sort.scm:41]


(stick  #&optional win)
- Built-in Primitive
Make WIN "sticky" so that it stays stationary in viewport.
A sticky window will appear on all desktops, and will remain at the
same screen position regardless of scrolling within the current
desktop. WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:1877]


(stick-icon  #&optional win)
- Built-in Primitive
Cause WIN's icon to become "sticky". See `stick'. WIN
defaults to the window context in the usual way if not specified.
[From scwm/window.c:2993]


(sticky?  #&optional win)
- Built-in Primitive
Return #t if WIN is "sticky", #f otherwise.
See `stick' for an explanation. WIN defaults to the
window context in the usual way if not specified.
[From scwm/window.c:1941]


(string->X-atom string)
- Built-in Primitive
Returns an X atom representing STRING.
If STRING contains NULL-characters, the behaviour is undefined.
[From scwm/xproperty.c:299]


(style-one-window w . args)
- (app scwm style)
No documentation supplied.
[From scheme/style.scm:76]


(support-image-conversion)
- 
No documentation supplied.
[From scheme/image-loaders.scm:54]


(system-info-string)
- (app scwm flux)
Return a string with various system information.
Use `show-system-info' to display it in a window.
[From scheme/flux.scm:97]


(title-font)
- Built-in Primitive
Return the font used for drawing window titles in the current decor.
[From scwm/font.c:320]


(title-height)
- Built-in Primitive
Return the height of the titlebar in pixels, as set by `set-title-height!'.
Applies to the current decor.
[From scwm/miscprocs.c:118]


(title-justify)
- Built-in Primitive
Return the current justification for the title, as set by `set-title-justify!'.
The return value will be one of 'right, 'left, or 'center. Applies to the
current decor.
[From scwm/miscprocs.c:63]


(title-style #&key font height justify
			     (active-up '()) 
			     (active-down '()) 
			     (inactive '()) . rest)
- (app scwm face)
Set the current title style to use FONT, HEIGHT, and JUSTIFY.
FONT is the window title font, a font object or a string.
HEIGHT is the height of the title bar, in points.
JUSTIFY is one of 'left, 'right, or 'center.
FIXMS: What are? ACTIVE-UP, ACTIVE-DOWN, INACTIVE.
[From scheme/face.scm:29]


(titlebar-shown?  #&optional win)
- Built-in Primitive
Return #t if WIN is decorated with a titlebar, #f otherwise.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:2858]


(to-string . rest)
- (app scwm flux)
Dump all arguments into a string.
[From scheme/flux.scm:80]


(toggle-max-both)
- (app scwm flux)
Toggle the current window's maximization (both vertically and horizontally).
[From scheme/flux.scm:61]


(toggle-max-horz)
- (app scwm flux)
Toggle the current window's maximized-horizontally state.
[From scheme/flux.scm:57]


(toggle-max-vert)
- (app scwm flux)
Toggle the current window's maximized-vertically state.
[From scheme/flux.scm:53]


(toggle-max-vert-part)
- (app scwm flux)
Toggle the current window's maximization-vertically to 95% of the screen height.
[From scheme/flux.scm:65]


(toggle-maximize nw nh #&optional (win (get-window)))
- (app scwm winops)
Maximize to width NW, height NH if not maximized, or unmaximize.
[From scheme/winops.scm:197]


(transient?  #&optional win)
- Built-in Primitive
Return #t if WIN is transient, #f if not.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:1773]


(try-everything-loader fname)
- (app scwm image-loaders)
No documentation supplied.
[From scheme/image-loaders.scm:47]


(un-keep-on-top  #&optional win)
- Built-in Primitive
Remove the on-top property from WIN, if it has it.
See `keep-on-top'. WIN defaults to the window context in the usual
way if not specified.
[From scwm/window.c:2753]


(un-window-shade  #&optional win animated?)
- Built-in Primitive
Reverse the effect of `window-shade' on WIN.
By default, the change takes place instantaneously. However, if the
optional ANIMATED? argument is true, the window will be animated as it
rolls down, producing a pleasing visual effect. WIN defaults to the
window context in the usual way if not specified.
[From scwm/window.c:2039]


(un-window-shade-animated win)
- (app scwm winops)
Make WIN be not window-shaded animatedly.
This rolls the client window down out of the titlebar, much as
pulling down a window shade on a window.
[From scheme/winops.scm:75]


(unbind-key contexts key)
- Built-in Primitive
Remove any bindings attached to KEY in given CONTEXTS.
CONTEXTS is a list of event-contexts (e.g., '(button1 sidebar))
KEY is a string giving the key-specifier (e.g., M-Delete for Meta+Delete)
[From scwm/binding.c:586]


(unbind-mouse contexts button)
- Built-in Primitive
Remove any bindings attached to mouse BUTTON in given CONTEXTS.
CONTEXTS is a list of event-contexts (e.g., '(button1 sidebar))
BUTTON is a string or integer giving the mouse button number
[From scwm/binding.c:618]


(unflash-window #&optional (win (get-window)))
- (app scwm flux)
No documentation supplied.
[From scheme/flux.scm:378]


(unfocus)
- Built-in Primitive
Remove the input focus from any window that may have it.
[From scwm/window.c:1591]


(unmaximize #&optional (win (get-window)))
- (app scwm winops)
Unmaximize WIN so it returns to its size before maximization.
This should use client units, but currently uses frame-size in pixels.
[From scheme/winops.scm:120]


(unregister-image-loader extension)
- Built-in Primitive
Unregister the loader, if any, for images ending in EXTENSION.
EXTENSION must be a string beginning with a period, the
empty string (for files with no extension), or the string "default"
(for files that no other image loader succeeds in loading).
[From scwm/image.c:325]


(unstick  #&optional win)
- Built-in Primitive
Cause a window to no longer be "sticky", if it is.
See `stick' for an explanation. WIN defaults to the window context in
the usual way if not specified.
[From scwm/window.c:1910]


(unstick-icon  #&optional win)
- Built-in Primitive
Cause WIN's icon to no longer by "sticky". See `stick-icon'
and `stick'. WIN defaults to the window context in the usual way if
not specified.
[From scwm/window.c:3012]


(user-option-menuitem symbol)
- (app scwm prefs-menu)
Create a menuitem for the option.
[From scheme/prefs-menu.scm:180]


(viewport->virtual x y)
- (app scwm base)
Return the virtual coordinates for viewport X,Y.
[From scheme/base.scm:72]


(viewport-position)
- Built-in Primitive
Returns the current position of the viewport in pixels.
The returned value is a list of the x and y positions.
[From scwm/deskpage.c:108]


(viewport-x-position)
- (app scwm base)
Return the x coordinate of the current viewport.
[From scheme/base.scm:64]


(viewport-y-position)
- (app scwm base)
Return the y coordinate of the current viewport
[From scheme/base.scm:68]


(virtual->viewport x y)
- (app scwm base)
Return the viewport coordinates for virtual X,Y.
[From scheme/base.scm:76]


(virtual-size)
- (app scwm base)
Return the size of the virtual screen in pixels.
[From scheme/base.scm:80]


(visible? #&optional (win (get-window)))
- (app scwm wininfo)
Return #t if any of WIN is currently potentially visible, else #f.
Note that this just checks if WIN is in the current viewport
and on the current desk.  It may still return #t if WIN is completely
obscured by other windows.
[From scheme/wininfo.scm:90]


(vx- x)
- (app scwm base)
Return the virtual coordinate X pixels left of the right virtual edge.
[From scheme/base.scm:84]


(vy- y)
- (app scwm base)
Return the virtual coordinate Y pixels up from the bottom virtual edge.
[From scheme/base.scm:88]


(w%x x #&optional (w (get-window)))
- (app scwm base)
Return a pixel width X percent of the width of window W.
[From scheme/base.scm:100]


(w%y y #&optional (w (get-window)))
- (app scwm base)
Return a pixel height Y percent of the height of window W.
[From scheme/base.scm:104]


(wait-for-window predicate)
- Built-in Primitive
Wait until a window appears which satisfies PREDICATE.
Given the existence of before-new-window-hook, this is of questionable
usefulness and may be removed.
[From scwm/miscprocs.c:287]


(warp-to-window  #&optional win)
- Built-in Primitive
Move the mouse pointer to the upper left corner of WIN.
If WIN is on a different desk or in a different viewport, these will
be changed appropriately so that the window is visible. WIN defaults
to the window context in the usual way if not specified.  Note that
the target window is not raised, so if the target window's upper
left corner is under another window, that other window may end up
with the keyboard focus.
[From scwm/window.c:1604]


(wiggle-window)
- (app scwm flux)
Animatedly window shade and then unshade the current window.
Just a toy--- perhaps could be useful to call attention to a window.
[From scheme/flux.scm:69]


(wildcard->regexp wildcard)
- (app scwm wininfo)
Return the string real regular expresision corresponding to WILDCARD.
This involves quoting meta characters and replacing the wildcard
meta-characters \"*\" with \".*\" and \"?\" with \".\".
[From scheme/wininfo.scm:131]


(wildcard-match? wildcard #&optional (win (get-window))
				 #&key (full-regexp #f)
				 (regexp-options `(,regexp/icase)))
- 
No documentation supplied.
[From scheme/wininfo.scm:177]


(wildcard-matcher wildcard #&key (full-regexp #f)
				  (regexp-options `(,regexp/icase)))
- (app scwm wininfo)
Return a procedure that matches WILDCARD using the supplied options.
If FULL-REGEXP is #t, the WILDCARD is considered to be a regular-expression
instead of a shell-like wildcard.
[From scheme/wininfo.scm:153]


(window-border-width win)
- (app scwm flux)
No documentation supplied.
[From scheme/flux.scm:351]


(window-class  #&optional win)
- Built-in Primitive
Return the window resource class of WIN.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:2656]


(window-client-machine-name #&optional (win (get-window)))
- (app scwm wininfo)
Return the name of the client machine on which WIN is running.
[From scheme/wininfo.scm:146]


(window-decor win)
- Built-in Primitive
Return WIN's decor.
[From scwm/decor.c:340]


(window-deletable?  #&optional win)
- Built-in Primitive
Return #t if WIN is able to be deleted, #f otherwise.
Scwm may call `delete-window' on WIN only if this procedure returns
#t. WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:1555]


(window-desk  #&optional win)
- Built-in Primitive
Return the desk that WIN is currently on. WIN defaults to the
window context in the usual way if not specified.
[From scwm/window.c:2621]


(window-frame-area win)
- (app scwm winops)
Return the number of square pixels of area that WIN is.
[From scheme/winops.scm:131]


(window-frame-id  #&optional win)
- Built-in Primitive
Return the X window id for the outermost frame window of WIN.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:2564]


(window-frame-size  #&optional win)
- Built-in Primitive
Return the size of the frame of WIN.
The position is returned as a list of the width and the height in
pixels. WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:2490]


(window-geometry-string #&optional (win (get-window)))
- (app scwm wininfo)
Return a string corresponding to the geometry specifications for WIN.
The virtual position and the frame size are used.  The resulting string
looks like, e.g., FIXGJB.
[From scheme/wininfo.scm:114]


(window-icon win)
- Built-in Primitive
Get the icon image being used for WIN.
Returns #f if none is being used. WIN defaults to the window context
in the usual way if not specified.
[From scwm/window.c:3498]


(window-icon-shaped?  #&optional win)
- Built-in Primitive
Return #t if WIN has shaped icon, #f otherwise.
[From scwm/window.c:3582]


(window-icon-title  #&optional win)
- Built-in Primitive
Return the icon window title of WIN.
This is the title as requested by the application . WIN defaults to
the window context in the usual way if not specified.
[From scwm/window.c:2644]


(window-id  #&optional win)
- Built-in Primitive
Return the X window id for WIN.
This is the X id for the actual application window. WIN defaults to
the window context in the usual way if not specified.
[From scwm/window.c:2548]


(window-info #&optional (win (get-window)))
- (app scwm flux)
Display information about WIN in a message window.
[From scheme/flux.scm:160]


(window-mini-icon win)
- Built-in Primitive
Get the mini-icon image being used for WIN.
Returns #f if none is being used. WIN defaults to the window context
in the usual way if not specified.
[From scwm/window.c:3550]


((window-overlaps-window? #&optional (win (get-window))) 
		 #&optional (win2 (get-window)))
- (app scwm wininfo)
No documentation supplied.
[From scheme/wininfo.scm:86]


(window-position  #&optional win)
- Built-in Primitive
Return the position of WIN in pixels in virtual space.
The position is returned as a list of the x coordinate and the y
coordinate in pixels. WIN defaults to the window context in the usual
way if not specified.  See also `window-viewport-position'.
[From scwm/window.c:2450]


(window-property win prop)
- Built-in Primitive
Retrieve window property PROP of WIN.
PROP should be a symbol. #f will be returned if the property does not
exist (wether set by `set-window-property!' or otherwise). Soon, some
properties will have magical meanings, accessing particular fields in
the window structure. Also, a window-property-change-hook mechanism
will soon be implemented for notification of all window property
changes. This is not yet done. The window property primitives should
be considered in flux.
[From scwm/window.c:3783]


(window-resource  #&optional win)
- Built-in Primitive
Return the window resource instance of WIN. WIN defaults to
the window context in the usual way if not specified.
[From scwm/window.c:2669]


(window-shade  #&optional win animated?)
- Built-in Primitive
Cause WIN to become "window-shaded".
That is, to roll up into just a titlebar. By default, the change takes
place instantaneously. However, if the optional ANIMATED? argument is
true, the window will be animated as it rolls up, producing a pleasing
visual effect. WIN defaults to the window context in the usual way if
not specified.
[From scwm/window.c:1967]


(window-shade-animated win)
- (app scwm winops)
Make WIN be window-shaded animatedly.
This rolls the client window up into the titlebar, much as
snapping up a window shade on a window.
[From scheme/winops.scm:67]


(window-shaded?  #&optional win)
- Built-in Primitive
Return #t if WIN is shaded.
WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:2087]


(window-shaped?  #&optional win)
- Built-in Primitive
Return #t if WIN is a shaped window, #f otherwise.
[From scwm/window.c:3567]


(window-size  #&optional win)
- Built-in Primitive
Return the size of the application window of WIN.
WIN defaults to the window context in the usual way if not specified.
The position is returned as a list of four numbers. The first two are
the width and the height in pixels, the third and fourth are the width
and height in resize units (e.g., characters for an xterm).
[From scwm/window.c:2509]


(window-size-hints win)
- Built-in Primitive
Return a list of the window size hints associated with WIN.
The list returned contains 4 cons pairs containing:
'((min-width . max-width) (min-height . max-height)
(width-inc . height-inc) (base-width . baseheight))
[From scwm/window.c:2346]


(window-style condition . args)
- (app scwm style)
No documentation supplied.
[From scheme/style.scm:50]


(window-title  #&optional win)
- Built-in Primitive
Return the window title of WIN, as requested by the application.
WIN defaults to the window context in the usual way if not specified.
[From scwm/window.c:2633]


(window-title-height win)
- (app scwm flux)
No documentation supplied.
[From scheme/flux.scm:342]


(window-transient-for  #&optional win)
- Built-in Primitive
Return the window for which WIN is transient.
If WIN is transient, and the window it is transient for is
not the root window and is being managed by scwm, this returns the window
object of the window that WIN is transient for, otherwise return
#f. WIN defaults to the window context in the usual way if not
specified.
[From scwm/window.c:1788]


(window-viewport-position #&optional (win (get-window)))
- (app scwm base)
Return the position of WIN in pixels within the viewport.
The position is returned as a list of the x coordinate and the y
coordinate in pixels. WIN defaults to the window context in the usual
way if not specified.  See also `window-position'.
[From scheme/base.scm:171]


(window? obj)
- Built-in Primitive
Returns #t if OBJ is a window object, otherwise returns #f.
[From scwm/window.c:662]


(windows-overlap? win win2)
- (app scwm wininfo)
Return #t if WIN and WIN2 overlap at all, else #f.
I.e., returns #t if the intersection of the windows' areas
is non-empty.
[From scheme/wininfo.scm:74]


(winlist-hit #&optional (win (get-window)))
- (app scwm winlist)
Permit WIN to be displayed in the window list by default.
This resets the 'winlist-skip property of WIN.  See also `winlist-skip'.
[From scheme/winlist.scm:67]


(winlist-skip #&optional (win (get-window)))
- (app scwm winlist)
Do not show WIN in the window list by default.
This sets the 'winlist-skip property of WIN.  See also `winlist-hit'.
[From scheme/winlist.scm:72]


(winlist-skip? #&optional (win (get-window)))
- (app scwm winlist)
Return #t of WIN is skipped in the window list, #f otherwise.
[From scheme/winlist.scm:77]


(write-all port . lst)
- (app scwm flux)
Write all arguments into the port. #t means `current-output-port'.
[From scheme/flux.scm:74]


(x- x)
- (app scwm base)
Return the viewport pixel coordinate X pixels left of the right display edge.
[From scheme/base.scm:56]


(X-atom->string atom)
- Built-in Primitive
Returns the string represented by ATOM.
Returns #f, if the X atom was not known.
[From scwm/xproperty.c:319]


(X-cut-buffer-string)
- (app scwm flux)
Return the text of the CUT_BUFFER0 property of the root window.
This is the cut text selected by X clients.
[From scheme/flux.scm:433]


(X-display-information)
- Built-in Primitive
Return some information about the screen. In particular,
return a list of the horizontal resolution, the vertical resolution,
the number of planes on the current screen (i.e. the bit depth), the
bits per color supported by the hardware, the visual class (one of
"StaticGray", "GrayScale", "StaticColor", "PseudoColor", "DirectColor"
or "TrueColor") and a boolean indicating whether the display is color.
The resolutions mentioned above should in theory be pixels per
centimeter, rounded to the nearest integer. These parameters can be
used for various workarounds or conditional decisions in a scwmrc to
be shared among multiple machines.
[From scwm/miscprocs.c:566]


(X-pointer-mapping)
- Built-in Primitive
Return the mapping of physical->logical pointer buttons as a list.
The length of the returned list is the number of buttons available.  Each
element in the list is an integer.  E.g., '(1 2 3) is a normally mapped
3-button mouse, whereas '(3 2 1) is a 3-button mouse where the rightmost
physical button acts as logical button 1, and the leftmost acts as button 3.
[From scwm/binding.c:868]


(X-property-get win name #&optional consume)
- Built-in Primitive
Get X property NAME of window WIN.
WIN is the window to check, or 'root-window.
NAME is a string.
If CONSUME is #t, the X property is deleted after getting it. Default is
not to delete.
If the X property could not be found, #f is returned.
If the X property could be found, a list "(value type format)" is returned.
"type" is a string.
"format" is either 8, 16, or 32, giving the size of the elements of "value".
"value" is a string, if "format" is 8, or a vector of integers otherwise.
[From scwm/xproperty.c:203]


(X-property-set! win name value #&optional type format action)
- Built-in Primitive
Set X property NAME on window WIN to VALUE.
WIN is the window to set the X property on, or 'root-window.
NAME and TYPE are strings. TYPE defaults to "STRING".
FORMAT may be one of the integers 8, 16, and 32, defining the element size
of the VALUE. It is 8 by default.
VALUE may be a string, if FORMAT is 8, and may always be a vector
of FORMAT-bit integers.
ACTION - one of the symbols 'replace, 'prepend, or 'append signifying
how the new VALUE should be merged (if at all) with the existing
value.
[From scwm/xproperty.c:101]


(X-resource-database-save filename)
- Built-in Primitive
Save the Scwm resource database to FILENAME.
Only the settings set or changed via `X-resource-put' go into
the file.
[From scwm/xrm.c:81]


(X-resource-get name #&optional xclass)
- Built-in Primitive
Get X resource specified by NAME and XCLASS from Xrm database.
Both NAME and XCLASS are strings, as is the returned value.  If
XCLASS is omitted, it defaults to the same string as NAME.
If there is no resource under the given key, #f is returned.
[From scwm/xrm.c:48]


(X-resource-put resource value)
- Built-in Primitive
Stores string VALUE as X resource RESOURCE (also a string).
Later, the value can be retrieved using `X-resource-get'.
[From scwm/xrm.c:23]


(X-rotate-cut-buffers n)
- Built-in Primitive
Rotate the X cut buffers by N positions.
This means buffer 0 becomes buffer n, buffer 1 becomes n + 1 mod 8,
and so on.  This cut buffer numbering is global to the display.
[From scwm/miscprocs.c:441]


(X-synthetic-send-string str #&optional (win (get-window)))
- (app scwm flux)
Send string STR to WIN via synthetic X events.
Note that some programs (e.g., xterm) by default do not
honour synthetic key events as they are a security hole.
[From scheme/flux.scm:258]


(X-version-information)
- Built-in Primitive
Return some information about the version of the running X server.
Return value is a list of the X protocol version, the X protocol
revision, the X server vendor, and the vendor release number.
[From scwm/miscprocs.c:546]


(y- y)
- (app scwm base)
Return the viewport pixel coordinate Y pixels up from the bottom display edge.
[From scheme/base.scm:60]


