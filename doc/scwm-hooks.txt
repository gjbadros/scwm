after-change-desk-hook (2 args)
- 
This hook is invoked whenever the current desktop is changed.
It is called with two argument, both integers.  The first is the
new desktop number, the second is the old desktop number.  It
is called after the desk is changed. See also `change-desk-hook'. 
[From scwm/virtual.c:51]


after-new-window-hook (1 args)
- 
This hook is invoked after a window is created and placed.
Its procedures are each called with a single argument, WIN, the new window.
Any window operations may be performed at this time. However, it is
recommended that placement-related operations, such as setting the
position, desk, viewport location and z-ordering of a window be done
in the placement procedure instead.  It should be used for setting
window styles, as the window geometry needs to be fully and correctly
specified before the window is placed.  The `window-style' mechanism
from the "(app scwm style)" module provides a convenient interface to
setting the relevant parameters when a new window is created. 

See also `before-new-window-hook' and `before-place-new-window-hook'.

[From scwm/add_window.c:112]


before-new-window-hook (1 args)
- 
This hook is invoked when first creating a new window object.
Its procedures are each called with a single argument, WIN, the new
window.  Only a subset of the usual window parameters should be set
here, in particular, those that control what hints will be respected
for this window, and those that control how the window will be placed.

This hook does not typically need to be used directly by the user;
`window-style' from the "(app scwm style)" module provides a convenient
interface to setting the relevant parameters when a new window is
created.

See also `before-place-new-window-hook' and `after-new-window-hook'.  
[From scwm/add_window.c:88]


before-place-new-window-hook (1 args)
- 
This hook is invoked just before placing a new window.
It comes after `before-new-window-hook', but before `after-new-window-hook'. 
Its procedures are each called with a single argument, WIN, the new window.
This hook may be removed later since it is mostly redundant with the other
two hooks, despite being invoked at a slightly different time. 

See also `before-new-window-hook' and `after-new-window-hook'.

[From scwm/add_window.c:102]


broadcast-config-hook (2 args)
- 
This hook is invoked whenever fvwm2 would call BroadcastConfig.
This hook is principally of use in implementing the fvwm2
module interface and for stuff that needs to be notified in ways that
can't be done with the proper hooks that have been included so
far. The procedures in this hook are passed two arguments: the event-type
and the window object. 
[From scwm/module-interface.c:40]


broadcast-hook (9 args)
- 
This hook is invoked whenever fvwm2 would call Broadcast.
This hook is principally of use in implementing the fvwm2
module interface and for stuff that needs to be notified in ways that
can't be done with the proper hooks that have been included so
far. The procedures in this hook are passed a numerical code
representing the event type, a number that indicates how many of the
following data arguments are meaningful, and 7 numeric data arguments. 
[From scwm/module-interface.c:31]


broadcast-mini-icon-hook (2 args)
- 
This hook is invoked whenever fvwm2 would call BroadcastMiniIcon.
This hook is principally of use in implementing the fvwm2
module interface and for stuff that needs to be notified in ways that
can't be done with the proper hooks that have been included so
far. The procedures The procedures in this hook are passed two arguments:
the event-type and the window object. 
[From scwm/module-interface.c:56]


broadcast-name-hook (5 args)
- 
This hook is invoked whenever fvwm2 would call BroadcastName.
This hook is principally of use in implementing the fvwm2
module interface and for stuff that needs to be notified in ways
that can't be done with the proper hooks that have been included so
far. The procedures in this hook are passed an event type, three
numeric data arguments, and a string. 
[From scwm/module-interface.c:48]


change-desk-hook (2 args)
- 
This hook is invoked whenever the current desktop is changed.
It is called with two argument, both integers.  The first is the
new desktop number, the second is the old desktop number. It is
called before the desk is changed.  See also `after-change-desk-hook'. 
[From scwm/virtual.c:45]


client-message-hook (4 args)
- 
This hook is invoked whenever Scwm receives an X/11 client message.
It is called with four arguments: the window, the message-type atom, the format (8, 16, or 32), 
and the vector of data. 
[From scwm/events.c:193]


deiconify-hook (2 args)
- 
This hook is invoked when a window is deiconified.
It is called with two arguments: WINDOW, WAS-ICONIFIED?.
WINDOW is the window iconfied, and WAS-ICONIFIED? is
a boolean telling whether the window was iconified previously. 
[From scwm/icons.c:57]


desk-size-change-hook (2 args)
- 
This hook is invoked whenever the desk size is changed.  It is
called with two arguments, both integers, which are the width and
height of the new desk size in screens. 
[From scwm/deskpage.c:48]


edge-enter-hook (1 args)
- 
This hook is invoked whenever the mouse pointer enters a screen edge.
Procedures in the hook are called with one argument, one of the
symbols 'north, 'south, 'east or 'west indicating which edge was
entered. 
[From scwm/virtual.c:63]


edge-leave-hook (1 args)
- 
This hook is invoked whenever the mouse pointer leaves a screen edge.
Procedures in the hook are called with one argument, one of the
symbols 'north, 'south, 'east or 'west indicating which edge was
entered. 
[From scwm/virtual.c:69]


edge-scroll-hook (0 args)
- 
This hook is invoked whenever an edge scroll takes place.
Procedures in the hook are called with no arguments. 
[From scwm/virtual.c:75]


error-hook (1 args)
- 
Called on all kinds of errors and exceptions.
Whenever an error or other uncaught throw occurs on any callback,
whether a hook, a mouse binding, a key binding, a menu entry, a file
being processed, or anything else, error-hook will be invoked. Each
procedure in the hook will be called with the throw arguments; these
will generally include information about the nature of the error. 

[From scwm/callbacks.c:42]


iconify-hook (2 args)
- 
This hook is invoked when a window is iconified.
It is called with two arguments: WINDOW, WAS-ICONIFIED?.
WINDOW is the window iconfied, and WAS-ICONIFIED? is
a boolean telling whether the window was iconified previously.

[From scwm/icons.c:50]


image-not-found-hook (1 args)
- 
Called with image name as a string when not found. 
[From scwm/image.c:96]


interactive-move-finish-hook (1 args)
- 
This hook is invoked at the end of an interactive move.
It is called with one argument, WINDOW. 
[From scwm/move.c:62]


interactive-move-new-position-hook (3 args)
- 
This hook is invoked during an interactive move.
It is called with three arguments, WINDOW, NEW-VP-X, and NEW-VP-Y,
whenever the window is moved to a new location. The position refers
to the position of the frame window (not the client window) in
viewport coordinates. 
[From scwm/move.c:55]


interactive-move-start-hook (1 args)
- 
This hook is invoked at the start of an interactive move.
It is called with one argument, WINDOW. 
[From scwm/move.c:51]


interactive-resize-finish-hook (1 args)
- 
This hook is invoked at the end of an interactive resize.
It is called with one argument, WINDOW. 
[From scwm/resize.c:56]


interactive-resize-new-size-hook (7 args)
- 
This hook is invoked during an interactive resize.  
It is called with seven arguments, WINDOW, X-POSITION, Y-POSITION,
NEW-WIDTH-PIXELS, NEW-HEIGHT-PIXELS, NEW-WIDTH-UNITS, and
NEW-HEIGHT-UNITS whenever the window is changed to a new size.  The
first five arguments refer to the size and position of the frame
window (not the client window). The -UNITS arguments refer to the size
of the client window and are in client units (e.g., characters for
Emacsen and XTerms).  
[From scwm/resize.c:46]


interactive-resize-start-hook (3 args)
- 
This hook is invoked at the start of an interactive resize.
It is called with three arguments: WINDOW, XMOTION, YMOTION.
XMOTION and YMOTION are -1, 0, or 1, indicating motion in that dimension
can happen on the right/bottom side, not at all, or the top/left side,
respectively. 
[From scwm/resize.c:39]


invalid-interaction-hook (0 args)
- 
This hook is invoked with no arguments when the user hits an invalid
key or performs an invalid mouse action during an interactive
operation like `interactive-resize' or `interactive-move'. `beep' is
one example of a procedure to use here. 
[From scwm/window.c:58]


load-processing-hook (1 args)
- 
This hook is invoked for every several top-level s-exps in the startup file.
The hook procedures are invoked with one argument, the count of the
s-expressions evaluated thus far. See also `set-load-processing-hook-frequency!'. 
[From scwm/callbacks.c:51]


select-window-done-hook (1 args)
- 
This hooks is run when a window is selected.
The hook procedures are called with a single argument, the window just left.
See also `select-window-enter-hook' and `select-window-leave-hook'. 
[From scwm/window.c:85]


select-window-enter-hook (1 args)
- 
This hook is invoked when a window is entered during window selection.
The hook procedures are called with a single argument, the window just entered.
This hook is invoked once `select-window-interactively-no-message' is
called if the pointer is already in a window.  (But the
leave hook is not invoked similarly when the selection completes).

[From scwm/window.c:69]


select-window-leave-hook (1 args)
- 
This hook is invoked when a window is left during window selection.
The hook procedures are called with a single argument, the window just left.
This hook is not invoked upon selection completion (unlike
`select-window-enter-hook' that is called initially upon calling
`select-window-interactively-no-message'). See also `select-window-done-hook'.

[From scwm/window.c:77]


shutdown-hook (1 args)
- 
The procedures in shutdown-hook are before scwm quits or restarts.
A single boolean argument is passed that is #t iff scwm is restarting. 
[From scwm/shutdown.c:32]


startup-hook (0 args)
- 
The procedures in startup-hook are called with no arguments after scwm
has processed the scwmrc and captured all application windows, and
right before it enters the main event loop.  Note that during
processing of the .scwmrc startup file, windows have not already been
captured, so the window-list (as reported by `list-all-windows') is
empty.  To provide behviour conditioned on a property of an existing
window, this hook should be used instead. 
[From scwm/shutdown.c:36]


viewport-position-change-hook (4 args)
- 
This hook is invoked whenever the viewport position is changed.
It is called with four arguments, all integers.  The first two are 
the x and y coordinates of the new viewport position in pixels and
the second two are the change in x and y from the previous position. 
[From scwm/virtual.c:57]


window-close-hook (1 args)
- 
This hook is invoked whenever a scwm-managed window is closed.
It is invoked on deletes, destroys, or for any reason that a window
is closed. The hook procedures are invoked with one argument,
WIN, the window being closed.  The WIN is still valid during the hook
procedures. 
[From scwm/add_window.c:127]


window-enter-hook (1 args)
- 
This hook is invoked whenever the mouse pointer enters a top-level window.
It is called with one argument, the window object of the window just
entered. 
[From scwm/events.c:162]


window-focus-change-hook (1 args)
- 
This hook is invoked whenever the keyboard focus is changed.
It is called with one argument, the window object of the window
that now has the focus, or #f if no window now has the focus. 
See also `window-focus-lost-hook'. 
[From scwm/events.c:156]


window-focus-lost-hook (1 args)
- 
This hook is invoked whenever the focus is lost on a window.
It is called with one argument, the window object of the window
that just lost the keyboard focus. See also `window-focus-change-hook'. 
[From scwm/focus.c:46]


window-fully-obscured-hook (1 args)
- 
Invoked when window receives a VisibilityFullyObscured event.
The hook procedures are invoked with one argument, the window object
of the window that is now fully obscured. 
[From scwm/events.c:172]


window-leave-hook (1 args)
- 
This hook is invoked whenever the mouse pointer leaves a top-level window.
The hook procedures are invoked with one argument, the window object
of the window just left. 
[From scwm/events.c:167]


window-partially-obscured-hook (1 args)
- 
Invoked when window receives a VisibilityPartiallyObscured
event.  The hook procedures are invoked with one argument, the window
object of the window that is now partially obscured.  Beware that this
event happens more often than you might expect and an action procedure
attached here should be very careful about manipulating windows in a way
that might cause more Visibility events. 
[From scwm/events.c:177]


window-property-change-hook (4 args)
- 
This hook is invoked whenever a window property changes.
The hook procedures are invoked with four arguments, the window whose
property changed, the name of the changed property, the new value and
the old value. 
[From scwm/winprop.c:37]


window-unobscured-hook (1 args)
- 
Invoked when window receives a VisibilityUnobscured event.
The hook procedures are invoked with one argument, the window object
of the window that is now fully visible. Beware that this
event happens more often than you might expect and an action procedure
attached here should be very careful about manipulating windows in a way
that might cause more Visibility events. 
[From scwm/events.c:185]


X-DestroyNotify-hook (1 args)
- 
This hook is invoked upon DestroyNotify X events.
It indicates a window is being destroyed.  The hook procedures are
invoked with one argument, WIN, the window being destroyed.
The WIN is still valid during the hook procedures. 
[From scwm/events.c:138]


X-MappingNotify-hook (0 args)
- 
This hook is invoked whenever a MappingNotify X event is
received. A MappingNotify event indicates a change of keymapping - in
particular, it may indicate a change of available modifiers or mouse
buttons. The hook procedures are invoked with no arguments. 
[From scwm/events.c:132]


X-MapRequest-hook (1 args)
- 
This hook is invoked upon MapRequest X events.  It indicates a
window is trying to map itself (add itself to the display).  The hook 
procedures are invoked with one argument, WIN, the window being mapped.  
The WIN is valid during the hook procedures. 
[From scwm/events.c:150]


X-PropertyNotify-hook (2 args)
- 
This hook is invoked whenever a PropertyNotify event is received
for a window scwm is managing. This indicates that an X window
property has changed. Watching for window property changes can be used
to construct your own custom window manager protocols. The hook
procedures are invoked with two arguments, the name of the property
that changed (as a string) and the window that it changed for. 
[From scwm/events.c:113]


X-root-PropertyNotify-hook (2 args)
- 
This hook is invoked whenever a PropertyNotify event is received
on the root window.  This indicates that an X window
property has changed. Watching for window property changes can be used
to construct your own custom window manager protocols, or interface
to other desktop environments such as KDE or GNOME. The hook
procedures are invoked with two arguments: the atom for the changed
property and a boolean telling whether the property was deleted. 
These arguments are different from those passed to
X-PropertyNotify-hook's procedures. 
[From scwm/events.c:121]


X-UnmapNotify-hook (1 args)
- 
This hook is invoked upon UnmapNotify X events.  It indicates a
window is being unmapped (removed from display).  The hook procedures
are invoked with one argument, WIN, the window being destroyed.  The
WIN is still valid during the hook procedures. 
[From scwm/events.c:144]


