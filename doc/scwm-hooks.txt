after-change-desk-hook (2 args)
- 
This hook is invoked whenever the current desktop is changed.\n\
It is called with two argument, both integers.  The first is the\n\
new desktop number, the second is the old desktop number.  It\n\
is called after the desk is changed. See also `change-desk-hook'.
[From src/virtual.c:51]


after-new-window-hook (1 args)
- 
This hook is invoked after a window is created and placed.\n\
Its procedures are each called with a single argument, WIN, the new window.\n\
Any window operations may be performed at this time. However, it is\n\
recommended that placement-related operations, such as setting the\n\
position, desk, viewport location and z-ordering of a window be done\n\
in the placement procedure instead.  It should be used for setting\n\
window styles, as the window geometry needs to be fully and correctly\n\
specified before the window is placed.  The `window-style' mechanism\n\
from the "(app scwm style)" module provides a convenient interface to\n\
setting the relevant parameters when a new window is created. \n\
\n\
See also `before-new-window-hook' and `before-place-new-window-hook'.
[From src/add_window.c:129]


before-new-window-hook (1 args)
- 
This hook is invoked when first creating a new window object.\n\
Its procedures are each called with a single argument, WIN, the new\n\
window.  Only a subset of the usual window parameters should be set\n\
here, in particular, those that control what hints will be respected\n\
for this window, and those that control how the window will be placed.\n\
\n\
This hook does not typically need to be used directly by the user;\n\
`window-style' from the "(app scwm style)" module provides a convenient\n\
interface to setting the relevant parameters when a new window is\n\
created.\n\
\n\
See also `before-place-new-window-hook' and `after-new-window-hook'. 
[From src/add_window.c:106]


before-place-new-window-hook (1 args)
- 
This hook is invoked just before placing a new window.\n\
It comes after `before-new-window-hook', but before `after-new-window-hook'. \n\
Its procedures are each called with a single argument, WIN, the new window.\n\
This hook may be removed later since it is mostly redundant with the other\n\
two hooks, despite being invoked at a slightly different time. \n\
\n\
See also `before-new-window-hook' and `after-new-window-hook'.
[From src/add_window.c:120]


broadcast-config-hook (2 args)
- 
This hook is invoked whenever fvwm2 would call BroadcastConfig.\n\
This hook is principally of use in implementing the fvwm2\n\
module interface and for stuff that needs to be notified in ways that\n\
can't be done with the proper hooks that have been included so\n\
far. The procedures in this hook are passed two arguments: the event-type\n\
and the window object.
[From src/module-interface.c:40]


broadcast-hook (9 args)
- 
This hook is invoked whenever fvwm2 would call Broadcast.\n\
This hook is principally of use in implementing the fvwm2\n\
module interface and for stuff that needs to be notified in ways that\n\
can't be done with the proper hooks that have been included so\n\
far. The procedures in this hook are passed a numerical code\n\
representing the event type, a number that indicates how many of the\n\
following data arguments are meaningful, and 7 numeric data arguments.
[From src/module-interface.c:31]


broadcast-mini-icon-hook (2 args)
- 
This hook is invoked whenever fvwm2 would call BroadcastMiniIcon.\n\
This hook is principally of use in implementing the fvwm2\n\
module interface and for stuff that needs to be notified in ways that\n\
can't be done with the proper hooks that have been included so\n\
far. The procedures The procedures in this hook are passed two arguments:\n\
the event-type and the window object.
[From src/module-interface.c:56]


broadcast-name-hook (5 args)
- 
This hook is invoked whenever fvwm2 would call BroadcastName.\n\
This hook is principally of use in implementing the fvwm2\n\
module interface and for stuff that needs to be notified in ways\n\
that can't be done with the proper hooks that have been included so\n\
far. The procedures in this hook are passed an event type, three\n\
numeric data arguments, and a string.
[From src/module-interface.c:48]


change-desk-hook (2 args)
- 
This hook is invoked whenever the current desktop is changed.\n\
It is called with two argument, both integers.  The first is the\n\
new desktop number, the second is the old desktop number. It is\n\
called before the desk is changed.  See also `after-change-desk-hook'.
[From src/virtual.c:45]


client-message-hook (4 args)
- 
This hook is invoked whenever Scwm receives an X/11 client message.\n\
It is called with four arguments: the window, the message-type atom, the format (8, 16, or 32), \n\
and the vector of data.
[From src/events.c:222]


deiconify-hook (2 args)
- 
This hook is invoked when a window is deiconified.\n\
It is called with two arguments: WINDOW, WAS-ICONIFIED?.\n\
WINDOW is the window iconfied, and WAS-ICONIFIED? is\n\
a boolean telling whether the window was iconified previously.
[From src/icons.c:55]


desk-size-change-hook (2 args)
- 
This hook is invoked whenever the desk size is changed.  It is
called with two arguments, both integers, which are the width and
height of the new desk size in screens.
[From src/deskpage.c:49]


edge-enter-hook (1 args)
- 
This hook is invoked whenever the mouse pointer enters a screen edge.\n\
Procedures in the hook are called with one argument, one of the\n\
symbols 'north, 'south, 'east or 'west indicating which edge was\n\
entered.
[From src/virtual.c:63]


edge-leave-hook (1 args)
- 
This hook is invoked whenever the mouse pointer leaves a screen edge.\n\
Procedures in the hook are called with one argument, one of the\n\
symbols 'north, 'south, 'east or 'west indicating which edge was\n\
entered.
[From src/virtual.c:69]


edge-scroll-hook (0 args)
- 
This hook is invoked whenever an edge scroll takes place.\n\
Procedures in the hook are called with no arguments.
[From src/virtual.c:75]


error-hook (1 args)
- 
Called on all kinds of errors and exceptions.\n\
Whenever an error or other uncaught throw occurs on any callback,\n\
whether a hook, a mouse binding, a key binding, a menu entry, a file\n\
being processed, or anything else, error-hook will be invoked. Each\n\
procedure in the hook will be called with the throw arguments; these\n\
will generally include information about the nature of the error. 
[From src/callbacks.c:46]


iconify-hook (2 args)
- 
This hook is invoked when a window is iconified.\n\
It is called with two arguments: WINDOW, WAS-ICONIFIED?.\n\
WINDOW is the window iconfied, and WAS-ICONIFIED? is\n\
a boolean telling whether the window was iconified previously.
[From src/icons.c:49]


image-not-found-hook (1 args)
- 
Called with image name as a string when not found.
[From src/image.c:98]


interactive-move-finish-hook (1 args)
- 
This hook is invoked at the end of an interactive move.\n\
It is called with one argument, WINDOW.
[From src/move.c:62]


interactive-move-new-position-hook (3 args)
- 
This hook is invoked during an interactive move.\n\
It is called with three arguments, WINDOW, NEW-VP-X, and NEW-VP-Y,\n\
whenever the window is moved to a new location. The position refers\n\
to the position of the frame window (not the client window) in\n\
viewport coordinates.
[From src/move.c:55]


interactive-move-start-hook (1 args)
- 
This hook is invoked at the start of an interactive move.\n\
It is called with one argument, WINDOW.
[From src/move.c:51]


interactive-resize-finish-hook (1 args)
- 
This hook is invoked at the end of an interactive resize.\n\
It is called with one argument, WINDOW.
[From src/resize.c:56]


interactive-resize-new-size-hook (7 args)
- 
This hook is invoked during an interactive resize.  \n\
It is called with seven arguments, WINDOW, X-POSITION, Y-POSITION,\n\
NEW-WIDTH-PIXELS, NEW-HEIGHT-PIXELS, NEW-WIDTH-UNITS, and\n\
NEW-HEIGHT-UNITS whenever the window is changed to a new size.  The\n\
first five arguments refer to the size and position of the frame\n\
window (not the client window). The -UNITS arguments refer to the size\n\
of the client window and are in client units (e.g., characters for\n\
Emacsen and XTerms). 
[From src/resize.c:46]


interactive-resize-start-hook (3 args)
- 
This hook is invoked at the start of an interactive resize.\n\
It is called with three arguments: WINDOW, XMOTION, YMOTION.\n\
XMOTION and YMOTION are -1, 0, or 1, indicating motion in that dimension\n\
can happen on the right/bottom side, not at all, or the top/left side,\n\
respectively.
[From src/resize.c:39]


invalid-interaction-hook (0 args)
- 
This hook is invoked with no arguments when the user hits an invalid\n\
key or performs an invalid mouse action during an interactive\n\
operation like `interactive-resize' or `interactive-move'. `beep' is\n\
one example of a procedure to use here.
[From src/window.c:60]


load-processing-hook (1 args)
- 
This hook is invoked for every several top-level s-exps in the startup file.\n\
The hook procedures are invoked with one argument, the count of the\n\
s-expressions evaluated thus far. See also `set-load-processing-hook-frequency!'.
[From src/callbacks.c:54]


post-command-hook (2 args)
- 
This hook is invoked with two arguments after every `call-interactively' execution.\n\
The arguments are the procedure just called, and the list of the arguments passed.
[From src/callbacks.c:65]


pre-command-hook (2 args)
- 
This hook is invoked with two arguments before every `call-interactively' execution.\n\
The arguments are the procedure to be called, and a list of the arguments passed.\n\
Global variable `this-command' and `this-command-args' can be modified to change \n\
either of these.
[From src/callbacks.c:59]


scwm-test-hook-0 (0 args)
- 
Just a test hook that takes no arguments.\n\
See `scwm-run-test-hook-0'
[From src/miscprocs.c:41]


scwm-test-hook-1 (1 args)
- 
Just a test hook that takes one argument.\n\
See `scwm-run-test-hook-1'.
[From src/miscprocs.c:45]


select-window-done-hook (1 args)
- 
This hooks is run when a window is selected.\n\
The hook procedures are called with a single argument, the window just left.\n\
See also `select-window-enter-hook' and `select-window-leave-hook'.
[From src/window.c:85]


select-window-enter-hook (1 args)
- 
This hook is invoked when a window is entered during window selection.\n\
The hook procedures are called with a single argument, the window just entered.\n\
This hook is invoked once `select-window-interactively-no-message' is\n\
called if the pointer is already in a window.  (But the\n\
leave hook is not invoked similarly when the selection completes).
[From src/window.c:71]


select-window-leave-hook (1 args)
- 
This hook is invoked when a window is left during window selection.\n\
The hook procedures are called with a single argument, the window just left.\n\
This hook is not invoked upon selection completion (unlike\n\
`select-window-enter-hook' that is called initially upon calling\n\
`select-window-interactively-no-message'). See also `select-window-done-hook'.
[From src/window.c:78]


shutdown-hook (1 args)
- 
The procedures in shutdown-hook are before scwm quits or restarts.\n\
A single boolean argument is passed that is #t iff scwm is restarting.
[From src/shutdown.c:33]


startup-hook (0 args)
- 
The procedures in startup-hook are called with no arguments after scwm\n\
has processed the scwmrc and captured all application windows, and\n\
right before it enters the main event loop.  Note that during\n\
processing of the .scwmrc startup file, windows have not already been\n\
captured, so the window-list (as reported by `list-all-windows') is\n\
empty.  To provide behviour conditioned on a property of an existing\n\
window, this hook should be used instead.
[From src/shutdown.c:37]


viewport-position-change-hook (4 args)
- 
This hook is invoked whenever the viewport position is changed.\n\
It is called with four arguments, all integers.  The first two are \n\
the x and y coordinates of the new viewport position in pixels and\n\
the second two are the change in x and y from the previous position.
[From src/virtual.c:57]


vv-recognition-hook (3 args)
- 
This hook is invoked when ViaVoice recognizes a phrase. 
Called with 3 arguments: (was-accepted? phrase-string annotations-vector)
[From modules/viavoice/scwmviavoice.c:65]


window-close-hook (1 args)
- 
This hook is invoked whenever a scwm-managed window is closed.\n\
It is invoked on deletes, destroys, or for any reason that a window\n\
is closed. The hook procedures are invoked with one argument,\n\
WIN, the window being closed.  The WIN is still valid during the hook\n\
procedures.
[From src/add_window.c:143]


window-enter-hook (1 args)
- 
This hook is invoked whenever the mouse pointer enters a top-level window.\n\
It is called with one argument, the window object of the window just\n\
entered.
[From src/events.c:191]


window-focus-change-hook (1 args)
- 
This hook is invoked whenever the keyboard focus is changed.\n\
It is called with one argument, the window object of the window\n\
that now has the focus, or #f if no window now has the focus. \n\
See also `window-focus-lost-hook'.
[From src/events.c:185]


window-focus-lost-hook (1 args)
- 
This hook is invoked whenever the focus is lost on a window.\n\
It is called with one argument, the window object of the window\n\
that just lost the keyboard focus. See also `window-focus-change-hook'.
[From src/focus.c:47]


window-fully-obscured-hook (1 args)
- 
Invoked when window receives a VisibilityFullyObscured event.\n\
The hook procedures are invoked with one argument, the window object\n\
of the window that is now fully obscured.
[From src/events.c:201]


window-leave-hook (1 args)
- 
This hook is invoked whenever the mouse pointer leaves a top-level window.\n\
The hook procedures are invoked with one argument, the window object\n\
of the window just left.
[From src/events.c:196]


window-partially-obscured-hook (1 args)
- 
Invoked when window receives a VisibilityPartiallyObscured\n\
event.  The hook procedures are invoked with one argument, the window\n\
object of the window that is now partially obscured.  Beware that this\n\
event happens more often than you might expect and an action procedure\n\
attached here should be very careful about manipulating windows in a way\n\
that might cause more Visibility events.
[From src/events.c:206]


window-property-change-hook (4 args)
- 
This hook is invoked whenever a window property changes.
The hook procedures are invoked with four arguments, the window whose
property changed, the name of the changed property, the new value and
the old value.
[From src/winprop.c:37]


window-unobscured-hook (1 args)
- 
Invoked when window receives a VisibilityUnobscured event.\n\
The hook procedures are invoked with one argument, the window object\n\
of the window that is now fully visible. Beware that this\n\
event happens more often than you might expect and an action procedure\n\
attached here should be very careful about manipulating windows in a way\n\
that might cause more Visibility events.
[From src/events.c:214]


X-ConfigureRequest-hook (6 args)
- 
This hook is invoked upon ConfigureRequest events.\n\
The arguments are: '(win icon? x y width height) where win\n\
is the window requesting the configuration change, icon? is #t\n\
iff that window's icon is requesting the change, x, y, width,\n\
and height are either integers or #f to indicate that that\n\
aspect was not part of the configure request event. \n\
If `configure-request-handled' is #t after execution of the\n\
hook procedures, then no C-level handling of the request\n\
will be performed.
[From src/events.c:127]


X-DestroyNotify-hook (1 args)
- 
This hook is invoked upon DestroyNotify X events.\n\
It indicates a window was destroyed.  The hook procedures are\n\
invoked with one argument, WINID, the X id of the window that was destroyed. \n\
This hook is invoked for both the client window and the window frame\n\
IDs (i.e., twice per top-level window).  You probably want to use\n\
`window-close-hook' or `X-UnmapNotify-hook' instead.
[From src/events.c:165]


X-MappingNotify-hook (0 args)
- 
This hook is invoked whenever a MappingNotify X event is\n\
received. A MappingNotify event indicates a change of keymapping - in\n\
particular, it may indicate a change of available modifiers or mouse\n\
buttons. The hook procedures are invoked with no arguments.
[From src/events.c:159]


X-MapRequest-hook (1 args)
- 
This hook is invoked upon MapRequest X events.  It indicates a\n\
window is trying to map itself (add itself to the display).  The hook \n\
procedures are invoked with one argument, WIN, the window being mapped.  \n\
The WIN is valid during the hook procedures.
[From src/events.c:179]


X-PropertyNotify-hook (2 args)
- 
This hook is invoked whenever a PropertyNotify event is received\n\
for a window scwm is managing. This indicates that an X window\n\
property has changed. Watching for window property changes can be used\n\
to construct your own custom window manager protocols. The hook\n\
procedures are invoked with two arguments, the name of the property\n\
that changed (as a string) and the window that it changed for. See also\n\
`X-root-PropertyNotify-hook' but beware it gets passed different\n\
arguments.
[From src/events.c:138]


X-root-PropertyNotify-hook (2 args)
- 
This hook is invoked whenever a PropertyNotify event is received\n\
on the root window.  This indicates that an X window\n\
property has changed. Watching for window property changes can be used\n\
to construct your own custom window manager protocols, or interface\n\
to other desktop environments such as KDE or GNOME. The hook\n\
procedures are invoked with two arguments: the atom for the changed\n\
property and a boolean telling whether the property was deleted. \n\
These arguments are different from those passed to\n\
X-PropertyNotify-hook's procedures.
[From src/events.c:148]


X-SelectionNotify-hook (0 args)
- 
Called when there is no selection after a `X-convert-selection' request.
[From src/events.c:124]


X-UnmapNotify-hook (1 args)
- 
This hook is invoked upon UnmapNotify X events.  It indicates a\n\
window is being unmapped (removed from display).  The hook procedures\n\
are invoked with one argument, WIN, the window being destroyed.  The\n\
WIN is still valid during the hook procedures.
[From src/events.c:173]


