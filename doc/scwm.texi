\input texinfo @c -*- texinfo -*-
@setfilename scwm.info
@settitle scwm

@dircategory Scheme Programming
@direntry
* scwm::                               The Scheme Configurable Window Manager
@end direntry

@titlepage
@title SCWM
@subtitle The Scheme Configurable Window Manager
@subtitle Version 0.1
@subtitle June 1998
@author by Maciej Stachowiak and Greg J. Badros
@end titlepage

@ifinfo
@node Top, Scheme Procedures, ,
@top

This is the start of the scwm manual. It's not very complete or accurate
yet, but hopefully that will change.

This documentation is pretty old. Look at the SGML documentation for now
until we can figure out a way to generate texi from DocBook.

@menu
* Scheme Procedures:: SCWM Scheme procedure documentation
@end menu
@end ifinfo


@ifinfo
@node Scheme Procedures, , Top, Top
@end ifinfo


@chapter Scheme Procedures

The scwm configuration file is a Guile Scheme program. All of the usual
Guile procedures are available. In addition, the following
windowmanager-sepcific procedures have been implemented. See the sample
@file{system.scwmrc} file for examples. The fvwm2 man page may be
helpful for understanding some of the procedures or especially style
options until I write better documentation.

Documentation style:

A procedure documented as
@defun foo BAR BAZ #&optional QUUX XYZZY . ARGS
@end defun

is called @code{foo} and has required arguments @var{BAR} and @var{BAZ},
optional arguments @var{QUUX} and @var{XYZZY}, and accepts any variable
number of arguments beyond that. All the specifications follow this
pattern.

@section FONTS

@defun load-font FONTNAME

This loads a font specified by the string @var{FONTNAME} and returns a
font object. All proocedures which expect a font can take either a font
object or a string specifier (in which case they automatically call
load-font themselves) but it you want to use a font many times is more
efficient to do something like:
@lisp
(define helvetica
  (load-font "-adobe-helvetica-bold-r-*-*-14-*-*-*-*-*-*-*"))
@end lisp
@end defun

@defun font? OBJ
Returns @code{#t} if @var{OBJ} is a font object, else @code{#f}.
@end defun

@defun set-icon-font! FONT
@defunx set-window-font! FONT
@defunx set-menu-font! FONT
These set the icon, titlebar and menu fonts respectively.
@end defun

@section COLORS

@defun load-color COLORNAME
@code{load-color} basically works like @code{load-font}, except
@end defun

@defun color? OBJ
Returns @code{#t} if @var{OBJ} is a color object, else @code{#f}.
@end defun

@defun set-hilight-colors! #&optional FG BG
Sets the hilight @var{foreground} and @var{background} colors. If you
pass @code{#f} for either one, it is left unchanged.
@end defun

@defun set-menu-colors! #&optional FG BG STIPPLE
This sets the menu @var{foreground}, @var{background} and @var{stipple}
colors.  As above, @code{#f} indicates that the relevant color should not
be changed.
@end defun

@section BINDINGS

@defun bind-key CONTEXTS KEY-SPECIFIER PROC
This establishes a key binding. @var{CONTEXTS} specifies the context(s)
in which it will be in effect.  It can be one of the following symbols
or a list of several:

@code{window}, @code{title}, @code{icon}, @code{root}, @code{frame},
@code{sidebar}, @code{button-1}, @code{button-2}, @code{button-3},
@code{button-4}, @code{button-5}, @code{button-6}, @code{button-7},
@code{button-8}, @code{button-9}, @code{button-10}, @code{all}

Using @code{'all} as the context includes all of the others.

The key to bind is specified as a string, sort of emacs-style. Some
examples:

@code{"x"}, @code{"F1"}, @code{"C-x"}, @code{"M-space"}, @code{"C-M-a"}

Basically, you give a characer or a keysym prefixed by any combination
of @code{"C-"}, @code{"M-"} and @code{"S-"} representing Control, Meta
and Shift respectively. Other prefixes that emacs understands will be
implemented as soon as I understand what they do in emacs.

The @var{proc} is a Scheme procedure of no arguments. If the key binding =
is
invoked from within anywhere but the root window, the current window
context is set to the window it was invoked from. Window contexts are
explained in the section on window operations.
@end defun

@defun unbind-key CONTEXTS KEY-SPECIFIER
Removes the binding set for the specified @var{key} in the specified set
of @var{contexts}.
@end defun

@defun bind-mouse CONTEXTS BUTTON-SPECIFIER PROC
Works much like @code{bind-key} above, but binds to a mouse action. In
addition to possibly setting the @var{window context}, it also sets the
current mouse event type so that the type of mouse event can be
distiguished from the procedure. This is explained in the section on
@code{mouse-event-type} below.

Mouse @var{button specifiers} are either numbers or strings that consist
of a number with optional prefixes specifying modifier
keys. mouse-<number> may be used as well. Here are some valid mouse
specifiers:

1
2
"M-1"
"C-M-2"
"mouse-3"
"S-mouse-1"
@end defun

@defun unbind-mouse CONTEXTS BUTTON-SPECIFIER
Removes the binding set for the specified mouse event in the specified
set of @var{contexts}.
@end defun

@defun mouse-event-type
If called from code that was invoked by a mouse binding, it returns the
type of mouse event, one of @code{'motion} @code{'click}
@code{'one-and-a-half-clicks} or @code{'double-click}. This can be used
in conjunction with Scheme's @code{case} or @code{cond} special forms to
do different things based on the type of event. This functionality may
go away in favor of being able to bind any kind of mouse event type
separately.
@end defun

@defun bind-event EVENT PROC
Binds a special windowmanager event to some special action. Currently
defined events are:

@table @code
@item 'new-window
the procedure is called whenever a new window is created with no
arguments and with the new window as the current window context. It is
useful for specifying initial style options and parameters and such. It
is not reccomended to use this event directly; instead, see the
window-style procedure in the @code{(app scwm style)} module.

@item 'new-window-hint
this event works much like @code{'new-window} except that the procedure
is called much earlier in the window creation process. At this point
most normal window procedures won't work. However, some, such as those
that specify which position hints to obey and what type of placement to
use must be used this early in the creation process so that the window
can be put in the right place. This dichotomy is somewhat bogus and will
probably be fixed later. If you access this functionality through the
window-style procedure you shouldn't have to worry about this.
@end table
@end defun

@section MISCELLANEOUS SETTINGS

@defun set-menu-mwm-style! BOOL
Determines if menus are MWM style or FVWM style.
@end defun

@defun set-rubber-band-mask! INT
Sets the XOR mask value used for rubber-banding windows.
@end defun

@defun set-title-height! INT
Sets the height of the title-bar.
@end defun

@defun set-title-justify! SYM
Sets the title-bar justification. The symbol must be one of
@code{'left}, @code{'right} or @code{'center}.
@end defun

@defun set-click-time! INT
Sets the maximum time that must elapse after a mouse can be pressed and
not yet released that will still be interpreted as a click and not a
motion. The time is given in milliseconds. The default is 150.
@end defun

@defun set-colormap-focus! SYM
Sets the colormap focus style, either @code{'focus} or @code{'mouse}. In
the first case, the window with keyboard focus has the colormap focus,
in the other case, the colormap focus follows the mouse even if the
keyboard focus doesn't.
@end defun

@defun set-opaque-move-size! INT
Sets the largest window size that will be moved opaquely rather than
with rubber-banding, as percentage of screen size. 0 will make all
windows rubber-band when they move, while 100 will make all windows move
as solid. The default
@end defun

@defun  set-smart-placement-is-really-smart! BOOL
@defunx set-click-to-focus-passes-click! BOOL
@defunx set-click-to-focus-raises! BOOL
@defunx set-mouse-focus-click-raises! BOOL
@end defun

@defun set-animation! VECTOR

animation-ms-delay
@end defun

@section MISCELLANEOUS OPERATIONS

@defun refresh
Refreshes the whole screen.
@end defun

@defun pointer-position
Returns a list of the current x and y coordinates of the mouse cursor.
@end defun

@defun recapture
@end defun

@defun restart NEW-WM
@end defun

@defun wait-for-window PREDICATE
@end defun

@defun beep
My suggested definition in Scheme is not adequate for remote displays ---
the new (tiny) C implementation using @code{XBell} should take care of =
this.
@end defun

@section SYNTHETIC EVENTS

@defun move-pointer-to X Y
Moves the pointer to the absolute position @var{X}, @var{Y}.
@end defun

@defun send-button-press button modifier #&optional win button_press_p =
button_release_p propagate_p
@defunx send-key-press key #&optional win button_press_p button_release_p=
 propagate_p
Send synthetic button and key presses.
@end defun

@section WINDOWS

@defun window? OBJ
Returns @code{#t} if @var{OBJ} is a window object, else @code{#f}.
@end defun

@defun get-window #&optional USE_KILL_CURSOR USE_SELECT_WINDOW =
WAIT_FOR_RELEASE
Retrieves the current window context and returns the window object
representing it. If no window context is set, it lets the user select
a window by calling select-window. However, select-window is not
really implemented yet so it will actually return @code{#f} in this case.

The optional arguments are generally not needed in most user code.
@end defun

@defun select-window USE_KILL_CURSOR WAIT_FOR_RELEASE
Interactively selects a window.

The optional arguments are generally not needed in most user code.
@end defun

@defun current-window-with-focus
@defunx current-window-with-pointer
@end defun

@section WINDOW OPERATIONS

=46or all of these, the optional window argument defaults to the current
window context. This makes it convenient to bind window operations to
key or mouse events. It also means that in most cases, you won't need
to use the optional @var{W} argument, but sometimes it is needed.

@defun focus #&optional W
Give @var{W} the keyboard focus.
@end defun

@defun warp-to-window #&optional W
Warp the mouse pointer to the window @var{W}.
@end defun

@defun delete-window #&optional W
Delete @var{W}, in other words, close it politely. This may not always
work.
@end defun

@defun destroy-window #&optional W
Destroy @var{W}, in other words, close it rudely. This always works, but
will not give the application the chance to do special shutdown actions,
like asking for confirmation.
@end defun

@defun window-deletable? #&optional W
Returns @code{#t} if delete-window will work on @var{W}, else @code{#f}.
@end defun

@defun lower-window #&optional W
Lowers @var{W} to the bottom of the window stack.
@end defun

@defun raise-window #&optional W
Raises @var{W} to the top of the window stack.
@end defun

@defun raised? #&optional W
Returns @code{#t} if @var{W} is currently raised, else @code{#f}.
@end defun

@defun iconify #&optional W
Iconifies window @var{W}.
@end defun

@defun deiconify #&optional W
Deiconifies window @var{W}.
@end defun

@defun iconified? #&optional W
Determines if @var{W} is iconified.
@end defun

@defun stick #&optional W
``Sticks'' window @code{W}. This makes it remain in the same position on
the screen when desks or pages are switched.
@end defun

@defun unstick #&optional W
Reverses the effects of @code{stick}.
@end defun

@defun sticky? #&optional W
Determines if a window is currently ``sticky.''
@end defun

@defun window-shade #&optional W ANIMATED_P
Rolls up the window into just a title bar, like a window
shade.  Optionally animated.
@end defun

@defun un-window-shade #&optional W
Reverses the effect of @code{window-shade}.
@end defun

@defun window-shaded? #&optional W
Determines if the window is currently shaded.
@end defun

@defun move-to X Y #&optional W ANIMATED_P MOVE_POINTER_TOO_P
Moves the window to @var{X},@var{Y} on the current screen. The move can
optionally be animated and it is possible to also move the pointer.
@end defun

@defun interactive-move #&optional W
Begins an interactive move operation. The user can adjust the position
of the window with the mouse or arrow keys.
@end defun

@defun resize-to X Y #&optional W
Resizes the window to X by Y.
@end defun

@defun interactive-resize #&optional W
Begins an interactive resize operation. The user can adjust the position
of the window with the mosue or arrow keys.
@end defun

@defun refresh-window #&optional W
Refreshes the window, ensuring that its contents and decorations are up
to date and properly displayed.
@end defun

@defun move-window-to-desk DESK #&optional W
Moves the window to a new desk, specified by an integer.
@end defun

@defun keep-on-top #&optional W
Will raise the specified window and keep it on top of all other windows
unless it is explicitly lowered.
@end defun

@defun un-keep-on-top #&optional W
Negates the effects of @code{keep-on-top}.
@end defun

@defun kept-on-top? #&optional W
Determines if a window is under the influence of @code{keep-on-top}.
@end defun

@section WINDOW INFORMATION PROCEDURES

These procedures return various kinds of information about windows.
They can be useful in selecting only particular windows

@defun window-position #&optional W
@defunx window-size #&optional W
@defunx window-id #&optional W
@defunx window-desk #&optional W
@defunx window-title #&optional W
@defunx window-class #&optional W
@defunx window-resource #&optional W
@end defun

@defun list-all-windows
This returns a list of all of the windows currently being managed.
@end defun

@section WINDOW STYLE OPERATIONS

=46or most of these procedures, it is reccomended to access the relevant
functionality through the @code{window-style} or @code{style-one-window}
procedures rather than the given procedures. The working and arguments
can generally be deduced from the corresponding style option. Further

@defun show-titlebar #&optional W
@defunx hide-titlebar #&optional W
@defunx titlebar-shown? #&optional W
@defunx normal-border #&optional W
@defunx plain-border #&optional W
@defunx border-normal? #&optional W
@defunx set-border-width! WIDTH #&optional W
@defunx stick-icon #&optional W
@defunx unstick-icon #&optional W
@defunx icon-sticky? #&optional W
@defunx set-icon-box! X Y W H BOOL #&optional W
@end defun

@defun set-window-focus! SYM #&optional W
available are:
@table @code
@item 'click
must click on the window to focus.

@item 'mouse
the window gains focus as the mouse enters or leaves.

@item 'sloppy
the window gains focus as the mouse enters, but does not
lose it if the pointer enters the root window, or a window
with @code{'click} or @code{'none} focus.

@item 'none
don't ever give this window focus, even if it is clicked.
@end table
@end defun

@defun set-window-colors! #&optinal FG BG W
@defunx set-icon-title! STRING #&optional W
@defunx set-random-placement! BOOL #&optional W
@defunx set-smart-placement! BOOL #&optional W
@defunx set-window-button! NUM BOOL #&optional W
@defunx set-mwm-buttons! BOOL #&optional W
@defunx set-mwm-border! BOOL #&optional W
@defunx set-icon! BOOL-OR-STRING-OR-IMAGE #&optional W
@defunx set-mini-icon! BOOL-OR-STRING-OR-IMAGE #&optional W
@end defun

@defun set-hint-override! BOOL #&optional W
@defunx set-decorate-transient! BOOL #&optional W
@defunx set-mwm-decor-hint! BOOL #&optional W
@defunx set-mwm-func-hint! BOOL #&optional W
@defunx set-PPosition-hint! BOOL #&optional W
@defunx set-OL-decor-hint! BOOL #&optional W
@defunx set-start-on-desk! DESK #&optional W
@defunx set-skip-mapping! BOOL #&optional W
@defunx set-lenience! BOOL #&optional W
@end defun

@section MENUS

@defun menu? OBJ
Returns @code{#t} if @var{OBJ} is a menu object, else @code{#f}.
@end defun

@defun make-menu TITLE [(list NAME PROC-OR-MENU)|@code{'title}|@code{'separator}] ...
Creates a menu object.  The first argument is a string that is the menu
title, however, the title is not necessarily displayed unless so
specified.  Arguments are successively one of @code{'title},
@code{'separator}, or a list of a string and a either procedure of no
arguments or another menu object.  Respectively, these result in a
title, a separator bar, or an entry that will call the procedure when
selected, or display the menu as a submenu.  It is reccomended that an
actual menu object be specified for submenus rather than a procedure
which uses popup to display the menu, because
@end defun

@defun popup MENU #&optional STICK?
Pops up the menu. If @var{stick} is specified, it determines if the menu
stays up when the mouse is released, assuming it was started in response
to a mouse click. The default is @code{#f}.
@end defun

@section IMAGES

@defun make-image NAME
Creates a Scheme image object loaded from the first file found in the
image path that matches @var{NAME}.
@end defun

@defun set-image-path! PATH
Paths are specified as strings that contain a colon-delimited list of
directories.  This will change, as they obviously should be lists,
preferably in an ordinary scheme variable.
@end defun

@section VIRTUAL DESKTOP

@defun set-current-desk! DESK
@defunx set-viewport-position! X Y
@defunx set-edge-scroll! X Y
@defunx set-edge-wrap! X Y
@defunx set-edge-resistance! SCROLL-RESISTANCE MOVE-RESISTANCE
@defunx set-desk-size! X Y
@defunx display-size
@defunx desk-size
@defunx viewport-position
@defunx current-desk
@end defun

@section DECORS

@defun make-decor #&optional NAME
@defunx default-decor
@defunx set-current-decor! DECOR
@defunx current-decor
@defunx set-window-decor! DECOR #&optional WINDOW
@end defun

@section FACES

@defun make-face FLAGS SPECS
@defunx set-title-face! ACTIVE_UP_FACE #&optional ACTIVE_DOWN_FACE =
INACTIVE_FACE
@defunx set-button-face! NUM ACTIVE_UP_FACE #&optional ACTIVE_DOWN_FACE =
INACTIVE_FACE
@defunx set-button-mwm-flag! NUM BOOLEAN
@defunx set-border-face! ACTIVE_FACE #&optional INACTIVE_FACE
@end defun

@section PROCEDURES IN SCHEME

These procedures are written and scheme and are there to provide a
friendlier interface to the builtins.

These two are always available because they are defined in the default
rc code that's built into the binary. They do not accept an optional
window argument since they are meant to be used with mouse or key
bindings and depend on the mouse event type.

@defun resize-or-raise
Always raise the window, resize it interactively if the mouse is
moved, and lower on a double-click.
@end defun

@defun move-or-raise
Always raise the window, move it interactively if the mouse is
moved, and lower on a double-click.
@end defun

@chapter Modules
The rest of the operations are available in modules. Each set is
prefaced with the proper module name.

@section MODULE (app scwm base)

@defun %x x
@var{x} is treated as a precentage of the horizontal screen size and the
proper value in pixels is returned. This is useful for writing @file{rc}
files that don't depend too much on the display size for reasonable
placement.
@end defun

@defun %y y
Just like @code{%x}, but for the vertical direction.
@end defun

@defun x- x
@defunx y- y
@defunx %x- x
@defunx %y- y
@end defun

@defun w%x x #&optional w
@defunx w%y y #&optional w
These work like @code{%x} and @code{%y} but give a percentage of the
dimensions of the given window.
@end defun

@defun execute command
Executes a shell @code{command} as a separate process, for example
@code{(execute "xterm")} or
@code{(execute "cat ~/some-file | grep pattern")} or whatever.
@end defun

@defun set-menu-foreground! fg
@defunx set-menu-background! bg
@defunx set-menu-stipple! st
These set only one of the menu color components. They may go away
since the @code{menu-style} interface is more useful.
@end defun

@defun set-window-foreground! fg #&optional w
@end defun
@defun set-window-background! bg #&optional w
@end defun

@defun move-pointer x y
Moves the mouse pointer relative to the current position
(@code{move-pointer-to} moves it absolutely).
@end defun

@defun move-viewport x y
Moves the viewport relatively (@code{set-viewport-position!} does it absolutely)
@end defun

@defun menu-style #&key fg foreground bg background stipple font mwm =
mwm-style
This is a general-purpose interface for setting various things that
relate to menus. It is called with keyword-value pairs like so:
@lisp
(menu-style #:fg "red" #:background "black" #:mwm #t)
@end lisp

This example sets the foreground to red, the background to black, and
the mwm-style to true. The keywords available are:
@table @code
@item #:foreground
@itemx #:fg
foreground color
@item #:background
@itemx #:bg
background color
@item #:stipple
stipple color
@item #:font
font
@item #:mwm-style
@itemx #:mwm
mwm style. If true, menus are ``mwm style'', else they are ``fvwm =
style''.
@end table
@end defun

@defun simple-title-style #&key font height justify
This is a similar interface to the above. The available keywords are

@table @code
@item #:font
the titlebar font
@item #:height
the titlebar height
@item #:justify
the justification - @code{'left}, @code{'right} or @code{'center}.
@end table
@end defun

@section MODULE (app scwm winops)

This is a collection of extra window operations. Like the standard
window operations, they default to the current window context if the
window is not specified.

@defun make-toggling-winop pred neg pos
This can be used to define toggling window operations easily. you pass a
@var{predicate} which determines if the window has been affected, then a
@var{procedure} which undoes the operation, then one which does it, and
a procedure is returned which will do a toggling version of the effect.
@end defun

@defun close-window #&optional W
Delete the window if possible, otherwise destroy it.
@end defun

@defun toggle-raise #&optional W
Raise the window if it is not already on top. If it is, lower it.
@end defun

@defun toggle-iconify #&optional W
Iconify the window if it isn't already, else deiconify it.
@end defun

@defun toggle-stick #&optional W
Stick the window if it isn't already, else unstick it.
@end defun

@defun toggle-window-shade #&optional W
window-shade the window if it isn't already, else un-window-shade it.
@end defun

@defun maximize nw nh #&optional W
Maximizes the window to size nw by nh. If either of nw or nh is 0, the
size in that direction will not be changed. Also, a window maximized
vertically will be moved to the top edge of the display, and a window
maximized horizontally will be moved to the left edge.
@end defun

@defun maximized? #&optional W
Determines if the window is maximized.
@end defun

@defun unmaximize #&optional W
Unmaximizes the window if it is maximized, restoring it to its size
and position previous to any maximize operations.
@end defun

@defun toggle-maximize nw nh #&optional W
A toggling version of maximize.
@end defun

@defun print-window #&optional W
Prints a screen dump of the selected window.
@end defun

@defun menu-title
@defunx menu-separator
@defunx menu-item menu-item name #&key above-pixmap left-pixmap action
@end defun

@section MODULE (app scwm winlist)

This module includes procedures for manipulating the window list.

@defun default-winlist-proc #&optional w
This is the normal default window list procedure. It deiconifies,
focuses and raises the window, then warps the pointer to a convenient
point inside it.
@end defun

@defvar window-list-proc
This varibale holds the procedure that will be applied by default to the
window selected from the window list menu.  It is normally
@code{default-winlist-proc}, but you can @code{set!} it to something
else to make that the default behavior.
@end defvar

@defun list-windows #&key only except
This works like @code{list-all-windows} but allows you to specify
additional conditions on the windows returned. The @code{#:only} and
@code{#:except} keyword parameters may be specified to achieve
this. Either should be followed by a predicate or list of
predicates. The windows returned are those that satisfy all of the
@code{#:only} predicates but none of the @code{#:except} predicates.
@end defun

@defun winlist-skip
@defunx winlist-hit
@defunx winlist-skip?
@end defun

@defun show-window-list-menu #&key only except proc show-geometry
This procedure shows a menu that lists the title of every suitable
window, and takes an action on the appropriate window if one is
selected. Here is the meaning of the keywords:

@table @code
@item #:only
as above with @code{list-windows}; show only those windows that satisfy
the predicate or predictes given.
@item #:except
as above with @code{list-windows}; show only those windows that do not
satisfy the predicate or predictes given.
@item #:proc
apply this procedure to the window selected to the menu.  defaults to
@code{window-list-proc}.
@item #:show-geometry
If @code{#t}, will show the window geometry in addition to
titles. Defaults to @code{#f}.
@end table
@end defun

@defun  circulate-skip #&optional w
@defunx circulate-hit #&optional w
@defunx circulate-skip? #&optional w
@defunx circulate-skip-icon #&optional w
@defunx circulate-hit-icon #&optional w
@defunx circulate-skip-icon? #&optional w
@defunx should-circulate-skip? #&optional w

@defunx next-window #&key window only except proc
@defunx prev-window #&key window only except proc

These procedures do something useful to the next or previous window in
the window list. They are most useful for implementing circulation of
the window list with the keyboard. Here is the meaning of the keywords:

@table @code
@item #:window
start going forward or back in the window list from the
specified window; defaults to the current window context.
@item #:only
as above with @code{list-windows}; show only those windows that
satisfy the predicate or predictes given.
@item #:except
as above with @code{list-windows}; show only those windows that
do not satisfy the predicate or predictes given.
@item #:proc
apply this procedure to the window selected to the menu.
defaults to @code{window-list-proc}.
@end table
@end defun

This module also adds these style options:

@table @code
@item #:winlist-skip
skip this window in the window list menu
@item #:circulate-skip
#t/#f, skip this window when circulating with @code{next-window} or
@code{prev-window}, or not.
@item #:circulate-skip-icon
@code{#t}/@code{#f}, skip this window when circulating with =
@code{next-window}
or @code{prev-window}, or not.
@end table

@section MODULE (app scwm wininfo)

This module provides additional predicates and generally informative
procedures for finding out stuff about windows.

@defun  on-desk? n #&optional w
@defunx on-desk-n? n
@defunx on-current-desk? #&optional w
@defunx in-viewport-any-desk? #&optional w
@defunx visible? #&optional w
@end defun

@defun geometry-string #&optional w
@end defun

@defun wildcard-matcher wildcard #&key full-regexp regexp-oprions
Returns a procedure that takes one optional window argument (which
defaults to the current window context) and which will determine
@end defun

@defun wildcard-match? wildcard #&optional w
@end defun

@section MODULE (app scwm optargs)

This module provides the interface for optional and keyword arguments
used by the other modules. It does not rely on any scwm-specific
functionality and can be used by any Guile script - in theory. I do
not reccomend using it in random programs because Guile will probably
have its own interface for optional and keyword arguments to Scheme
procedures some day. For this reason, the only complete documentation
is in the file optargs.scm itself. If you really want procedures with
optional or keyword arguments, take a look at some of the scheme
modules to see how it's done.

@section MODULE (app scwm style)

Styles let you specify how the look and feel of given windows starts
out. Most of the styles (those dealing with initial placement and
windowmanager hints) can also be set with interactive procedures. In
some cases,

@defun make-style . args
This creates a style that can be used with the @code{#:use-style} option
of the style commands. It's really just a cons cell but it's poor to
depend on that. The arguments can be any of the options accepted by the
@code{window-style} command (see below).
@end defun

@defun style-one-window w . args
This applies a style to a single window. The arguments can be any of the
options accepted by the @code{window-style} command (see below).
@end defun

@defun window-style condition . args
This establishes a style that is applied to current and future windows,
much like the fvwm Style command. @var{condition} can be a predicate
that takes a window as an argument in which case all current and future
windows that satisfy the predicate will be styled; a string, in which
case all present and future windows that wildcard-match the string (see
@code{wildcard-match} above) will be styled; or @code{#t}, in which case
all future and present windows will be matched.  Of course, @code{"*"}
has the same effect as @code{#t}, and is even special-cased to be
equally efficient, so the choice between these is a matter of style. The
remaining args are keywords alternating with values.  The available
keywords can be extended by the user, but many standard ones are
defined. Styles defined by @code{window-style} are applied to new
windows in the order in which they are defined.  Also, unlike most
procedures that take keyword options, the same key may be specified more
than once.  The keys are processed in order, so the last one of a
conflicting pair is the one that will take effect.
@end defun

@defun add-window-style-option key handler
@defunx add-boolean-style-option key t-handler f-handler
@defunx add-window-hint-option key handler
@defunx add-boolean-hint-option key t-handler f-handler

These procedures let you define your own style options. The following
style options are predefined:

@table @code
@item #:border-width
the number given will be used as the width of the window's border --- a
small or 0 border-width, possible combined with @code{#:no-titlebar} or
@code{#:plain-border} can make ``utility'' windows that you don't want
to move around or resize very much relatively unobtrusive.
@item #:background
specify a color or string
@item #:bg
synonym for @code{#:background}
@item #:foreground
specify a color or string that will be used as the forground color of
windows using this style.
@item #:fg
synonym for @code{#:foreground}
@item #:focus
sets the window's focus style, @code{'click}, @code{'mouse},
@code{'sloppy} or @code{'none}.
@item #:plain-border
if @code{#t}, makes the window have a plain border with no resize
handles in the corner --- like NoHandles
@item #:icon-title
sets the title of the window's icon to the specified string.
@item #:icon-box
a list of four numbers represents the x, y, width and height parameters
of the icon box used for this window.
@item #:sticky-icon
@code{#t}/@code{#f} makes the window's icon (only) sticky or not.
@item #:start-iconified
@code{#t}/@code{#f}, makes the window start iconified or not.
@item #:kept-on-top
if @code{#t}, makes the window start as if keep-on-top had been called
on it, in other words, it stays on top,
@item #:sticky
@code{#t} or @code{#f}, determines if the window starts sticky or not.
@item #:no-titlebar
@code{#t}/@code{#f}, makes the window lack or have a titlebar
respectively.
@item #:mwm-buttons
use mwm buttons --- particular buttons should have their beveling
inverted when the window is maximized. This does not currently work.
@item #:mwm-border
@code{#t} or @code{#f}, determines if the border is mwm style or not.
An mwm-style border has shallower insets than a normal one.
@item #:icon
@code{#t}, @code{#f} or a string that specifies an icon.  If @code{#f},
the window will have no icon.  If @code{#t}, it will have one, but what
it will be is unspecified. If a string, the bitmap or pixmap specified
will be used as the icon.
@item #:mini-icon
@code{#t} or @code{#f} or a string that specifies a mini-icon. As above.
@item #:random-placement
if @code{#t}, windows with this style will always be placed
non-interactively, otherwise they will be sometimes placed interactively
if the placement algorithms fail.
@item #:smart-placement
if @code{#t}, windows with this style will be placed in an empty place
on the screen if they'd require user interaction to place, if no such
place is found they are placed according to the value of
smart-placement.
@item #:button
specifies that the button identified by the given number will be drawn
for the window. Currently doesn't really work very well.
@item #:no-button
specifies that the button identified by the given number will not be
drawn for the window. Currently doesn't really work very well.
@item #:hint-override
if mwm-function hints are used, this
@item #:decorate-transient
@code{#t} or @code{#f}, decorate transient windows or not.
@item #:mwm-decor-hint
@code{#t} or @code{#f}, follow mwm decoration hints or not.
@item #:mwm-func-hint
@code{#t} or @code{#f}, follow mwm function hints or not.
@item #:PPosition-hint
@code{#t}/@code{#f}, use the PPosition hint or not.
@item #:OL-decor-hint
@code{#t}/@code{#f}, use the OpenLook window manager hints or not.
@item #:start-on-desk
makes the window start on the specified desk. If @code{#f}, it can start
on any desk.
@item #:skip-mapping
@code{#t} or @code{#f}, change to the windows's desk while it is mapping
or not.
@item #:lenience
@code{#t} or @code{#f}; if @code{#t}, ignore window manager hints that
say the window should never get the input focus, otherwise obey them.
@item #:use-style
use a style created with make-style.
@c ;; use-decor not implemented for now
@end table

Here are some extra style options not available in fvwm:

@table @code
@item #:start-maximized
takes @code{#f} or a list of two numbers. In the former case, the window
does not start maximized, in the latter case it is maximized
horizontally and/or vertically as specified by the numbers.

@item #:start-lowered
@code{#t} or @code{#f} --- sick of your windows starting on top of
everything? Make them start out lowered with this handy option.

@item #:start-window-shaded
@code{#t} or @code{#f}, make the window start window-shaded (as per
window-shade) or not.

@item #:other-proc
lets you specify an additional procedure to apply to the window after it
is created.

@item #:other-hint-proc
lets you specify an additional procedure to apply to the window when
hints are being processed.
@end table
@end defun

@section MODULE (app scwm decor)

@defun call-with-decor decor thunk
@end defun

@deffn Macro with-decor decor . body
Adds @code{#:use-decor} style option
@end deffn

@section MODULE (app scwm face)

@defun title-style . args
@defunx border-style . args
@defunx button-style num . args
@end defun

@section MODULE (app scwm fvwm-compat)

@defun fvwm-exec-use-shell #&optional shell
@defunx fvwm-exec command
@defunx fvwm-none thunk #&key only except
@defunx fvwm-pipe-read command
@defunx fvwm-nop . args
@end defun

@unnumbered Variable Index
@printindex vr

@unnumbered Function Index
@printindex fn

@bye

