<!DOCTYPE Book PUBLIC "-//Davenport//DTD DocBook V3.0//EN"
  [
     <!ENTITY % DocEntities PUBLIC
       "-//MSU-PGRT//ENTITIES Documentation//EN">
     %DocEntities;
  ]
>
<book>
  <bookinfo>
    <title>
      <productname>&PGRT; Tool Integration Environment (&PGRT;-TIE) Reference Manual</productname>
    </title>
    <author>
      <firstname>Aleksandar</firstname>
      <surname>Baki&cacute;</surname>
      <affiliation>
	<shortaffil>MSU</shortaffil>
	<jobtitle>Graduate Research Assistant</jobtitle>
	<orgname>Michigan State University</orgname>
	<orgdiv>Department of Computer Science</orgdiv>
	<address>
	  <city>East Lansing</city>
	  <state>Michigan</state>
	  <postcode>48824</postcode>
	  <country>U.S.A.</country>
	  <email>bakicale@cps.msu.edu</email>
	</address>
      </affiliation>
    </author>
    <releaseinfo>Release 1.0</releaseinfo>
    <pubdate>July 15, 1998</pubdate>
    <copyright>
      <year>1996&ndash;1998</year>
      <holder>MSU Board of Trustees</holder>
    </copyright>
  </bookinfo>
  <chapter>
    <title>Main Module</title>

    <para>Module <literal>(pgrt main)</literal> defines functions that are used by the other modules of the &PGRT;-TIE environment. Some of them are just renamed standard Scheme or GUILE procedures, for convenience, while the others are relatively simple utility functions.</para>

    <para>See also the &R5RS; or &R4RS; standard and <ulink url="http://www.red-bean.com/guile/docs/">GUILE (<literal>http://www.red-bean.com/guile/docs/</literal>)</ulink> User's and Programmer's manuals.</para>
    <sect1>
      <title>Convenience Functions</title>
      <synopsis>(use-modules (pgrt main))</synopsis>

      <para>These functions are either very primitive ones or just renamed simple GUILE Scheme procedures.</para>
      <refentry>
	<refnamediv>
	  <refname>bool->string</refname>

	  <refpurpose>Converts a Scheme Boolean to a string (Tk-compatible Boolean).</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(bool->string val)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>val</parameter></term>
		<listitem>
		  <para>A Scheme Boolean value (either <literal>#t</literal> or <literal>#f</literal>).</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>If <parameter>val</parameter> is <literal>#t</literal>, <function>bool->string</function> returns <literal>"1"</literal>. If <parameter>val</parameter> is <literal>#f</literal>, <function>bool->string</function> returns <literal>"0"</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>This function is added for passing Boolean values to Tk.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(bool->string #t)</programlisting> returns <literal>"1"</literal>.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>fork</refname>

	  <refpurpose>A wrapper for POSIX <function>fork</function> system call.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(fork)</synopsis>
	  <refsect2>
	    <title>Parameters</title>

	    <para>None.</para>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>fork</function> renames GUILE's <function>primitive-fork</function> for convenience. It creates a new process with the same core image as the current process. <function>fork</function> returns <literal>#f</literal> upon failure; otherwise, the child gets a return value of <literal>0</literal>, and the parent gets the child's pid.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>This function depends on future GUILE development. Note that the child process will use the same file descriptors as the parent by default.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>The following code dispatches program <filename>my_prog</filename> and proceeds without waiting for it to terminate.</para>

	  <para><programlisting>(if (= 0 (fork))
  (apply execpl '("my_prog" "my_prog")))</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>basename</refname>

	  <refpurpose>Trims the directory of a full-path filename.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(basename filename)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>filename</parameter></term>
		<listitem>
		  <para>The filename.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>basename</function> uses a regular expression to match the part of <parameter>filename</parameter> after the rightmost <literal>/</literal>. If successful, returns the result of matching. Otherwise returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(basename "/usr/bin/GUILE")</programlisting> returns <literal>"GUILE"</literal>.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>forced-display</refname>

	  <refpurpose>Calls <function>display</function> and flushes current output port.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(forced-display datum)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>datum</parameter></term>
		<listitem>
		  <para>The datum to be displayed using <function>display</function>.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>forced-display</function> is same as <function>display</function>, except that it calls <function>force-output</function> after displaying its parameter.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>This function is supposed to be used for debugging purposes.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(forced-display my-variable)</programlisting> displays the value of <literal>my-variable</literal> and flushes the output buffer.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>list-set!</refname>

	  <refpurpose>Binds a value to an element of a list.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(list-set! lst ind val</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>lst</parameter></term>
		<listitem>
		  <para>The list to be updated "in place."</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>ind</parameter></term>
		<listitem>
		  <para>The index of the element to be assigned the new value.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>val</parameter></term>
		<listitem>
		  <para>The value to be assigned to the element.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>list-set!</function> combines <function>set-car!</function> and <function>list-tail</function> to bind <parameter>val</parameter> to the <parameter>ind</parameter>-th element of <parameter>lst</parameter>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>This function creates a side-effect, i.e., it modifies its argument.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>If <parameter>lst</parameter> is <literal>'(1 2 3 4)</literal>, the following call</para>

	  <para><programlisting>(list-set! lst 2 'a)</programlisting></para>

	  <para>will change <parameter>lst</parameter> to <literal>'(1 2 a 4)</literal>.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>l-r, l-s!, v-r, v-s!</refname>

	  <refpurpose>Synonyms for <function>list-ref</function>, <function>liset-set!</function>, <function>vector-ref</function>, and <function>vector-set!</function>, respectively.</refpurpose>
	</refnamediv>
	<refsect1>
	  <title>Description</title>

	  <para>See the reference for <function>list-set!</function> and &R4RS; or &R5RS; document.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>list-index</refname>

	  <refpurpose>Returns the index of an element of a list.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(list-index lst elt)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>lst</parameter></term>
		<listitem>
		  <para>A list.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>elt</parameter></term>
		<listitem>
		  <para>The element whose index within <parameter>lst</parameter> is to be computed.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>If <parameter>elt</parameter> is an element of <parameter>lst</parameter>, i.e., it is equal in the sense of <function>equal?</function> to an element of <parameter>lst</parameter>, then <function>list-index</function> returns its position within <parameter>lst</parameter>. Otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>The following code returns <literal>1</literal>.</para>

	  <para><programlisting>(list-index '(1 a 2 "b") 'a)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>nth</refname>

	  <refpurpose>Returns n-th element of a list.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(nth n lst)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>n</parameter></term>
		<listitem>
		  <para>The index of the element to be returned.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>lst</parameter></term>
		<listitem>
		  <para>A list.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>If successful, <function>nth</function> returns the <parameter>n</parameter>-th element of <parameter>lst</parameter>. If <parameter>lst</parameter> is empty or <parameter>n</parameter> is negative or larger than the length of <parameter>lst</parameter>, <function>nth</function> returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>
	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>The following code returns <literal>"b"</literal>.</para>

	  <para><programlisting>(nth 2 '(a 1 "b" 2))</programlisting></para>
	</refsect1>
      </refentry>
    </sect1>
    <sect1>
      <title>Associative Databases</title>

      <para>These functions allow a programmer to maintain association lists (lists of key-value pairs) with keys being numbers (functions with prefix <literal>id-</literal>) or strings (functions with prefix <literal>alias-</literal>). They are used at various places in &PGRT;-TIE components for maintaining small associative databases.</para>

      <para>See also SLIB manual, the section on data structurs.</para>
      <refentry>
	<refnamediv>
	  <refname>id-put</refname>

	  <refpurpose>Adds/replaces a key-value pair to an association list.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(id-put alst key val)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>alst</parameter></term>
		<listitem>
		  <para>The association list to be added/replaced the key-value pair.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>key</parameter></term>
		<listitem>
		  <para>A number, the key under which <parameter>val</parameter> will be stored in <parameter>alst</parameter>.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>val</parameter></term>
		<listitem>
		  <para>The value associated with <parameter>key</parameter>.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>id-put</function> takes a possibly empty association list <parameter>alst</parameter> and stores a pair consisting of <parameter>key</parameter> and <parameter>val</parameter> into it. If <parameter>alst</parameter> already contains data with the same key, that data is lost. <function>id-put</function> then returns the new association list. For key equality testing, predicate <function>=</function> is used.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>This function does not have side effects. In order to modify an association list, code like in the example below should be used.</para>

	  <para>The items in an association list are <emphasis>not</emphasis> sorted by key.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>If <literal>my-alist</literal> is an association list with numeric keys, the following code will add <literal>'(15 . ("a" "list" "of" "words")</literal>, by possibly losing existing data associated with key <literal>15</literal>, to <literal>my-alist</literal></para>

	  <para><programlisting>(set! my-alist (id-put my-alist 15 ("a" "list" "of" "words")))</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>id-get</refname>

	  <refpurpose>Obtains data associated with a key from an association list.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(id-get alst key)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>alst</parameter></term>
		<listitem>
		  <para>The association list in which to search for data.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>key</parameter></term>
		<listitem>
		  <para>The key (a number) under which to search.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>id-get</function> returns data in <parameter>alst</parameter> associated with <parameter>key</parameter> if successful. Otherwise, it returns <literal>#f</literal>. For key equality testing, predicate <function>=</function> is used.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>If <literal>my-alist</literal> contains key-value pairs representing a few non-negative numbers and their names, namely it is <literal>'((0 . "Zero") (1 . "One") ...)</literal>, the following function takes a non-negative number and returns its name if it is found in <literal>my-alist</literal>.</para>

	  <para><programlisting>(define (the-name-of n)
  (id-get my-alist n))</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>id-rem</refname>

	  <refpurpose>Removes a key-value pair from an association list.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(id-rem alst key)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>alst</parameter></term>
		<listitem>
		  <para>The association list from which the key-value pair is to be removed.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>key</parameter></term>
		<listitem>
		  <para>The key (a number) under which to search.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>id-rem</function> returns a new association list, from which key-value pair with the key equal to <parameter>key</parameter> is possibly removed. If there is no data stored under <parameter>key</parameter>, <parameter>alst</parameter> is returned. For key equality testing, predicate <function>=</function> is used.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>If <literal>my-alist</literal> is <literal>'((1 . a) (2 . b))</literal> and the following code is executed</para>

	  <para><programlisting>(id-rem my-alist 2)</programlisting></para>

	  <para>it will return <literal>'((1 . a))</literal>.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>id=?</refname>

	  <refpurpose>An association function corresponding to predicate <function>=</function>.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(id=? key alst)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>key</parameter></term>
		<listitem>
		  <para>The key (a number) under which to search.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>alst</parameter></term>
		<listitem>
		  <para>An association list.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>id=?</function> returns a key-value pair whose key is equal in the sense of <function>=</function> to its first argument. If there is no data with key equal to <parameter>key</parameter> in <parameter>alst</parameter>, <literal>#f</literal> is returned.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>If <literal>my-alist</literal> is <literal>'((1 . a) (2 . b))</literal>, then the call</para>

	  <para><programlisting>(id=? 2 my-alist)</programlisting></para>

	  <para>returns pair <literal>'(2 . b)</literal>.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>id-index</refname>

	  <refpurpose>Returns the index of a key-value pair in an association list.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(id-index alst key)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>alst</parameter></term>
		<listitem>
		  <para>An association list.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>key</parameter></term>
		<listitem>
		  <para>The key (a number) under which to search.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>id-index</function> returns the position (index) of a key-value pair whose key is equal, in the sense of <function>=</function>, to <parameter>key</parameter>. If there is no such pair, <literal>#f</literal> is returned.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>Key-value pair in an association list are not sorted by key.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>If <literal>my-alist</literal> is <literal>'((1 . a) (2 . b))</literal>, then the call</para>

	  <para><programlisting>(id-index my-alist 2)</programlisting></para>

	  <para>returns <literal>1</literal>.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>id&lt;?</refname>

	  <refpurpose>Compares numeric keys of two key-value pairs.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(id&lt;? pair-1 pair-2)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>pair-1</parameter></term>
		<listitem>
		  <para>A key-value pair whose key is a number.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>pair-2</parameter></term>
		<listitem>
		  <para>A key-value pair whose key is a number.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>This function compares the keys of <parameter>pair-1</parameter> and <parameter>pair-2</parameter> using <function><</function>, and returns <literal>#t</literal> or <literal>#f</literal> (depending on the result of the comparison).</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>The following code processes key-value pairs from <literal>my-alist</literal> ordered by key (a key is a number).</para>

	  <para><programlisting>(alist-for-each
  (lambda (key value)
    (process key value))
  (sort my-alist id&lt;?))</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>alias-put</refname>

	  <refpurpose>Adds/replaces a key-value pair to an association list.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(alias-put alst key val)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>alst</parameter></term>
		<listitem>
		  <para>The association list to be added/replaced the key-value pair.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>key</parameter></term>
		<listitem>
		  <para>A string (alias), the key under which <parameter>val</parameter> will be stored in <parameter>alst</parameter>.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>val</parameter></term>
		<listitem>
		  <para>The value associated with <parameter>key</parameter>.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>alias-put</function> takes a possibly empty association list <parameter>alst</parameter> and stores a pair consisting of <parameter>key</parameter> and <parameter>val</parameter> into it. If <parameter>alst</parameter> already contained data with the same key, that data is lost. <function>alias-put</function> then returns the new association list. For key equality testing, predicate <function>string-ci=?</function> is used.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>This function does not have side effects. In order to modify an association list, code like in the example below should be used.</para>

	  <para>The items in an association list are <emphasis>not</emphasis> sorted by key.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>If <literal>my-alist</literal> is an association list with string keys, the following code will add <literal>'("xyz" . ("a" "list" "of" "words")</literal>, by possibly losing existing data associated with key <literal>"xyz"</literal>, to <literal>my-alist</literal></para>

	  <para><programlisting>(set! my-alist
  (alias-put my-alist "xyz" ("a" "list" "of" "words")))</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>alias-get</refname>

	  <refpurpose>Obtains data associated with a key from an association list.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(alias-get alst key)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>alst</parameter></term>
		<listitem>
		  <para>The association list in which to search for data.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>key</parameter></term>
		<listitem>
		  <para>The key (a string) under which to search.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>alias-get</function> returns data in <parameter>alst</parameter> associated with <parameter>key</parameter> if successful. Otherwise, it returns <literal>#f</literal>. For key equality testing, predicate <function>string-ci=?</function> is used.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>If <literal>my-alist</literal> contains key-value pairs representing a few non-negative numbers' names and values, namely it is <literal>'(("Zero" . 0) ("One" . 1) ...)</literal>, the following function takes a non-negative number's name and returns its value if it is found in <literal>my-alist</literal>.</para>

	  <para><programlisting>(define (the-value-of s)
  (alias-get my-alist s))</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>alias-rem</refname>

	  <refpurpose>Removes a key-value pair from an association list.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(alias-rem alst key)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>alst</parameter></term>
		<listitem>
		  <para>The association list from which the key-value pair is to be removed.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>key</parameter></term>
		<listitem>
		  <para>The key (a string) under which to search.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>alias-rem</function> returns a new association list, from which key-value pair with the key equal to <parameter>key</parameter> is possibly removed. If there is no data stored under <parameter>key</parameter>, <parameter>alst</parameter> is returned. For key equality testing, predicate <function>string-ci=?</function> is used.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>If <literal>my-alist</literal> is <literal>'(("a" . a) ("b" . b))</literal> and the following code is executed</para>

	  <para><programlisting>(alias-rem my-alist "b")</programlisting></para>

	  <para>it will return <literal>'(("a" . a))</literal>.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>alias=?</refname>

	  <refpurpose>An association function corresponding to predicate <function>string-ci=?</function>.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(alias=? key alst)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>key</parameter></term>
		<listitem>
		  <para>The key (a string) under which to search.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>alst</parameter></term>
		<listitem>
		  <para>An association list.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>alias=?</function> returns a key-value pair whose key is equal in the sense of <function>string-ci=?</function> to its first argument. If there is no data with key equal to <parameter>key</parameter> in <parameter>alst</parameter>, <literal>#f</literal> is returned.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>If <literal>my-alist</literal> is <literal>'(("a" . a) ("b" . b))</literal>, then the call</para>

	  <para><programlisting>(alias=? "b" my-alist)</programlisting></para>

	  <para>returns pair <literal>'("b" . b)</literal>.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>alias-index</refname>

	  <refpurpose>Returns the index of a key-value pair in an association list.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(alias-index alst key)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>alst</parameter></term>
		<listitem>
		  <para>An association list.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>key</parameter></term>
		<listitem>
		  <para>The key (a string) under which to search.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>alias-index</function> returns the position (index) of a key-value pair whose key is equal, in the sense of <function>string-ci=?</function>, to <parameter>key</parameter>. If there is no such pair, <literal>#f</literal> is returned.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>Key-value pair in an association list are not sorted by key.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>If <literal>my-alist</literal> is <literal>'(("a" . a) ("b" . b))</literal>, then the call</para>

	  <para><programlisting>(alias-index my-alist "b")</programlisting></para>

	  <para>returns <literal>1</literal>.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>alias&lt;?</refname>

	  <refpurpose>Compares numeric keys of two key-value pairs.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(alias&lt;? pair-1 pair-2)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>pair-1</parameter></term>
		<listitem>
		  <para>A key-value pair whose key is a string.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>pair-2</parameter></term>
		<listitem>
		  <para>A key-value pair whose key is a string.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>This function compares the keys of <parameter>pair-1</parameter> and <parameter>pair-2</parameter> using <function>string&lt;?</function>, and returns <literal>#t</literal> or <literal>#f</literal> (depending on the result of the comparison).</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>The following code processes key-value pairs from <literal>my-alist</literal> ordered by key (a key is a string).</para>

	  <para><programlisting>(alist-for-each
  (lambda (key value)
    (process key value))
  (sort my-alist alias&lt;?))</programlisting></para>
	</refsect1>
      </refentry>
    </sect1>
    <sect1>
      <title>Instrumentation Data Sources and Visual Objects</title>

      <para>Functions and variables described in this section are for simple registering sources of instrumentation data and visual objects, as well as for reading instrumentation data from trace files.</para>

      <para>These functions are defined for use in &PGRT; Shell. Once you have mastered their use, you may build you own performance analysis and visualization applications similar to the &PGRT; Shell and extend these functions to suit specific needs.</para>
      <refentry>
	<refnamediv>
	  <refname>register-vo</refname>

	  <refpurpose>Registers a visual object with &PGRT;-TIE.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(register-vo title vo gui-on gui-off)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>title</parameter></term>
		<listitem>
		  <para>The string to be used as the alias of the visual object being registered.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>vo</parameter></term>
		<listitem>
		  <para>The visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>gui-on</parameter></term>
		<listitem>
		  <para>A function that maps the visual object GUI on screen.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>gui-off</parameter></term>
		<listitem>
		  <para>A function that unmaps the visual object GUI off screen.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>register-vo</function> puts visual object <parameter>vo</parameter>, accompanied with the other parameters, into association list <literal>vo-alist</literal>. The key-value pair corresponding to the parameters has key equal to <parameter>title</parameter>, and value equal to a list of <parameter>vo</parameter>, <parameter>gui-on</parameter>, and <parameter>gui-off</parameter> (in that order). If the &PGRT; Shell is running, it also passes its arguments to <function>register-vo-pgrtsh</function> function (see the &PGRT;-TIE Tutorial).</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>Visual objects in <literal>vo-alist</literal> are not necessarily the ones being passed instrumentation data records for processing and/or called to render the contents of their info-structures; for that purpose, they need be <emphasis>activated</emphasis> by copying them to <literal>vo-list</literal>.</para>

	  <para>If the &PGRT; Shell is running, the registration will be animated in its window.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(register-vo "Gantt" gantt gantt-gui-on gantt-gui-off)</programlisting> registers visual object <literal>gantt</literal> under name <literal>"Gantt"</literal>, which is a key in the <literal>vo-alist</literal> association list.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>register-ds</refname>

	  <refpurpose>Registers an instrumentation data source with &PGRT;-TIE.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(register-ds title ds)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>title</parameter></term>
		<listitem>
		  <para>The string to be used as the alias of the instrumentation data source being registered.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>ds</parameter></term>
		<listitem>
		  <para>The instrumentation data source, a function or thread without parameters (i.e., a thunk) that receives instrumentation data records and passes them to visual objects in <literal>vo-list</literal>.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>register-ds</function> puts pair <literal>(<parameter>title</parameter> . <parameter>ds</parameter>)</literal> into <literal>ds-alist</literal>. If the &PGRT; Shell is running, it also passes its arguments to <function>register-ds-pgrtsh</function> function (see the &PGRT;-TIE Tutorial).</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>To start the instrumentation data source represented by <parameter>ds</parameter>, <parameter>ds</parameter> needs be called.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>The following code registers, as an instrumentation data source, <function>recv-a-session-thread</function> that will read PICL records from <filename>flops.trf</filename> when started.</para>

	  <para><programlisting>(define flops-reader
  (lambda ()
    (read-a-session-thread "flops.trf")))
	      (register-ds (string-append "PICL file: flops.trf") ds)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>read-a-session</refname>

	  <refpurpose>Reads instrumentation data records from a trace file.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(read-a-session filename)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>filename</parameter></term>
		<listitem>
		  <para>The name of the trace file.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>read-a-session</function> reads line by line from <parameter>filename</parameter> in a loop, calling <function>vo-refresh</function>, parsing the lines as PICL records, and passing the results to visual objects in <literal>vo-list</literal> for processing. The loop stops when either the <literal>eof</literal> object is read or <literal>end-of-session</literal> is set to a non-<literal>#f</literal> value.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(read-a-session "flops.trf")</programlisting> reads instrumentation data records from tracefile <filename>flops.trf</filename> and passes them to visual objects in <literal>vo-list</literal>, until either the end-of-file object is read or <literal>end-of-session</literal> variable is set to <literal>#t</literal>.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>read-a-session-thread</refname>

	  <refpurpose>A threaded version of
	  <function>read-a-session</function>.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(read-a-session-thread filename)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>filename</parameter></term>
		<listitem>
		  <para>The name of the trace file.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>read-a-session-thread</function> creates a thread that reads line by line from <parameter>filename</parameter> in a loop, calling <function>vo-refresh</function>, parsing the lines as PICL records, and passing the results to visual objects in <literal>vo-list</literal> for processing. The thread's loop stops when either the <literal>eof</literal> object is read or <literal>end-of-session</literal> is set to a non-<literal>#f</literal> value.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(read-a-session-thread "flops.trf")</programlisting> starts a thread that reads instrumentation data records from tracefile <filename>flops.trf</filename> and passes them to visual objects in <literal>vo-list</literal>, until either the end-of-file object is read or <literal>end-of-session</literal> variable is set to <literal>#t</literal>.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>voml-read-a-session-thread</refname>

	  <refpurpose>Similar to <function>read-a-session-thread</function> but with selective calls to <function>vo-process-event</function>.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(voml-read-a-session-thread filename)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>filename</parameter></term>
		<listitem>
		  <para>The name of the trace file.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>voml-read-a-session-thread</function> creates a thread that reads line by line from <parameter>filename</parameter> in a loop, calling <function>vo-refresh</function>, parsing the lines as PICL records, and passing the results to only those visual objects in <literal>vo-list</literal> that have requested them for processing. Record and event types of instrumentation data records requested by a visual object generated by the VOML compiler are kept in the visual object's context object (that is read and writted using <function>vo-read-context</function> and <function>vo-write-context</function> functions. For each requested instrumentation data record there is a pair of the form <literal>'(record-type . event-type)</literal>; these pairs are bundled in a list and stored into the associated context object. The thread's loop stops when either the <literal>eof</literal> object is read or <literal>end-of-session</literal> is set to a non-<literal>#f</literal> value.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(voml-read-a-session-thread "rt-test.trf")</programlisting> starts a thread that reads instrumentation data records from tracefile <filename>flops.trf</filename> and passes them to visual objects, which were generated by the VOML compiler and do recognize the records, in <literal>vo-list</literal>, until either the end-of-file object is read or <literal>end-of-session</literal> variable is set to <literal>#t</literal>.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>s-read-a-session</refname>

	  <refpurpose>Reads instrumentation data records from a trace file and triggers synchronous rendering by visual objects.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(s-read-a-session filename maxdelta)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>filename</parameter></term>
		<listitem>
		  <para>The name of the trace file</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>maxdelta</parameter></term>
		<listitem>
		  <para>The maximum logical time interval between two consecutive calls to visual objects' rendering methods.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>s-read-a-session</function> works similarly to <function>read-a-session</function>, but it assumes that visual objects in <literal>vo-list</literal> are made for synchronous mode of operation (i.e., the <function>process-event</function> method does not automatically call the <function>draw-info</function> method at its end). Each instrumentation data record read from <parameter>filename</parameter> will be passed to visual objects in <literal>vo-list</literal> for processing, and the visual objects' <function>draw-info</function> methods will be called once <parameter>maxdelta</parameter> units of time have passed since the previous call.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>
	  <para>See also the section on visual objects.</para>

	  <para><function>s-read-a-session</function> assumes that the time stamp of each instrumentation data record is stored in the third field (i.e., its index in a PICL record is 2). <parameter>maxdelta</parameter> should be in the same time units as the time stamps.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>Assuming that the time stamps are in the third field of each PICL record in <filename>flops.trf</filename>, and that their values are in seconds, the following code will pass all the records to visual objects in <literal>vo-list</literal> and draw the contents of info-structures (approximately) every 0.1 seconds.</para>

	  <para><programlisting>(s-read-a-session "flops.trf" 0.1)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>parse-picl</refname>

	  <refpurpose>Converts a PICL string into a list of heterogeneous data.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(parse-picl picl-record)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>picl-record</parameter></term>
		<listitem>
		  <para>A string containing a PICL-compatible instrumentation data record.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><parameter>parse-picl</parameter> takes a string, whose content is a number of fields separated by whitespace, containing external (ASCII) representations of heterogeneous data (integers, floating point numbers, and double-quoted strings). It returns a list of Scheme data whose elements correspond to the data in <parameter>picl-record</parameter>. If parsing is unsuccessful, an empty list is returned.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>If <literal>event</literal> is string `<literal>-3 4004 2.65 4 5 7 "Sensor" 1 0</literal>', the following call</para>

	  <para><programlisting>(parse-picl event)</programlisting></para>

	  <para>returns <literal>'(-3 4004 2.65 4 5 7 "Sensor" 1 0)</literal>.</para>
	</refsect1>
      </refentry>
    </sect1>
    <sect1>
      <title>Predefined Variables</title>
      <variablelist>
	<varlistentry>
	  <term><literal>pgrtsh-running</literal></term>
	  <listitem>
	    <para>Initially <literal>#f</literal>. Indicates whether the &PGRT; Shell is running.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>vo-list</literal></term>
	  <listitem>
	    <para>The list of activated visual objects (i.e., the ones being passed instrumentation data records for processing and/or called to render the contents of their info-structures).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>vo-alist</literal></term>
	  <listitem>
	    <para>The association list of registered visual objects. See also the reference for <function>register-vo</function>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>vo-num</literal></term>
	  <listitem>
	    <para>The number of registered visual objects.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>opened-vos</literal></term>
	  <listitem>
	    <para>The list containing the numbers associated with registered visual objects whose graphical user interfaces are opened.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>end-of-session</literal></term>
	  <listitem>
	    <para>Initially <literal>#f</literal>. Used for stopping receiving of instrumentation data records.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>ds-list</literal></term>
	  <listitem>
	    <para>The list of activated instrumentation data sources (i.e., the ones passing instrumentation data records to activated visual objects for processing).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>ds-alist</literal></term>
	  <listitem>
	    <para>The association list of registered instrumentation data sources. See also the reference for <function>register-ds</function>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>ds-num</literal></term>
	  <listitem>
	    <para>The number of registered instrumentation data sources.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect1>
  </chapter>
  <chapter>
    <title>Visual Objects</title>
    <synopsis>(use-modules (pgrt vo))</synopsis>

    <para>High-level Visual Objects can be prototyped in &PGRT;-TIE. The low-level Visual Object class implementation for X Windows was initially written by Peter Wong.</para>

    <para><xref linkend="vo-arch"> depicts the design of the Visual Objects framework. It identifies the two main software layers apparent in a majority of extant performance-visualization tools (in object-priented terms): a <emphasis>high-level visual object (HLVO) class</emphasis> and a <emphasis>low-level visual object (LLVO) class</emphasis>. In general, the responsibility of a HLVO class is to implement an application-specific semantics, while a LLVO class is platform-dependent while providing a platform-independent interface to the HLVO class. When implementing a VO class, a HLVO class implementation is derived from a LLVO class.</para>

      <figure id="vo-arch">
	<title>Design of Visual Objects framework</title>
	<graphic fileref="vo-arch.gif" format="gif87a"></graphic>
      </figure>

    <sect1>
      <title>High-level Visual Object Functions</title>

      <para>A high-level visual object, which is derived from a low-level class implementation, handles these visualization functions, according to <xref linkend="vo-arch">:</para>

      <itemizedlist>
	<listitem>
	  <formalpara>
	    <title>Event processing</title>

	    <para>The performance data passed to a HLVO via calls to the processing method are termed <emphasis>events</emphasis> (or data events). Based on the events, this method (1) updates performance information referred to as <emphasis>info structures</emphasis>, and (2) controls the rendering of this information by updating data structures referred to as <emphasis>control structures</emphasis>.</para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title>Information rendering</title>

	    <para>The rendering method may be called, to <emphasis>map</emphasis> a portion of the info structures' contents to the LLVO views, either immediately after processing an event (asynchronous rendering mode) or by a process/thread that may synchronize the rendering of multiple HLVOs (synchronous rendering mode). This method communicates with the processing method by <emphasis>both reading and writing</emphasis> the control structures.</para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title>Callback processing</title>

	    <para>A HLVO may also respond to changes in its run-time environment, as well as to the user's commands. This method may, for example, preprocess callback events coming from the LLVO, a GUI, etc., and then forward them to the processing method as if they were data events.</para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title>(Re)initialization</title>

	    <para>In on-line performance visualization, it is desirable to be able to reinitialize partially or reconfigure a HLVO without interrupting the target application and/or instrumentation system that supplies performance data.</para>
	  </formalpara>
	</listitem>
      </itemizedlist>
      <refentry>
	<refnamediv>
	  <refname>vo-create</refname>

	  <refpurpose>Creates a visual object.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-create <parameter>n-views</parameter> <parameter>adapt-goodness</parameter> <parameter>init-fun</parameter> <parameter>process-fun</parameter> <parameter>draw-fun</parameter> <literal>.</literal> <parameter>callback-fun</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>n-views</parameter></term>
		<listitem>
		  <para>An integer that specifies the maximum number of views that the visual object will maintain. The implementation of these views is a part of the low-level visual object class implementation.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>adapt-goodness</parameter></term>
		<listitem>
		  <para>An integer that relates to the low-level visual object's ability to adapt to quantitative changes in measurement data. One iterpretation may be the number of most extreme points (in each direction of the Cartesian coordinate system) that the visual object can remember.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>init-fun</parameter></term>
		<listitem>
		  <para>Specifies the user-defined Scheme procedure that is called after the high- and low-level visual object initialization has been done. The parameters of <parameter>init-fun</parameter> are the visual object and the view ID (a non-negative integer). Returns <literal>1</literal> if successful.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>process-fun</parameter></term>
		<listitem>
		  <para>Specifies the user-defined Scheme procedure that processes event traces and updates the visual object's <firstterm>info structures</firstterm>. Parameters of <parameter>process-fun</parameter> are a visual object and a Scheme object representing an event (list of numbers and/or strings if representing a PICL event trace record) representing an event trace record. Returns <literal>1</literal> if successful.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>draw-fun</parameter></term>
		<listitem>
		  <para>Specefies a user-defined Scheme procedure that reads the contents of visual object's info structures and renders it in the visual object's views. The parameter of <parameter>draw-fun</parameter> is a visual object. Returns <literal>1</literal> if sucessful.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>callback-fun</parameter></term>
		<listitem>
		  <para>An optional parameter that is a user-defined Scheme procedure called by the low-level visual object when a specific event occurs. The parameters of <parameter>callback-fun</parameter> are: the visual object, the view ID, the event type, and a list of view-specific data in the following order: [0] mouse button number, [1] mouse cursor world x coordinate, [2] mouse cursor world y coordinates, [3] the last key pressed, [4] the color of the pixel under the mouse cursor, [5] the width of the view window in pixels, [6] the height in pixels, [7] the world x coordinate of the left edge of the view window, [8] the world y coordinate of the bottom edge of the view window, [9] the world x coordinate of the right edge of the view window, [10] the world y coordinate of the top edge of the view window, and the world dimensions of the [11] top, [12] right, [13] bottom, and [14] left margin, respectively. Returns nothing.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>vo-create</function> returns a newly created visual object, if successful. Otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>Currently, only one LLVO class implementation is available (based on X library) and <function>vo-create</function> doesn't not have a parameter that would specify the LLVO class implementation. This parameter might be added in the future.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(define gantt (vo-create 1 8 gantt-init gantt-process gantt-draw))</programlisting> creats a visual object with one view and stores it in variable <literal>gantt</literal>.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>vo-init</refname>

	  <refpurpose>(Re)initializes a visual object.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-init <parameter>visual-object</parameter> <parameter>view-id</parameter> <parameter>title</parameter> <parameter>width</parameter> <parameter>height</parameter> <parameter>virt-width</parameter> <parameter>virt-height</parameter> <parameter>minx</parameter> <parameter>maxx</parameter> <parameter>miny</parameter> <parameter>maxy</parameter> <parameter>top-margin</parameter> <parameter>right-margin</parameter> <parameter>bottom-margin</parameter> <parameter>left-margin</parameter> <parameter>back-color</parameter> <parameter>fore-color</parameter> <parameter>adapt-mask</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>visual-object</parameter></term>
		<listitem>
		  <para>Specifies the visual object whose view is to be initialized.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>view-id</parameter></term>
		<listitem>
		  <para>A non-negative integer that specifies the view of the visual object to be initialized.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>title</parameter></term>
		<listitem>
		  <para>A string to be displayed on the upper edge of the view window.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>width</parameter></term>
		<listitem>
		  <para>A positive integer, the width of the view window in pixels.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>height</parameter></term>
		<listitem>
		  <para>A positive integer, the height of the view window in pixels.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>virt-width</parameter></term>
		<listitem>
		  <para>A positive integer, the width of the virtual view window in pixels. If <parameter>virt-width</parameter> is greater than <parameter>width</parameter>, a horizontal scroll bar is added to the view window (not tested).</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>virt-height</parameter></term>
		<listitem>
		  <para>A positive integer, the height of the virtual view window in pixels. If <parameter>virt-height</parameter> is greater than <parameter>height</parameter>, a vertical scroll bar is added to the view window (not tested).</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>minx</parameter></term>
		<listitem>
		  <para>A real number, the world x coordinate of the left edge of the view window's canvas. It corresponds to the leftmost vertical line of pixels.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>maxx</parameter></term>
		<listitem>
		  <para>A real number, the world x coordinate of the right edge of the view window's canvas. It corresponds to the rightmost vertical line of pixels.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>miny</parameter></term>
		<listitem>
		  <para>A real number, the world y coordinate of the bottom edge of the view window's canvas. It corresponds to the bottommost horizontal line of pixels.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>maxy</parameter></term>
		<listitem>
		  <para>A real number, the world y coordinate of the upper edge of the view window's canvas. It corresponds to the topmost horizontal line of pixels.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>top-margin</parameter></term>
		<listitem>
		  <para>A non-negative real number, the width of the margin above the scrollable area, in world dimensions.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>right-margin</parameter></term>
		<listitem>
		  <para>A non-negative real number, the width of the margin right of the scrollable area, in world dimensions.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>bottom-margin</parameter></term>
		<listitem>
		  <para>A non-negative real number, the width of the margin below the scrollable area, in world dimensions.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>left-margin</parameter></term>
		<listitem>
		  <para>A non-negative real number, the width of the margin left of the scrollable area, in world dimensions.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>back-color</parameter></term>
		<listitem>
		  <para>A string, the background color of the view window's canvas.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>fore-color</parameter></term>
		<listitem>
		  <para>A string, the foreground color of the view window's canvas.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>adapt-mask</parameter></term>
		<listitem>
		  <para>A non-negative integer, obtained using bit-wise logical OR of some of the following constants: <literal>XPLUS</literal>, <literal>XMINUS</literal>, <literal>YPLUS</literal>, <literal>YMINUS</literal>. The constants represents the directions in which the low-level visual object dynamic adaptation to quantitative changes should be performed at run time.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>vo-init</function> initializes or reinitializes a view of the visual object: it first calls the corresponding function of the low-level visual object, then the user-defined Scheme high-level visual object initialization procedure. It returns what is returned by the user-defined Scheme high-level visual object initialization procedure.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>The view window below will be 400 pixels wide and 200 pixels high, with the scrollable area 100 wide and 100000 high (in world coordinates), and with 10% additional non-scrollable space on each side (the margins).</para>

	  <para><programlisting>(vo-init vo 0 "Video Application: Received/Lost Throughput"
  400 200 400 200 -10.0 110.0 -10000.0 110000.0 10000.0 10.0 10000.0 10.0 "black"
  "white" YPLUS)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>vo-read-context</refname>

	  <refpurpose>Returns a Scheme object associated with a visual object.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-read-context <parameter>visual-object</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>visual-object</parameter></term>
		<listitem>
		  <para>Specifies the visual object whose associated Scheme object is to be returned by this procedure.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

          <para><function>vo-read-context</function> returns a Scheme object usually containing the high-level visual object's info- and control-structures. The Scheme object may be an environment/context in which info- and control-structures for visualization are defined.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>A visual object's control-structures are different from a programming language's control-structures. The former are only a kind of data structures.</para>

	  <para>With the availability of GUILE modules, this function is almost obsolete. However, the VOML compiler uses <function>vo-write-context</function> to store a list of pair of the form <literal>'(record-type . event-type)</literal>, for all data events recognized by the visual object, into this Scheme object. Based on this information, a dispatcher function may decide whether to call a VOML-generated VO's event-processing method.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(set! context (vo-read-context vo))</programlisting> reads the contents of the context object of visual object <literal>vo</literal> and stores it in variable <literal>context</literal>.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>vo-write-context</refname>

	  <refpurpose>Stores a Scheme object into a visual object.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-write-context <parameter>visual-object</parameter> <parameter>context-object</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>visual-object</parameter></term>
		<listitem>
		  <para>Specifies the visual object into which to store the Scheme object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>context-object</parameter></term>
		<listitem>
		  <para>Specifies the Scheme object to be stored into the visual object.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>vo-write-context</function> updates the high-level visual object's associated Scheme object with <parameter>context-object</parameter> and returns the same Scheme object.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>With the availability of GUILE modules, this function is almost obsolete. However, the VOML compiler uses it to store a list of pair of the form <literal>'(record-type . event-type)</literal>, for all data events recognized by the visual object, into this Scheme object. Based on this information, a dispatcher function may decide whether to call a VOML-generated VO's event-processing method.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(vo-write-context vo
  (vector 0 0 0 0 0 0 (make-vector 41 0) 0 (make-vector 41 0)))</programlisting></para>

	  <para>writes a vector, some of whose elements are vectors themselves, to the context object of the visual object <literal>vo</literal>.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>vo-process-event</refname>

	  <refpurpose>Parses fields of an event trace record and updates info structures of a visual object.
	  </refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-process-event <parameter>visual-object</parameter> <parameter>event-info</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>visual-object</parameter></term>
		<listitem>
		  <para>Specifies the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>event-info</parameter></term>
		<listitem>
		  <para>Data representing an event to be processed by the visual object. May be of any type and it is up to the visual object to recognize it.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>vo-process-event</function> is a method of the high-level visual object that calls the user-defined Scheme procedure for processing the event data and updates its info- and control-structures. The user-defined Scheme procedure should return <literal>1</literal> if sucessful.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>In the asynchronous visualization mode, the user-defined Scheme procedure should call the user-defined Scheme procedure for the rendering of the high-level visual object's info structures, immediately upon updating them. Otherwise, the user-defined Scheme procedure for the rendering of the info-structures will be called from elsewhere, when synchronization conditions are satisfied.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>In this example, the second argument to <function>vo-process-event</function> is an XDR data structure received from the JEWEL distributed instrumentation system. This is just to illustrate how complex data structures may be passed to visual objects; usually, the second argument to <function>vo-process-event</function> is a list. The JEWEL &PGRT;-TIE extension is not documented in this reference manual.</para>

	  <para><programlisting>(vo-process-event vo (_mdr_data_part.vd_data-ref
  (mdr_t.mdr_data_part-ref jewel-gps-ri-recv-msg)))</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>vo-draw-info</refname>

	  <refpurpose>Renders the contents of info structures of a visual object in the visual object's view windows.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-draw-info <parameter>visual-object</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>visual-object</parameter></term>
		<listitem>
		  <para>Specifies the visual object.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>vo-draw-info</function> is a method of the high-level visual object which calls the user-defined Scheme procedure that renders the contents of its info-structures. The user-define Scheme procedure should return <literal>1</literal> if sucessful.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>In the asynchronous mode, <function>vo-draw-info</function> is called immediately after processing an event. In the synchronous mode, rendering in one or more visual objects/views is synchronized, and <function>vo-draw-info</function> is called for all these visual objects when synchronization conditions are satisfied.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(vo-draw-info vo)</programlisting> calls the information rendering method of visual object <literal>vo</literal>.</para>
	</refsect1>
      </refentry>
    </sect1>
    <sect1>
      <title>Low-level Visual Object Functions</title>

      <para>The responsibilities of a LLVO class described below (refer to <xref linkend="vo-arch">) illustrate the basic building block of the performance-visualization technology.</para>

      <itemizedlist>
	<listitem>
	  <formalpara>
	    <title>Multiple views</title>

	    <para>The LLVO class maintains a number of display areas, referred to as <emphasis>views</emphasis>. In the X library implementation of the LLVO class, each display area is supported by a contained object that maintains the state of the corresponding X window.</para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title>Graphical primitives</title>

	    <para>The LLVO class provides methods for rendering simple graphical objects, text and figures in the views. The coordinate system used for the graphical objects' representative coordinates (as arguments to the methods) is a world coordinate system specified by the user at the moment of (re)initializing a view.</para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title>Display area</title>

	    <para>A view consists of an internal area surrounded by <emphasis>marings</emphasis>, referred to as <emphasis>scrollable area</emphasis>. As a visualization progresses, the mapping from the world coordinate system to the view coordinate system may change, at which point only the contents of the scrollable area may be translated or rescaled (zoomed) as a response.</para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title>Control methods</title>

	    <para>Methods such as <function>vo-scroll</function>, <function>vo-resize</function>, <function>vo-rescale</function> and <function>vo-take-snapshot</function> provide explicit control over each view. Combined with the graphical primitives, they allow a HLVO to control explicitly, among other things, what to be drawn and what to be visible at a point in time.</para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title>Quantitative adaptation</title>

	    <para>A relation between a view and graphical primitives that draw in the view may be established that causes the view to adapt dynamically by translating or rescaling (zooming) the contents of the scrollable area, thus implicitly controlling what should be visible over an interval or time.</para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title>Qualitative adaptation</title>

	    <para>The LLVO class may be portable to multiple graphical platforms that differ at some extent (e.g., different X servers may use different color maps). At run time, it may adapt to the platform capabilities, as well as provide a drawing optimization.</para>
	  </formalpara>
	</listitem>
      </itemizedlist>
      <refentry>
	<refnamediv>
	  <refname>vo-open</refname>

	  <refpurpose>Opens a view window of a visual object.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-open <parameter>visual-object</parameter> <parameter>view-id</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>visual-object</parameter></term>
		<listitem>
		  <para>Specifies the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>view-id</parameter></term>
		<listitem>
		  <para>A non-negative integer that specifies the view of the visual object.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>vo-open</function> opens the window of the specified view of the specified visual object. Returns <literal>1</literal> if successful.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>Drawing is not affected by whether a view window is opened or closed.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(vo-open gantt 0)</programlisting> opens the first (i.e., the one indexed by 0) view's window of visual object kept in variable <literal>gantt</literal>.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>vo-close</refname>

	  <refpurpose>Closes a view window of a visual object.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-close <parameter>visual-object</parameter> <parameter>view-id</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>visual-object</parameter></term>
		<listitem>
		  <para>Specifies the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>view-id</parameter></term>
		<listitem>
		  <para>A non-negative integer that specifies the view of the visual object.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>vo-close</function> closes the window of the specified view of the specified visual object. Returns <literal>1</literal> if successful.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>Drawing is not affected by whether a view window is opened or closed.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(vo-close gantt 0)</programlisting> closes the first (i.e., the one indexed by 0) view's window of visual object stored in variable <literal>gantt</literal>.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>vo-refresh</refname>

	  <refpurpose>Allows for maintenance of the low-level visual object view windows.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-refresh)</synopsis>
	  <refsect2>
	    <title>Parameters</title>

	    <para>None.</para>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>vo-refresh</function> is a method of the low-level visual object class implementation whose purpose is to refresh the windows of all active visual objects' views. A call to this procedure is supposed to be placed in an event loop (e.g., in the main event loop of the application). Returns <literal>#t</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>The Xlib low-level visual object class implementation of this method refreshes the contents of X windows within the application's context and also calls <function>Tk_DoOneEvent()</function>. Thus, if the application has a Tk-based GUI, separate calls to <function>tk-do-one-event</function> are not necessary.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>The following is the skeleton of a loop that refreshes the contents of all visual objects' views in each iteration.</para>

	  <para><programlisting>(let loop (...)
  (vo-refresh)
  ...)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>vo-get-view-info</refname>

	  <refpurpose>Obtains information about a view window of a visual object.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-get-view-info <parameter>visual-object</parameter> <parameter>view-id</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>visual-object</parameter></term>
		<listitem>
		  <para>Specifies the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>view-id</parameter></term>
		<listitem>
		  <para>A non-negative integer that specifies the view of the visual object.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>vo-get-view-info</function> returns a list of 15 data about the state of a view window of a visual object. These data are (in this order): [0] mouse button number, [1] mouse cursor world x coordinate, [2] mouse cursor world y coordinates, [3] the last key pressed, [4] the color of the pixel under the mouse cursor, [5] the width of the view window in pixels, [6] the height in pixels, [7] the world x coordinate of the left edge of the view window, [8] the world y coordinate of the bottom edge of the view window, [9] the world x coordinate of the right edge of the view window, [10] the world y coordinate of the top edge of the view window, and the world dimensions of the [11] top, [12] right, [13] bottom, and [14] left margin, respectively.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>The following example shows how one can obtain the number of the last mouse button pressed over the first (i.e., the one indexed by 0) view of visual object <literal>vo</literal>.</para>

	  <para><programlisting>(let* ((winfo (vo-get-view-info vo 0))
  (button-number (list-ref winfo 0))
  ...)
...)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>vo-take-snapshot</refname>

	  <refpurpose>Takes a snapshot of a view window of a visual object and stores it into a GIF file.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-take-snapshot <parameter>visual-object</parameter> <parameter>view-id</parameter> <parameter>filename</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>visual-object</parameter></term>
		<listitem>
		  <para>Specifies the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>view-id</parameter></term>
		<listitem>
		  <para>A non-negative integer that specifies the view of the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>filename</parameter></term>
		<listitem>
		  <para>The name of the GIF file into which the snapshot is to be stored. The extension `.gif' is not assumed.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>vo-take-snapshot</function> takes the current contents of the view window, converts it into the GIF image format and writes it to a (possibly newly created) file with the given name. Returns <literal>#t</literal> if successful; otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(vo-take-snapshot vo 0 "snap.gif")</programlisting> takes a snapshot of the first (i.e., the one indexed by 0) view window of visual object <literal>vo</literal> and stores it in file <filename>snap.gif</filename> in GIF87 format.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>vo-scroll</refname>

	  <refpurpose>Scrolls the scrollable area of a visual object's view window.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-scroll <parameter>visual-object</parameter> <parameter>view-id</parameter> <parameter>value</parameter> <parameter>direction</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>visual-object</parameter></term>
		<listitem>
		  <para>Specifies the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>view-id</parameter></term>
		<listitem>
		  <para>A non-negative integer that specifies the view of the visual object whose window's contents of the scrollable area is to be scrolled.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>value</parameter></term>
		<listitem>
		  <para>A real number that is the value to which the x or y coordinate of the edge of the scrollable area opposite to <parameter>direction</parameter> is set.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>direction</parameter></term>
		<listitem>
		  <para>One of the four integer constants: <literal>LEFT</literal>, <literal>RIGHT</literal>, <literal>UP</literal>, and <literal>DOWN</literal>.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>vo-scroll</function> scrolls the contents of the scrollable area of the specified view window of the specified visual object, so that the world coordinate of the appropriate edge of the scrollable area becomes equal to <parameter>value</parameter>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>To achieve "unnatural" scrolling to the right or up, consecutive <parameter>value</parameter>s should form a non-increasing sequence. If this is inconvenient, reversing the sign of "normal," non-decreasing <parameter>value</parameter>s should work, too.</para> <para>If the sequence of <parameter>value</parameter>s is not monotonic, "jumping" forward and backward of the contents of the scrollable area is prevented, i.e., <parameter>value</parameter>s which would cause scrolling in the direction opposite to <parameter>direction</parameter> are ignored..</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>The following call will result in the right edge of the scrollable area (of the 2nd view window of the visual object <parameter>vo</parameter>) be positioned at the world x coordinate 45.3.</para>

	  <para><programlisting>(vo-scroll vo 2 45.3 LEFT)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>vo-draw-point</refname>

	  <refpurpose>Draws a point in a visual object's view window.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-draw-point <parameter>visual-object</parameter> <parameter>view-id</parameter> <parameter>x-coord</parameter> <parameter>y-coord</parameter> <parameter>color</parameter> <parameter>adapt</parameter> <parameter>clip</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>visual-object</parameter></term>
		<listitem>
		  <para>Specifies the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>view-id</parameter></term>
		<listitem>
		  <para>A non-negative integer that specifies the view of the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>x-coord</parameter></term>
		<listitem>
		  <para>A real number, the world x coordinate of the point.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>y-coord</parameter></term>
		<listitem>
		  <para>A real number, the world y coordinate of the point.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>color</parameter></term>
		<listitem>
		  <para>A string, the color of the point.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>adapt</parameter></term>
		<listitem>
		  <para>A Boolean that specifies whether the point is important for the visual object dynamic adaptation.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>clip</parameter></term>
		<listitem>
		  <para>A Boolean that specifies whether the allowed rectangle area for drawing the point is the scrollable area (<literal>#t</literal>) or the whole window (<literal>#f</literal>).</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>vo-draw-point</function> draws a point with specified parameters. If the point's location is beyond the area displayed in the view window's canvas and the value of <parameter>adapt</parameter> is <literal>#t</literal>, the view window will first adapt by rescaling the contents of its canvas in the appropriate direction and then the point will be drawn visible. If the point's location is beyond the scrollable area, after the effect of the value of <parameter>adapt</parameter>, and the value of <parameter>clip</parameter> is <literal>#t</literal>, the point will not be drawn; otherwise, it will be drawn, even beyond the scrollable area. Returns <literal>1</literal> if successful.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>The following call will draw a cyan point with world coordinates (x, y) = (5, 7).</para>

	  <para><programlisting>(vo-draw-point vo 0 5 7 "cyan" #f #f)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>vo-draw-line</refname>

	  <refpurpose>Draws a line in a visual object's view window.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-draw-line <parameter>visual-object</parameter> <parameter>view-id</parameter> <parameter>x<subscript>1</subscript></parameter> <parameter>y<subscript>1</subscript></parameter> <parameter>x<subscript>2</subscript></parameter> <parameter>y<subscript>2</subscript></parameter> <parameter>thickness</parameter> <parameter>color</parameter> <parameter>adapt</parameter> <parameter>clip</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>visual-object</parameter></term>
		<listitem>
		  <para>Specifies the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>view-id</parameter></term>
		<listitem>
		  <para>A non-negative integer that specifies the view of the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>x<subscript>1</subscript></parameter></term>
		<listitem>
		  <para>A real number, the world x coordinate of the first end-point of the line.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>y<subscript>1</subscript></parameter></term>
		<listitem>
		  <para>A real number, the world y coordinate of the first end-point of the line.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>x<subscript>2</subscript></parameter></term>
		<listitem>
		  <para>A real number, the world x coordinate of the second end-point of the line.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>y<subscript>2</subscript></parameter></term>
		<listitem>
		  <para>A real number, the world y coordinate of the second end-point of the line.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>thickness</parameter></term>
		<listitem>
		  <para>A non-negative integer, the thickness of the line in pixels.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>color</parameter></term>
		<listitem>
		  <para>A string, the color of the line.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>adapt</parameter></term>
		<listitem>
		  <para>A Boolean that specifies whether the line is important for the visual object dynamic adaptation.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>clip</parameter></term>
		<listitem>
		  <para>A Boolean that specifies whether the allowed rectangle area for drawing the line is the scrollable area (<literal>#t</literal>) or the whole window (<literal>#f</literal>).</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>vo-draw-line</function> draws a line with specified parameters. If the line exceeds the area displayed in the view window's canvas and the value of <parameter>adapt</parameter> is <literal>#t</literal>, the view window will first adapt by rescaling the contents of its canvas in the appropriate direction and then the line will be drawn fully visible. If the line exceeds the scrollable area after the effect of <parameter>adapt</parameter>, and the value of <parameter>clip</parameter> is <literal>#t</literal>, the line will be clipped-off at the margins; otherwise, it will be drawn, even beyond the scrollable area. Returns <literal>1</literal> if successful.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>The following call will draw a green line with world coordinates of its end-points (x<subscript>1</subscript>, y<subscript>1</subscript>) = (1, 1) and (x<subscript>2</subscript>, y<subscript>2</subscript>) = (5, 7).</para>

	  <para><programlisting>(vo-draw-line vo 2 1 1 5 7 "green" #f #f)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>vo-draw-rectangle</refname>

	  <refpurpose>Draws a rectangle in a visual object's view window.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-draw-rectangle <parameter>visual-object</parameter> <parameter>view-id</parameter> <parameter>x<subscript>1</subscript></parameter> <parameter>y<subscript>1</subscript></parameter> <parameter>x<subscript>2</subscript></parameter> <parameter>y<subscript>2</subscript></parameter> <parameter>color</parameter> <parameter>fill-color</parameter> <parameter>adapt</parameter> <parameter>clip</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>visual-object</parameter></term>
		<listitem>
		  <para>Specifies the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>view-id</parameter></term>
		<listitem>
		  <para>A non-negative integer that specifies the view of the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>x<subscript>1</subscript></parameter></term>
		<listitem>
		  <para>A real number, the world x coordinate of the first corner of the rectangle.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>y<subscript>1</subscript></parameter></term>
		<listitem>
		  <para>A real number, the world y coordinate of the first corner of the rectangle.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>x<subscript>2</subscript></parameter></term>
		<listitem>
		  <para>A real number, the world x coordinate of the diagonally-opposite corner of the rectangle.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>y<subscript>2</subscript></parameter></term>
		<listitem>
		  <para>A real number, the world y coordinate of the diagonally-opposite corner of the rectangle.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>color</parameter></term>
		<listitem>
		  <para>A string, the color of the rectangle's border.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>fill-color</parameter></term>
		<listitem>
		  <para>A string, the color of the rectangle's inside.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>adapt</parameter></term>
		<listitem>
		  <para>A Boolean that specifies whether the rectangle is important for the visual object dynamic adaptation.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>clip</parameter></term>
		<listitem>
		  <para>A Boolean that specifies whether the allowed rectangle area for drawing the rectangle is the scrollable area (<literal>#t</literal>) or the whole window (<literal>#f</literal>).</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>vo-draw-rectangle</function> draws a rectangle with specified parameters. If the rectangle exceeds the area displayed in the view window's canvas and the value of <parameter>adapt</parameter> is <literal>#t</literal>, the view window will first adapt by rescaling the contents of its canvas in the appropriate direction and then the rectangle will be drawn fully visible. If the rectangle exceeds the scrollable area after the effect of <parameter>adapt</parameter>, and the value of <parameter>clip</parameter> is <literal>#t</literal>, the rectangle will be clipped-off at the margins; otherwise, it will be drawn, even beyond the scrollable area. Returns <literal>1</literal> if successful.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>The following call will draw a rectangle with red border, green inside, and world coordinates of its diagonally-opposite corners (x<subscript>1</subscript>, y<subscript>1</subscript>) = (1, 1) and (x<subscript>2</subscript>, y<subscript>2</subscript>) = (5, 7).</para>

	  <para><programlisting>(vo-draw-rectangle vo 2 1 1 5 7 "red" "green" #f #t)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>vo-draw-polygon</refname>

	  <refpurpose>Draws a polygon in a visual object's view window.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-draw-polygon <parameter>visual-object</parameter> <parameter>view-id</parameter> <parameter>points</parameter> <parameter>color</parameter> <parameter>fill-color</parameter> <parameter>adapt</parameter> <parameter>clip</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>visual-object</parameter></term>
		<listitem>
		  <para>Specifies the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>view-id</parameter></term>
		<listitem>
		  <para>A non-negative integer that specifies the view of the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>points</parameter></term>
		<listitem>
		  <para>A list of real numbers, world x-y coordinates of points that determine the polygon.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>color</parameter></term>
		<listitem>
		  <para>A string, the color of the polygon's border.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>fill-color</parameter></term>
		<listitem>
		  <para>A string, the color of the polygon's inside.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>adapt</parameter></term>
		<listitem>
		  <para>A Boolean that specifies whether the polygon is important for the visual object dynamic adaptation.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>clip</parameter></term>
		<listitem>
		  <para>A Boolean that specifies whether the allowed rectangle area for drawing the polygon is the scrollable area (<literal>#t</literal>) or the whole window (<literal>#f</literal>).</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>vo-draw-polygon</function> draws a polygon with specified parameters. If the polygon exceeds the area displayed in the view window's canvas and the value of <parameter>adapt</parameter> is <literal>#t</literal>, the view window will first adapt by rescaling the contents of its canvas in the appropriate direction and then the polygon will be drawn fully visible. If the polygon exceeds the scrollable area after the effect of <parameter>adapt</parameter>, and the value of <parameter>clip</parameter> is <literal>#t</literal>, the polygon will be clipped-off at the margins; otherwise, it will be drawn, even beyond the scrollable area. Returns <literal>1</literal> if successful.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>
	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>The following call will draw a triangle with red border, green inside, and world coordinates of the points that determine it: (0, 0), (2, 0), and (1, 1).</para>

	  <para><programlisting>(vo-draw-polygon vo 0 '(0 0 2 0 1 1) "red" "green" #f #f)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>vo-draw-arc</refname>

	  <refpurpose>Draws an arc in a visual object's view window.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-draw-arc <parameter>visual-object</parameter> <parameter>view-id</parameter> <parameter>x</parameter> <parameter>y</parameter> <parameter>radx</parameter> <parameter>rady</parameter> <parameter>start-angle</parameter> <parameter>end-angle</parameter> <parameter>angle</parameter> <parameter>color</parameter> <parameter>fill-color</parameter> <parameter>adapt</parameter> <parameter>clip</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>visual-object</parameter></term>
		<listitem>
		  <para>Specifies the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>view-id</parameter></term>
		<listitem>
		  <para>A non-negative integer that specifies the view of the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>x</parameter></term>
		<listitem>
		  <para>A real number, the world x coordinate of the center of the arc.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>y</parameter></term>
		<listitem>
		  <para>A real number, the world y coordinate of the center of the arc.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>radx</parameter></term>
		<listitem>
		  <para>A real number, the length of the first radius of the arc (i.e., the corresponding ellipse) in world dimensions.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>rady</parameter></term>
		<listitem>
		  <para>A real number, the length of the second radius of the arc (i.e., the corresponding ellipse) in world dimensions.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>start-angle</parameter></term>
		<listitem>
		  <para>A real number, the starting angle of the arc in radians.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>end-angle</parameter></term>
		<listitem>
		  <para>A real number, the ending angle of the arc in radians.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>angle</parameter></term>
		<listitem>
		  <para>A real number, the offset angle of the arc in radians. The <parameter>start-angle</parameter> and <parameter>end-angle</parameter> determine which part of the corresponding ellipse will the arc be, while <parameter>angle</parameter> determines the angle between the corresponding ellipse's first radius and x axis. (not implemented yet)</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>color</parameter></term>
		<listitem>
		  <para>A string, the color of the arc's border.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>fill-color</parameter></term>
		<listitem>
		  <para>A string, the color of the arc's inside.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>adapt</parameter></term>
		<listitem>
		  <para>A Boolean that specifies whether the arc is important for the visual object dynamic adaptation.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>clip</parameter></term>
		<listitem>
		  <para>A Boolean that specifies whether the allowed rectangle area for drawing the arc is the scrollable area (<literal>#t</literal>) or the whole window (<literal>#f</literal>).</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>vo-draw-arc</function> draws an arc with specified parameters. If the arc exceeds the area displayed in the view window's canvas and the value of <parameter>adapt</parameter> is <literal>#t</literal>, the view window will first adapt by rescaling the contents of its canvas in the appropriate direction and then the arc will be drawn fully visible. If the arc exceeds the scrollable area after the effect of <parameter>adapt</parameter>, and the value of <parameter>clip</parameter> is <literal>#t</literal>, the arc will be clipped-off at the margins; otherwise, it will be drawn, even beyond the scrollable area. Returns <literal>1</literal> if successful.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>
	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>The following call will draw an arc with red border, green inside, starting angle 0, ending angle pi/2, offset angle pi/4, radii 3 and 2, and center at (0, 0).</para>

	  <para><programlisting>(vo-draw-arc vo 1 0 0 3 2 0 (/ pi 2) (/ pi 4) "red" "green" #f #f)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>vo-draw-ellipse</refname>

	  <refpurpose>Draws an ellipse in a visual object's view window.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-draw-ellipse <parameter>visual-object</parameter> <parameter>view-id</parameter> <parameter>x</parameter> <parameter>y</parameter> <parameter>radx</parameter> <parameter>rady</parameter> <parameter>angle</parameter> <parameter>color</parameter> <parameter>fill-color</parameter> <parameter>adapt</parameter> <parameter>clip</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>visual-object</parameter></term>
		<listitem>
		  <para>Specifies the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>win-id</parameter></term>
		<listitem>
		  <para>A non-negative integer that specifies the view of the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>x</parameter></term>
		<listitem>
		  <para>A real number, the world x coordinate of the center of the ellipse.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>y</parameter></term>
		<listitem>
		  <para>A real number, the world y coordinate of the center of the ellipse.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>radx</parameter></term>
		<listitem>
		  <para>A real number, the length of the first radius of the ellipse in world dimensions.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>rady</parameter></term>
		<listitem>
		  <para>A real number, the length of the second radius of the ellipse in world dimensions.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>angle</parameter></term>
		<listitem>
		  <para>A real number, the offset angle of the ellipse in radians. It is the angle between the ellipse's first radius and x axis. (not implemented yet)</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>color</parameter></term>
		<listitem>
		  <para>A string, the color of the ellipse's border.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>fill-color</parameter></term>
		<listitem>
		  <para>A string, the color of the ellipse's inside.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>adapt</parameter></term>
		<listitem>
		  <para>A Boolean that specifies whether the ellipse is important for the visual object dynamic adaptation.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>clip</parameter></term>
		<listitem>
		  <para>A Boolean that specifies whether the allowed rectangle area for drawing the ellipse is the scrollable area (<literal>#t</literal>) or the whole window (<literal>#f</literal>).</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>vo-draw-ellipse</function> draws an ellipse with specified parameters. If the ellipse exceeds the area displayed in the view window's canvas and the value of <parameter>adapt</parameter> is <literal>#t</literal>, the view window will first adapt by rescaling the contents of its canvas in the appropriate direction and then the ellipse will be drawn fully visible. If the ellipse exceeds the scrollable area after the effect of <parameter>adapt</parameter>, and the value of <parameter>clip</parameter> is <literal>#t</literal>, the ellipse will be clipped-off at the margins; otherwise, it will be drawn, even beyond the scrollable area. Returns <literal>1</literal> if successful.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>The following call will draw an ellipse with red border, green inside, offset angle pi/4, radii 3 and 2, and center at (0, 0).</para>

	  <para><programlisting>(vo-draw-ellipse vo 1 0 0 3 2 (/ pi 4) "red" "green" #f #f)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>vo-draw-text</refname>

	  <refpurpose>Draws a text in a visual object's view window.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-draw-text <parameter>visual-object</parameter> <parameter>view-id</parameter> <parameter>text</parameter> <parameter>x</parameter> <parameter>y</parameter> <parameter>x-align</parameter> <parameter>y-align</parameter> <parameter>foreground</parameter> <parameter>background</parameter> <parameter>font</parameter> <parameter>adapt</parameter> <parameter>clip</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>visual-object</parameter></term>
		<listitem>
		  <para>Specifies the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>view-id</parameter></term>
		<listitem>
		  <para>A non-negative integer that specifies the view of the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>text</parameter></term>
		<listitem>
		  <para>A string, the text to be displayed.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>x</parameter></term>
		<listitem>
		  <para>A real number, the world x coordinate of the text's origin.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>y</parameter></term>
		<listitem>
		  <para>A real number, the world y coordinate of the text's origin.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>x-align</parameter></term>
		<listitem>
		  <para>An integer, one of the three constants: <literal>LEFT</literal> (default), <literal>RIGHT</literal>, and <literal>CENTER</literal>, specifying the horizontal alignment of the text.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>y-align</parameter></term>
		<listitem>
		  <para>An integer, one of the two constants: <literal>BOTTOM</literal> (default) and <literal>TOP</literal>, specifying the vertical alignment of the text.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>foreground</parameter></term>
		<listitem>
		  <para>A string, the foreground color of the text.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>background</parameter></term>
		<listitem>
		  <para>A string, the background color of the text.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>font</parameter></term>
		<listitem>
		  <para>A string, the X11 font name of the font used to render the text.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>adapt</parameter></term>
		<listitem>
		  <para>A Boolean that specifies whether the text is important for the visual object dynamic adaptation.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>clip</parameter></term>
		<listitem>
		  <para>A Boolean that specifies whether the allowed rectangle area for drawing the text is the scrollable area (<literal>#t</literal>) or the whole window (<literal>#f</literal>).</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>vo-draw-text</function> draws a text with specified parameters. If the text exceeds the area displayed in the view window's canvas and the value of <parameter>adapt</parameter> is <literal>#t</literal>, the view window will first adapt by rescaling the contents of its canvas in the appropriate direction and then the text will be drawn fully visible. If the text exceeds the scrollable area after the effect of <parameter>adapt</parameter>, and the value of <parameter>clip</parameter> is <literal>#t</literal>, the text will be clipped-off at the margins; otherwise, it will be drawn, even beyond the scrollable area. Returns <literal>1</literal> if successful.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(vo-draw-text vo 1 "Hello, world!"
  100.0 0.0 "black" "white" "fixed" LEFT BOTTOM #f #f)</programlisting></para>

	  <para>writes string <literal>Hello, world!</literal> using pretty standard parameters, with its left-bottom point at world coordinates (100, 0).</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>vo-draw-figure</refname>

	  <refpurpose>Extract and copies a scaled portion of a GIF image to a view window of a visual object.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-draw-figure <parameter>visual-object</parameter> <parameter>view-id</parameter> <parameter>filename</parameter> <parameter>orig-x-offset</parameter> <parameter>orig-y-offset</parameter> <parameter>orig-width</parameter> <parameter>orig-height</parameter> <parameter>world-x-offset</parameter> <parameter>world-y-offset</parameter> <parameter>world-width</parameter> <parameter>world-height</parameter> <parameter>adapt</parameter> <parameter>clip</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>visual-object</parameter></term>
		<listitem>
		  <para>Specifies the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>view-id</parameter></term>
		<listitem>
		  <para>A non-negative integer that specifies the view of the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>filename</parameter></term>
		<listitem>
		  <para>The name of the GIF file.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>orig-x-offset</parameter></term>
		<listitem>
		  <para>The x offset in pixels of the subimage to be extracted (a non-negative integer).</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>orig-y-offset</parameter></term>
		<listitem>
		  <para>The y offset in pixels of the subimage to be extracted (a non-negative integer).</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>orig-width</parameter></term>
		<listitem>
		  <para>The width in pixels of the subimage to be extracted (a non-negative integer). Zero width means the whole width.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>orig-height</parameter></term>
		<listitem>
		  <para>The height in pixels of the subimage to be extracted (a non-negative integer). Zero height means the whole height.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>world-x-offset</parameter></term>
		<listitem>
		  <para>The world x coordinate of the lower left corner of the subimage in the view window.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>world-y-offset</parameter></term>
		<listitem>
		  <para>The world y coordinate of the lower left corner of the subimage in the view window.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>world-width</parameter></term>
		<listitem>
		  <para>The width, in the world coordinate system, of the subimage in the view window. Zero width means no rescaling horizontally.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>world-height</parameter></term>
		<listitem>
		  <para>The height, in the world coordinate system, of the subimage in the view window. Zero height means no rescaling vertically.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>adapt</parameter></term>
		<listitem>
		  <para>A Boolean that specifies whether the figure is important for the visual object dynamic adaptation.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>clip</parameter></term>
		<listitem>
		  <para>A Boolean that specifies whether the allowed rectangle area for drawing the figure is the scrollable area (<literal>#t</literal>) or the whole window (<literal>#f</literal>).</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>vo-draw-figure</function> extracts a (rectangular) subimage, given by the offset (<parameter>orig-x-offset</parameter> and <parameter>orig-y-offset</parameter>) and dimensions (<parameter>orig-width</parameter> and <parameter>orig-height</parameter>, if non-zero) from a GIF file. Then, it rescales the subimage so that its dimensions in the world coordinate system of the given view window are <parameter>world-width</parameter> and <parameter>world-height</parameter> (if non-zero), and copies it to the view window, using <parameter>world-x-offset</parameter> and <parameter>world-y-offset</parameter> as the coordinates of the lower left corner.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>The following call will extract a rectangular figure from GIF file "logo.gif", with the lower left corner at (10, 10) and upper right corner at (30, 50); then it will rescale it so that its dimensions in the world coordinate system of the view window are 15.5 by 15.5, and copy it so that its lower left corner is placed at (100.0, 20.0) in the world coordinate system. If the figure would exceed the scrollable area, then the world coordinate system will be made to adapt, according to the view's dynamic adaptation, so that the figure fits into the scrollable area afterwards. If the figure exceeds the scrollable area after the effect of <parameter>adapt</parameter>, and the value of <parameter>clip</parameter> is <literal>#t</literal>, it will be clipped-off at the margins; otherwise, it will be drawn, even beyond the scrollable area. Returns <literal>1</literal> if successful.</para> <para><programlisting>(vo-draw-figure vo 0 "logo.gif" 10 10 20 40 100.0 20.0 15.5 15.5 #t #f)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>vo-resize</refname>

	  <refpurpose>Resizes a view window of a visual object.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-resize <parameter>visual-object</parameter> <parameter>view-id</parameter> <parameter>new-width</parameter> <parameter>new-height</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>visual-object</parameter></term>
		<listitem>
		  <para>Specifies the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>view-id</parameter></term>
		<listitem>
		  <para>A non-negative integer that specifies the view of the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>new-width</parameter></term>
		<listitem>
		  <para>The new width of the view window in pixels.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>new-height</parameter></term>
		<listitem>
		  <para>The new height of the view window in pixels.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>vo-resize</function> resizes the view window so that its new dimensions in pixels become <parameter>new-width</parameter> by <parameter>new-height</parameter>. The contents of the window is appropriately rescaled. Returns <literal>1</literal> if successful.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>In this example, the view window is resized to become 150 pixels wide and 150 pixels high, and the graphical contents is resized appropriately. The world coordinate system is not affected.</para>

	  <para><programlisting>(vo-resize vo 0 150 150)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>vo-rescale</refname>

	  <refpurpose>Rescales the scrollable area of a view window of a visual object.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-rescale <parameter>visual-object</parameter> <parameter>view-id</parameter> <parameter>x-factor</parameter> <parameter>y-factor</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>visual-object</parameter></term>
		<listitem>
		  <para>Specifies the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>view-id</parameter></term>
		<listitem>
		  <para>A non-negative integer that specifies the view of the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>x-factor</parameter></term>
		<listitem>
		  <para>The factor by which the ratio world / window x coordinate is multiplied. If <parameter>x-factor</parameter> is greater than 1, the contents of the window becomes "smaller." If <parameter>x-factor</parameter> is positive, the reference (static) edge is the left edge of the scrollable area; if it is negative, the reference edge is the right edge of the scrollable area, and the absolute value of <parameter>x-factor</parameter> is used for rescaling.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>y-factor</parameter></term>
		<listitem>
		  <para>The factor by which the ratio world / window y coordinate is multiplied. If <parameter>y-factor</parameter> is greater than 1, the contents of the window becomes "smaller." If <parameter>y-factor</parameter> is positive, the reference (static) edge is the bottom edge of the scrollable area; if it is negative, the reference edge is the top edge of the scrollable area, and the absolute value of <parameter>y-factor</parameter> is used for rescaling.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>vo-rescale</function> rescales the contents of the scrollable area of the view window and establishes new ratios between the world and window coordinates (which hold not only for the scrollable area but for the whole window). The graphical contents in the margins is not rescaled. Returns <literal>1</literal> if successful.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>In this example, the graphical contents of the 0th view window of the visual object <literal>vo</literal> is horizontally shrunk by 50% (with the left edge of the scrollable area being the reference edge) vertically stretched by 100% (with the bottom edge of the scrollable area being the reference edge).</para>

	  <para><programlisting>(vo-rescale vo 0 2.0 0.5)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>vo-postpone</refname>

	  <refpurpose>Toggles postponed drawing to a view window.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-postpone <parameter>visual-object</parameter> <parameter>view-id</parameter> <parameter>flag</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>visual-object</parameter></term>
		<listitem>
		  <para>Specifies the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>view-id</parameter></term>
		<listitem>
		  <para>A non-negative integer that specifies the view of the visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>flag</parameter></term>
		<listitem>
		  <para>Turns on (when <literal>#t</literal>) or off (when <literal>#f</literal>) the postponed drawing to the view window.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>To avoid flickering, it is sometimes better to first draw several graphical objects to memory, and then copy the whole graphical contents to the view window. The drawing only to memory is called postponed, and is turned on by calling <function>vo-postpone</function> with <parameter>flag</parameter> set to <literal>#t</literal>. When the graphical contents is to be copied to the view window, <function>vo-postpone</function> should be called with <parameter>flag</parameter> set to <literal>#f</literal>. The function returns <literal>1</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>
	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(vo-postpone vo 0 #t)</programlisting></para>

	  <para>postpones drawing to the first (i.e., the one indexed by 0) view window of visual object <literal>vo</literal>. From this point on, graphical objects will only be drawn in memory belonging to this view.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>vo-text-extents</refname>

	  <refpurpose>Returns the rectangle extents that a text string occupies.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-text-extents <parameter>text</parameter> <parameter>font</parameter> <parameter>x-align</parameter> <parameter>y-align</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>text</parameter></term>
		<listitem>
		  <para>The text whose extents is to be computed.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>font</parameter></term>
		<listitem>
		  <para>The font assumed when computing the text extents.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>x-align</parameter></term>
		<listitem>
		  <para>The horizontal alignment assumed when computing the text extents.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>y-align</parameter></term>
		<listitem>
		  <para>The vertical alignment assumed when computing the text extents.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>vo-text-extents</function> does not apply to a specific view or visual object. Given a text string and a font name, it returns a list of four numbers determining the rectangle area (min x, min y, max x, max y) occupied by the text, with its lower-left pixel positioned at (0, 0). To obtain these numbers, the left and right text bearings are taken into account, as well as the horizontal alignment <parameter>x-align</parameter>, so that some of the number may be negative. Similarly, the text ascent and descent are taken into account, together with the vertical alignment <parameter>y-align</parameter>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>When aligning horizontally, bearings are used in the offset computation, so that different text strings may have different offsets in order for their extreme points to be aligned. The vertical alignment works a little differently: the text descent is not used when the alignment is <literal>BOTTOM</literal>; instead, text strings are aligned by their baseline. When the vertical alignment is <literal>TOP</literal>, the y coordinate of a text string is decreased by the corresponding text ascent.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>The call below returns '(0 -2 48 11).</para>

	  <para><programlisting>(vo-text-extents "Michigan" "fixed" LEFT BOTTOM)</programlisting></para>

	  <para>When the vertical alignment is changed to <literal>TOP</literal>, the call returns '(0 -13 48 1). Similarly, when the horizontal alignment is changed to <literal>RIGHT</literal>, the call returns '(-47 2 1 11).</para>
	</refsect1>
      </refentry>
    </sect1>
    <sect1>
      <title>Utility Functions</title>

      <para>Two functions are defined in module <literal>(pgrt vo)</literal> that are used by code generated by the VOML compiler to support higher-level behavior of info-structure rendering (IR) components.</para>
      <refentry>
	<refnamediv>
	  <refname>vo-undraw-irc</refname>

	  <refpurpose>Undraws graphical objects previously drawn by an IR component.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-undraw-irc vo bag mode)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>vo</parameter></term>
		<listitem>
		  <para>A visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>bag</parameter></term>
		<listitem>
		  <para>A list of vectors that contain information about calls to graphical primitives in previous invocations of an IR component.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>mode</parameter></term>
		<listitem>
		  <para>An additional parameter to control the way undrawing is done. Currently ignored.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>Visual object code generated by the VOML compiler may contain IR <emphasis>bags</emphasis> to store information about graphical objects drawn by individual IR components. These are lists of vectors containing all the arguments of calls to graphical primitives (see the section on low-level visual object functions), in the same order, plus a background color to be used when undrawing a graphical object, as the last element of each such vector. The first element of a bag contains information about each view to which the IR component draws, obtained using <function>vo-get-view-info</function> <emphasis>at the end of the IR component</emphasis>.</para>

	  <para><function>vo-undraw-irc</function> first obtains the current information about the above views, and computes the difference from the information stored in <parameter>bag</parameter> that is due to scrolls and/or rescalings of the views' coordinate systems since the last time the IR was called. Using the difference, <function>vo-undraw-irc</function> tries to account for possible rounding errors in scrolls/rescalings that could have resulted is bad-looking content in raster-based views. Similarly, <function>vo-undraw-irc</function> uses clipping information to undraw graphical objects that were drawn in margins.</para>

	  <para><function>vo-undraw-irc</function> returns an empty bag (list).</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para><function>vo-undraw-irc</function> cannot handle correctly graphical objects that span both the scrollable area and margins, because only the content of the scrollable area is affected by scrolls and rescalings.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(set! ircbag-IRANIMCOMM (vo-undraw-irc vo ircbag-IRANIMCOMM 'update))</programlisting></para>

	  <para>The above code is generated by the VOML compiler at the beginning of IR component <literal>IRANIMCOMM</literal>, whose <literal>refresh</literal> attribute has value of <literal>update</literal>.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>vo-redraw-irc</refname>

	  <refpurpose>Redraws graphical objects previously drawn by an IR component.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(vo-redraw-irc vo bag mode)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>vo</parameter></term>
		<listitem>
		  <para>A visual object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>bag</parameter></term>
		<listitem>
		  <para>A list of vectors that contain information about calls to graphical primitives in previous invocations of an IR component.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>mode</parameter></term>
		<listitem>
		  <para>An additional parameter to control the way undrawing is done. Distinguished values are symbols <literal>rescale</literal> and <literal>resize</literal>.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>vo-redraw-irc</function> first calls <function>vo-undraw-irc</function> passing to it its own parameters, and then redraws graphical objects from <parameter>bag</parameter>. Parameter <parameter>mode</parameter> affects the use of the adaptation flag when drawing the graphical objects.</para>

	  <para><function>vo-redraw-irc</function> returns <parameter>bag</parameter>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para><function>vo-redraw-irc</function> cannot handle correctly graphical objects that span both the scrollable area and margins, because only the content of the scrollable area is affected by scrolls and rescalings.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>
	  <para><programlisting>(set! ircbag-IRANIMCOMM (vo-redraw-irc vo ircbag-IRANIMCOMM 'resize)))</programlisting></para>

	  <para>The above code is generated by the VOML compiler within the callback method when the <literal>refresh</literal> attribute of <literal>IRANIMCOMM</literal> IR component contains <literal>resize</literal>.</para>
	</refsect1>
      </refentry>
    </sect1>
    <sect1>
      <title>Predefined Variables</title>
      <variablelist>
	<varlistentry>
	  <term><literal>CENTER</literal></term>
	  <listitem>
	    <para>Has the value of integer 4. Used in text alignment.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>RIGHT</literal></term>
	  <listitem>
	    <para>Has the value of integer 0. Used in text alignment and scrolling.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>DOWN</literal></term>
	  <listitem>
	    <para>Has the value of integer 3. Used in scrolling and text alignment.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>BOTTOM</literal></term>
	  <listitem>
	    <para>A synonym for <literal>DOWN</literal>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>LEFT</literal></term>
	  <listitem>
	    <para>Has the value of integer 2. Used in text alignment and scrolling.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>UP</literal></term>
	  <listitem>
	    <para>Has the value of integer 1. Used in scrolling and text alignment.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>TOP</literal></term>
	  <listitem>
	    <para>A synonym for <literal>UP</literal>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>XPLUS.R</literal> or <literal>XPLUS</literal></term>
	  <listitem>
	    <para>Has the value of integer 1. Used in visual object initialization, in the visual object dynamic adaptation.  Triggers rescaling to include important graphical objects with x coordinates greater than that of the right edge of the scrollable area.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>XMINUS.R</literal> or <literal>XMINUS</literal></term>
	  <listitem>
	    <para>Has the value of integer 4. Used in visual object initialization, in the visual object dynamic adaptation.  Triggers rescaling to include important graphical objects with x coordinates less than that of the left edge of the scrollable area.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
      <variablelist>
	<varlistentry>
	  <term><literal>YPLUS.R</literal> or <literal>YPLUS</literal></term>
	  <listitem>
	    <para>Has the value of integer 8. Used in visual object initialization, in the visual object dynamic adaptation. Triggers rescaling to include important graphical objects with y coordinates greater than that of the top edge of the scrollable area.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>YMINUS.R</literal> or <literal>YMINUS</literal></term>
	  <listitem>
	    <para>Has the value of integer 2. Used in visual object initialization, in the visual object dynamic adaptation. Triggers rescaling to include important graphical objects with y coordinates less than that of the top edge of the scrollable area.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>XPLUS.S</literal></term>
	  <listitem>
	    <para>Has the value of integer 16. Used in visual object initialization, in the visual object dynamic adaptation. Triggers scrolling to the left to include important graphical objects with x coordinates greater than that of the right edge of the scrollable area.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>XMINUS.S</literal></term>
	  <listitem>
	    <para>Has the value of integer 64. Used in visual object initialization, in the visual object dynamic adaptation. Triggers scrolling to the right to include important graphical objects with x coordinates less than that of the left edge of the scrollable area.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>YMINUS.S</literal></term>
	  <listitem>
	    <para>Has the value of integer 32. Used in visual object initialization, in the visual object dynamic adaptation. Triggers scrolling up to include important graphical objects with y coordinates less than that of the bottom edge of the scrollable area.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>YPLUS.S</literal></term>
	  <listitem>
	    <para>Has the value of integer 128. Used in visual object initialization, in the visual object dynamic adaptation. Triggers scrolling down to include important graphical objects with y coordinates greater than that of the top edge of the scrollable area.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>EVENT_CLICK</literal></term>
	  <listitem>
	    <para>Has the value of integer 1. In the user-defined Scheme callback procedure, used to check, by comparing with one of the procedure's parameters, whether the callback occurred due to a mouse click.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>EVENT_KEYSTROKE</literal></term>
	  <listitem>
	    <para>Has the value of integer 2. In the user-defined Scheme callback procedure, used to check, by comparing with one of the procedure's parameters, whether the callback occurred due to a keyboard stroke.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>EVENT_RESIZE</literal></term>
	  <listitem>
	    <para>Has the value of integer 3. In the user-defined Scheme callback procedure, used to check, by comparing with one of the procedure's parameters, whether the callback occurred due to resizing of the contents of a visual object's view window.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>EVENT_RESCALE</literal></term>
	  <listitem>
	    <para>Has the value of integer 4. In the user-defined Scheme callback procedure, used to check, by comparing with one of the procedure's parameters, whether the callback occurred due to rescaling of the contents of a visual object's view window (more precisely, the contents of the scrollable area).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>ENTRY</literal></term>
	  <listitem>
	    <para>Has the value of integer 3. Used to denote an entry PICL record.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>EXIT</literal></term>
	  <listitem>
	    <para>Has the value of integer 4. used to denote an exit PICL record.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>PG-ENTRY</literal></term>
	  <listitem>
	    <para>Has the value of integer -3. Used to denote an entry PICL record as understood by the ParaGraph tool.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>PG-EXIT</literal></term>
	  <listitem>
	    <para>Has the value of integer -4. Used to denote an exit PICL record as understood by the ParaGraph tool.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><function>lt</function></term>
	  <listitem>
	    <para>The same as function <function><</function>, but more convenient for embedding in VOML code.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><function>gt</function></term>
	  <listitem>
	    <para>The same as function <function>></function>, but more convenient for embedding in VOML code.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><function>lte</function></term>
	  <listitem>
	    <para>The same as function <function><=</function>, but more convenient for embedding in VOML code.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><function>gte</function></term>
	  <listitem>
	    <para>The same as function <function>>=</function>, but more convenient for embedding in VOML code.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect1>
  </chapter>
  <chapter>
    <title>Visual Objects CORBA Interface</title>
    <synopsis>(use-modules (pgrt corba))</synopsis>

    <para>The Visual Objects CORBA interface includes an ORB within &PGRT;-TIE and an interface for registering visual objects with the ORB.</para>
    <sect1>
      <title>The CORBA Interface</title> <para>The CORBA interface is used to receive event records from an instrumentation system via CORBA calls and pass them to visual objects running within the run-time environment. For each visual object, there is a front-end object defined in CORBA IDL.</para>
      <refentry>
	<refnamediv>
	  <refname>orb-init</refname>

	  <refpurpose>Creates and starts the ORB.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(orb-init <parameter>orb-address</parameter> <parameter>ns-address</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>orb-address</parameter></term>
		<listitem>
		  <para>A string obeying one of the three address formats defined by the MICO implementation of CORBA 2.0, <emphasis>internet address</emphasis>, <emphasis>unix address</emphasis>, or <emphasis>local address</emphasis>, used to denote the ORB address (the MICO <literal>-ORBIIOPAddr</literal> option).</para>

		  <para>In general, the internet address format is <userinput>inet:<literal><</literal>host name<literal>></literal>:<literal><</literal>port number<literal>></literal></userinput> and refers to the process running on machine <userinput><literal><</literal>host name<literal>></literal></userinput> that owns the TCP port <userinput><literal><</literal>port number<literal>></literal></userinput>. The unix address format is <userinput>unix:<literal><</literal>socket file name<literal>></literal></userinput> and refers to the process running on the current machine that owns the unix-domain socket bound to <userinput><literal><</literal>socket file name<literal>></literal></userinput>. The local address format is <userinput>local:</userinput> and refers to the process it is used in (i.e., this process).</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>ns-address</parameter></term>
		<listitem>
		  <para>A string obeying one of the three address formats explained above, used to denote the address of the CORBA name service (the MICO <literal>-ORBNamingAddr</literal> option).</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>orb-init</function> creates an ORB within the run-time environment. If successful, it returns <literal>#t</literal>. If no name service daemon is found, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>Neither <parameter>orb-address</parameter> nor <parameter>ns-address</parameter> can be an empty string.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(orb-init "inet:lithium:55556" "inet:californium:55555")</programlisting> initializes the ORB on machine <literal>lithium</literal> so that it accepts requests at port 55556 and assumes that the name service daemon is runnin on machine <literal>californium</literal> and accepts requests at port 55555.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>orb-check</refname>

	  <refpurpose>Checks for incoming ORB requests.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(orb-check <parameter>block</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>block</parameter></term>
		<listitem>
		  <para>An integer specifying whether to block while checking for incoming requests. Ignored in the current implementation.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>Since MICO is not multithreaded, <function>orb-check</function> need be called from time to time, in order to check for incoming ORB requests (each call to <function>orb-check</function> allows the ORB to process the incoming requests). This will typically be done within a loop, which in turn may be within a GUILE (Scheme) thread. The <parameter>block</parameter> is aimed for future use, when MICO design settles. <function>orb-check</function> returns <literal>#t</literal> if an ORB is running; otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(orb-check 0)</programlisting> allows the ORB to check for incoming requests.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>register-vo-with-orb</refname>

	  <refpurpose>Registers indirectly a visual object with the ORB.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(register-vo-with-orb <parameter>name</parameter> <parameter>visual-object</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>name</parameter></term>
		<listitem>
		  <para>A string, the name for the CORBA name service.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>visual-object</parameter></term>
		<listitem>
		  <para>The visual object to be bound to the CORBA object receiving event processing requests through the ORB.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>register-with-orb</function> creates a CORBA object that acts on behalf of <parameter>visual-object</parameter>, and registers it with the name service. The kind of the CORBA object is "PGRTVO", and its name is <parameter>name</parameter>. In the current implementation, the CORBA object only enqueues requests for <parameter>visual-object</parameter> (i.e., instrumentation data records to be passed to its <function>process-event</function> method) into a queue shared by all registered visual objects. This is to avoid blocking of the instrumentation system by visual objects processing the instrumentation data records. If an ORB is running, <function>register-with-orb</function> returns <literal>#t</literal>; otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(register-with-orb "gantt" gantt)</programlisting> where <literal>gantt</literal> is a visual object.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>corba-check</refname>

	  <refpurpose>Checks for pending calls to visual objects' <function>process-event</function> methods.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(corba-check)</synopsis>
	  <refsect2>
	    <title>Parameters</title>

	    <para>None.</para>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>corba-check</function> returns <literal>#t</literal> if there are instrumentation data records (for any visual object) pending in the queue. Otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(corba-check)</programlisting> checks if there are pending instrumentation data records for visual objects.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>corba-receive</refname>

	  <refpurpose>Returns a list of instrumentation data records, paired with their destined visual objects.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(corba-receive)</synopsis>
	  <refsect2>
	    <title>Parameters</title>

	    <para>None.</para>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>corba-receive</function> returns a list of pairs (possibly empty). Each pair is of the form (<literal>visual-object</literal> . <literal>event</literal>), where <literal>visual-object</literal> is the destined visual object of the instrumentation data record <literal>event</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(let ((newly-arrived-events (corba-receive)))
  (alist-for-each
    (lambda (vo event)
      (process-event vo event))
    newly-arrived-events))</programlisting></para>

	  <para>shows how instrumentation data records, which have arrived via the CORBA interface, can be passed to visual object <literal>vo</literal>.</para>
	</refsect1>
      </refentry>
    </sect1>
    <sect1>
      <title>Utility Functions</title>

      <para>Currently, only one utility function is defined in module <literal>(pgrt corba)</literal>.</para>
      <refentry>
	<refnamediv>
	  <refname>corba-recv-a-session</refname>

	  <refpurpose>A receive-then-process loop.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(corba-recv-a-session)</synopsis>
	  <refsect2>
	    <title>Parameters</title>

	    <para>None.</para>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>The code of function <function>corba-recv-a-session</function> and definitions of relevant variables are presented that combines several primitives described in this chapter. <function>corba-recv-a-session</function> is a public function defined in module <literal>(pgrt corba)</literal>. When called, it creates a thread that receives instrumentation data records via the CORBA interface and passes them to visual objects in <literal>vo-list</literal> for processing until <literal>end-of-session</literal> is set to a non-<literal>#f</literal> value.</para>

      <para><programlisting>(define-public corba-mu (make-mutex))
(define-public corba-condvar (make-condition-variable))
(define-public corba-recv-a-session
  (lambda ()
    (make-thread
     (let loop ()
       (if (not end-of-session)
	   (begin
	     (wait-condition-variable corba-condvar corba-mu)
	     (alist-for-each
	      (lambda (vo trec)
		(vo-process-event vo trec))
	      (corba-receive))
	     (loop)))))))</programlisting></para>

      <para>Variables <literal>corba-mu</literal> and <literal>corba-condvar</literal> are used together by <function>wait-condition-variable</function> to implement the semantics of the needed synchronization.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>Concurrently with the above defined thread, there need be another thread that will periodically execute code similar to the following</para>

      <para><programlisting>(orb-check 0)
(if (corba-check)
  (signal-condition-variable corba-condvar))</programlisting></para>

      <para>to notify the thread when there are instrumentation data records to be received via the CORBA interface. Each received instrumentation data record is subsequently passed to its destined visual object.</para>
	</refsect1>
      </refentry>
    </sect1>
    <sect1>
      <title>Predefined Variables</title>
      <variablelist>
	<varlistentry>
	  <term><literal>corba-condvar</literal></term>
	  <listitem>
	    <para>A condition variable used in <function>corba-recv-a-sesison</function>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>corba-mu</literal></term>
	  <listitem>
	    <para>A mutex used in conjunction with <literal>corba-condvar</literal>.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect1>
  </chapter>
  <chapter>
    <title>BRISK Instrumentation System</title>
    <synopsis>(use-modules (pgrt brisk))</synopsis>

    <para>The BRISK support includes an interface for receiving instrumentation data records and procedures for passing them to visual objects.</para>
    <sect1>
      <title>The BRISK Interface</title>

      <para>This section describes primitives that implement the interface between the BRISK distributed instrumentation system and the &PGRT; tool integration environment.</para>
      <refentry>
	<refnamediv>
	  <refname>brisk-init</refname>

	  <refpurpose>Initializes the BRISK interface.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(brisk-init)</synopsis>
	  <refsect2>
	    <title>Parameters</title>

	    <para>None.</para>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>A call to this function allocates and attaches the shared memory segment that contains a ring buffer with instrumentation data records written by the BRISK ISM. If successful, returns <literal>#t</literal>; otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(brisk-init)</programlisting> establishes a shared-memory connection with the BRISK ISM.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>brisk-check</refname>

	  <refpurpose>Checks for BRISK instrumentation data records.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(brisk-check)</synopsis>
	  <refsect2>
	    <title>Parameters</title>

	    <para>None.</para>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>brisk-check</function> returns <literal>#t</literal> if there are instrumentation data records to be receiveded from BRISK ISM. Otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>If the BRISK ISM shared memory buffer has not been allocated (e.g., if <function>brisk-init</function> failed), <function>brisk-check</function> returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(brisk-check)</programlisting> checks if there are instrumentation data records pending in the shared memory buffer.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>brisk-receive</refname>

	  <refpurpose>Returns (at most) one instrumentation data record from the ring buffer.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(brisk-receive <parameter>ts-flag</parameter>)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>ts-flag</parameter></term>
		<listitem>
		  <para>An integer that specifies whether the time-stamp is taken from BRISK (an UTC integer, when <parameter>ts-flag</parameter> equals 0) or is computed as the number of seconds after the call to <function>brisk-init</function>.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>brisk-receive</function> returns a list of instrumentation data record fields, if successful; otherwise, it returns <literal>#f</literal>. The parameter <parameter>ts-flag</parameter> specifies the time-stamp format, which is important only when the instrumentation data record returned has the time-stamp as one of its fields.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(brisk-receive 0)</programlisting> returns an instrumentation data record from the shared memory buffer, if found.</para>
	</refsect1>
      </refentry>
    </sect1>
    <sect1>
      <title>Utility Functions</title>

      <para>Currently, only one utility function is defined in module <literal>(pgrt brisk)</literal>.</para>
      <refentry>
	<refnamediv>
	  <refname>brisk-recv-a-session</refname>

	  <refpurpose>A receive-then-process loop.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(brisk-recv-a-session)</synopsis>
	  <refsect2>
	    <title>Parameters</title>

	    <para>None.</para>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>The code of function <function>brisk-recv-a-session</function> and definitions of relevant variables are presented that combines several primitives described in this chapter. <function>brisk-recv-a-session</function> is a public function defined in module <literal>(pgrt brisk)</literal>. When called, it creates a thread that receives instrumentation data records from the BRISK instrumentation system and passes them to visual objects in <literal>vo-list</literal> for processing until <literal>end-of-session</literal> is set to a non-<literal>#f</literal> value.</para>

      <para><programlisting>(define-public brisk-mu (make-mutex))
(define-public brisk-condvar (make-condition-variable))
(define-public brisk-recv-a-session
  (lambda (ts-format)
    (make-thread
     (lambda ()
       (let loop ()
         (if (not end-of-session)
             (begin
               (wait-condition-variable brisk-condvar brisk-mu)
               (let loop2 ((trec (brisk-receive ts-format)))
                 (if (and trec (not (null? trec)))
                     (begin
                       (for-each
                        (lambda (vo)
                          (vo-process-event vo trec))
                        vo-list)
                       (loop2 (brisk-receive ts-format)))))
               (loop))))))))</programlisting></para>

      <para>Variables <literal>brisk-mu</literal> and <literal>brisk-condvar</literal> are used together by <function>wait-condition-variable</function> to implement the semantics of the needed synchronization.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>
	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>Concurrently with the above defined thread, there need be another thread that will periodically execute the following code</para>

      <para><programlisting>(if (brisk-check)
  (signal-condition-variable brisk-condvar))</programlisting></para>

      <para>to notify the thread when there are instrumentation data records to be received by BRISK ISM. Each received instrumentation data record is subsequently passed to all visual objects in <literal>vo-list</literal>.</para>
	</refsect1>
      </refentry>
    </sect1>
    <sect1>
      <title>Predefined Variables</title>
      <variablelist>
	<varlistentry>
	  <term><literal>brisk-condvar</literal></term>
	  <listitem>
	    <para>A condition variable used in

	    <function>brisk-recv-a-session</function>.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>brisk-mu</literal></term>
	  <listitem>
	    <para>A mutex used in conjunction with <literal>brisk-condvar</literal>.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect1>
  </chapter>
  <chapter>
    <title>XDR Support</title>
    <synopsis>(use-modules (pgrt xdr))</synopsis>

    <para>XDR routines allow C programmers to describe arbitrary data structures in a machine-independent fashion. Data for remote procedure calls (RPC) are transmitted using these routines. The &PGRT;-TIE XDR support implements a Scheme interface to a majority of the XDR routines, so that the data structures can be exchanged between C and Scheme programs.</para>

    <para>The XDR support includes low-level XDR functions and an XDR to Scheme translator, written by Aleksandar Baki&cacute;.</para>

    <para>See also XDR man pages.</para>
    <sect1>
      <title>XDR Object Manipulation Functions</title>

      <para>These functions deal with the creation of XDR streams. XDR streams have to be created before any data can be translated into XDR format. In &PGRT;-TIE, every XDR stream is represented by a Scheme XDR object.</para>
      <refentry>
	<refnamediv>
	  <refname>xdrmem-create</refname>

	  <refpurpose>Creates an XDR stream object in memory.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdrmem-create data-info x-op)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>data-info</parameter></term>
		<listitem>
		  <para>A pair containing the address and size in bytes of an in-memory buffer.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>x-op</parameter></term>
		<listitem>
		  <para>The XDR operation type.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>If successful, <function>xdrmem-create</function> returns a Scheme XDR object that corresponds to the XDR stream with the given in-memory buffer. If the XDR operation type is <literal>XDR_ENCODE</literal>, the first element of <parameter>data-info</parameter> (the buffer address) is ignored. Otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para><function>xdrmem-create</function> allocates space for both the XDR stream and in-memory buffer. In order to send/receive data stored in the in-memory buffer, one needs functions that can access the buffer, given its address, and write/read from it. Usually, such functions belong to a GUILE extension.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(define xdrobj
  (xdrmem-create '(0 . 2048) XDR_ENCODE))</programlisting> creates an in-memory XDR stream for encoding.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>xdrmem-get-data-info</refname>

	  <refpurpose>Returns a pair of an XDR stream's in-memory buffer address and size.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdrmem-get-data-info xdr-object)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-object</parameter></term>
		<listitem>
		  <para>A Scheme XDR object.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>xdrmem-get-data-info</function> is a utility function that returns a pair of an XDR stream's in-memory buffer address and size. The XDR stream corresponds to <parameter>xdr-object</parameter>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>The result is valid only if <function>xdrmem-get-data-info</function> is applied on Scheme XDR objects that correspond to in-memory XDR streams.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>The last call in the following example may return <literal>(1043832 . 2048)</literal>. The value of the first element of the returned pair depends on the memory-management system.</para>

	  <para><programlisting>(define xdrobj
   (xdrmem-create '(0 . 2048) XDR_ENCODE))
(xdrmem-get-data-info xdrobj)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>xdrmem-free</refname>

	  <refpurpose>Frees the memory used by an XDR stream.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdrmem-free xdr-object)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-object</parameter></term>
		<listitem>
		  <para>A Scheme XDR object.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>There is no direct counterpart for <function>xdrmem-free</function> in the XDR library. This function is provided for convenience and to simplify the use of <function>xdrmem-create</function>. It frees the memory space used the XDR stream corresponding to <parameter>xdr-object</parameter>, and returns modified <parameter>xdr-object</parameter>, which has a fresh buffer for encoding or decoding.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para><function>xdrmem-free</function> creates a side-effect, i.e., changes data corresponding to <parameter>xdr-object</parameter>.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(xdrmem-free xdrobj)</programlisting> frees (or clears) the in-memory buffer associated with XDR stream object <literal>xdrobj</literal>; the effect is similar to a new call to <function>xdrmem-create</function>.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>xdrmem-destroy</refname>

	  <refpurpose>Destroys an XDR stream and frees the memory it used.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdrmem-destroy xdr-object)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-object</parameter></term>
		<listitem>
		  <para>A Scheme XDR object.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>xdrmem-destroy</function> destroys the XDR stream corresponding to <parameter>xdr-object</parameter> and frees up the memory space it used. Returns <parameter>xdr-object</parameter>, which becomes unusable.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para><function>xdrmem-destroy</function> uses a side-effect, i.e., changes data corresponding to <parameter>xdr-object</parameter>.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(xdrmem-destroy xdrobj)</programlisting> simply renders the XDR object stored in <literal>xdrobj</literal> unusable.</para>
	</refsect1>
      </refentry>
    </sect1>
    <sect1>
      <title>XDR Simple Data Functions</title>

      <para>These XDR functions allow Scheme programmers to describe simple data structures in a machine-independent fashion. They require the creation of XDR streams (see <function>xdrmem-create</function>). Unlike their C counterparts that use pointers to variables whose values are to be translated, these functions <emphasis>return</emphasis> translated values when the XDR operation type is <literal>XDR_DECODE</literal>.</para>
      <refentry>
	<refnamediv>
	  <refname>xdr-bool</refname>

	  <refpurpose>Translates between Scheme objects of type Boolean and their XDR representations.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdr-bool xdr-object bool-obj)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-object</parameter></term>
		<listitem>
		  <para>A Scheme XDR object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>bool-obj</parameter></term>
		<listitem>
		  <para>The Scheme Boolean to be translated from/to its XDR representation.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>If successful, <function>xdr-bool</function> returns the translated Scheme datum. Otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>This example shows how to translate a Boolean to its XDR representation. See also other examples in this section.</para>

	  <para><programlisting>(define xdrobj
  (xdrmem-create '(0 . 2048) XDR_ENCODE))
(xdr-bool xdrobj #t)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>xdr-char</refname>

	  <refpurpose>Translates between Scheme objects of type integer (exact in the range from -128 to 127) and their XDR representations as chars.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdr-char xdr-object char-obj)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-object</parameter></term>
		<listitem>
		  <para>A Scheme XDR object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>char-obj</parameter></term>
		<listitem>
		  <para>The Scheme bounded integer (exact) to be translated from/to its XDR representation as a char.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>	    
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>If successful, <function>xdr-char</function> returns the translated Scheme datum. Otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>This example shows how to obtain a Scheme integer (exact) from its XDR representation as a char. It is assumed that the data buffer address is known (<literal>#x1000000</literal>). See also other examples in this section.</para>

	  <para><programlisting>(define xdrobj
  (xdrmem-create '(#x1000000 . 2048) XDR_DECODE))
; fill in xdrobj's buffer with data in XDR format,
; assume that the next datum to be decoded is a char
(define charobj #\Nul)
(set! charobj (xdr-char xdrobj charobj))</programlisting></para>

	  <para>The second argument to <function>xdr-char</function> in this example does not have to be the same as the variable being updated. However, the type of the second argument must be bounded integer (exact).</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>xdr-double</refname>

	  <refpurpose>Translates between Scheme objects of type real and their XDR representations as doubles.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdr-double xdr-object real-obj)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-object</parameter></term>
		<listitem>
		  <para>A Scheme XDR object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>real-obj</parameter></term>
		<listitem>
		  <para>The Scheme real to be translated from/to its XDR representation as a double.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>If successful, <function>xdr-double</function> returns the translated Scheme datum. Otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>
	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>This example shows how to translate a real to its XDR representation as a double. See also other examples in this section.</para>

	  <para><programlisting>(define xdrobj
  (xdrmem-create '(0 . 2048) XDR_ENCODE))
(xdr-double xdrobj 123.45)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>xdr-enum</refname>

	  <refpurpose>Translates between Scheme objects of type positive integer (exact) and their XDR representations as enums.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdr-double xdr-object enum-obj)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-object</parameter></term>
		<listitem>
		  <para>A Scheme XDR object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>enum-obj</parameter></term>
		<listitem>
		  <para>The Scheme positive integer (exact) to be translated from/to its XDR representation as an enum.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>If successful, <function>xdr-enum</function> returns the translated Scheme datum. Otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>
	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>This example shows how to translate an enum to its XDR representation. See also other examples in this section.</para>

	  <para><programlisting>(define RED 1)
(define xdrobj
  (xdrmem-create '(0 . 2048) XDR_ENCODE))
(xdr-enum xdrobj RED)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>xdr-float</refname>

	  <refpurpose>Translates between Scheme objects of type real (in the range from -<literal>MAXFLOAT</literal> to <literal>MAXFLOAT</literal>) and their XDR representations as floats.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdr-float xdr-object float-obj)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-object</parameter></term>
		<listitem>
		  <para>A Scheme XDR object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>float-obj</parameter></term>
		<listitem>
		  <para>The Scheme bounded real to be translated from/to its XDR representation as a float.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>If successful, <function>xdr-float</function> returns the translated Scheme datum. Otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>This example shows how to obtain a Scheme bounded real from its XDR representation as a float. It is assumed that the data buffer address is known (<literal>#x1000000</literal>). See also other examples in this section.</para>

	  <para><programlisting>(define xdrobj
  (xdrmem-create '(#x1000000 . 2048) XDR_DECODE))
; fill in xdrobj's buffer with data in XDR format,
; assume that the next datum to be decoded is a float
(define floatobj 0.0)
(set! floatobj (xdr-float xdrobj floatobj))</programlisting></para>

	  <para>The second argument to <function>xdr-float</function> in this example does not have to be the same as the variable being updated. However, the type of the second argument must be bounded real.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>xdr-hyper</refname>

	  <refpurpose>Translates between Scheme objects of type integer (exact) and their XDR representations as hypers (8-byte integers).</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdr-hyper xdr-object hyper-obj)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-object</parameter></term>
		<listitem>
		  <para>A Scheme XDR object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>hyper-obj</parameter></term>
		<listitem>
		  <para>The Scheme integer (exact) to be translated from/to its XDR representation as a hyper.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>If successful, <function>xdr-hyper</function> returns the translated Scheme datum. Otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>Currently, hypers are translated to ordinary Scheme integers. Support for bignums is planned.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>This example shows how to translate an integer to its XDR representation as a hyper. See also other examples in this section.</para>

	  <para><programlisting>(define xdrobj
  (xdrmem-create '(0 . 2048) XDR_ENCODE))
(xdr-hyper xdrobj 123)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>xdr-int</refname>

	  <refpurpose>Translates between Scheme objects of type integer (exact) (in the range from -<literal>MAXINT</literal> - 1 to <literal>MAXINT</literal>) and their XDR representations as ints.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdr-int xdr-object int-obj)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-object</parameter></term>
		<listitem>
		  <para>A Scheme XDR object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>int-obj</parameter></term>
		<listitem>
		  <para>The Scheme bounded integer (exact) to be translated from/to its XDR representation as an int.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>If successful, <function>xdr-int</function> returns the translated Scheme datum. Otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>This example shows how to obtain a Scheme integer (exact) from its XDR representation as an int. It is assumed that the data buffer address is known (<literal>#x1000000</literal>). See also other examples in this section.</para>

	  <para><programlisting>(define xdrobj
  (xdrmem-create '(#x1000000 . 2048) XDR_DECODE))
; fill in xdrobj's buffer with data in XDR format,
; assume that the next datum to be decoded is an int
(define intobj 0)
(set! intobj (xdr-int xdrobj intobj))</programlisting></para>

	  <para>The second argument to <function>xdr-int</function> in this example does not have to be the same as the variable being updated. However, the type of the second argument must be bounded integer (exact).</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>xdr-long</refname>

	  <refpurpose>Translates between Scheme objects of type integer (exact) and their XDR representations as longs.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdr-long xdr-object long-obj)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-object</parameter></term>
		<listitem>
		  <para>A Scheme XDR object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>long-obj</parameter></term>
		<listitem>
		  <para>The Scheme integer (exact) to be translated from/to its XDR representation as a long.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>If successful, <function>xdr-long</function> returns the translated Scheme datum. Otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>This example shows how to obtain a Scheme integer (exact) from its XDR representation as a long. It is assumed that the data buffer address is known (<literal>#x1000000</literal>). See also other examples in this section.</para>

	  <para><programlisting>(define xdrobj
  (xdrmem-create '(#x1000000 . 2048) XDR_DECODE))
; fill in xdrobj's buffer with data in XDR format,
; assume that the next datum to be decoded is a long
(define longobj 0)
(set! longobj (xdr-long xdrobj longobj))</programlisting></para>

	  <para>The second argument to <function>xdr-long</function> in this example does not have to be the same as the variable being updated. However, the type of the second argument must be integer (exact).</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>xdr-quad</refname>

	  <refpurpose>Translates between Scheme objects of type real and their XDR representations as quadruples (16-byte reals).</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdr-quad xdr-object quad-obj)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-object</parameter></term>
		<listitem>
		  <para>A Scheme XDR object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>quad-obj</parameter></term>
		<listitem>
		  <para>The Scheme real to be translated from/to its XDR representation as a quadruple.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>If successful, <function>xdr-quad</function> returns the translated Scheme datum. Otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>This example shows how to translate a real to its XDR representation as a quadruple. See also other examples in this section.</para>
	
	  <para><programlisting>(define xdrobj
  (xdrmem-create '(0 . 2048) XDR_ENCODE))
(xdr-quad xdrobj 123.45)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>xdr-short</refname>

	  <refpurpose>Translates between Scheme objects of type integer (in the range from -<literal>MAXSHORT</literal> - 1 to <literal>MAXSHORT</literal>) and their XDR representations as shorts.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdr-short xdr-object short-obj)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-object</parameter></term>
		<listitem>
		  <para>A Scheme XDR object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>short-obj</parameter></term>
		<listitem>
		  <para>The Scheme bounded integer (exact) to be translated from/to its XDR representation as a short.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>If successful, <function>xdr-short</function> returns the translated Scheme datum. Otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>This example shows how to obtain a Scheme bounded integer (exact) from its XDR representation as a short. It is assumed that the data buffer address is known (<literal>#x1000000</literal>). See also other examples in this section.</para>

	  <para><programlisting>(define xdrobj
  (xdrmem-create '(#x1000000 . 2048) XDR_DECODE))
; fill in xdrobj's buffer with data in XDR format,
; assume that the next datum to be decoded is a short
(define shortobj 0)
(set! shortobj (xdr-short xdrobj shortobj))</programlisting></para>

	  <para>The second argument to <function>xdr-short</function> in this example does not have to be the same as the variable being updated. However, the type of the second argument must be bounded integer (exact).</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>xdr-u_char</refname>

	  <refpurpose>Translates between Scheme objects of type integer (exact in the range from 0 to 255) and their XDR representations as unsigned chars.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdr-u_char xdr-object u_char-obj)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-object</parameter></term>
		<listitem>
		  <para>A Scheme XDR object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>u_char-obj</parameter></term>
		<listitem>
		  <para>The Scheme bounded integer (exact) to be translated from/to its XDR representation as an unsigned char.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>If successful, <function>xdr-u_char</function> returns the translated Scheme datum. Otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>This example shows how to translate a bounded integer to its XDR representation as an unsigned char. See also other examples in this section.</para>

	  <para><programlisting>(define xdrobj
  (xdrmem-create '(0 . 2048) XDR_ENCODE))
(xdr-u_char xdrobj 64)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>xdr-u_hyper</refname>

	  <refpurpose>Translates between Scheme objects of type non-negative integer and their XDR representations as unsigned hypers.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdr-u_hyper xdr-object u_hyper-obj)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-object</parameter></term>
		<listitem>
		  <para>A Scheme XDR object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>u_hyper-obj</parameter></term>
		<listitem>
		  <para>The Scheme non-negative integer (exact) to be translated from/to its XDR representation as an unsigned hyper.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>If successful, <function>xdr-u_hyper</function> returns the translated Scheme datum. Otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>Currently, unigned hypers are translated to ordinary Scheme integers. Support for bignums is planned.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>This example shows how to obtain a Scheme non-negative integer (exact) from its XDR representation as an unsigned hyper. It is assumed that the data buffer address is known (<literal>#x1000000</literal>). See also other examples in this section.</para>

	  <para><programlisting>(define xdrobj
  (xdrmem-create '(#x1000000 . 2048) XDR_DECODE))
; fill in xdrobj's buffer with data in XDR format,
; assume that the next datum to be decoded is an unsigned hyper
(define u_hiperobj 0.0)
(set! u_hyperobj (xdr-u_hyper xdrobj u_hyperobj))</programlisting></para>

	  <para>The second argument to <function>xdr-u_hyper</function> in this example does not have to be the same as the variable being updated. However, the type of the second argument must be non-negative integer (exact).</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>xdr-u_int</refname>

	  <refpurpose>Translates between Scheme objects of type non-negative integer (exact less than or equal to 2 * <literal>MAXINT</literal> + 1) and their XDR representations as unsigned ints.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdr-u_int xdr-object u_int-obj)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-object</parameter></term>
		<listitem>
		  <para>A Scheme XDR object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>u_int-obj</parameter></term>
		<listitem>
		  <para>The Scheme bounded non-negative integer (exact) to be translated from/to its XDR representation as an unsigned int.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>If successful, <function>xdr-u_int</function> returns the translated Scheme datum. Otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>This example shows how to translate a non-negative bounded integer to its XDR representation as an unsigned int. See also other examples in this section.</para>

	  <para><programlisting>(define xdrobj
  (xdrmem-create '(0 . 2048) XDR_ENCODE)
(xdr-u_int xdrobj 60000)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>xdr-u_long</refname>

	  <refpurpose>Translates between Scheme objects of type non-negative integer (exact) and their XDR representations as unsigned longs..</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdr-u_long xdr-object u_long-obj)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-object</parameter></term>
		<listitem>
		  <para>A Scheme XDR object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>u_long-obj</parameter></term>
		<listitem>
		  <para>The scheme non-negative integer (exact) to be translated from/to its XDR representation as an unsigned long.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>If successful, <function>xdr-u_long</function> returns the translated Scheme datum. Otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>This example shows how to obtain a Scheme non-negative integer (exact) from its XDR representation as an unsigned long. It is assumed that the data buffer address is known (<literal>#x1000000</literal>). See also other examples in this section.</para>

	  <para><programlisting>(define xdrobj
  (xdrmem-create '(#x1000000 . 2048) XDR_DECODE))
; fill in xdrobj's buffer with data in XDR format,
; assume that the next datum to be decoded is an unsigned long
(define u_longobj 0)
(set! u_longobj (xdr-u_long xdrobj u_longobj))</programlisting></para>

	  <para>The second argument to <function>xdr-u_long</function> in this example does not have to be the same as the variable being updated. However, the type of the second argument must be non-negative integer (exact).</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>xdr-u_short</refname>

	  <refpurpose>Translates between Scheme objects of type non-negative integer (exact less than or equal to 2 * <literal>MAXSHORT</literal> + 1) and their XDR representations as unsigned shorts.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdr-u_short xdr-object u_short-obj)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-object</parameter></term>
		<listitem>
		  <para>A Scheme XDR object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>u_short-obj</parameter></term>
		<listitem>
		  <para>The Scheme bounded non-negative integer (exact) to be translated from/to its XDR representation as an unsigned short.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>If successful, <function>xdr-u_short</function> returns the translated Scheme datum. Otherwise, it returns <literal>fff</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>This example shows how to translate a bounded non-negative integer (exact) to its XDR representation as an unsigned short. See also other examples in this section.</para>

	  <para><programlisting>(define xdrobj
  (xdrmem-create '(0 . 2048) XDR_ENCODE))
(xdr-u_short xdrobj 15)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>xdr-void</refname>

	  <refpurpose>Does nothing and always returns <literal>#t</literal>.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdr-void)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <para>None.</para>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title> <para><function>xdr-void</function> always returns <literal>#t</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>The corresponding XDR library function <function>xdr_void()</function> always returns <literal>TRUE</literal>. It may be passed to RPC routines that require a function parameter, where nothing is to be done. Hence, <function>xdr-void</function> always returns <literal>#t</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(xdr-void)</programlisting></para>
	</refsect1>
      </refentry>
    </sect1>
    <sect1>
      <title>XDR Complex Data Functions</title>

      <para>These XDR functions allow Scheme programmers to describe complex data structures in a machine-independent fashion. They require the creation of XDR streams (see <function>xdrmem-create</function>). Unlike their C counterparts that use pointers to variables whose values are to be translated, these functions <emphasis>return</emphasis> translated values when the XDR operation type is <literal>XDR_DECODE</literal>.</para>

      <para>Not all the XDR library functions for complex data have Scheme-primitive counterparts. Some of the Scheme complex data functions have been implemented as Scheme procedures. See also section on the XDR-to-Scheme translator.</para>
      <refentry>
	<refnamediv>
	  <refname>xdr-fix-string</refname>

	  <refpurpose>Translates between Scheme objects of type fixed-length string (representing also arrays of opaque data) and their XDR representations.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdr-fix-string xdr-object string-obj string-len)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-object</parameter></term>
		<listitem>
		  <para>A Scheme XDR object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>string-obj</parameter></term>
		<listitem>
		  <para>The Scheme string to be translated to/from its XDR representation as a fixed-length array of unsigned chars.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>string-len</parameter></term>
		<listitem>
		  <para>The length of <parameter>string-obj</parameter>.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>xdr-fix-string</function> is used for both strings and opaque (byte) arrays of fixed length (stored in Scheme <emphasis>non</emphasis>-null-terminated strings). The length of <parameter>string-obj</parameter> must be equal to <parameter>string-len</parameter>. The implementation of <function>xdr-fix-string</function> uses XDR library function <function>xdr_u_char()</function> to directly translate from/to chars/bytes. It returns the translated Scheme datum if successful; otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>Currently, only 8-bit characters are supported.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>This example shows how to translate a Scheme fixed-length string to its XDR representation as four unsigned chars. See also other examples in this section.</para>

	  <para><programlisting>(define xdrobj
  (xdrmem-create '(0 . 2048) XDR_ENCODE))
(xdr-fix-string xdrobj "1234" 4)</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>xdr-var-string</refname>

	  <refpurpose>Translates between Scheme objects of type variable-length string (representing also arrays of opaque data) and their XDR representations.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdr-var-string xdr-object string-obj max-string-len)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-object</parameter></term>
		<listitem>
		  <para>A Scheme XDR object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>string-obj</parameter></term>
		<listitem>
		  <para>The Scheme string to be translated to/from its XDR representation as a variable-length array of unsigned chars.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>max-string-len</parameter></term>
		<listitem>
		  <para>The maximum length of <parameter>string-obj</parameter>.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>xdr-var-string</function> is used for both strings and opaque (byte) arrays of variable, but bounded, length (stored in Scheme <emphasis>non</emphasis>-null-terminated strings). The length of <parameter>string-obj</parameter> must be less than or equal to <parameter>max-string-len</parameter>. The implementation of <function>xdr-var-string</function> uses XDR library function <function>xdr_u_char()</function> to directly translate from/to chars/bytes. It returns the translated Scheme datum if successful; otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>Currently, only 8-bit characters are supported. When decoding (i.e., translating from XDR representation), the resulting string has the same length as the XDR array to be decoded.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>This example shows how to obtain a Scheme variable-length string from its XDR representation as an variable-length array of chars/bytes. It is assumed that the data buffer address is known (<literal>#x1000000</literal>). See also other examples in this section.</para>

	  <para><programlisting>(define xdrobj
  (xdrmem-create '(#x1000000 . 2048) XDR_DECODE))
; fill in xdrobj's buffer with data in XDR format,
; assume that the next data to be decoded are an array of unsigned
; chars, at most 10 bytes long
(define my-string "          ") ; 10 characters
(set! my-string (xdr-var-string xdrobj my-string 10))</programlisting></para>

	  <para>The second argument to <function>xdr-var-string</function> in this example does not have to be the same as the variable being updated. However, the type of the second argument must be string of up to 10 characters.</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>xdr-fix-array</refname>

	  <refpurpose>Translates between Scheme vectors of type fixed-length vector and their XDR representations.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdr-fix-array xdr-object vec xdr-fun veltc-fun vec-len)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-object</parameter></term>
		<listitem>
		  <para>A Scheme XDR object.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	    <variablelist>
	      <varlistentry>
		<term><parameter>vec</parameter></term>
		<listitem>
		  <para>The Scheme vector to be translated to/from its XDR representation as a fixed-length array.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>xdr-fun</parameter></term>
		<listitem>
		  <para>A Scheme function that translates a datum of the same type as the elements of <parameter>vec</parameter>, to/from its XDR representation.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>veltc-fun</parameter></term>
		<listitem>
		  <para>A Scheme function that creates a datum of the same type as the elements of <parameter>vec</parameter>.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>vec-len</parameter></term>
		<listitem>
		  <para>The length of <parameter>vec</parameter>.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>xdr-fix-array</function> is used for translating to and from XDR representation of a Scheme (homogeneous) vector <function>vec</function> whose elements are of type defined by the constructor function <parameter>veltc-fun</parameter>. Function <parameter>xdr-fun</parameter> is responsible for performing the translation of the given type. The length of <parameter>vec</parameter> must be equal to <parameter>vec-len</parameter>. If successful, <function>xdr-fix-array</function> returns the translated Scheme vector; otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>This example shows how to obtain a 10-element Scheme vector of bounded reals (floats) from its XDR representation as a 10-element array of floats. It is assumed that the data buffer address is known (<literal>#x1000000</literal>). See also other examples in this section, especially the one for <function>xdr-var-array</function>.</para>

	  <para><programlisting>(define xdrobj
  (xdrmem-create '(#x1000000 . 2048) XDR_DECODE))
(define (new-float)
  0.0)
(define vec (make-vector 10 (new-float)))
; fill in xdrobj's buffer with data in XDR format,
; assume that the next data to be decoded are a 10-element array of floats
(set! vec (xdr-fix-array vec xdr-float new-float 10))
</programlisting></para>

	  <para>The second argument to <function>xdr-fix-array</function> in this example does not have to be the same as the variable being updated. However, the type of the second argument must be a 10-element vector of bounded reals (floats).</para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>xdr-var-array</refname>

	  <refpurpose>Translates between Scheme vectors of type variable-length vector and their XDR representations.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdr-var-array xdr-object vec xdr-fun veltc-fun max-vec-len)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-object</parameter></term>
		<listitem>
		  <para>A Scheme XDR object.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>vec</parameter></term>
		<listitem>
		  <para>The Scheme vector to be translated to/from its XDR representation as a variable-length array.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>xdr-fun</parameter></term>
		<listitem>
		  <para>A Scheme function that translates a datum of the same type as the elements of <parameter>vec</parameter>, to/from its XDR representation.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>veltc-fun</parameter></term>
		<listitem>
		  <para>A Scheme function that creates a datum of the same type as the elements of <parameter>vec</parameter>.</para>
		</listitem>
	      </varlistentry>
	      <varlistentry>
		<term><parameter>max-vec-len</parameter></term>
		<listitem>
		  <para>The maximum length of <parameter>vec</parameter>.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>xdr-var-array</function> is used for translating to and from XDR representation of a Scheme (homogeneous) vector <function>vec</function> whose elements are of type defined by the constructor function <parameter>veltc-fun</parameter>. Function <parameter>xdr-fun</parameter> is responsible for performing the translation of the given type. The length of <parameter>vec</parameter> must be less than or equal to <parameter>max-vec-len</parameter>. If successful, <function>xdr-var-array</function> returns the translated Scheme vector; otherwise, it returns <literal>#f</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>When decoding (i.e., translating from XDR representation), the resulting vector has the same length as the XDR array to be decoded.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>This example shows how to translate a variable-length, at most 10-element long, Scheme vector of integers (exacts) to its XDR representation as a variable-length array of shorts. See also other examples in this section.</para>

	  <para><programlisting>(define xdrobj
  (xdrmem-create '(0 . 2048) XDR_ENCODE))
(define (new-short)
  0)
(define vec (vector 1 2 3 4 5 6 7))
(xdr-var-array xdrobj vec xdr-short new-short 10)</programlisting></para>
	</refsect1>
      </refentry>
    </sect1>
    <sect1>
      <title>XDR to Scheme Translator</title>

      <para>The XDR-to-Scheme translator described in this section is written by Aleksandar Baki&cacute;, using a parser generator due to Dominique Boucherd and a lexer generator due to Danny Dube.</para>
      <refentry>
	<refnamediv>
	  <refname>xdr-lex</refname>

	  <refpurpose>Lexes an XDR specification file.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdr-lex xdr-filename)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-filename</parameter></term>
		<listitem>
		  <para>The name of the XDR file to be lexed.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>xdr-lex</function> reads from file <parameter>xdr-filename</parameter> and outputs pairs (tokens) of the form <literal>(token-class . token-value)</literal>, where <literal>token-class</literal> is an integer determining the class of a token (defined in module <literal>(pgrt xdr)</literal>) and <literal>token-value</literal> is the value associate with the token (<literal>#f</literal> if the token has no value). For the outputting, function <function>display</function> is used.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>This function is supposed to be used for checking purposes.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(xdr-lex "sample.x")</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>xdr-parse</refname>

	  <refpurpose>Parses and XDR specification file.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdr-parse xdr-filename)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-filename</parameter></term>
		<listitem>
		  <para>The name of the XDR file to be parsed.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>xdr-parse</function> reads from file <parameter>xdr-filename</parameter>, parses the contents, and stores the parse tree into variable <literal>xdr:specification</literal>, which is defined in module <literal>(pgrt xdr)</literal>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>This function is supposed to be used for checking purposes.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(xdr-parse "sample.x")</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>pretty-print-xdr-specification</refname>

	  <refpurpose>Pretty-prints an XDR specification, as a parse tree, to a file.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(pretty-print-xdr-specification filename)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>filename</parameter></term>
		<listitem>
		  <para>The name of the file to which the contents of the <literal>xdr:specification</literal> variable (defined in module <literal>(pgrt xdr)</literal>) is written.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>pretty-print-xdr-specification</function> writes the content of <literal>xdr:specification</literal>, using Scheme external representation and a pretty-printer, to file <parameter>filename</parameter>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>This function is supposed to be used for checking purposes.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>Given that the contents of <filename>sample.x</filename> is</para>

	  <para><programlisting>const MY_LENGTH = 10;
const HIS_LENGTH = 5;

struct my_struct
{
	long delta_time;
	short delta_voltage[MY_LENGTH];
	struct his_struct currents;
};

struct his_struct
{
	long delta_time;
	short delta_current[HIS_LENGTH];
	      unsigned int dummy&lt;&gt;;
};</programlisting></para>

	  <para>calls to</para>

	  <para><programlisting>(xdr-parse "sample.x")
(pretty-print-xdr-specification "sample.pp")</programlisting></para>

	  <para>will write the following to <filename>sample.pp</filename></para>

	  <para><programlisting>((xdr:constant-def ("MY_LENGTH" "10"))
 (xdr:constant-def ("HIS_LENGTH" "5"))
 (xdr:type-def
   (xdr:struct
     ("my_struct"
      ((xdr:simple-type-specifier
         (xdr:long)
         "delta_time")
       (xdr:fix-array-type-specifier
         (xdr:short)
         "delta_voltage"
         "MY_LENGTH")
       (xdr:simple-type-specifier
         (xdr:struct-type-spec "his_struct")
         "currents")))))
 (xdr:type-def
   (xdr:struct
     ("his_struct"
      ((xdr:simple-type-specifier
         (xdr:long)
         "delta_time")
       (xdr:fix-array-type-specifier
         (xdr:short)
         "delta_current"
         "HIS_LENGTH")
       (xdr:var-array-type-specifier
         (xdr:u-int)
         "dummy"
         "XDR_MAX_LENGTH"))))))</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>xdr-preprocess</refname>

	  <refpurpose>Preprocesses an XDR specification file.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdr-preprocess xdr-filename)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-filename</parameter></term>
		<listitem>
		  <para>The name of the XDR file to be preprocessed.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para>Often an XDR file contains <literal>cpp</literal> (a C/C++ preprocessor) <literal>#define</literal>s. <function>xdr-preprocess</function> tries to convert <literal>cpp</literal> <literal>#define</literal>s to Scheme <literal>define</literal>s. The resulting definitions are output using Scheme function <function>display</function>.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>

	  <para>In cases when <literal>#define</literal> is used to define a macro, <function>xdr-preprocess</function> replaces the macro by <literal>#t</literal>, and the user has to replace the <literal>#t</literal> manually.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para><programlisting>(xdr-preprocess "sample.x")</programlisting></para>
	</refsect1>
      </refentry>
      <refentry>
	<refnamediv>
	  <refname>xdr->scheme</refname>

	  <refpurpose>Translates an XDR specification file to a file containing corresponding Scheme code and data.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
	  <synopsis>(xdr->scheme xdr-basename)</synopsis>
	  <refsect2>
	    <title>Parameters</title>
	    <variablelist>
	      <varlistentry>
		<term><parameter>xdr-basename</parameter></term>
		<listitem>
		  <para>The <emphasis>basename</emphasis> of the XDR file to be translated to Scheme.</para>
		</listitem>
	      </varlistentry>
	    </variablelist>
	  </refsect2>
	</refsynopsisdiv>
	<refsect1>
	  <title>Description</title>

	  <para><function>xdr->scheme</function> reads from file whose name is obtained by adding <literal>".x"</literal> to <parameter>xdr-basename</parameter>, preprocesses, lexes, and parses its contents, and creates a file whose name is obtained by adding <literal>"_xdr.scm"</literal> to <parameter>xdr-basename</parameter>. The resulting file contains code and data needed to translate XDR data structures defined in the XDR file from their XDR representation to Scheme records (defined in SLIB <literal>struct</literal> module), and vice versa.</para>
	</refsect1>
	<refsect1>
	  <title>Note</title>
	  <para>None.</para>
	</refsect1>
	<refsect1>
	  <title>Example</title>

	  <para>The following call</para>

	  <para><programlisting>(xdr->scheme "sample")</programlisting></para>

	  <para>will read XDR <filename>sample.x</filename> and translate to Scheme file <filename>sample_xdr.scm</filename>. If the content of <filename>sample.x</filename> is the same as in the example for <function>pretty-print-xdr-specification</function>, the content of <filename>sample_xdr.scm</filename> is</para>

	  <para><programlisting>(use-modules (ice-9 slib) (pgrt xdr))
(require 'struct)

(define MY_LENGTH 10)
(define HIS_LENGTH 5)

(define my_struct
  (make-record-type 'my_struct '(f1 f2 f3)))
(define my_struct?
  (record-predicate my_struct))
(define new-my_struct
  (lambda ()
    ((record-constructor my_struct '(f1 f2 f3))
      (new-long)
      (make-vector MY_LENGTH (new-short))
      (new-his_struct))))
(define my_struct.delta_time-ref
  (record-accessor my_struct 'f1))
(define my_struct.delta_time-set!
  (lambda (r v)
    (if (and (my_struct? r)
             (long? v))
      ((record-modifier my_struct 'f1) r v)
      (throw 'xdr-error "Invalid record set!"))))
(define my_struct.delta_voltage-ref
  (record-accessor my_struct 'f2))
(define my_struct.delta_voltage-set!
  (lambda (r v)
    (if (and (my_struct? r)
             (fix-vec? short? MY_LENGTH v))
      ((record-modifier my_struct 'f2) r v)
      (throw 'xdr-error "Invalid record set!"))))
(define my_struct.currents-ref
  (record-accessor my_struct 'f3))
(define my_struct.currents-set!
  (lambda (r v)
    (if (and (my_struct? r)
             (his_struct? v))
      ((record-modifier my_struct 'f3) r v)
      (throw 'xdr-error "Invalid record set!"))))
(define xdr-my_struct
  (lambda (xdr r)
    (let ((tr (new-my_struct)))
      (and
        (my_struct? r)
        (let ((tmp (xdr-long xdr (my_struct.delta_time-ref r))))
          (if tmp
            (my_struct.delta_time-set! tr tmp)
            #f))
        (let ((tmp (xdr-fix-array xdr (my_struct.delta_voltage-ref r) xdr-short new-short MY_LENGTH)))
          (if tmp
            (my_struct.delta_voltage-set! tr tmp)
            #f))
        (let ((tmp (xdr-his_struct xdr (my_struct.currents-ref r))))
          (if tmp
            (my_struct.currents-set! tr tmp)
            #f))
        tr))))

(define his_struct
  (make-record-type 'his_struct '(f1 f2 f3)))
(define his_struct?
  (record-predicate his_struct))
(define new-his_struct
  (lambda ()
    ((record-constructor his_struct '(f1 f2 f3))
      (new-long)
      (make-vector HIS_LENGTH (new-short))
      (make-vector 0 (new-u_int)))))
(define his_struct.delta_time-ref
  (record-accessor his_struct 'f1))
(define his_struct.delta_time-set!
  (lambda (r v)
    (if (and (his_struct? r)
             (long? v))
      ((record-modifier his_struct 'f1) r v)
      (throw 'xdr-error "Invalid record set!"))))
(define his_struct.delta_current-ref
  (record-accessor his_struct 'f2))
(define his_struct.delta_current-set!
  (lambda (r v)
    (if (and (his_struct? r)
             (fix-vec? short? HIS_LENGTH v))
      ((record-modifier his_struct 'f2) r v)
      (throw 'xdr-error "Invalid record set!"))))
(define his_struct.dummy-ref
  (record-accessor his_struct 'f3))
(define his_struct.dummy-set!
  (lambda (r v)
    (if (and (his_struct? r)
             (var-vec? u_int? XDR_MAX_LENGTH v))
      ((record-modifier his_struct 'f3) r v)
      (throw 'xdr-error "Invalid record set!"))))
(define xdr-his_struct
  (lambda (xdr r)
    (let ((tr (new-his_struct)))
      (and
        (his_struct? r)
        (let ((tmp (xdr-long xdr (his_struct.delta_time-ref r))))
          (if tmp
            (his_struct.delta_time-set! tr tmp)
            #f))
        (let ((tmp (xdr-fix-array xdr (his_struct.delta_current-ref r) xdr-short new-short HIS_LENGTH)))
          (if tmp
            (his_struct.delta_current-set! tr tmp)
            #f))
        (let ((tmp (xdr-var-array xdr (his_struct.dummy-ref r) xdr-u_int new-u_int XDR_MAX_LENGTH)))
          (if tmp
            (his_struct.dummy-set! tr tmp)
            #f))
        tr))))

;;; eof</programlisting></para>
	</refsect1>
      </refentry>
    </sect1>
    <sect1>
      <title>Predefined Variables</title>
      <variablelist>
	<varlistentry>
	  <term><literal>XDR_ENCODE</literal></term>
	  <listitem>
	    <para>Has the value equal to the XDR library constant with the same name.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>XDR_DECODE</literal></term>
	  <listitem>
	    <para>Has the value equal to the XDR library constant with the same name.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>XDR_FREE</literal></term>
	  <listitem>
	    <para>Has the value equal to the XDR library constant with the same name.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>XDR_MAX_LENGTH</literal></term>
	  <listitem>
	    <para>Has the value of integer <literal>4294967295</literal>, and is used for specifying the maximum length of XDR data (i.e., specifying that there is no practical limit).</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>MAXSHORT</literal></term>
	  <listitem>
	    <para>Has the value equal to the C constant, defined in C header file <filename>values.h</filename>, with the same name.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>MAXINT</literal></term>
	  <listitem>
	    <para>Has the value equal to the C constant, defined in C header file <filename>values.h</filename>, with the same name.</para>
	  </listitem>
	</varlistentry>
	<varlistentry>
	  <term><literal>MAXFLOAT</literal></term>
	  <listitem>
	    <para>Has the value equal to the C constant, defined in C header file <filename>values.h</filename>, with the same name.</para>
	  </listitem>
	</varlistentry>
      </variablelist>
    </sect1>
    <sect1>
      <title>Utility Functions</title>

      <para>The following data constructor and type checking functions are defined in module <literal>(pgrt xdr)</literal> that are used by files created by <function>xdr->scheme</function>:</para>

      <para><function>new-int</function>, <function>int?</function>, <function>new-enum</function>, <function>enum?</function>, <function>new-u_ing</function>, <function>u_int?</function>, <function>new-hyper</function>, <function>hyper?</function>, <function>new-u_hyper</function>, <function>u_hyper?</function>, <function>new-short</function>, <function>short?</function>, <function>new-u_short</function>, <function>u_short?</function>, <function>new-long</function>, <function>long?</function>, <function>new-u_long</function>, <function>u_long?</function>, <function>new-char</function> (<function>char?</function> is the same as the &R4RS; primitive), <function>new-u_char</function>, <function>u_char?</function>, <function>new-float</function>, <function>float?</function>, <function>new-double</function>, <function>double?</function>, <function>new-quadruple</function>, <function>quadruple?</function>, <function>new-bool</function>, <function>bool?</function>, <function>new-void</function>, <function>void?</function>, <function>fix-vec?</function>, <function>var-vec?</function>, <function>fix-string?</function>, <function>var-string?</function>.</para>

      <para>For information of these functions' implementations, please refer to the file that implements module <literal>(pgrt xdr)</literal>.</para>
    </sect1>
  </chapter>
  <chapter>
    <title>&PGRT;-CSS</title>

    <para>To be added later.</para>
  </chapter>
</book>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
fill-column: 10000
sgml-default-dtd-file:"/user/bakicale/ra/install/sparc/lib/sgml/ced/docbook.ced"
sgml-omittag:nil
sgml-shorttag:t
End:
-->
