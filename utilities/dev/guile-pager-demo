#! /usr/local/bin/guile -s
!#

(define-module (fvwm-module-test)
  :use-module (ice-9 string-fun))

;; XXX - these need to be set correctly for your display
(define display-width 1152)
(define display-height 864)

;; Set up pipes to read to/from the module

(define from-module-pipe (pipe))
(define from-module-read (car from-module-pipe))
(define from-module-write (cdr from-module-pipe))

(define to-module-pipe (pipe))
(define to-module-read (car to-module-pipe))
(define to-module-write (cdr to-module-pipe))

;; define various M_ constants

(define M_NEW_PAGE  1)
(define M_NEW_DESK  2)
(define M_ADD_WINDOW  4)
(define M_RAISE_WINDOW  8)
(define M_LOWER_WINDOW  16)
(define M_CONFIGURE_WINDOW  32)
(define M_FOCUS_CHANGE  64)
(define M_DESTROY_WINDOW  128)
(define M_ICONIFY  256)
(define M_DEICONIFY  512)
(define M_WINDOW_NAME  1024)
(define M_ICON_NAME  2048)
(define M_RES_CLASS  4096)
(define M_RES_NAME  8192)
(define M_END_WINDOWLIST  16384)
(define M_ICON_LOCATION  32768)
(define M_MAP  65536)
(define M_ERROR  131072)
(define M_CONFIG_INFO  262144)
(define M_END_CONFIG_INFO  524288)
(define M_ICON_FILE  1048576)
(define M_DEFAULTICON  2097152)
(define M_STRING  4194304)
(define M_MINI_ICON  8388608)
(define M_WINDOWSHADE  16777216)
(define M_DEWINDOWSHADE  33554432)



(define last-config (string-append (getenv "HOME") "/.fvwmrc"))
(define app-window "0")
(define context "0")  ; C_NO_CONTEXT

(define first-desktop "0")
(define last-desktop "1")

;; $SIG{'CHLD'} = sub { wait };
;; Need to look up how to provide sigchld handler


;; (define pager "/usr/X11R6/lib/X11/fvwm2/FvwmPager")
;; (define pager "/home/gjb/fvwm/modules/FvwmPager/FvwmPager")
;; (define pager "/mit/windowmanagers/lib/X11/fvwm2/FvwmPager")
(define pager "/u1/mstachow/fvwm-2.0.46/modules/FvwmPager/FvwmPager")

(define pid (primitive-fork))


(cond
 ((= pid 0)
  ;; child
  (close-port to-module-write)
  (close-port from-module-read)
  (let ((write-fd (number->string (fileno from-module-write)))
	(read-fd (number->string (fileno to-module-read))))
    (display (string-append 
	      "child: " pager " " write-fd " " read-fd " " last-config 
	      " " app-window " " context " " first-desktop " " 
	      last-desktop "\n") (current-output-port))
    (execl pager pager write-fd read-fd last-config 
	   app-window context first-desktop last-desktop))
  (display "Exec failed.\n")
  (exit 0)))
    


;; parent
(close-port to-module-read)
(close-port from-module-write)


;; FIXGJB: mark fd-s close-on-exec so other processes won't inherit them
;; FIXGJB: set o_nonblock for TO_MODULE_WR
;; GJBFIX: why is that necessary?
;; (fcntl to-module-write F_SETFL O_NONBLOCK)

(define current-desk 0)


(define (wait-for-module-input)
  (if (char-ready? from-module-read)
      #t
      (let ((result (select (list (fileno from-module-read))
			    '() '() 100 100)))
	(if (null? (car result))
	    (wait-for-module-input)
	    result))))

(define (data-read length port)
  (let* ((s (make-string length))
	 (result (uniform-array-read! s port)))
    (if (< result length)
	(throw 'too-little)
	s)))

(define (data-write str port)
  (uniform-array-write str port))
  
(define (read-int port)
  (let* ((u (make-uniform-array #xfffffff 1))
	 (result (uniform-array-read! u port)))
    (if (< result 1)
	(throw 'too-little)
	(array-ref u 0))))

(define (int32->string int)
  (let* ((s (make-string 4 #\nul))
	 (intx (if (> int 2147483647)
		  (- int 4294967296)
		  int)))
    (string-set! s 3 (integer->char (ash intx -24)))
    (string-set! s 2 (integer->char (logand #x000000ff (ash intx -16))))
    (string-set! s 1 (integer->char (logand #x000000ff (ash intx -8))))
    (string-set! s 0 (integer->char (logand #x000000ff (ash intx 0))))
    s))

(define (write-int int port)
  (uniform-array-write (int32->string int) port))


(define (send-all-config-info)
  (map send-config-info
       '("*FvwmPagerBack grey76"
	 "*FvwmPagerFore black"
	 "*FvwmPagerHilight navyblue"
	 "*FvwmPagerFont none"
	 "*FvwmPagerDeskTopScale 40"
	 "*FvwmPagerLabel 0 Top"
	 "*FvwmPagerLabel 1 Bottom"
	 "*FvwmPagerSmallFont 5x8"))
  (send-end-config-info))

(define (send-packet-header id body-length)
  (write-int #xffffffff to-module-write)
  (write-int id to-module-write)
  (write-int (+ body-length 4) to-module-write)
  (write-int (current-time) to-module-write))


(define (send-packet id body)
  (if (not (= (modulo (string-length body)  4) 0))
      (error "Bad packet length"))

  (send-packet-header id (/ (string-length body) 4))
  (data-write body to-module-write)
  (force-output to-module-write))

(define (send-end-config-info)
  (send-packet M_END_CONFIG_INFO ""))
  
(define (send-config-info str)
  (let* ((length (* 4 (inexact->exact (ceiling (/ (string-length str) 4)))))
	 (pad (- length (string-length str)))
	 (data (string-append 
		(apply string (make-list 12 #\nul))
		str 
		(apply string (make-list pad #\nul)))))
    (send-packet M_CONFIG_INFO data)))

(define (send-window-list)
  (add-window 342423 234235 10 20 300 400 0 0 14 2 10 10 10 10 50 50
	      100 100 32932 132213 0 54 32)
  (end-window-list))

(define (add-window window-id frame-window-id x y width height desktop 
		    window-flags title-height border-width base-width 
		    base-height resize-x-inc resize-y-inc min-width 
		    min-height max-width-inc max-height-inc 
		    icon-label-window-id icon-pixmap-window-id
		    gravity text-color border-color)
  (send-packet 
   M_ADD_WINDOW 
   (apply string-append
	  (map 
	   int32->string
	   (list window-id frame-window-id 0 x y width height desktop 
		 window-flags title-height border-width base-width base-height 
		 resize-x-inc resize-y-inc min-width min-height max-width-inc 
		 max-height-inc icon-label-window-id icon-pixmap-window-id 
		 gravity text-color border-color)))))
  
(define (end-window-list)
  (send-packet M_END_WINDOWLIST ""))

(define (send-new-page x y num max-x max-y)
  (display (list "New page" x y num max-x max-y))
  (newline)
  (send-packet M_NEW_PAGE
	       (apply string-append 
		      (map int32->string (list x y num max-x max-y)))))

(define (send-new-desk desk)
  (send-packet M_NEW_DESK (int32->string desk)))



(while #t
       (let ((packet #f))
	 (display (wait-for-module-input))
	 (newline)
	 (let* ((window
		 (catch #t (lambda () (read-int from-module-read))
			(lambda args (error "Could not get window id"))))
		(msglen
		 (catch #t (lambda () (read-int from-module-read))
			(lambda args (error "Could not get msglen"))))
		(command
		 (catch #t (lambda () (data-read msglen from-module-read))
			(lambda args (error "Could not get command"))))
		(keepgoing
		 (catch #t (lambda () (read-int from-module-read))
			(lambda args (error "Could not get keepgoing"))))
		(split-result (split-before-char #\space command 
						 (lambda args args)))
		(main-cmd (car split-result))
		(args (cadr split-result))
		)

	   (display "window: ")
	   (write window)
	   (newline)
	   (display "msglen: ")
	   (write msglen)
	   (newline)
	   (display "command: ")
	   (write command)
	   (newline)
	   (display "keepgoing: ")
	   (write keepgoing)
	   (newline)
	   (cond
	    ((string-ci=? main-cmd "Send_ConfigInfo") 
	     (send-all-config-info))
	    ((string-ci=? main-cmd "Send_WindowList") 
	     (send-window-list))
	    ((string-ci=? main-cmd "GotoPage")
	      (let* ((s-args (split-after-char 
			      #\space 
			      (sans-leading-whitespace args)
			      (lambda args args)))
		     (first-arg (string->number 
				 (sans-surrounding-whitespace (car s-args))))
		     (second-arg (string->number 
				  (sans-surrounding-whitespace 
				   (cadr s-args)))))
		(send-new-page (* first-arg display-width)
			       (* second-arg display-height)
			       current-desk (* 2 display-width)
			       (* 2 display-height))))
	     ((string-ci=? main-cmd "Desk")
	      (let* ((s-args (split-after-char 
			      #\space 
			      (sans-leading-whitespace args)
			      (lambda args args)))
		     (second-arg (string->number 
				  (sans-surrounding-whitespace 
				   (cadr s-args)))))
		(send-new-desk second-arg)
		(set! current-desk second-arg))))
	   )))
