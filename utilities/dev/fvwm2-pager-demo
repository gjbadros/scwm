#!/uns/bin/perl -w
# Proof of concept of having a scripting
# language talk to a fvwm module
# Guile is used for scwm's scheme-based module interface,
# but perl is well suited to this sort of system-level
# programming, so I'm prototyping using it.
# --gjb 11/30/97 
pipe(FROM_MODULE_RD, FROM_MODULE_WR) || die "could not make from pipe";
select(FROM_MODULE_RD); $| = 1;
select(FROM_MODULE_WR); $| = 1;
pipe(TO_MODULE_RD, TO_MODULE_WR) || die "could not make to pipe";
select(TO_MODULE_RD); $| = 1;
select(TO_MODULE_WR); $| = 1;
select STDOUT;

use vars qw( $M_NEW_PAGE $M_NEW_DESK $M_ADD_WINDOW $M_RAISE_WINDOW
	     $M_LOWER_WINDOW $M_CONFIGURE_WINDOW $M_FOCUS_CHANGE $M_DESTROY_WINDOW
	     $M_ICONIFY $M_DEICONIFY $M_WINDOW_NAME $M_ICON_NAME $M_RES_CLASS
	     $M_RES_NAME $M_END_WINDOWLIST $M_ICON_LOCATION $M_MAP $M_ERROR
	     $M_CONFIG_INFO $M_END_CONFIG_INFO $M_ICON_FILE $M_DEFAULTICON
	     $M_STRING $M_MINI_ICON $M_WINDOWSHADE $M_DEWINDOWSHADE );

$M_NEW_PAGE = 1;
$M_NEW_DESK = 2;
$M_ADD_WINDOW = 4;
$M_RAISE_WINDOW = 8;
$M_LOWER_WINDOW = 16;
$M_CONFIGURE_WINDOW = 32;
$M_FOCUS_CHANGE = 64;
$M_DESTROY_WINDOW = 128;
$M_ICONIFY = 256;
$M_DEICONIFY = 512;
$M_WINDOW_NAME = 1024;
$M_ICON_NAME = 2048;
$M_RES_CLASS = 4096;
$M_RES_NAME = 8192;
$M_END_WINDOWLIST = 16384;
$M_ICON_LOCATION = 32768;
$M_MAP = 65536;
$M_ERROR = 131072;
$M_CONFIG_INFO = 262144;
$M_END_CONFIG_INFO = 524288;
$M_ICON_FILE = 1048576;
$M_DEFAULTICON = 2097152;
$M_STRING = 4194304;
$M_MINI_ICON = 8388608;
$M_WINDOWSHADE = 16777216;
$M_DEWINDOWSHADE = 33554432;


my $last_config = "$ENV{HOME}/.fvwm2rc";
my $app_window = 0;
my $context = 0; # C_NO_CONTEXT

my $first_desktop = 0;
my $last_desktop = 1;

$SIG{'CHLD'} = sub { wait };


$pid = fork;

die "fork failed" if !defined($pid);

#my $pager = "/usr/X11R6/lib/X11/fvwm2/FvwmPager";
my $pager = "/home/gjb/fvwm/modules/FvwmPager/FvwmPager";

if ($pid == 0) {
  # child
  close(TO_MODULE_WR);
  close(FROM_MODULE_RD);
  my $write = fileno FROM_MODULE_WR;
  my $read = fileno TO_MODULE_RD;
  print STDERR "child: $pager $write $read $last_config $app_window $context $first_desktop $last_desktop\n";
  exec("$pager $write $read $last_config $app_window $context $first_desktop $last_desktop") || die "Could not exec: $!";
  exit 0; # will not get here
}

# parent
close(TO_MODULE_RD);
close(FROM_MODULE_WR);
# FIXGJB: mark fd-s close-on-exec so other processes won't inherit them
# FIXGJB: set o_nonblock for TO_MODULE_WR
use Fcntl;
fcntl(TO_MODULE_WR,F_SETFL,O_NONBLOCK);

my $current_desk = 0;
while (1) {
  my $packet = "";
  WaitForModuleInput();
  read(FROM_MODULE_RD,$packet,4) || die "Could not get window id";
  my $window = unpack("L",$packet);
  print STDERR "Read window = $window\n";
  read(FROM_MODULE_RD,$packet,4) || die "Could not get msglen";
  my $length = unpack("L",$packet);
  print STDERR "Read length = $length\n";
  my $cmd = "";
  read(FROM_MODULE_RD,$cmd,$length) || die "Could not get cmd";
  print STDERR "Got command = $cmd for window $window\n";
  read(FROM_MODULE_RD,$packet, 4) || die "Could not get keepgoing";
  my $keepgoing = unpack("L",$packet);
  print STDERR "Got keepgoing = $keepgoing\n";
  if ($cmd eq "Send_ConfigInfo") {
    SendAllConfigInfo();
  } elsif ($cmd eq "Send_WindowList") {
    SendWindowList();
  } elsif ($cmd =~ /^GotoPage (\d+) (\d+)$/) {
    my ($x, $y) = ($1, $2);
    SendNewPage($x*1024,$y*768,$current_desk,2*1024,2*768);
  } elsif ($cmd =~ /^Desk (\d+) (\d+)$/) {
    my ($page, $desk) = ($1, $2);
    SendNewDesk($desk);
    $current_desk = $desk;
  }
}


sub WaitForModuleInput {
  $rin = $win = $ein = "";
  vec($rin,fileno(FROM_MODULE_RD),1) = 1;
  vec($win,fileno(TO_MODULE_WR),1) = 1;
  $ein = $rin | $win;
}

sub SendAllConfigInfo {
  foreach my $i ("*FvwmPagerBack grey76",
		 "*FvwmPagerFore black",
		 "*FvwmPagerHilight navyblue",
		 "*FvwmPagerFont none",
		 "*FvwmPagerDeskTopScale 40",
		 "*FvwmPagerLabel 0 Top",
		 "*FvwmPagerLabel 1 Bottom",
		 "*FvwmPagerSmallFont 5x8") {
    SendConfigInfo($i);
  }
  SendEndConfigInfo();
}

sub SendPacket {
  my ($id,$body) = @_;
  die if ((length($body) % 4) != 0);
  print TO_MODULE_WR pack("LLLL",0xffffffff,$id,length($body)/4+4,time);
  print TO_MODULE_WR $body if defined($body);
}
sub SendEndConfigInfo {
  SendPacket($M_END_CONFIG_INFO,"");
}
  
sub SendConfigInfo {
  my ($i) = @_;
  my $length;
  { use integer; $length = length($i)/4 + 1; $length *= 4; }
  my $packet = pack("LLLa$length",0,0,0,$i);
  SendPacket($M_CONFIG_INFO,$packet);
}

sub SendWindowList {
  AddWindow(342423,234235,10,20,300,400,0,0,14,2,10,10,10,10,50,50,
	    100,100,32932,132213,0,54,32);
  EndWindowList();
}

sub AddWindow {
  my ($window_id,$frame_window_id,$x,$y,$width,$height,$desktop,
      $window_flags,$title_height,$border_width,$base_width,$base_height,
      $resize_x_inc,$resize_y_inc,$min_width,$min_height,$max_width_inc,
      $max_height_inc,$icon_label_window_id,$icon_pixmap_window_id,
      $gravity,$text_color,$border_color) = @_;
  my $packet = 
    pack("LLLLLLLLLLLLLLLLLLLLLLL",
	 $window_id,$frame_window_id,0,$x,$y,$width,$height,$desktop,
	 $window_flags,$title_height,$border_width,$base_width,$base_height,
	 $resize_x_inc,$resize_y_inc,$min_width,$min_height,$max_width_inc,
	 $max_height_inc,$icon_label_window_id,$icon_pixmap_window_id,
	 $gravity,$text_color,$border_color);
  SendPacket($M_ADD_WINDOW,$packet);
}

sub EndWindowList {
  SendPacket($M_END_WINDOWLIST,"");
}

sub SendNewPage {
  my ($x, $y, $num, $max_x, $max_y) = @_;
  print STDERR "New page\n";
  my $packet = pack("LLLLL",
		    $x,$y,$num,$max_x,$max_y);
  SendPacket($M_NEW_PAGE,$packet);
}

sub SendNewDesk {
  my ($desk) = @_;
  print STDERR "New desk $desk\n";
  my $packet = pack("L",$desk);
  SendPacket($M_NEW_DESK,$packet);
}
