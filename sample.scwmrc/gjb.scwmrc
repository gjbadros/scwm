;; $Id$
;; As of Mar 4, 1998, I've not updated this file much at all in the
;; last several months;  I highly recommend using one of the other
;; better-maintained .scwmrc-s until I have time to make my configuration
;; complete and current.
;; Greg J. Badros <gjb@cs.washington.edu>

;;-------------------------------;;
;; import the scwm modules       ;;

(use-modules (app scwm base)
	     (app scwm winops)
	     (app scwm winlist)
	     (app scwm wininfo)
             (app scwm style)
	     (app scwm face))

(define (suggest-image-path-for name)
  (let ((found-if-0 (system (string-append "locate " name))))
    (if (= 0 found-if-0)
	(display (string-append "Perhaps try adding above path to image-load-path\n")))))

(define (image-not-found-hook name)
  (display (string-append "Could not find image: " name "\n"))
  (suggest-image-path-for name))

;; Need M_FOCUS_CHANGE for auto-raise
(use-modules (app scwm module-types))

;; Disabled for now - the instant autoraise with no timeout is not
;; very usable.
(define want-autoraise #f)
;; (define want-autoraise #t)
(define want-workman-menu #t)

(define HOME (getenv "HOME"))
(define USER (getenv "USER"))
(define xterm-user-shell-options "-e start-zsh")
(define xterm-other-host-use-local-xterm #t)
(define mail-spool-dir (string-append "/var/spool/mail/" USER))


(define user-image-load-list 
  (list (string-append HOME "/pixmaps")
	(string-append HOME "/bitmaps")))

(define want-close-button #t) ;; was #f

;;-------------------------------;;
;; set some basic styles info    ;;

(define (vertical-toggle-maximize)
  (toggle-maximize 0 (%y 100)))

(define (horizontal-toggle-maximize)
  (toggle-maximize (%x 100) 0))

(define (both-toggle-maximize)
  (toggle-maximize (%x 100) (%y 100)))

(define (vertical-toggle-maximize-partial)
  (toggle-maximize 0 (%y 95)))

(define font12
  (make-font "-adobe-helvetica-bold-r-*-*-12-*-*-*-*-*-*-*"))
(define font14 
  (make-font "-adobe-helvetica-bold-r-*-*-14-*-*-*-*-*-*-*"))
(define window-font
  (make-font "*helvetica*bold-r*12*"))
(define menu-font
  (make-font "*helvetica*medium-r*12*"))
(define bold-menu-font
  (make-font "*helvetica*bold-r*9*"))
(define icon-font
  (make-font "fixed"))

;;; These can change dynamically and the menus which 
;;; used 'menu-bg-color [which is used by default]
;;; will be drawn in the new color the next time they pop up
(define menu-bg-color (load-color "gray80"))
(define menu-text-color (load-color "black"))

(menu-style #:fg "black" #:bg "grey76" #:stipple "grey35" 
	    #:font menu-font #:mwm #f)

;;(set-click-time! 150)
;;(set-color-map-focus! 'follows-mouse)
;;(set-desktop-size! 3 3)

;;; FIXGJB: should be a function returning whether it should do opaque
;;; move or an integer for the percent (server/net/cpu load might
;;; influence whether you want to do an opaque move, e.g.)
;;(set-opaque-move-size! 30) 

;;(set-edge-resistance! 500 10)
;;(set-edge-scroll! 100 100)


(title-style #:font font12 #:justify 'left #:relief 'raised)

(set-icon-font! font12)
(set-rubber-band-mask! 255)  

(define (popup-small-ops)
  (popup-menu (make-small-window-ops-menu (get-window))))

(define (popup-sysutils)
  ())

(define (popup-util)
  (popup-menu 'menu-util))

(define (popup-root-start)
  (popup-menu 'menu-root-start))

(define (show-icon-list-menu)
  (show-window-list-menu #:only iconified?))


;;; set path to use for image searches
(set! image-load-path (cons "/usr/X11/lib/X11/mini-icons" image-load-path))
(set! image-load-path (cons "/usr/X11/include/X11/pixmaps" image-load-path))
(set! image-load-path (cons "/usr/lib/icons" image-load-path))
(set! image-load-path (cons "/usr/local/X11/include/X11/pixmaps" image-load-path))
(set! image-load-path (cons "/usr/local/lib/icons" image-load-path))
(set! image-load-path (cons "/usr/local/icons" image-load-path))
(set! image-load-path (cons "/uns/share/include/X11/pixmaps" image-load-path))
(set! image-load-path (cons "/uns/share/include/X11/bitmaps" image-load-path))
(set! image-load-path (cons "/usr/lib/TheNextLevel/pixmaps" image-load-path))
(set! image-load-path (append user-image-load-list image-load-path))
;;(set! image-load-path '())

(define pic-system-button
  (make-image "mini-sys3d-full.xpm"))

(define pic-xterm-mini
  (make-image "mini-term.xpm"))

(define pic-unknown
  (make-image "unknown1.xpm"))


;;-------------------------------;;
;; set some window styles        ;;

;;; MSFIX: I don't like the ordering dependence on the
;;; window-style... I think that will go away when using
;;; the XClass and/or Instance name tests, which I'd prefer
;;; anyway...
(window-style "*" 
	      #:fg "black" #:bg "grey76" 
	      #:icon pic-unknown
;	      #:icon #f        ;; MS - specify #f to not get an icon.
	      #:icon-box (list (x- 70) 1 69 (y- 141))
	      #:border-width 4 ;; MS borderwidth of 4 looks slightly better
	                       ;; to my eye than 3.
	      #:focus 'mouse

;	      #:plain-border #t ;; replaces handle-width
				;; MS no, it replaces no-handles, plus
	                        ;; it doesn't work right now.
	      #:sticky-icon #t
	      #:random-placement #t #:smart-placement #t
	      #:mwm-func-hint #t #:mwm-decor-hint #t
	      #:int-override #t #:decorate-transient #f
	      #:PPosition-hint #f
	      #:mini-icon pic-xterm-mini)

;; FIXGJB: make-face's style of argument passing
;; is different from the window-style method; I imagine
;; MS has a wrapper planned for this (MSFIX)
(border-style #:hidden-handles #t #:no-inset #t)

;;; I'm not changing these for now to use the new style
;;; because of the way add-left-button and add-right-button work and
;;; such; I think in general, though, setting the button appearance
;;; should be more separated from setting its function. Will look
;;; over this more. --MS
;;; MSFIX: I think actions and conceptual appearance should go together
;;; but that conceptual appearance and actual appearance should be separated.
;;; Now that pixmaps are real objects, I get this by making, e.g.,
;;; `sticky-button-face' and `(add-left-button sticky-button-face toggle-stick)'
;;; I never want to say, `the third button from the right should do this action'.
;;; Ideally, buttons should have some identifier which can be tested by the
;;; event handling code for the callbacks

(define mini-icon-button-face 
  (make-face '((relief flat))
	     '((pixmap mini-program-icon))))

;; Can use strings as arg to pixmap
(define sticky-button-face
  (make-face '((relief flat))
	     '((pixmap "mini-hbars-full.xpm"))))

;; For testing
;;(set-button-face! 3 sticky-button-face)


;; But can also use a (make-image  "file.xpm")
(define sysutils-button-face
  (make-face '((relief flat))
	     '((pixmap "mini-lightbolt-full.xpm"))))


(define close-button-face 
  (make-face '((relief flat))
	     '((pixmap  "mini-stylized-x-full.xpm"))))


(define tall-maximize-button-face (make-face '((relief flat))
					     '((pixmap "mini-exp-windows-full.xpm"))))


(define iconify-button-face (make-face '((relief flat))
				       '((pixmap "mini-shrink-windows-full.xpm"))))



(define left-button-number 1)
(define right-button-number 2)

;;(set-button-face! 1 mini-icon-button-face)

(define (add-left-button button-face hook)
  (set-button-face! left-button-number button-face)
  (bind-mouse (string->symbol 
	       (string-append "button-" 
			      (number->string left-button-number)))
	      1 hook)
  (set! left-button-number (+ 2 left-button-number)))


(define (add-right-button button-face hook)
  (set-button-face! right-button-number button-face)
  (bind-mouse (string->symbol 
	       (string-append "button-" 
			      (number->string right-button-number)))
	      1 hook)
  (set! right-button-number (+ 2 right-button-number)))

;;; window buttons
;(bind-mouse 'button-1 1 popup-small-ops)
;(bind-mouse 'button-2 1 vertical-toggle-maximize)
;(bind-mouse 'button-4 1 iconify)

;;(set-button-face! 1 mini-icon-button-face)
;;(set-button-face! 1 tall-maximize-button-face)


;;;(add-left-button system-button-face (lambda () (popup-small-ops)))
(add-left-button mini-icon-button-face popup-small-ops)

;; MS: I presume this is the desired efffect.
;; random thought: A nice extension would be buttons that change
;; appearance with given window properties. This would be an extension of
;; the fvwm2 "MWMButton" concept whereby a button reverses its vector 
;; pattern when the window is maximized. It should be much more general, 
;; of course.
(add-left-button sticky-button-face toggle-stick)

(add-left-button sysutils-button-face popup-sysutils)

(if want-close-button
    (add-right-button close-button-face close-window))

(add-right-button tall-maximize-button-face vertical-toggle-maximize)
(add-right-button iconify-button-face iconify)

;; (plain-border (get-window)) fixes the display problem for the selected window
;; something must not be initialized correctly

(set-hilight-colors! "white" "navyblue")

(define desk-widget
  (make-style #:plain-border #t #:sticky #t #:winlist-skip #t
	      #:border-width 3 #:circulate-skip #t #:focus 'none))

;; Inherit above style options and specialize
(define desk-widget-on-top
  (make-style #:use-style desk-widget #:stays-on-top #t))

;; NOTE: you can use a string or a (make-image "filename.xpm")
;; after #:icon and #:mini-icon
;; MSFIX: important! window-style's argument 
(window-style "zwgc" #:use-style desk-widget-on-top)
(window-style "*lock" #:use-style desk-widget)
(window-style "xload" #:no-title #t #:use-style desk-widget)
(window-style "xscreensaver" #:no-title #t #:use-style desk-widget)
(window-style "xbiff" #:no-title #t #:use-style desk-widget-on-top
	      #:mini-icon "mini-xbiff.xpm")
(window-style "xcalc" #:icon "xcalc.xpm"
	              #:mini-icon "mini-calc.xpm")
(window-style "xman" #:icon "xman.xpm")
(window-style "xmag" #:icon "mag_glass.xpm")
(window-style "XTerm" #:mini-icon pic-xterm-mini
	              #:icon "xterm.xpm")
(window-style "Emacs" #:mini-icon "mini-edit.xpm"
	              #:icon "TextEditor.xpm")

;;; define some useful menus
(define menu-window-ops
  (menu
   (list
    (menuitem "Window Ops" #f)
    (menuitem "&Move" #:image-left "mini-move.xpm" 
	       #:action 'interactive-move)
    (menuitem "&Resize" #:image-left "mini-resize.xpm" 
	       #:action 'interactive-resize)
    (menuitem "R&aise" #:image-left "mini-raise.xpm" 
	       #:action 'raise-window)
    (menuitem "&Lower" #:image-left "mini-lower.xpm" 
	       #:action 'lower-window)
    (menuitem "&Iconify/Restore" #:image-left "mini-iconify.xpm" 
	       #:action 'toggle-iconify)
    (menuitem "&Stick/Unstick" #:image-left "mini-stick.xpm" 
	       #:action 'toggle-stick)
    (menuitem "Ma&ximize/Reset" #:action 'both-toggle-maximize)
    (menuitem "Ma&ximize &Tall/Reset" #:image-left "maxtall" 
	       #:action 'vertical-toggle-maximize)
    (menuitem "Maximize &Wide/Reset" #:image-left "maxwide"
	       #:action 'horizontal-toggle-maximize)
    (menuitem "S&hade/Reset" 
	       #:action 'toggle-window-shade)
    menu-separator
    (menuitem "Keep-&on-top/Reset" #:action 'toggle-on-top)
    (menuitem "&Print" #:action 'print-window)
    menu-separator
    (menuitem "&Delete" #:action 'delete-window)
    (menuitem "&Close" #:image-left "mini-cross.xpm" 
	       #:action 'close-window)
    (menuitem "&Kill" #:image-left "mini-bomb.xpm" 
	       #:action 'destroy-window)
    menu-separator
    (menuitem "Switch to..." #:action
	       (lambda () 
		 (show-window-list-menu #:show-geometry #t)))
    (menuitem "Re&fresh Screen" #:image-left "mini-ray.xpm" 
	       #:action 'refresh))))

;;(popup-menu 'menu-window-ops)
;;(menu-properties menu-window-ops)

(defmacro menuitem-for-exec (name pixmap . body)
  (if (program-exists? name)
      `(list ,name #:action (lambda () (execute ,name) ,@body)
	     #:left-pixmap ,pixmap)))

;;(window-shade (get-window) #t)
;;(un-window-shade (get-window) #t)

(define (wiggle-window)
  (let ((w (get-window)))
    (window-shade w #t)
    (un-window-shade w #t)))

;;FIXGJB:
(define (scwm-help)
  (display "Need to write scwm-help\n"))

;;FIXGJB:
(define (scwm-about-message)
  (display "Need to write scwm-about-message\n"))

(define (start-xterm)
  (execute (string-append "color-xterm " xterm-user-shell-options)))

(define (exec-xlock)
  (execute "xlock -nice -16 -mode blank"))

(define menu-quit-verify
  (menu 
   (list
    (menuitem "Really quit Scwm?" #f)
    menu-title
    (menuitem "Restart scwm" #:image-left "mini-turn.xpm" 
	       #:action (lambda () (restart "scwm")))
    menu-separator
    (menuitem "Yes" #:image-left "mini-exclam.xpm" #:action quit)
    (menuitem "No"  #:image-left "mini-cross.xpm" #:action noop))))


(define use-complete-host-menu #t)

(define menu-applications
  (menu
   (list
    (menuitem "Applications"))))

(define menu-utilities
  (menu
   (list
    (menuitem "Utilities"))))

(define menu-multimedia
  (menu
   (list
    (menuitem "Multimedia"))))

(define menu-games
  (menu
   (list
    (menuitem "Games"))))

(define menu-hosts
  (menu
   (list
    (menuitem "Hosts"))))

(define menu-other-hosts
  (menu
   (list
    (menuitem "Other hosts"))))

(define menu-preferences-scroll
  (menu (list
	 (menuitem "Change Scroll Behavior")
	 menu-title
	 (menuitem "&On" #:action (lambda () (set-edge-scroll 100 100)))
	 (menuitem "O&ff" #:action (lambda () (set-edge-scroll 0 0)))
	 (menuitem "&Horizontal Only" #:action (lambda () (set-edge-scroll 100 0)))
	 (menuitem "&Vertical Only" #:action (lambda () (set-edge-scroll 0 100)))
	 (menuitem "&Partial 1/2" #:action (lambda () (set-edge-scroll 50 50)))
	 (menuitem "Partial 1/&4" #:action (lambda () (set-edge-scroll 25 25))))))

(define menu-preferences
  (menu
   (list
    (menuitem "Preferences"))))

(define menu-system-utilities
  (menu
   (list
    (menuitem "Preferences"))))

(define menu-screensaver
  (menu
   (list
    (menuitem "Screensaver"))))


(if want-workman-menu
    (define (tell-workman command)
      (execute (string-append "workman -s " command)))
    (define menu-workman
      (menu (list
	     (menuitem "&Pause" #:image-left "mini-wm-pause.xpm"
		       #:action (lambda () (tell-workman "pause")))
	     (menuitem "P&lay" #:image-left "mini-wm-play.xpm"
		       #:action (lambda () (tell-workman "play")))
	     (menuitem "&Next" #:image-left "mini-wm-next.xpm"
		       #:action (lambda () (tell-workman "fwd")))
	     (menuitem "P&rev" #:image-left "mini-wm-prev.xpm"
		       #:action (lambda () (tell-workman "back")))
	     (menuitem "&Stop" #:image-left "mini-wm-stop.xpm"
		       #:action (lambda () (tell-workman "stop")))
	     (menuitem "&Eject" #:image-left "mini-wm-eject.xpm"
		       #:action (lambda () (tell-workman "eject")))))))



;;; FIXGJB introduce syntax which gives the popup-menu-root-start closure after
;;; defining a menu
(define menu-root-start
  ;;  (menu "RootStart" "Start %mini-exp.xpm%"
  (menu
   (list 
    (menuitem "Start" #:image-left "mini-exp.xpm")
    menu-title
    (menuitem "&New shell" #:image-left "mini-sh1.xpm" 
	      #:action 'start-xterm)
    (menuitem "&Applications" #:image-left "mini-x2.xpm" 
	      #:action 'menu-applications)
    (menuitem "&Utilities" #:image-left "mini-hammer.xpm" 
	      #:action 'menu-utilities)
    (menuitem "&Multimedia" #:image-left "mini-audiovol.xpm" 
	      #:action 'menu-multimedia)
    (menuitem "&Games" #:image-left "mini-happy.xpm" 
	      #:action 'menu-games)
    menu-separator
    (menuitem "H&osts" #:image-left "mini-windows.xpm" 
	      #:action 'menu-hosts)
    (if use-complete-host-menu
	(menuitem "O&ther Hosts" #:action 'menu-other-hosts))
    (menuitem "&System Utilities" #:image-left "mini-connect.xpm" 
	      #:action 'menu-system-utilities)
    (menuitem "&Window Operations" #:image-left "mini-windows.xpm" 
	      #:action 'menu-window-ops)
    (menuitem "&Preferences" #:image-left "mini-prefs.xpm" 
	      #:action 'menu-preferences)
    menu-separator
    (menuitem "S&creensaver" #:image-left "mini-display.xpm" 
	      #:action 'menu-screensaver)
    (menuitem "&Lock Screen" #:image-left "mini-lock.xpm" 
	      #:action 'exec-xlock)
    menu-separator
    (menuitem "A&bout ScwmTNL" #:image-left "mini-exclam.xpm" 
	      #:action 'scwm-about-message)
    (menuitem "&Help ScwmTNL" #:image-left "mini-question.xpm" 
	      #:action 'scwm-help)
    (menuitem "E&xit Scwm" #:image-left "mini-stop.xpm" 
	      #:action 'menu-quit-verify))
   #:image-side "linux-menu.xpm"
   #:color-bg-image-side "blue"))

(define (popup-menu-root-start)
  (popup-menu 'menu-root-start))


(define (popup-window-ops)
  (popup-menu 'menu-window-ops))

(define menu-desk 
  (menu 
   (list (menuitem "Desks" #f)
	 menu-title
	 (menuitem "Desk 1" #:action (lambda () (set-current-desk! 0)))
	 (menuitem "Desk 2" #:action (lambda () (set-current-desk! 1)))
	 (menuitem "Desk 3" #:action (lambda () (set-current-desk! 2)))
	 (menuitem "Desk 4" #:action (lambda () (set-current-desk! 3))))))

(define menu-util 
  (menu 
   (list
    (menuitem "Utilities" #f)
    menu-title
    (menuitem "xterm" #:image-left "mini-term.xpm" 
	       #:action "color_xterm")
    (menuitem "rxvt"
	       #:action (lambda () (execute "rxvt")))
    (menuitem "emacs" #:image-left "mini-edit.xpm" 
	       #:action (lambda () (execute "emacs")))
    (menuitem "top" #:action (lambda () (execute "rxvt -T Top -n Top -e top")))
    (menuitem "xcalc" #:action (lambda () (execute "xcalc")))
    (menuitem "xmag" #:action (lambda () (execute "xmag")))
    menu-separator
    (menuitem "Desks" #:action menu-desk)
    menu-separator
    (menuitem "Exit scwm" menu-quit-verify))
   #:font 'bold-menu-font))


(define (popup-util)
  (popup-menu 'menu-util))

(define (popup-root-start)
  (popup-menu 'menu-root-start))

(define (make-small-window-ops-menu w)
  (menu
   (list
    (menuitem "Window Ops Small" #f)
    (menuitem "&Move" #:image-left "mini-move.xpm" 
	       #:action interactive-move)
    (menuitem "Re&size" #:image-left "mini-resize.xpm" 
	       #:action interactive-resize)
    (menuitem (if (iconified? w)
		   "Unmi&nimize"
		   "Mi&nimize") #:image-left "mini-iconify.xpm" 
		   #:action iconify)
    (menuitem (if (maximized? w) 
			    "Unma&ximize" 
			    "Ma&ximize") #:action both-toggle-maximize)
    menu-separator
    (menuitem "More" 
	       #:action 
	       (menu 
		(list
		 (menuitem "&Raise" #:action raise-window)
		 (menuitem "&Lower" #:action lower-window)
		 (menuitem (if (sticky? w)
			       "Un&stick"
			       "&Stick") 
			   #:action toggle-stick)
		 (menuitem (if (window-shaded? w)
			       "Unwindow-S&hade"
			       "Window-S&hade")
			   #:action toggle-window-shade)
		 (menuitem (if (kept-on-top? w)
			       "UnKeep On Top"
				   "Keep On Top") 
			   #:action toggle-on-top))))
    menu-separator
    (menuitem "Close" #:image-left "mini-cross.xpm" 
	      #:action close-window)
    (menuitem "Destroy" #:image-left "mini-bomb.xpm" 
	      #:action destroy-window))))
  

;;; now set some mouse and key bindings ;;


;;; first our root menus
(bind-mouse 'root 1 popup-root-start)
(bind-mouse 'root 2 (lambda () 
		      (show-window-list-menu #:show-geometry #t)))
(bind-mouse 'root "M-3" (lambda () (popup-menu 'menu-desk)))
;;;(bind-mouse 'root 3 popup-applications)

;;; operations on parts of the window
(bind-mouse '(frame sidebar) 2 popup-small-ops)
(bind-mouse 'frame 1 resize-or-raise)
(bind-mouse 'sidebar 1 move-or-raise)
(define (move-or-shade)
  (case (mouse-event-type)
    ((double-click) (toggle-window-shade-animated))
    (else (move-or-raise))))
(bind-mouse 'title 1 move-or-shade)
(bind-mouse 'title 2 lower-window)


;; key bindings for the menus
(bind-key 'all "M-S-F1" popup-util)
(bind-key 'all "M-S-F2" popup-window-ops)

;; in case of emergency, hit Control-Meta-Q
(bind-key 'all "C-M-S-q" quit)

;; some stuff for icons
(define (move-or-deiconify)
  (case (mouse-event-type)
    ((motion) (interactive-move))
    ((double-click) (deiconify))))

(bind-mouse 'icon 1 move-or-deiconify)
(bind-mouse 'icon 2 deiconify)

(bind-mouse 'all "C-S-M-1" toggle-raise)
(bind-mouse 'all "C-S-M-2" interactive-move)
(bind-mouse 'all "C-S-M-3" interactive-resize)

;; Just for test bind, unbind-mouse
;;(unbind-mouse 'all "C-S-Mouse1")
;;(unbind-mouse 'all "C-S-M-2")
;;(bind-mouse 'all "C-S-Mouse-1" show-icon-list-menu)

(define (interactive-move-window-with-focus)
  (let ((w (current-window-with-focus)))
    (and w (interactive-move w))))

(define (interactive-resize-window-with-focus)
  (let ((w (current-window-with-focus)))
    (and w (interactive-resize w))))

(define (interactive-move-window-with-pointer)
  (let ((w (current-window-with-pointer)))
    (and w (interactive-move w))))

(define (interactive-resize-window-with-pointer)
  (let ((w (current-window-with-pointer)))
    (and w (interactive-resize w))))

(bind-key 'all "C-S-F7" interactive-move-window-with-pointer)
(bind-key 'all "C-S-F8" interactive-resize-window-with-pointer)

;; rotate the current window with the keyboard
(bind-key 'all "M-S-Tab" 
	  (lambda ()
	    (next-window #:only visible? #:except iconified?)))

(define (key-mouse-moves modifiers pct-of-screen left down up right)
  (bind-key 'all (string-append modifiers "-" left) 
	    (lambda () (move-pointer (%x (- pct-of-screen)) 0)))
  (bind-key 'all (string-append modifiers "-" down) 
	    (lambda () (move-pointer 0 (%y pct-of-screen))))
  (bind-key 'all (string-append modifiers "-" up) 
	    (lambda () (move-pointer 0 (%y (- pct-of-screen)))))
  (bind-key 'all (string-append modifiers "-" right) 
	    (lambda () (move-pointer (%x pct-of-screen) 0))))

(define (key-viewport-moves modifiers pct-of-screen left down up right)
  (bind-key 'all (string-append modifiers "-" left) 
	    (lambda () (move-viewport (%x (- pct-of-screen)) 0)))
  (bind-key 'all (string-append modifiers "-" down) 
	    (lambda () (move-viewport 0 (%y pct-of-screen))))
  (bind-key 'all (string-append modifiers "-" up) 
	    (lambda () (move-viewport 0 (%y (- pct-of-screen)))))
  (bind-key 'all (string-append modifiers "-" right) 
	    (lambda () (move-viewport (%x pct-of-screen) 0))))

(key-mouse-moves "C-M-S" 5 "h" "j" "k" "l")
;; XInside's old X server steal C-M-h for prev virtual console, so use m too
(key-mouse-moves "C-M-S" 5 "m" "j" "k" "l")

(key-mouse-moves "C-M-S" 1 "y" "u" "i" "o")

(key-viewport-moves "C-M-S" 100 "Left" "Down" "Up" "Right")
;(key-viewport-moves "C-M-S" 10 "KP_4" "KP_2" "KP_8" "KP_6")

(bind-key 'all "C-M-S-r" refresh)
(bind-key 'all "C-M-S-5" recapture)
(bind-key 'all "C-M-S-x" start-xterm)

;(bind-key 'all "C-S-F1" popup-small-ops)
(bind-key 'all "C-S-F2" show-window-list-menu)

(define (float->integer x)
	 (inexact->exact x))

;; These are useful!
(define root-size-x (car (display-size)))
(define root-size-y (cadr (display-size)))

;; FIXGJB: where is setenv?
;;(setenv "height" (number->string root-size-x))
(putenv (string-append "height=" (number->string root-size-y)))
(putenv (string-append "width=" (number->string root-size-x)))
;; FIXGJB: PLANES? SCWM_DIR? SCWM_VERSION?  want these exported too

(define (percent-display x y)
  (list (%x x) (%y y)))

(bind-key 'all "C-S-Down" iconify)
;;(bind-key 'all "C-M-Return" raise-window)
(bind-key 'all "C-M-Return" toggle-raise)
(bind-key 'all "C-S-Up" vertical-toggle-maximize-partial)
(bind-key 'all "C-S-Right" horizontal-toggle-maximize)
(bind-key 'all "C-S-Left" both-toggle-maximize)
;; MS thinks (maximize (%x 0) (%y 95)) is easier to read than 
;; (apply maximize (percent-display 0 95)), but that's a matter of taste.
(bind-key 'all "C-S-Up" (lambda () (apply toggle-maximize (percent-display 0 95))))
(bind-key 'all "C-S-Right" (lambda () (apply toggle-maximize (percent-display 100 0))))
(bind-key 'all "C-S-Left" (lambda () (apply toggle-maximize (percent-display 100 95))))

;; See the binding for mouse button 2
;; to add geometry strings to this as well.
(bind-key 'all "C-S-Return" show-icon-list-menu)

(bind-key 'all "C-S-M-z" (lambda () (popup-menu 'menu-root-start)))

(set-click-time! 150)

(define (animated-move-to x y)
  (let* ((w (get-window))
	 (size (window-size w))
	 (width (car size))
	 (height (cadr size))
	 (position (window-position w))
	 (oldx (car position))
	 (oldy (cadr position)))
    ;;; FIXGJB: is there a better way to correct for width, height, etc
    ;;; MS: perhaps we should make move-to take #f for either coordinate,
    ;;; which means don't move along that coord?
    (if (equal? x 'x) (set! x oldx))
    (if (equal? y 'y) (set! y oldy))
    ;; MS: see base.scm for x- and y-, which I think are a more genric
    ;; way to handle negative positions in the traditional X11 way.
    (if (< x 0) (set! x (- root-size-x (abs x) width)))
    (if (< y 0) (set! y (- root-size-y (abs y) height)))
    (raise-window w)
    (move-to x y w 'animated 'move-pointer-too)))

;; FIXGJB: I don't think this gets used right yet
(define animation-ms-delay 50)

;; Fluid, cartoon-like
;(set-animation! '#(-.01 0 .01 .03 .08 .18 .3 .45 .60 .75 .85 .90 .94 .97 .99 1.0))

;; Linear, mechanical
;(set-animation! '#(0.1 0.2 0.3 0.4 0.6 0.7 0.8 0.9 1.0))

;; Fluid, cartoon-like, overshoots target
;(set-animation! '#(-.01 0 .01 .03 .08 .18 .3 .45 .60 .75 .85 .90 .94 .97 .99 1.01 1.02 1.01 1))

(bind-key 'all "C-M-KP_7" (lambda () (animated-move-to 0 0)))
(bind-key 'all "C-M-KP_9" (lambda () (animated-move-to -1 0)))
(bind-key 'all "C-M-KP_1" (lambda () (animated-move-to 0 -1)))
(bind-key 'all "C-M-KP_3" (lambda () (animated-move-to -1 -1)))

(bind-key 'all "C-M-KP_8" (lambda () (animated-move-to 'x 0)))
(bind-key 'all "C-M-KP_6" (lambda () (animated-move-to -1 'y)))
(bind-key 'all "C-M-KP_2" (lambda () (animated-move-to 'x -1)))
(bind-key 'all "C-M-KP_4" (lambda () (animated-move-to 0 'y)))

;; FIXGJB: modifiers interface could be better... mimic off Emacs?
;; FIXGJB: keys should be first class
(bind-key 'all "C-M-S-7" (lambda () (send-button-press 1 0)))
(bind-key 'all "C-M-S-8" (lambda () (send-button-press 2 0)))
(bind-key 'all "C-M-S-9" (lambda () (send-button-press 3 0)))

;;(bind-key 'all "C-M-S-4" (lambda () (send-key-press "Return")))
(bind-key 'all "C-M-S-4" (lambda () (send-string "helloworld")))

;; This one is experimental-- sends only the buttonpress event, no buttonrelease
(bind-key 'all "C-M-S-0" (lambda () (send-button-press 2 0 (get-window) #t #f)))

(bind-key 'all "C-M-S-n" (lambda () (write (get-window)) (newline)))

;; Hyper-w
(bind-key 'all "H-w" (lambda () (write (get-window)) (newline)))
;; Alt-w
(bind-key 'all "A-w" (lambda () (display "alt-w\n")))

(define (sleep-ms ms)
  (select '() '() '() 0 (* 1000 ms)))

;; Does not work for arbitrary strings since, e.g,. ' ' needs
;; to be sent as "space"  FIXGJB: Do we have a char->keysym fn?
(define (send-string str)
  (let ((w (get-window))
	(i 0))
    (while (< i (length str))
	   (send-key-press (substring str i (+ 1 i)) w)
	   (set! i (+ 1 i)))))

(if want-autoraise
    (define broadcast-hook
      (lambda
	  (event num-datum a1 a2 a3 a4 a5 a6 a7)
	(if (= event M_FOCUS_CHANGE)
	    (let ((window (window-from-window-id a1)))
	      (if window (raise-window window)))))))

;;; Local Variables:
;;; eval: (load "scwm")
;;; End:
