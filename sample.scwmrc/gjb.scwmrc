;;-------------------------------;;
;; import the scwm modules       ;;

(use-modules (app scwm base)
	     (app scwm winops)
	     (app scwm winlist)
	     (app scwm wininfo)
             (app scwm style))

(use-modules posix)

(define HOME (getenv "HOME"))
(define USER (getenv "USER"))
(define xterm-user-shell-options "-e start-zsh")
(define xterm-other-host-use-local-xterm #t)
(define mail-spool-dir (string-append "/var/spool/mail/" USER))


(define user-pixmap-path (string-append HOME "/pixmaps"))
(define user-bitmap-path (string-append HOME "/bitmaps"))

;;-------------------------------;;
;; set some basic styles info    ;;

(define (vertical-toggle-maximize)
  (toggle-maximize 0 (%y 100)))

(define (horizontal-toggle-maximize)
  (toggle-maximize (%x 100) 0))

(define (both-toggle-maximize)
  (toggle-maximize (%x 100) (%y 100)))

(define (vertical-toggle-maximize-partial)
  (toggle-maximize 0 (%y 95)))

(define font12
  (load-font "-adobe-helvetica-bold-r-*-*-12-*-*-*-*-*-*-*"))
(define font14 
  (load-font "-adobe-helvetica-bold-r-*-*-14-*-*-*-*-*-*-*"))
(define window-font
  (load-font "*helvetica*bold-r*12*"))
(define menu-font
  (load-font "*helvetica*medium-r*12*"))
(define icon-font
  (load-font "fixed"))

;;(menu-style #:fg "white" #:bg "blueviolet" #:stipple "blue" 
;;	    #:font font14 #:mwm #f)
(menu-style #:fg "black" #:bg "grey76" #:stipple "grey35" 
	    #:font menu-font #:mwm #f)

;;(set-click-time! 150)
;;(set-color-map-focus! 'follows-mouse)
;;(set-desktop-size! 3 3)
;;; FIXGJB: should be a function returning whether it should do opaque move
;;; or an integer for the percent (load might influence whether you want
;;; to do an opaque move, e.g.)
;;(set-opaque-move-size! 30) 
;;(set-edge-resistance! 500 10)
;;(set-edge-scroll! 100 100)


;;; FIXGJB: #:raised true 
(title-style #:font font12 #:justify 'left)

(set-icon-font! font12)
(set-xor-value! 255)  ;; FIXGJB: rename to rubber-band-mask?

;;-------------------------------;;
;; set some paths                ;;
;;

(set-icon-path! (string-append user-bitmap-path 
			       ":/usr/X11/include/X11/bitmaps:\
/usr/local/X11/include/X11/pixmaps:/usr/local/lib/icons:\
/usr/lib/icons:/usr/X11/include/X11/pixmaps:/usr/X11/lib/X11/mini-icons"))

(set-pixmap-path! (string-append user-pixmap-path 
				 ":/usr/X11/include/X11/bitmaps:\
/usr/local/X11/include/X11/pixmaps:/usr/local/lib/icons:\
/usr/lib/icons:/usr/X11/include/X11/pixmaps:/usr/X11/lib/X11/mini-icons"))

;;-------------------------------;;
;; set some window styles        ;;

;;; FIXGJB: these should be regexps, not goofy wildcards
(window-style "*" 
	      #:fg "black" #:bg "grey76" 
;	      #:icon "unknown1.xpm" 
	      #:icon #f        ;; MS - specify #f to not get an icon.
;	      #:icon-box (list (x- 70) 1 69 (y- 141))
	      #:border-width 3 
	      #:focus 'mouse
	      #:plain-border #t ;; replaces handle-width
	      #:sticky-icon #t
	      #:random-placement #t #:smart-placement #t
	      #:mwm-func-hint #t #:mwm-decor-hint #t
	      #:int-override #t #:decorate-transient #t
	      #:PPosition-hint #f)

(define desk-widget
  (make-style #:plain-border #t #:sticky #t #:winlist-skip #t
	      #:border-width 3 #:circulate-skip #t #:focus 'none))

;; MS - this does the right thing-- style options are applied in order.
(define desk-widget-on-top
  (make-style #:use-style desk-widget #:stays-on-top #t))


;;; FIXGJB: this core dumps, seems to w/o the circulate-skip option I added, too
;;; MS - hmmm, it works for me.
;(window-style "zwgc" #:use-style desk-widget) ;; desk-widget-on-top
;(window-style "*lock" #:use-style desk-widget)
;(window-style "xload" #:no-title #t #:use-style desk-widget)
;(window-style "xscreensaver" #:no-title #t #:use-style desk-widget)
;(window-style "xbiff" #:no-title #t #:use-style desk-widget)
;(window-style "xcalc" #:icon "xcalc.xpm")
;(window-style "xman" #:icon "xman.xpm")
;(window-style "xmag" #:icon "mag_glass.xpm")
;(window-style "Emacs" #:icon "gnu-animal.bmp")
;(window-style "XTerm" #:icon "xterm.xpm")


;;-------------------------------;;
;; define some useful menus      ;;


(define menu-window-ops
  (make-menu "Window Ops"
	     'title
	     (list "Move" interactive-move)
	     (list "Resize" interactive-resize)
	     (list "Raise" raise-window)
	     (list "Lower" lower-window)
	     (list "Print" print-window)
	     (list "(Un)Window-Shade" toggle-window-shade)
	     (list "(De)Iconify" toggle-iconify)
	     (list "(Un)Maximize" vertical-toggle-maximize)
	     (list "(Un)Stick" toggle-stick)
	     (list "(Un)Keep On Top" toggle-on-top)
	     'separator
	     (list "Close" close-window)
	     (list "Delete" delete-window)
	     (list "Destroy" destroy-window)
	     'separator
	     (list "Refresh Screen" refresh)))

(define (menu-item name pixmap action)
  (list (if pixmap (string-append name "%mini-" pixmap ".xpm%") name) action))

;;FIXGJB:
(define (scwm-help)
  (display "Need to write scwm-help\n"))

;;FIXGJB:
(define (scwm-about-message)
  (display "Need to write scwm-about-message\n"))


(define (start-xterm)
  (execute "color-xterm"))

(define (exec-xlock)
  (execute "xlock -nice -16 -mode blank"))

(define (tell-workman command)
  (execute (string-append "workman -s " command)))

(define quit-verify
  (make-menu "Really quit scwm?"
	     'title
	     (list "Yes" quit)
	     (list "No" noop)
	     'separator
	     (list "Restart scwm" (lambda () (restart "scwm")))))



(define use-complete-host-menu #t)

;;; FIXGJB introduce syntax which gives the popup-menu-root-start closure after
;;; defining a menu
(define menu-root-start
;  (make-menu "RootStart%linux-menu.xpm@^blue^" "Start %mini-exp.xpm%"
  (make-menu "Start %mini-exp.xpm%"
	     'title
	     (menu-item "&New shell" "sh1" start-xterm)
	     (menu-item "&Applications" "x2" (lambda () 
					       (popup menu-applications)))
	     (menu-item "&Utilities" "hammer" (lambda ()
						(popup menu-utilities)))
	     (menu-item "&Multimedia" "audiovol" (lambda ()
						   (popup menu-multimedia)))
	     (menu-item "&Games" "happy" (lambda ()
					   (popup menu-games)))
	     'separator
	     (menu-item "H&osts" "windows" (lambda ()
					     (popup menu-hosts)))
	     (if use-complete-host-menu
		 (menu-item "O&ther Hosts" #f (lambda ()
						 (popup menu-otherhosts))))
	     (menu-item "&System Utilities" "connect" (lambda ()
							(popup menu-system-utilities)))
	     
	     ;; MS - use the menu object rather than a popup closure when 
	     ;; possible to get correct submenu semantics
	     (menu-item "&Window Operations" "windows" menu-window-ops)
	     (menu-item "&Preferences" "prefs" (lambda ()
						 (popup menu-preferences)))
	     'separator
	     (menu-item "S&creensaver" "display" (lambda ()
						   (popup menu-screensaver)))
	     ;; MS - you can just specify exec-xlock rather than 
	     ;; (lambda () (exec-xlock)), any reason you did it this way?     
	     (menu-item "&Lock Screen" "lock" (lambda ()
						(exec-xlock)))
	     'separator
	     (menu-item "A&bout ScwmTNL" "exclam" (lambda ()
						    (scwm-about-message)))
	     (menu-item "&Help ScwmTNL" "question" (lambda ()
						  (scwm-help)))
	     (menu-item "E&xit Fvwm" "stop" quit-verify)))

(define (popup-menu-root-start)
  (popup menu-root-start))


(define (popup-ops)
  (popup menu-window-ops))

(define menu-desk 
  (make-menu "Desks"
	     'title
	     (list "Desk 1" (lambda () (set-current-desk! 0)))
	     (list "Desk 2" (lambda () (set-current-desk! 1)))
	     (list "Desk 3" (lambda () (set-current-desk! 2)))
	     (list "Desk 4" (lambda () (set-current-desk! 3)))))

(define menu-util 
  (make-menu "Utilities"
	     'title
	     (list "xterm" (lambda () (execute "xterm")))
	     (list "rxvt" (lambda () (execute "rxvt")))
	     (list "emacs" (lambda () (execute "emacs")))
	     (list "top" (lambda () (execute "rxvt -T Top -n Top -e top")))
	     (list "xcalc" (lambda () (execute "xcalc")))
	     (list "xmag" (lambda () (execute "xmag")))
	     'separator
	     (list "Desks" menu-desk)
	     'separator
	     (list "Exit scwm" quit-verify)))

(define (popup-util)
  (popup menu-util))

(define (popup-root-start)
  (popup menu-root-start))

(define (make-small-window-ops-menu w)
  (make-menu "Window Ops2"
	     (list "Move" interactive-move)
	     (list "Resize" interactive-resize)
	     (list "Raise" raise-window)
	     (list "Lower" lower-window)
	     (list "Iconify" iconify)
	     'separator
	     (list "More" (make-menu "More"
			    (list (if (maximized? w)
				      "Unmaximize"
				      "Maximize") vertical-toggle-maximize)
			    (list (if (sticky? w)
				      "Unstick"
				      "Stick") toggle-stick)
			    (list (if (window-shaded? w)
				      "UnWindow-Shade"
				      "Window-Shade") toggle-window-shade)
			    (list (if (kept-on-top? w)
				      "UnKeep On Top"
				      "Keep On Top") toggle-on-top)))
             'separator
	     (list "Close" close-window)
	     (list "Destroy" destroy-window)))

(define (popup-small-ops)
  (popup (make-small-window-ops-menu (get-window))))



;; now set some mouse and key bindings ;;

(define (show-icon-list-menu)
  (show-window-list-menu #:only iconified?))


;; first our root menus
(bind-mouse 'root 1 popup-root-start)
(bind-mouse 'root 2 (lambda () 
		      (show-window-list-menu #:show-geometry #t)))
;;(bind-mouse 'root 3 popup-applications)
(bind-mouse 'root "M-3" (lambda () (popup menu-desk)))

;; window buttons
(bind-mouse 'button-1 1 popup-small-ops)
(bind-mouse 'button-2 1 vertical-toggle-maximize)
(bind-mouse 'button-4 1 iconify)

;; operations on parts of the window
(bind-mouse '(frame sidebar) 2 popup-small-ops)
(bind-mouse 'frame 1 resize-or-raise)
(bind-mouse 'sidebar 1 move-or-raise)
(define (move-or-shade)
  (case (mouse-event-type)
    ((double-click) (toggle-window-shade))
    (else (move-or-raise))))
(bind-mouse 'title 1 move-or-shade)
(bind-mouse 'title 2 lower-window)


;; key bindings for the menus
(bind-key 'all "M-F1" popup-util)
(bind-key 'all "M-F2" popup-ops)

;; in case of emergency, hit Control-Meta-Q
(bind-key 'all "C-M-q" quit)

;; some stuff for icons
(define (move-or-deiconify)
  (case (mouse-event-type)
    ((motion) (interactive-move))
    ((double-click) (deiconify))))

(bind-mouse 'icon 1 move-or-deiconify)
(bind-mouse 'icon 2 deiconify)

(bind-mouse 'all "C-S-M-1" toggle-raise)
(bind-mouse 'all "C-S-M-2" interactive-move)
(bind-mouse 'all "C-S-M-3" interactive-resize)

(bind-key 'all "C-S-F7" interactive-move)
(bind-key 'all "C-S-F8" interactive-resize)

;; rotate the current window with the keyboard
(bind-key 'all "M-Tab"
	  (lambda ()
	    (next-window #:only visible? #:except iconified?)))

(bind-key 'all "M-S-Tab" 
	  (lambda ()
	    (prev-window #:only visible? #:except iconified?)))

(define (key-mouse-moves modifiers pct-of-screen left down up right)
  (bind-key 'all (string-append modifiers "-" left) 
	    (lambda () (move-pointer (%x (- pct-of-screen)) 0)))
  (bind-key 'all (string-append modifiers "-" down) 
	    (lambda () (move-pointer 0 (%y pct-of-screen))))
  (bind-key 'all (string-append modifiers "-" up) 
	    (lambda () (move-pointer 0 (%y (- pct-of-screen)))))
  (bind-key 'all (string-append modifiers "-" right) 
	    (lambda () (move-pointer (%x pct-of-screen) 0))))

(define (key-viewport-moves modifiers pct-of-screen left down up right)
  (bind-key 'all (string-append modifiers "-" left) 
	    (lambda () (move-viewport (%x (- pct-of-screen)) 0)))
  (bind-key 'all (string-append modifiers "-" down) 
	    (lambda () (move-viewport 0 (%y pct-of-screen))))
  (bind-key 'all (string-append modifiers "-" up) 
	    (lambda () (move-viewport 0 (%y (- pct-of-screen)))))
  (bind-key 'all (string-append modifiers "-" right) 
	    (lambda () (move-viewport (%x pct-of-screen) 0))))

(key-mouse-moves "C-M-S" 5 "h" "j" "k" "l")
;; XInside's old X server steal C-M-h for prev virtual console, so use m too
(key-mouse-moves "C-M-S" 5 "m" "j" "k" "l")

(key-mouse-moves "C-M-S" 1 "y" "u" "i" "o")

(key-viewport-moves "C-M-S" 100 "Left" "Down" "Up" "Right")
(key-viewport-moves "C-M-S" 10 "KP_4" "KP_2" "KP_8" "KP_6")

(bind-key 'all "C-M-S-r" refresh)
(bind-key 'all "C-M-S-5" recapture)
(bind-key 'all "C-M-S-x" start-xterm)

(bind-key 'all "C-S-F1" popup-small-ops)
(bind-key 'all "C-S-F2" show-window-list-menu)

(define (float->integer x)
	 (inexact->exact x))

;; These are useful!
(define root-size-x (car (display-size)))
(define root-size-y (cadr (display-size)))

;; FIXGJB: where is setenv?
;;(setenv "height" (number->string root-size-x))
(putenv (string-append "height=" (number->string root-size-y)))
(putenv (string-append "width=" (number->string root-size-x)))
;; PLANES? FVWM_DIR? FVWM_VERSION?  want these exported too

;; Ahhhh now I get what (%x ..) does!
(define (percent-display x y)
  (list (%x x) (%y y)))

(bind-key 'all "C-S-Down" iconify)
;;(bind-key 'all "C-M-Return" raise-window)
(bind-key 'all "C-M-Return" toggle-raise)
(bind-key 'all "C-S-Up" vertical-toggle-maximize-partial)
(bind-key 'all "C-S-Right" horizontal-toggle-maximize)
(bind-key 'all "C-S-Left" both-toggle-maximize)
;; MS thinks (maximize (%x 0) (%y 95)) is easier to read than 
;; (apply maximize (percent-display 0 95)), but that's a matter of taste.
(bind-key 'all "C-S-Up" (lambda () (apply toggle-maximize (percent-display 0 95))))
(bind-key 'all "C-S-Right" (lambda () (apply toggle-maximize (percent-display 100 0))))
(bind-key 'all "C-S-Left" (lambda () (apply toggle-maximize (percent-display 100 95))))

;; See the binding for mouse button 2
;; to add geometry strings to this as well.
(bind-key 'all "C-S-Return" show-icon-list-menu)

(bind-key 'all "C-S-M-z" (lambda () (popup menu-root-start)))

(set-click-time! 150)

(set-hilight-colors! "white" "navyblue")

;(unbind-mouse 'all "C-S-M-1")
;(unbind-mouse 'all "C-S-M-2")

(define (animated-move-to x y)
  (let* ((w (get-window))
	 (size (window-size w))
	 (width (car size))
	 (height (cadr size))
	 (position (window-position w))
	 (oldx (car position))
	 (oldy (cadr position)))
    ;;; FIXGJB: is there a better way to correct for width, height, etc
    (if (equal? x 'x) (set! x oldx))
    (if (equal? y 'y) (set! y oldy))
    (if (< x 0) (set! x (- root-size-x (abs x) width)))
    (if (< y 0) (set! y (- root-size-y (abs y) height)))
    (raise-window w)
    (move-to x y w 'animated 'move-pointer-to)))

(define animation-ms-delay 50)

;; Fluid, cartoon-like
;(set-animation! '#(-.01 0 .01 .03 .08 .18 .3 .45 .60 .75 .85 .90 .94 .97 .99 1.0))

;; Linear, mechanical
;(set-animation! '#(0.1 0.2 0.3 0.4 0.6 0.7 0.8 0.9 1.0))

;; Fluid, cartoon-like, overshoots target
;(set-animation! '#(-.01 0 .01 .03 .08 .18 .3 .45 .60 .75 .85 .90 .94 .97 .99 1.01 1.02 1.01 1))


(bind-key 'all "C-M-KP_7" (lambda () (animated-move-to 0 0)))
(bind-key 'all "C-M-KP_9" (lambda () (animated-move-to -1 0)))
(bind-key 'all "C-M-KP_1" (lambda () (animated-move-to 0 -1)))
(bind-key 'all "C-M-KP_3" (lambda () (animated-move-to -1 -1)))

(bind-key 'all "C-M-KP_8" (lambda () (animated-move-to 'x 0)))
(bind-key 'all "C-M-KP_6" (lambda () (animated-move-to -1 'y)))
(bind-key 'all "C-M-KP_2" (lambda () (animated-move-to 'x -1)))
(bind-key 'all "C-M-KP_4" (lambda () (animated-move-to 0 'y)))

;; FIXGJB: modifiers interface could be better... mimic off Emacs?
(bind-key 'all "C-M-S-7" (lambda () (send-button-press 1 0)))
(bind-key 'all "C-M-S-8" (lambda () (send-button-press 2 0)))
(bind-key 'all "C-M-S-9" (lambda () (send-button-press 3 0)))

;; This one is experimental-- sends only the buttonpress event, no buttonrelease
(bind-key 'all "C-M-S-0" (lambda () (send-button-press 2 0 (get-window) #t #f)))

(bind-key 'all "C-M-S-n" (lambda () (write (get-window)) (newline)))



;(recapture)
