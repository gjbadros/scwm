;;-------------------------------;;
;; import the scwm modules       ;;

(use-modules (app scwm base)
	     (app scwm winops)
	     (app scwm winlist)
	     (app scwm wininfo)
             (app scwm style)
	     (app scwm face))


(define HOME ;(getenv "HOME")
  "/u1/mstachow")
(define USER (getenv "USER"))
(define xterm-user-shell-options "-e start-zsh")
(define xterm-other-host-use-local-xterm #t)
(define mail-spool-dir (string-append "/var/spool/mail/" USER))


(define user-pixmap-path (string-append HOME "/pixmaps"))
(define user-bitmap-path (string-append HOME "/bitmaps"))

(define want-close-button #t) ;; was #f

;;-------------------------------;;
;; set some basic styles info    ;;

(define (vertical-toggle-maximize)
  (toggle-maximize 0 (%y 100)))

(define (horizontal-toggle-maximize)
  (toggle-maximize (%x 100) 0))

(define (both-toggle-maximize)
  (toggle-maximize (%x 100) (%y 100)))

(define (vertical-toggle-maximize-partial)
  (toggle-maximize 0 (%y 95)))

(define font12
  (load-font "-adobe-helvetica-bold-r-*-*-12-*-*-*-*-*-*-*"))
(define font14 
  (load-font "-adobe-helvetica-bold-r-*-*-14-*-*-*-*-*-*-*"))
(define window-font
  (load-font "*helvetica*bold-r*12*"))
(define menu-font
  (load-font "*helvetica*medium-r*12*"))
(define icon-font
  (load-font "fixed"))

(define (menu-item name pixmap action)
  (list (if pixmap (string-append name "%mini-" pixmap ".xpm%") name) action))

;;(menu-style #:fg "white" #:bg "blueviolet" #:stipple "blue" 
;;	    #:font font14 #:mwm #f)
(menu-style #:fg "black" #:bg "grey76" #:stipple "grey35" 
	    #:font menu-font #:mwm #f)

;;(set-click-time! 150)
;;(set-color-map-focus! 'follows-mouse)
;;(set-desktop-size! 3 3)
;;; FIXGJB: should be a function returning whether it should do opaque move
;;; or an integer for the percent (load might influence whether you want
;;; to do an opaque move, e.g.)
;;(set-opaque-move-size! 30) 
;;(set-edge-resistance! 500 10)
;;(set-edge-scroll! 100 100)


;;; FIXGJB: #:raised true 
;;; MS: see below for the new right way 
(title-style #:font font12 #:justify 'left #:relief 'raised)

(set-icon-font! font12)
(set-xor-value! 255)  ;; FIXGJB: rename to rubber-band-mask?

;;-------------------------------;;
;; set some paths                ;;
;;

(set-icon-path! (string-append user-bitmap-path 
			       ":/usr/X11/include/X11/bitmaps:\
/usr/local/X11/include/X11/pixmaps:/usr/local/lib/icons:\
/uns/include/X11/pixmaps:\
/usr/lib/icons:/usr/X11/include/X11/pixmaps:/usr/X11/lib/X11/mini-icons"))

(set-pixmap-path! (string-append user-pixmap-path 
				 ":/usr/X11/include/X11/bitmaps:\
/usr/local/X11/include/X11/pixmaps:/usr/local/lib/icons:\
/uns/include/X11/pixmaps:\
/usr/lib/icons:/usr/X11/include/X11/pixmaps:/usr/X11/lib/X11/mini-icons"))

;;-------------------------------;;
;; set some window styles        ;;

;;; FIXGJB: these can be regexps, not goofy wildcards
(window-style "*" 
	      #:fg "black" #:bg "grey76" 
;	      #:icon "unknown1.xpm" 
	      #:icon #f        ;; MS - specify #f to not get an icon.
;	      #:icon-box (list (x- 70) 1 69 (y- 141))
	      #:border-width 4 ;; MS borderwidth of 4 looks slightly better
	                       ;; to my eye than 3.
	      #:focus 'mouse

;	      #:plain-border #t ;; replaces handle-width
				;; MS no, it replaces no-handles, plus
	                        ;; it doesn't work right now.
	      #:sticky-icon #t
	      #:random-placement #t #:smart-placement #t
	      #:mwm-func-hint #t #:mwm-decor-hint #t
	      #:int-override #t #:decorate-transient #t
	      #:PPosition-hint #f
	      #:mini-icon "mini-term.xpm")

(define border-face (make-face '((hidden-handles #t) (no-inset #t)) '()))
(set-border-face! border-face)

;; FIXGJB: wrong-type-arg in below
;; MS: not for me....
(define title-face (make-face '((relief raised)) '()))
(set-title-face! title-face)

;; MS: temporarily replaced pixmaps with ones I have installed.
(define system-button-face (make-face '((relief flat))
				      '((pixmap "mini-sys3d-full.xpm"))))

(define mini-icon-button-face (make-face '((relief raised))
					'((pixmap mini-icon))))

(define sticky-button-face (make-face '((relief flat))
				      '((pixmap "mini-hbars-full.xpm"))))


(define sysutils-button-face (make-face '((relief flat))
					'((pixmap "mini-lightbolt-full.xpm"))))


(define close-button-face (make-face '((relief flat))
				     '((pixmap "mini-stylized-x-full.xpm"))))


(define tall-maximize-button-face (make-face '((relief flat))
					     '((pixmap "mini-exp-windows-full.xpm"))))


(define iconify-button-face (make-face '((relief flat))
				       '((pixmap "mini-shrink-windows-full.xpm"))))



(define left-button-number 1)
(define right-button-number 2)

;;(set-button-face! 1 mini-icon-button-face)

(define (add-left-button button-face hook)
  (set-button-face! left-button-number button-face)
  (bind-mouse (string->symbol 
	       (string-append "button-" 
			      (number->string left-button-number)))
	      1 hook)
  (set! left-button-number (+ 2 left-button-number)))


(define (add-right-button button-face hook)
  (set-button-face! right-button-number button-face)
  (bind-mouse (string->symbol 
	       (string-append "button-" 
			      (number->string right-button-number)))
	      1 hook)
  (set! right-button-number (+ 2 right-button-number)))

;; window buttons
;;(bind-mouse 'button-1 1 popup-small-ops)
;;(bind-mouse 'button-2 1 vertical-toggle-maximize)
;;(bind-mouse 'button-4 1 iconify)

;;; FIXGJB: how does the number of buttons to be displayed get
;;; chosen;  is this dynamically changeable?
;;; MS: Right now I think you need to recapture.

;;(add-left-button system-button-face (lambda () (popup-small-ops)))
(add-left-button mini-icon-button-face (lambda () (popup-small-ops)))


;; MS: I presume this is the desired efffect.
;; random thought: A nice extension would be buttons that change
;; appearance with given window properties. This would be an extension of
;; the fvwm2 "MWMButton" concept whereby a button reverses its vector 
;; pattern when the window is maximized. It should be much more general, 
;; of course.
(add-left-button sticky-button-face toggle-stick)

(add-left-button sysutils-button-face (lambda () (display "sysutils")))

;; MS: (lambda () close-window) was definitely not the right thing.
;; I prefer just using close-window, but (lambda () (close-window))
;; may be preferrable in some way.
(if want-close-button
    (add-right-button close-button-face close-window))

(add-right-button tall-maximize-button-face
		  (lambda () (vertical-toggle-maximize)))
(add-right-button iconify-button-face
		  (lambda () (iconify)))



;;(set-button-face! 1 mini-icon-button-face)
;;(set-button-face! 1 tall-maximize-button-face)

;; (plain-border (get-window)) fixes the display problem for the selected window
;; something must not be initialized correctly

(define desk-widget
  (make-style #:plain-border #t #:sticky #t #:winlist-skip #t
	      #:border-width 3 #:circulate-skip #t #:focus 'none))

;; Inherit above style options and specialize
(define desk-widget-on-top
  (make-style #:use-style desk-widget #:stays-on-top #t))


;;; FIXGJB: these window-style-s cause memory-allocation errors or
;;; core dumps from home (on oz), but not from school or for MS
;(window-style "zwgc" #:use-style desk-widget) ;; desk-widget-on-top
;(window-style "*lock" #:use-style desk-widget)
;(window-style "xload" #:no-title #t #:use-style desk-widget)
;(window-style "xscreensaver" #:no-title #t #:use-style desk-widget)
;(window-style "xbiff" #:no-title #t #:use-style desk-widget)
;(window-style "xcalc" #:icon "xcalc.xpm")
;(window-style "xman" #:icon "xman.xpm")
;(window-style "xmag" #:icon "mag_glass.xpm")
;(window-style "Emacs" #:icon "gnu-animal.bmp")
;(window-style "XTerm" #:icon "xterm.xpm")
(window-style "XTerm" #:mini-icon "mini-term.xpm")
(window-style "Emacs" #:mini-icon "mini-edit.xpm")


;;-------------------------------;;
;; define some useful menus      ;;


(define menu-window-ops
  (make-menu "Window Ops"
	     'title
	     (menu-item "&Move" "move" interactive-move)
	     (menu-item "&Resize" "resize" interactive-resize)
	     (menu-item "R&aise" "raise" raise-window)
	     (menu-item "&Lower" "lower" lower-window)
	     (menu-item "&Iconify/Restore" "iconify" toggle-iconify)
	     (menu-item "&Stick/Unstick" "stick" toggle-stick)
	     (menu-item "Ma&ximize/Reset" #f both-toggle-maximize)
	     (menu-item "Ma&ximize &Tall/Reset"
			"maxtall" vertical-toggle-maximize)
	     (menu-item "Maximize &Wide/Reset"
			"maxwide" horizontal-toggle-maximize)
	     (menu-item "S&hade/Reset" #f toggle-window-shade)
	     'separator
	     (menu-item "Keep-&on-top/Reset" #f toggle-on-top)
	     (menu-item "&Print" #f print-window)
	     'separator
	     (menu-item "&Delete" #f delete-window)
	     (menu-item "&Close" "cross" close-window)
	     (menu-item "&Kill" "bomb" destroy-window)
	     'separator
	     (menu-item "Switch to..." #f (lambda () 
					    (show-window-list-menu #:show-geometry #t)))
	     (menu-item "Re&fresh Screen" "ray" refresh)))


;;FIXGJB:
(define (scwm-help)
  (display "Need to write scwm-help\n"))

;;FIXGJB:
(define (scwm-about-message)
  (display "Need to write scwm-about-message\n"))


(define (start-xterm)
  (execute (string-append "color-xterm " xterm-user-shell-options)))

(define (start-xterm)
  (execute (string-append "color-xterm " xterm-user-shell-options))
  (display "Starting Xterm...\n"))

(define (exec-xlock)
  (execute "xlock -nice -16 -mode blank"))

(define (tell-workman command)
  (execute (string-append "workman -s " command)))

(define quit-verify
  (make-menu "Really quit scwm?"
	     'title
	     (menu-item "Yes" #f quit)
	     (menu-item "No" #f noop)
	     'separator
	     (menu-item "Restart scwm" #f
			(lambda () (restart "scwm")))))

(define use-complete-host-menu #t)

;;; FIXGJB introduce syntax which gives the popup-menu-root-start closure after
;;; defining a menu
(define menu-root-start
;  (make-menu "RootStart%linux-menu.xpm@^blue^" "Start %mini-exp.xpm%"
  (make-menu "Start %mini-exp.xpm%"
	     'title
	     (menu-item "&New shell" "sh1" start-xterm)
	     (menu-item "&Applications" "x2" (lambda () 
					       (popup menu-applications)))
	     (menu-item "&Utilities" "hammer" (lambda ()
						(popup menu-utilities)))
	     (menu-item "&Multimedia" "audiovol" (lambda ()
						   (popup menu-multimedia)))
	     (menu-item "&Games" "happy" (lambda ()
					   (popup menu-games)))
	     'separator
	     (menu-item "H&osts" "windows" (lambda ()
					     (popup menu-hosts)))
	     (if use-complete-host-menu
		 (menu-item "O&ther Hosts" #f (lambda ()
						 (popup menu-otherhosts))))
	     (menu-item "&System Utilities" "connect" (lambda ()
							(popup menu-system-utilities)))
	     
	     ;; MS - use the menu object rather than a popup closure when 
	     ;; possible to get correct submenu semantics
	     (menu-item "&Window Operations" "windows" menu-window-ops)
	     (menu-item "&Preferences" "prefs" (lambda ()
						 (popup menu-preferences)))
	     'separator
	     (menu-item "S&creensaver" "display" (lambda ()
						   (popup menu-screensaver)))
	     (menu-item "&Lock Screen" "lock" (lambda ()
						(exec-xlock)))
	     'separator
	     (menu-item "A&bout ScwmTNL" "exclam" (lambda ()
						    (scwm-about-message)))
	     (menu-item "&Help ScwmTNL" "question" (lambda ()
						  (scwm-help)))
	     (menu-item "E&xit Scwm" "stop" quit-verify)))

(define (popup-menu-root-start)
  (popup menu-root-start))


(define (popup-ops)
  (popup menu-window-ops))

(define menu-desk 
  (make-menu "Desks"
	     'title
	     (menu-item "Desk 1" #f (lambda () (set-current-desk! 0)))
	     (menu-item "Desk 2" #f (lambda () (set-current-desk! 1)))
	     (menu-item "Desk 3" #f (lambda () (set-current-desk! 2)))
	     (menu-item "Desk 4" #f (lambda () (set-current-desk! 3)))))

(define menu-util 
  (make-menu "Utilities"
	     'title
	     (menu-item "xterm" "term" (lambda () (execute "xterm")))
	     (menu-item "rxvt" #f (lambda () (execute "rxvt")))
	     (menu-item "emacs" "edit" (lambda () (execute "emacs")))
	     (menu-item "top" #f (lambda () (execute "rxvt -T Top -n Top -e top")))
	     (menu-item "xcalc" #f (lambda () (execute "xcalc")))
	     (menu-item "xmag" #f (lambda () (execute "xmag")))
	     'separator
	     (menu-item "Desks" #f menu-desk)
	     'separator
	     (menu-item "Exit scwm" #f quit-verify)))

(define (popup-util)
  (popup menu-util))

(define (popup-root-start)
  (popup menu-root-start))

(define (make-small-window-ops-menu w)
  (make-menu "Window Ops Small"
	     (menu-item "&Move" "move" interactive-move)
	     (menu-item "Re&size" "resize" interactive-resize)
	     (menu-item (if (iconified? w)
			    "Unmi&nimize"
			    "Mi&nimize") "iconify" iconify)
	     (menu-item (if (maximized? w) 
			    "Unma&ximize" 
			    "Ma&ximize") #f both-toggle-maximize)
	     'separator
	     (menu-item "More" 
			#f (make-menu 
			    "More"
			    (menu-item "&Raise" #f raise-window)
			    (menu-item "&Lower" #f lower-window)
			    (menu-item (if (sticky? w)
					   "Un&stick"
					   "&Stick") 
				       #f toggle-stick)
			    (menu-item (if (window-shaded? w)
					   "Unwindow-S&hade"
					   "Window-S&hade")
				       #f toggle-window-shade)
			    (menu-item (if (kept-on-top? w)
					   "UnKeep On Top"
					   "Keep On Top") 
				       #f toggle-on-top)))
             'separator
	     (menu-item "Close" "cross" close-window)
	     (menu-item "Destroy" "bomb" destroy-window)))

(define (popup-small-ops)
  (popup (make-small-window-ops-menu (get-window))))



;; now set some mouse and key bindings ;;

(define (show-icon-list-menu)
  (show-window-list-menu #:only iconified?))


;; first our root menus
(bind-mouse 'root 1 popup-root-start)
(bind-mouse 'root 2 (lambda () 
		      (show-window-list-menu #:show-geometry #t)))
;;(bind-mouse 'root 3 popup-applications)
(bind-mouse 'root "M-3" (lambda () (popup menu-desk)))

;; operations on parts of the window
(bind-mouse '(frame sidebar) 2 popup-small-ops)
(bind-mouse 'frame 1 resize-or-raise)
(bind-mouse 'sidebar 1 move-or-raise)
(define (move-or-shade)
  (case (mouse-event-type)
    ((double-click) (toggle-window-shade))
    (else (move-or-raise))))
(bind-mouse 'title 1 move-or-shade)
(bind-mouse 'title 2 lower-window)


;; key bindings for the menus
(bind-key 'all "M-F1" popup-util)
(bind-key 'all "M-F2" popup-ops)

;; in case of emergency, hit Control-Meta-Q
(bind-key 'all "C-M-q" quit)

;; some stuff for icons
(define (move-or-deiconify)
  (case (mouse-event-type)
    ((motion) (interactive-move))
    ((double-click) (deiconify))))

(bind-mouse 'icon 1 move-or-deiconify)
(bind-mouse 'icon 2 deiconify)

(bind-mouse 'all "C-S-M-1" toggle-raise)
(bind-mouse 'all "C-S-M-2" interactive-move)
(bind-mouse 'all "C-S-M-3" interactive-resize)

(bind-key 'all "C-S-F7" interactive-move)
(bind-key 'all "C-S-F8" interactive-resize)

;; rotate the current window with the keyboard
(bind-key 'all "M-Tab"
	  (lambda ()
	    (next-window #:only visible? #:except iconified?)))

(bind-key 'all "M-S-Tab" 
	  (lambda ()
	    (prev-window #:only visible? #:except iconified?)))

(define (key-mouse-moves modifiers pct-of-screen left down up right)
  (bind-key 'all (string-append modifiers "-" left) 
	    (lambda () (move-pointer (%x (- pct-of-screen)) 0)))
  (bind-key 'all (string-append modifiers "-" down) 
	    (lambda () (move-pointer 0 (%y pct-of-screen))))
  (bind-key 'all (string-append modifiers "-" up) 
	    (lambda () (move-pointer 0 (%y (- pct-of-screen)))))
  (bind-key 'all (string-append modifiers "-" right) 
	    (lambda () (move-pointer (%x pct-of-screen) 0))))

(define (key-viewport-moves modifiers pct-of-screen left down up right)
  (bind-key 'all (string-append modifiers "-" left) 
	    (lambda () (move-viewport (%x (- pct-of-screen)) 0)))
  (bind-key 'all (string-append modifiers "-" down) 
	    (lambda () (move-viewport 0 (%y pct-of-screen))))
  (bind-key 'all (string-append modifiers "-" up) 
	    (lambda () (move-viewport 0 (%y (- pct-of-screen)))))
  (bind-key 'all (string-append modifiers "-" right) 
	    (lambda () (move-viewport (%x pct-of-screen) 0))))

(key-mouse-moves "C-M-S" 5 "h" "j" "k" "l")
;; XInside's old X server steal C-M-h for prev virtual console, so use m too
(key-mouse-moves "C-M-S" 5 "m" "j" "k" "l")

(key-mouse-moves "C-M-S" 1 "y" "u" "i" "o")

(key-viewport-moves "C-M-S" 100 "Left" "Down" "Up" "Right")
;(key-viewport-moves "C-M-S" 10 "KP_4" "KP_2" "KP_8" "KP_6")

(bind-key 'all "C-M-S-r" refresh)
(bind-key 'all "C-M-S-5" recapture)
(bind-key 'all "C-M-S-x" (lambda () (start-xterm)))

(bind-key 'all "C-S-F1" popup-small-ops)
(bind-key 'all "C-S-F2" show-window-list-menu)

(define (float->integer x)
	 (inexact->exact x))

;; These are useful!
(define root-size-x (car (display-size)))
(define root-size-y (cadr (display-size)))

;; FIXGJB: where is setenv?
;;(setenv "height" (number->string root-size-x))
(putenv (string-append "height=" (number->string root-size-y)))
(putenv (string-append "width=" (number->string root-size-x)))
;; PLANES? FVWM_DIR? FVWM_VERSION?  want these exported too

;; Ahhhh now I get what (%x ..) does!
(define (percent-display x y)
  (list (%x x) (%y y)))

(bind-key 'all "C-S-Down" iconify)
;;(bind-key 'all "C-M-Return" raise-window)
(bind-key 'all "C-M-Return" toggle-raise)
(bind-key 'all "C-S-Up" vertical-toggle-maximize-partial)
(bind-key 'all "C-S-Right" horizontal-toggle-maximize)
(bind-key 'all "C-S-Left" both-toggle-maximize)
;; MS thinks (maximize (%x 0) (%y 95)) is easier to read than 
;; (apply maximize (percent-display 0 95)), but that's a matter of taste.
(bind-key 'all "C-S-Up" (lambda () (apply toggle-maximize (percent-display 0 95))))
(bind-key 'all "C-S-Right" (lambda () (apply toggle-maximize (percent-display 100 0))))
(bind-key 'all "C-S-Left" (lambda () (apply toggle-maximize (percent-display 100 95))))

;; See the binding for mouse button 2
;; to add geometry strings to this as well.
(bind-key 'all "C-S-Return" show-icon-list-menu)

(bind-key 'all "C-S-M-z" (lambda () (popup menu-root-start)))

(set-click-time! 150)

(set-hilight-colors! "white" "navyblue")

(unbind-mouse 'all "C-S-M-1")
(unbind-mouse 'all "C-S-M-2")

(define (animated-move-to x y)
  (let* ((w (get-window))
	 (size (window-size w))
	 (width (car size))
	 (height (cadr size))
	 (position (window-position w))
	 (oldx (car position))
	 (oldy (cadr position)))
    ;;; FIXGJB: is there a better way to correct for width, height, etc
    ;;; MS: perhaps we should make move-to take #f for either coordinate,
    ;;; which means don't move along that coord?
    (if (equal? x 'x) (set! x oldx))
    (if (equal? y 'y) (set! y oldy))
    ;; MS: see base.scm for x- and y-, which I think are a more genric
    ;; way to handle negative positions in the traditional X11 way.
    (if (< x 0) (set! x (- root-size-x (abs x) width)))
    (if (< y 0) (set! y (- root-size-y (abs y) height)))
    (raise-window w)
    (move-to x y w 'animated 'move-pointer-too)))

(define animation-ms-delay 50)

;; Fluid, cartoon-like
;(set-animation! '#(-.01 0 .01 .03 .08 .18 .3 .45 .60 .75 .85 .90 .94 .97 .99 1.0))

;; Linear, mechanical
;(set-animation! '#(0.1 0.2 0.3 0.4 0.6 0.7 0.8 0.9 1.0))

;; Fluid, cartoon-like, overshoots target
;(set-animation! '#(-.01 0 .01 .03 .08 .18 .3 .45 .60 .75 .85 .90 .94 .97 .99 1.01 1.02 1.01 1))

;; FIXMS: none of the KP_n keysyms work on my X server. I think
;; Jens-Ulrik had the same complaint. Is there a more portable way to
;; handle these?

;(bind-key 'all "C-M-KP_7" (lambda () (animated-move-to 0 0)))
;(bind-key 'all "C-M-KP_9" (lambda () (animated-move-to -1 0)))
;(bind-key 'all "C-M-KP_1" (lambda () (animated-move-to 0 -1)))
;(bind-key 'all "C-M-KP_3" (lambda () (animated-move-to -1 -1)))

;(bind-key 'all "C-M-KP_8" (lambda () (animated-move-to 'x 0)))
;(bind-key 'all "C-M-KP_6" (lambda () (animated-move-to -1 'y)))
;(bind-key 'all "C-M-KP_2" (lambda () (animated-move-to 'x -1)))
;(bind-key 'all "C-M-KP_4" (lambda () (animated-move-to 0 'y)))

;; FIXGJB: modifiers interface could be better... mimic off Emacs?
(bind-key 'all "C-M-S-7" (lambda () (send-button-press 1 0)))
(bind-key 'all "C-M-S-8" (lambda () (send-button-press 2 0)))
(bind-key 'all "C-M-S-9" (lambda () (send-button-press 3 0)))

;;(bind-key 'all "C-M-S-4" (lambda () (send-key-press "Return")))
(bind-key 'all "C-M-S-4" (lambda () (send-string "helloworld")))

;; This one is experimental-- sends only the buttonpress event, no buttonrelease
(bind-key 'all "C-M-S-0" (lambda () (send-button-press 2 0 (get-window) #t #f)))

(bind-key 'all "C-M-S-n" (lambda () (write (get-window)) (newline)))


(define (sleep-ms ms)
  (select '() '() '() 0 (* 1000 ms)))

;; Does not work for arbitrary strings since, e.g,. ' ' needs
;; to be sent as "space"  FIXGJB: Do we have a char->keysym fn?
(define (send-string str)
  (let ((w (get-window))
	(i 0))
    (while (< i (length str))
	   (send-key-press (substring str i (+ 1 i)) w)
	   (set! i (+ 1 i)))))

;(recapture)

;;; Local Variables:
;;; eval: (load "scwm-buffer")
;;; End:
