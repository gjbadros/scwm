;;; $Id$ -*- scwm -*-
;;; spare-blue.scwmrc

;;; This is a .scwmrc configuration file for SCWM, a window manager. 
;;; Called `spare-blue', this has a simple, spare theme and blue backgrounds.

;;; Robert J. Chassell
;;; 1999 Aug 21, 1999 Sep  8

;;; Released under the GPL.

;; ==> Note that font sizes are for a 1280x1024 screen.  
;;     You may have to adjust sizes for your resolution.

    ;;--------------;;
    ;; CVS snapshot ;;
    ;;--------------;;

;; This file was tested with the CVS snapshot of 1999 Sep  8 

;; To obtain a CVS snapshot of the SCWM development sources
;; execute the following at your shell prompt.
;; Be warned that development sources often but don't always work!

;; I keep my scwm sources in /u/scwm.
;; The first time you obtain a snapshot do the following

;;     mkdir /u
;;     cd /u
;;     export CVSROOT=':pserver:anoncvs@scwm.mit.edu:/anoncvs'
;;     cvs login
;;        ## type `anoncvs' as the password at the `CVS password:' prompt
;;     cvs get scwm

;; The second and subsequent times, to update your CVS snapshot, do:

;;     cd /u/scwm
;;     export CVSROOT=':pserver:anoncvs@scwm.mit.edu:/anoncvs'
;;     cvs login
;;        ## type `anoncvs' as the password at the `CVS password:' prompt
;;     cvs update -Pd

;; Run these compile commands to build scwm:

;;     ./autogen.sh; 
;;     ./ltconfig --cache-file=./config.cache --with-gcc --with-gnu-ld ;
;;     ./ltmain.sh i686-pc-linux-gnu; ./configure --enable-maintainer-mode ;
;;     env CFLAGS='-Wall -W' make -k"

;; On my system, SCWM-related files are in:
;;
;;               /usr/local/share/scwm/
;; particularly
;;               /usr/local/share/scwm/modules/app/scwm/
;;               /usr/local/share/scwm/pixmaps
;;               /usr/local/share/scwm/themes
;;
;; as well as
;;               /usr/local/lib/
;;               /usr/local/include/
;;               /usr/local/bin/
;;

;; My sources are in   /u/scwm

;; Samples in          /u/scwm/sample.scwmrc/

;; Themes in           /u/scwm/themes

;; Other scm files are in:
;;
;;    /usr/lib/elk/scm
;;    /usr/lib/scm
;;    /usr/share/slib


    ;;---------------;;
    ;; Starting SCWM ;;
    ;;---------------;;

;; To start SCWM, place the following in your ~/.xsession file:

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;;                                        ;;
    ;;    #! /bin/bash                        ;;
    ;;    exec scwm -f ~/spare-blue.scwmrc    ;;
    ;;                                        ;;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; then run `startx' from your shell prompt.

;; If you wish to use X windows display :0,
;; set your color depth to 32, 
;; and record errors and other information in a file called X-log,
;; run:
;;            startx -- :0 -bpp 32 > X-log 2>&1
;;

;; On my system, this SCWM configuration takes 30 seconds to start.


    ;;---------------------------;;
    ;; display a startup message ;;
    ;;---------------------------;;

;; Do this very early so people do not wait too long.  
;; This message takes ten seconds to appear on my machine.

;; First we must import the scwm modules that provide the requisit services.
;; The message-window module imports base.scm and three other modules.
(use-scwm-modules message-window)

;; Set message-window-style
;; The colors come into effect only at the last moment; perhaps never.
(message-window-style default-message-window
		      #:font font12 
                      #:fg "white" 
                      #:bg "blue")

;; Display startup message for 15 seconds, after which it goes away
;; If you have a faster machine, you may want to shorten the time.
(display-message-briefly
 "Starting SCWM  ...  this takes thirty seconds on my machine  ...  "
15)



    ;;-----------------------------------;;
    ;; ---- Import the scwm modules ---- ;;
    ;;-----------------------------------;;

;; Import the scwm modules that run the window manager.

;; You can use one or other of the commands: use-scwm-modules or use-modules.

;; The latter command requires that you specify the subdirectories
;; under the modules directory under which the specific modules are
;; are located.  Thus, the command (use-modules (app scwm base))
;; loads the base.scm module from   /usr/local/share/scwm/modules/app/scwm/

;; As you can see, the top level directory is
;; /usr/local/share/scwm/modules/

;; The use-scwm-modules command presumes the desired modules are in the
;; /usr/local/share/scwm/modules/app/scwm/  directory.

(use-scwm-modules  base message-window gnome-hints
                   defoption optargs primopts 
                   winops winlist wininfo listops placement
                   style stylist face time-convert menus-extras
                   std-menus doc virtual
                   flux flux-gtk flash-window key-mover
                   fvwm-module path-cache animation 
                   themes
                   animated-iconify
                   modifier-key-bindings window-selection
                   group preferences gnome-hints
                   send-string quote background
                   property-respond highlight-current-window
                   dir-focus tile undo
                   decor auto-raise
                  )

;; Example of `use-modules' command 
;; (This example does not load as many modules as the command above.)
;; (use-modules (app scwm base)
;;           (app scwm winops)
;;           (app scwm winlist)
;;           (app scwm wininfo)
;;           (app scwm style)
;;           (app scwm face)
;;           (app scwm flux)
;;           (app scwm decor)
;;           (app scwm desk-background)
;;           (app scwm module-types)
;;           (app scwm auto-raise)
;;           (app scwmp references)
;;           (app scwm themes)
;;           (app scwm fvwm-module))


    ;;-------------------------------------;;
    ;; set window configuration at startup ;;
    ;;-------------------------------------;;

;; These commands replace most of what goes into a ~/.xinitrc or ~/.xsession
;; file.  

;; ==> Note that font sizes are for a 1280x1024 screen.  
;;     You may have to adjust sizes for your resolution.

;; Blue is restful on my eyes; shows less flicker (to which I am sensitive).
(set-background-color! "Navy")

;; for analog clock in upper right
(execute "xclock -analog -bg navy -fg white -hd white -hl white \
          -update 1  -geometry 80x80-130+5")

;; for digital clock in upper left
(execute "xclock -digital -bg navy -fg white -hd white -hl white \
          -update 1 -geometry +0+0")

;; for GMT digital clock in upper left
(scwm-system "TZ=GMT0 xclock -digital -bg navy -fg white -hd white -hl white \
              -update 1 -geometry +202+0&")

;; Other clock information is located in: 
;; /usr/local/share/scwm/modules/app/scwm/ScwmClock.scm

;; Create some xterms.  Note the name for the tall xterm; 
;; that is so it is easy for me to pick from an icon list.

(execute "xterm -T 80x24 -n 80x24 -bg mediumblue \
               -fg white -geometry 80x24+0+75")

(execute "xterm -T 80x74 -n '|| 80x74 ||' -bg mediumblue \
      -fg white -geometry 80x74+450+10 -iconic")

;; Here are other programs that are usually run from ~/.xinitrc

(execute "xrdb ~/.Xresources > /dev/null")

;; My preferred keymap is:  /usr/share/keymaps/i386/qwerty/emacs2.map.gz
;; This emulates it X
(execute "xmodmap -e 'clear Lock'")
(execute "xmodmap -e 'add Control = Caps_Lock'")
(execute "xmodmap -e 'keysym Tab = Tab'")
(execute "xmodmap -e 'keycode 22 = BackSpace'")
(execute "xmodmap -e 'keycode 107 = Delete'")

;; Fonts

;; For Emacs; extract from: /usr/local/src/intlfonts-1.0.tar.gz
;; Others that could be loaded include:
;;   Asian Chinese-BIG Chinese Ethiopic Japanese-BIG Japanese Korean
;; For the GIMP, put Type 1 and Speedo fonts first.

(execute "xset fp+ /usr/X11R6/lib/X11/fonts/Type1,/usr/X11R6/lib/X11/fonts/Speedo,/usr/X11R6/lib/X11/fonts/100dpi,/usr/X11R6/lib/X11/fonts/75dpi,/usr/X11R6/lib/X11/fonts/misc,/usr/X11R6/lib/X11/fonts/freefont/,/usr/X11R6/lib/X11/fonts/sharefont/,/usr/X11R6/lib/X11/fonts/URW/,/usr/local/src/intlfonts/European,/usr/local/src/intlfonts/Misc")

(execute "xset fp rehash")

    ;;;; end set window configuration at startup ;;;;



    ;;--------------------------------;;
    ;; basic configuration parameters ;;
    ;;--------------------------------;;


;; This definition is used to define *theme-path*  and is helpful if
;; you specify files to load, as shown immediately below.
(define HOME (getenv "HOME"))

;; You can define USER this way
;; (define USER (getenv "USER"))  


;; If you are loading both local and system settings, you can do this:

;; (define USERROOT (string-append HOME "/.scwm"))
;; (define SYSTEMROOT "/etc/X11/scwm")
;;
;; (let ((SYSTEMSETTINGS (string-append SYSTEMROOT "/settings"))
;;       (USERSETTINGS (string-append USERROOT "/settings")))
;;   (cond ((file-exists? USERSETTINGS)
;;          (load USERSETTINGS))
;;         ((file-exists? SYSTEMSETTINGS)
;;          (load SYSTEMSETTINGS))
;;         ))

;; However, rather than employ additional files for this `spare-blue'
;; configuration, I have copied my  ~/.scwm/settings  file into this
;; .scwmrc file, so the above load commands are not needed and are
;; therefore commented out.

;; Also, I do not load any system-wide settings.  These actions mean
;; that I have to keep track of only one file, this ~/.scwmrc file
;; (plus the ~/.xsession file for starting X).

;;;;;;;;;;;;;;;;   copy of   ~/.scwm/settings    ;;;;;;;;;;;;;;;;

;;  ~/.scwm/settings      -*- scwm -*-
;; basic configuration parameters for scwm
;; ATTENTION!!!: THE FOLLOWING VARIABLES MUST BE DEFINED!!!
;; user-image-path, menu-font, icon-font,
;; focus-type, restart-function, init-function,
;; window-toggle-maximize

;; ==> Note: I have copied this file from the distribution, and customized it.

;;; Specify how to focus on a window ;;;
;; ==> Note: I also specify the mouse focus type in the generic window
;; style; this may be redundant

;; here you can put one of these values:
;; 'click     - must click on the window to focus.
;; 'mouse     - the window gains focus as the mouse enters or leaves.
;; 'sloppy    - the window gains focus as the mouse enters, but does not
;;              lose it if the pointer enters the root window, or a window
;;              with 'click or 'none focus.
;; 'none      - don't ever give this window focus, even if
;;              it is clicked.

(define focus-type 'mouse)


;; ==> Note: image-load-path also defines where images are located.
;; this defines the path where a user can put own images 
(define user-image-path '())

;; now we define the font for menus, titles and icons
(define helvetica12
  (load-font "-adobe-helvetica-bold-r-*-*-12-*-*-*-*-*-*-*"))

(define menu-font helvetica12)
(define icon-font helvetica12)

;; ==> Note: Apparently, this two functions serve as `hooks' --
;; `restart-function' is run before (restart "scwm")
;; and `init-function' is run at the end of this file.
;; Here, these two functions are defined to do nothing.

;; this is the function, scwm calls when you restart it 
(define (restart-function)
  ())

;; init-function is the function, scwm calls after the initialisation.
(define (init-function) 
  ())

;;; now we define the maximize function
;; use this definition, if you want the normal vertical-only maximize function

;; ==> Note that I have defined this to maximize almost, but all the
;; way to the top of the screen.  This is because I always like some
;; visible root screen space.

(define (vertical-toggle-maximize) 
  (toggle-maximize 0 (%y 95)))

;; use this function, if you want a vertical-and-horizontal maximize function

;; (define (window-toggle-maximize)
;;   (toggle-maximize (%x 99) (%y 99))
;;   (move-to 7 7))
    
;;;;;;;;;;;;;;;;   end copy of   ~/.scwm/settings    ;;;;;;;;;;;;;;;;



    ;; -------;;
    ;; decors ;;
    ;; -------;;

;; These decors enable you to change a theme on a per-window basis.
;; Only std-d, lizard-d, and grad-d are defined here.
;; grad-d is the default for this ~/.scwmrc file

(define std-d (make-decor "std"))
(with-decor std-d
            (title-style #:font helvetica12 #:justify 'left #:relief 'raised)
            (border-style #:hidden-handles #f #:no-inset #t))

(define lizard-d (make-decor))
(with-decor lizard-d
            (title-style #:font helvetica12 #:justify 'left #:relief 'raised)
            (border-style #:hidden-handles #f 
                          #:no-inset #t
                          #:inactive
                          (list #:hidden-handles #f #:no-inset #t)))

(define grad-d (make-decor))
(with-decor grad-d
            (set-rubber-band-mask! 127)
            (title-style 
             #:font helvetica12 
             #:justify 'left 
             #:relief 'flat
             #:h-gradient (list 
                           20 (list "OrangeRed3" 20) "OrangeRed3" "#3cb21c")
             #:inactive (list 
                         #:h-gradient
                         (list 40 (list "grey50" 20) "grey50" "grey25")))
            (border-style 
             #:no-inset #f 
             #:hidden-handles #f))

(define decor-list (list (cons "Standard" std-d) (cons "Lizard" lizard-d)
                         (cons "Gradient" grad-d)))

    ;;;; end decors ;;;;




    ;; --------------------;;
    ;; locations of images ;;
    ;; --------------------;;

;;; Set path to use for image searches
;;; On my system, all icons that I use are actually in
;;; /usr/X11R6/include/X11/pixmaps/

(append! image-load-path
     (list
      "/usr/X11R6/include/X11/pixmaps" 
      "/usr/X11R6/include/X11/bitmaps"
      "~/pixmaps"
      "~/bitmaps"
      "/usr/share/icons"              ;; /usr/share/icons is for wmaker
      "/usr/local/lib/X11/mini-icons"
      ))

;; Other possible image directories; none of these are on my system.
;;      "/usr/X11/lib/X11/mini-icons"
;;      "/usr/share/include/X11/pixmaps"
;;      "/usr/share/include/X11/bitmaps"
;;      "/usr/lib/icons"
;;      "/usr/local/X11/include/X11/pixmaps"
;;      "/usr/lib/TheNextLevel/pixmaps"
;;      "/usr/local/lib/icons"
;;      "/usr/local/icons"



    ;;----------------------------------;;
    ;; create miniature icons for menus ;;
    ;;----------------------------------;;

;; Create the image form used in various menus
;; Not all of these images are used in this ~/.scwmrc file, 
;; but are kept because the might be useful in the future.

;; These must be loaded before the window styles, which use them.

(define bolt-i    (make-image "mini-ray.xpm"))
(define bomb-i    (make-image "mini-bomb.xpm"))
(define bomb-smaller-i (make-image "mini.bomb.xpm"))
(define book2-i   (make-image "mini-book2.xpm"))
(define calc-i    (make-image "mini-calc.xpm"))
(define cd-i      (make-image "mini-cdlabel.xpm"))
(define clock-i   (make-image "mini-clock.xpm"))
(define cross-i   (make-image "mini-cross.xpm"))
(define ctd-i     (make-image "mini-connect.xpm"))
(define debian-i  (make-image "Debian-transparent.xpm"))
(define decor-i   (make-image "mini-exclam.xpm"))
(define dos-i     (make-image "mini-bug2.xpm"))
(define edit-i    (make-image "mini-edit.xpm"))
(define excl-i    (make-image "mini-exclam.xpm"))
(define eyes-i    (make-image "mini-eyes.xpm"))
(define fig-i     (make-image "mini-paint.xpm"))
(define fm-i      (make-image "mini-filemgr.xpm"))
(define games-i   (make-image "mini-happy.xpm"))
(define ghost-i   (make-image "mini-gv.xpm"))
(define gimp-i    (make-image "mini-wilbur.xpm"))
(define hamm-i    (make-image "mini-hammer.xpm"))
(define lock-i    (make-image "mini-lock.xpm"))
(define lower-i   (make-image "mini-lower.xpm"))
(define man-i     (make-image "mini-manual.xpm"))
(define max1-i    (make-image "mini-max1.xpm"))
(define nscape-i  (make-image "mini-nscape.xpm"))
(define pdf-i     (make-image "mini-pdf.xpm"))
(define quest-i   (make-image "mini-question.xpm"))
(define raise-i   (make-image "mini-raise.xpm"))
(define resize-i  (make-image "mini-resize.xpm"))
(define run-i     (make-image "mini-run.xpm"))
(define rxvt-i    (make-image "mini-term.xpm"))
(define stop-i    (make-image "mini-stop.xpm"))
(define term-i    (make-image "mini-sh1.xpm"))
(define turn-i    (make-image "mini-turn.xpm"))
(define windows-i (make-image "mini-windows.xpm"))
(define x2-i      (make-image "mini-x2.xpm"))
(define xv-i      (make-image "mini-xv.xpm"))
(define xx-i      (make-image "mini-x.xpm"))
(define xxgdb-i   (make-image "mini-bug1.xpm"))
;;(define manx-i    (make-image "mini-xman.xpm"))
;; (define decor-i   (make-image "mini-color-splotch.xpm"))

    ;;;; end miniature icons for menus ;;;;



    ;; -----------------------;;
    ;; general window styles  ;;
    ;; -----------------------;;

;; Move all windows opaquely and always resize opaquely
(set! *opaque-move-percent* 100)
(set! *opaque-resize-percent* 100)

;; Enable run-time theme changes
(append! *theme-path*
         (list (string-append (scwm-path-prefix) "/share/scwm/themes")
               (string-append HOME "/themes")))

;; Define a style for the clock and other such items
(define desk-widget
  (make-style #:plain-border #t 
              #:sticky #t 
              #:winlist-skip #t
              #:border-width 3 
              #:focus 'none))

    ;;---------------------------;;
    ;; specific window styles    ;;
    ;;---------------------------;;

(window-style "*" #:use-decor grad-d)

;; I don't like to see icons for my main programs when a window is
;; iconified, only the text with its name, so I commented out those
;; icons.

(window-style "xterm" 
;;              #:icon "/usr/X11R6/lib/X11/twm/images/xterm.xpm"
              #:mini-icon term-i 
              #:use-decor grad-d)

(window-style "emacs" 
;;              #:icon "gnu-animal.xpm"
              #:icon-box (list (x- 35) 1 35 (y- 141))
              #:use-decor grad-d)

(window-style "netscape" 
;;              #:icon "netscape.xpm"
              #:placement-proc place-at-point
              #:use-decor grad-d)

(window-style "gimp" 
;;              #:icon "wilber.xpm"
              #:mini-icon gimp-i
              #:use-decor grad-d)

(window-style "xclock*" 
              #:no-titlebar #t 
              #:circulate-skip #t 
              #:use-style desk-widget
              #:fg "yellow"
              #:bg "red")

(window-style "*lock" #:use-style desk-widget)
(window-style "xload" #:no-titlebar #t #:use-style desk-widget)
(window-style "xscreensaver" #:no-titlebar #t #:use-style desk-widget)
(window-style "xbiff" #:no-titlebar #t #:use-style desk-widget)

(window-style "xcalc" #:icon "xcalc.xpm")
(window-style "xman" #:icon "xman.xpm")
(window-style "xmag" #:icon "mag_glass.xpm")


    ;;--------------------------;;
    ;; set generic window style ;;
    ;;--------------------------;;

;; This sets the window style for attributes not mentioned in specific
;; window styles for specific windows.

(window-style "*" 

              #:icon #f      ;; this turns off icons, but leaves icon titles
              #:show-icon #t ;; show text of titles for icon, not images
              ;; #:sticky-icon #t

              #:auto-raise #t
              #:auto-raise-delay 0
              #:auto-raise-focus-proc raise-window

              ;; fg is the color used in the text of icon titles,
              ;; and in the text of inactive images in the pager.
              #:fg "white"

              ;; bg is the color used in the background of icon titles,
              ;; for inactive buttons on a title bar,
              ;; for inactive images in the pager.
              #:bg "blue"

              ;; icon-box: X-position, Y-position, width, height
              ;; #:icon-box (list (x- 70) 1 69 (y- 141))
              #:icon-box (list (x- 35) 1 35 (y- 141))

              #:focus 'mouse
              #:border-width 3 

;;              #:placement-proc place-at-point
;;              #:transient-placement-proc place-at-point
;;              #:random-placement #t 
;;              #:smart-placement #t

              #:mwm-func-hint #t 
              #:mwm-decor-hint #t
              #:hint-override #t 
              #:decorate-transient #t
              #:PPosition-hint #f
              #:lenience #t)


    ;;-------;;
    ;; Pager ;;
    ;;-------;;

;; This pager is adapted by the scwm developers from that for Fvwm;
;; hence the references to "FvwmPager" 

(set-desk-size! 2 2)

(set-edge-scroll! (%x 100) (%y 100))

;; delay a move across an edge briefly, and require a small threshhold
;; some people prefer considerably higher values, such as 500 500
(set-edge-resistance! 150 150)


(window-style "FvwmPager" 
              #:no-titlebar #t 
              #:use-style desk-widget)

;; for a pager for a specific desk, try the following (untested)
;;   see  /usr/local/src/scwmdoc.pdf
;; (define First_Desk 1)
;; (define Second_Desk 2)
;; (window-style "Second_Pager" 
;;               #:start-on-desk  Second_Desk
;;               #:no-titlebar #t 
;;               #:use-style desk-widget)

;; (window-style "SecondPager" #:use-style desk-widget-on-top)

(register-fvwm2-module-config "FvwmPager"
 "*FvwmPagerGeometry -220+4"
 "*FvwmPagerDeskTopScale 40"
 "*FvwmPagerHilight NavajoWhite2"            ; active window
 "*FvwmPagerBack burlywood3"                 ; non-active windows
 ;; FvwmPagerFore is used for the dashed lines separating 
 ;; workspaces in the pager
 "*FvwmPagerFore DarkSlateBlue"
 "*FvwmPagerFont none"
 "*FvwmPagerSmallFont 5x8"
 "*FvwmPagerInterPageLineStyle solid"
 "*FvwmPagerLabel 0 Top"
 "*FvwmPagerLabel 1 Bottom"
)

;; The following shows two desktops on a double wide pager:
;; (define fvwm2-pager (run-fvwm2-module "FvwmPager" '("0" "1")))

;; The following shows only the first desktop, not desk two.
;; I don't know why.
;; However, windows on the second desktop are visible in the window list.
;; Also, you can use the Desk menu to go to any desk.
(define fvwm2-pager (run-fvwm2-module "FvwmPager" '("Top" "Bottom")))

    ;;;; End Pager ;;;;


    ;;---------------;;
    ;; define  menus ;;
    ;;---------------;;

;;; menus used by the main root menu ;;;

;; Mouse button bindings are defined in a section below;
;; this section creates the menus.

;; The steps are:
;;  1. create menus used by main root menu (done in this section)
;;  2. create main menu 
;;  3. bind the menu to an action such as a mouse click (done below)

;; quit-verify is used by the main root menu
(define quit-verify
  (menu 
   (list 
    (menuitem "Really quit scwm?" #f)
    menu-title
    (menuitem "Yes" #:action quit)
    (menuitem "No" #:action #f)
    menu-separator
    (menuitem "Restart scwm" #:action (lambda ()
                                        (restart-function)
                                        (restart "scwm"))))))

;; desk-menu is used by the main root menu  
;; and is also bound to meta-mouse-3 in the root window

(define desk-menu
  (menu 
   (list
    (menuitem "Desks" #f)
    menu-title
    (menuitem "Desk 1" #:action (lambda () (set-current-desk! 0)))
    (menuitem "Desk 2" #:action (lambda () (set-current-desk! 1)))
    (menuitem "Desk 3" #:action (lambda () (set-current-desk! 2)))
    (menuitem "Desk 4" #:action (lambda () (set-current-desk! 3))))))


;;; Debian menus ;;;

;; If you load the file that contains the Debian menus,
;; you can uncomment and use the entries in the main-root-menu below
;; that list the Debian menus.

;; On my system, the Debian menus were generated automatically when I
;; first installed Scwm and were placed in a file called
;;     ~/.scwm/scwm_menus

;; You can load the Debian menus file here by uncommenting this command:

;;     (load (string-append (getenv "HOME") "/.scwm/scwm_menus"))

;; (Change the name of the file as needed for your system.)

;; The Debian menus list many programs, all of which are part of the
;; Debian GNU/Linux distribution, but not all of which may be
;; installed on your machine.

;; The Debian menus listed below that you may uncomment if you wish are:
;;    /Debian/Apps
;;    /Debian/Games
;;    /Debian/Screen
;;    /Debian/System
;;    /Debian/WindowManagers
;;    /Debian/XShells


;;; main root menu ;;;

;; left button mouse menu on root window
(define (popup-main-root-menu)
  (popup-menu main-root-menu))

(define main-root-menu
  (menu 
   (list
    (menuitem "Main Menu" 
              #:image-left "mini-penguin.xpm" 
              ;; #:image-left "jline.xpm" "mini-penguin.xpm"  "jline.xpm"
              #f)

    menu-separator
    (menuitem
     "&80x24 Window" 
     #:image-left 
     "mini.xterm.xpm" 
     #:action (lambda () 
                (execute "xterm -bg darkblue -fg white -cr orchid \
                           -geometry 80x24+2+130 -name '80x24 xterm' \
                           -title xterm -e /bin/bash -login")))
    (menuitem
     "&80x74 Window" 
     #:image-left 
     "mini.xterm.xpm" 
     #:action (lambda () 
                (execute "xterm -bg darkblue -fg white -cr orchid \
                           -geometry 80x74+530+2 -name '80x74 xterm' \
                           -title xterm -e /bin/bash -login")))

    menu-separator

    (menuitem 
     "&GNU Emacs" 
     #:image-left "mini.emacs.xpm" 
     #:action (lambda () 
                (execute "/usr/bin/emacs20 -fn 7x14 -bg darkblue \
                 -fg white -geometry 81x62-534+95 -name 'GNU Emacs'")))

    menu-separator

    (menuitem 
     "Gzilla" 
     #:image-left "mini-gzilla.xpm"
     #:action (lambda () (execute "gzilla")))

    (menuitem "The Gimp" 
              #:image-left "mini-wilbur.xpm"
              #:action (lambda () (execute "gimp")))

    menu-separator

    (menuitem "&xcolors" 
              #:image-left "mini.rainbow.xpm" 
              #:action (lambda () (execute "xcolors")))

;;;; Uncomment the following Debian menus 
;;;; only if you have loaded the file that contains them.
;;;; See above for how to load that file.

;;     menu-separator
;;     (menuitem "Debian Menus" #:image-left debian-i)
;;     menu-separator
;;     (menuitem "&Apps"           #:action /Debian/Apps)
;;     (menuitem "&Games"          #:action /Debian/Games)
;;     (menuitem "&Screen"         #:action /Debian/Screen)
;;     (menuitem "S&ystem"         #:action /Debian/System)
;;     (menuitem "&WindowManagers" #:action /Debian/WindowManagers)
;;     (menuitem "&XShells"        #:action /Debian/XShells)


    menu-separator

    (menuitem "Desks" 
              #:image-left "/usr/X11R6/lib/tkdesk/images/ficons16/desk.xpm"
              #:action desk-menu)

    menu-separator

    (menuitem 
     "Restart scwm" 
     #:image-left "mini-start.xpm"
     #:action (lambda () (restart-function) (restart "scwm")))

    menu-separator
    (menuitem 
     "Quit scwm" 
     #:image-left "mini-cross.xpm"
     #:action quit-verify))))

;;; end main root menu ;;;


;;; middle mouse root menu ;;;


;; menu-for-preferences  is used by the middle mouse root menu
(define menu-for-preferences
  (menu 
   (list 
    (menu-title "Preferences" #f) 
    menu-title
    menu-separator

    ;; global themes are in
    ;;     /usr/local/share/scwm/themes
    ;;  as tar.gz files that Scwm reads automagically
    (menuitem "Change global theme" 
              #:submenu 
              (lambda () (menu-global-theme #t)))

    (menuitem "Scwm interaction" #:action
              (run-in-xterm "scwmrepl"))

    (menuitem "Info on a window" 
              #:action window-info))))


;; middle mouse button on root window
(define (popup-ops) (popup-menu window-ops-menu))

;; middle mouse button on root window; bound to popup-ops
(define window-ops-menu
  (menu 
   (list
    (menuitem "Window Ops" #f)
    menu-title
    menu-separator
    (menuitem "Move" #:action interactive-move)
    (menuitem "Resize" #:action interactive-resize)
    (menuitem "Raise" #:action raise-window)
    (menuitem "Lower" #:action lower-window)
;;    (menuitem "Print" #:action print-window)
    (menuitem "(Un)Window-Shade" #:action toggle-window-shade)
    (menuitem "(De)Iconify" #:action toggle-iconify)
    (menuitem "(Un)Maximize" #:action vertical-toggle-maximize)
    (menuitem "(Un)Stick" #:action toggle-stick)
    (menuitem "(Un)Keep On Top" #:action toggle-on-top)
    menu-separator
    (menuitem "&Preferences" #:image-left "mini-prefs.xpm" 
              #:action 'menu-for-preferences)
    menu-separator
    (menuitem "Close" #:action close-window)
    (menuitem "Delete" #:action delete-window)
    (menuitem "Destroy" #:action destroy-window)
    menu-separator
    (menuitem "Restart scwm" #:action (lambda ()
                                        (restart-function)
                                        (restart "scwm")))
    menu-separator
    (menuitem "Refresh Screen" #:action refresh))))

;;; end middle mouse root menu ;;;


;;; titlebar mouse menu ;;;

;;  bindings for mouse buttons on the title bar
;;  are created in a section below 

;; leftmost button on title bar
(define (popup-small-ops)
  (popup-menu (make-small-window-ops-menu (get-window))))

;; leftmost button on title bar
(define (make-small-window-ops-menu ww)
  (menu (list
         (menu-title "Small Ops" #:image-left windows-i)
         menu-separator
         (menuitem "Re&size" #:image-left resize-i
                   #:action interactive-resize)
         menu-separator
         (menuitem "Info" #:image-left quest-i
                   #:action (lambda () (window-info ww)))
         (menuitem "More" 
                   #:action
                   (menu (list
                          (menuitem "&Raise"
                                    #:action raise-window)
                          (menuitem "&Lower"
                                    #:action lower-window)
                          (menuitem (if (sticky? ww) "Un&stick" "&Stick")
                                    #:action toggle-stick)
                          (menuitem (if (window-shaded? ww)
                                        "Unwindow-S&hade" "Window-S&hade")
                                    #:action toggle-window-shade)
                          (menuitem (if (kept-on-top? ww)
                                        "UnKeep On Top" "Keep On Top")
                                    #:action toggle-on-top))))
         (menuitem "Decorations" 
                   #:image-left decor-i 
                   #:action
                   (menu (map (lambda (dec)
                                (menuitem
                                 (car dec) #:action
                                 (lambda () (style-one-window ww #:use-decor
                                                              (cdr dec)))))
                              decor-list)))
         menu-separator
         (menuitem "&Close" #:image-left cross-i
                   #:action close-window)
         (menuitem "&Delete" #:image-left bomb-smaller-i #:action delete-window)
         (menuitem "&Destroy" #:image-left bomb-i #:action destroy-window))))

    ;; ---------------------------;;
    ;; how title bar buttons look ;;
    ;; ---------------------------;;

(define prog-face (make-face '((relief raised)) '((pixmap mini-program-icon))))
(define edit-face (make-face '((relief raised)) '((pixmap "mini-edit.xpm"))))
(define term-face (make-face '((relief raised)) '((pixmap "mini-term.xpm"))))

(define stylized-X-face         ; Stylized X for closing window
  (make-face '((relief raised))
             '((relief-pattern
                ((20 20 #t) (30 20 #t) (50 40 #t) (70 20 #t) (80 20 #t)
                 (80 30 #f) (60 50 #f) (80 80 #f) (70 80 #f) (50 60 #f)
                 (30 80 #f) (20 80 #f) (20 70 #f) (40 50 #t) (20 30 #f)
                 (20 20 #t))))))

(define up-down-arrow-face      ; Vertical Line with arrowheads on
  (make-face '((relief raised)) ; top and bottom for toggling vert-maximize
             '((relief-pattern
                ((50 10 #t) (25 35 #t) (40 35 #t) (40 60 #t) (25 60 #t)
                 (50 85 #t) (75 60 #f) (60 60 #f) (60 35 #f) (75 35 #f)
                 (50 10 #f) (50 10 #t))))))


    ;; -----------------------------------;;
    ;; how to put buttons on the titlebar ;;
    ;; -----------------------------------;;

(define button-numbers (cons 1 2)) ; (left . right)

;; This creates the add-button command which when used multiple times
;; in sequence adds buttons in the correct location.  

;; The first use with third arg #t creates the left most button, the
;; second use with third arg #t creates the second left most button,
;; and so on.

(define (add-button face hook left) ; in all decors
  (let ((num (if left (car button-numbers) (cdr button-numbers))))
    (map (lambda (decor) (with-decor (cdr decor) (set-button-face! num face)))
         decor-list)
    (bind-mouse (string->symbol (string-append "button-" (number->string num)))
                1 hook)
    (if left (set-car! button-numbers (+ 2 num))
        (set-cdr! button-numbers (+ 2 num)))))


    ;; ------------------------;;
    ;; add buttons to titlebar ;;
    ;; ------------------------;;

;;; Now add the buttons to the titlebar, using add-button command:

;; left-most button
(add-button prog-face popup-small-ops #t)
(add-button up-down-arrow-face vertical-toggle-maximize #t)

;; right-most button --  3rd arg to add-button is whether on left side
(add-button stylized-X-face delete-window #f)




    ;; ----------------------------------------;;
    ;; how to bind a mouse button to an action ;;
    ;; ----------------------------------------;;


;;; Finally, bind the bottons to an action for a mouse click

;; buttons are numbered:  left: 1  3  5              6  4  2: right

;; !!! except that for titlebar button contexts for `bind-mouse'
;; !!! the numbers are 
;; !!! left-button-1 left-button-2 ... right-button-2 right-button-1

;; !!! This appears inconsistent, but it does work.

;;     bind-mouse CONTEXTS          MOUSE-BUTTON PROCEDURE-INVOKED
;; in this case
;;     bind-mouse TITLE-BAR-BUTTON  MOUSE-BUTTON PROCEDURE-INVOKED


;; CONTEXTS is a list of event-contexts
;; MOUSE-BUTTON is a string or integer giving the mouse button number
;; PROC is a procedure that will be invoked (with no arguments)
;;
;; CONTEXTS is a list of event-contexts (e.g., '(left-button-1 frame-sides)) 
;; 
;; The contexts include:
;; 'window
;; 'title
;; 'icon
;; 'root
;; 'frame-corners
;; 'frame-sides
;; 'client-window
;; 'root-window
;; 'left-button-N  (N=1-5)
;; 'right-button-N (N=1-5)

    ;;;; end of explanation: how to bind a mouse button to an action ;;;;


    ;; -------------------------------;;
    ;; titlebar button mouse bindings ;;
    ;; -------------------------------;;

;; context:            left-most titlebar button
;; mouse button:       number one, which is left mouse button
;; procedure invoked:  popup-small-ops
(bind-mouse 'left-button-1 1 popup-small-ops)

;; !!! why does left mouse button also work in following situation??

;; context:            second to left-most titlebar button
;; mouse button:       number two, which is middle mouse button
;; procedure invoked:  vertical-toggle-maximize
(bind-mouse 'left-button-2 2 vertical-toggle-maximize)


;; context:            second to right-most titlebar button
;; mouse button:       number one, which is left mouse button
;; procedure invoked:  iconify
(bind-mouse 'right-button-2 1 iconify)

;; context:            right-most titlebar button
;; mouse button:       number one, which is left mouse button
;; procedure invoked:  delete-window
(bind-mouse 'right-button-1 1 delete-window)

    ;;;; end titlebar button mouse bindings ;;;;



    ;; -------------------------------------;;
    ;; Mouse button bindings in root window ;;
    ;; -------------------------------------;;

;;; root menus ;;;

;; context:            root window
;; mouse button:       number one, which is left mouse button
;; procedure invoked:  popup-main-root-menu
(bind-mouse 'root 1 popup-main-root-menu)

;; context:            root window
;; mouse button:       number two, which is middle mouse button
;; procedure invoked:  popup-ops
(bind-mouse 'root 2 popup-ops)

;; context:            root window
;; mouse button:       number three, which is right mouse button
;; procedure invoked:  show-window-list-menu
(bind-mouse 'root 3 
            (lambda () 
              (show-window-list-menu #t 
                                     #:by-resource #t
                                     #:show-last-focus-time #t
                                     #:show-geometry #t)))

;; context:            root window
;; mouse button:       Meta (e.g., ALT) key and right mouse button, together
;; procedure invoked:  popup-menu
(bind-mouse 'root "M-3" (lambda () (popup-menu desk-menu)))

    ;;;; end mouse button bindings in root window ;;;;


    ;; ------------------------------------------------------;;
    ;; Mouse button bindings in corners and sides of windows ;;
    ;; ------------------------------------------------------;;

;; context:            window corners
;; mouse button:       number one, which is left mouse button
;; procedure invoked:  resize-or-raise
(bind-mouse 'frame-corners 1 resize-or-raise)

(bind-mouse 'frame-corners 2 popup-small-ops)

(bind-mouse 'frame-sides 1 resize-or-raise)

(bind-mouse 'frame-sides 2 move-or-raise)

;;;; Example: how to bind mouse button in two contexts
;; context:            window corners and window sides
;; mouse button:       number two, which is middle mouse button
;; procedure invoked:  popup-small-ops
;; (bind-mouse '(frame-corners frame-sides) 2 popup-small-ops)



;; context:            titlebar (not a button)
;; mouse button:       number two, which is middle mouse button
;; procedure invoked:  toggle-raise
(bind-mouse 'title 2 toggle-raise)

;;; Bind mouse button to one action for single click, 
;;; second action for double click

;; First define the action using double-click as one mouse-event-type
(define (move-or-shade)
  (case (mouse-event-type)
    ((double-click) (toggle-window-shade))
    (else (move-or-raise))))

;; context:            titlebar (not a button)
;; mouse button:       number one, which is left mouse button
;; procedure invoked:  move-or-shade
(bind-mouse 'title 1 move-or-shade)

    ;;;; end mouse button bindings in corners and sides of windows ;;;;



    ;; ---------------------------------------;;
    ;; Mouse button bindings inside of window ;;
    ;; ---------------------------------------;;

;; Meta-Mouse-3 anywhere in window moves or shades it
;; context:            anyhwere in a window
;; mouse button:       number three, which is right mouse button
;; procedure invoked:  move-or-shade
(bind-mouse 'window "M-3" move-or-shade)

;; Meta-Mouse-2 closes a window 
;; either by deleting (friendly) or destroying it.
;; context:            window
;; mouse button:       Meta (e.g., ALT) key and middle mouse button, together
;; procedure invoked:  close-window
(bind-mouse 'window "M-2" close-window)

    ;;;; end mouse button bindings inside of window ;;;;


    ;;---------------------------------;;
    ;; Mouse button bindings for icons ;;
    ;;---------------------------------;;

;; Either deiconify or move an icon
(define (move-or-deiconify)
  (case (mouse-event-type)
    ((motion) (interactive-move))
    ((double-click) (deiconify))))

(bind-mouse 'icon 1 deiconify)
(bind-mouse 'icon 2 move-or-deiconify)

    ;;;; end mouse button bindings for icons ;;;;



    ;;--------------------------------;;
    ;; key binding for window context ;;
    ;;--------------------------------;;

;; I find I use this key binding all the time!
(bind-key 'window "M-z" iconify)

    ;;;; end key binding for window context ;;;;



    ;;----------------------------------;;
    ;; key binding to move the viewport ;;
    ;;----------------------------------;;

(bind-key 'all "C-Left" (lambda () (move-viewport (%x -100) 0)))
(bind-key 'all "C-Right" (lambda () (move-viewport (%x 100) 0)))
(bind-key 'all "C-Up" (lambda () (move-viewport 0 (%y -100))))
(bind-key 'all "C-Down" (lambda () (move-viewport 0 (%y 100))))

;; Also, you can rotate among the current window using a keyboard command.
;; I don't use these because I usually have too many windows for this
;; to be efficient.

;; (bind-key 'all "M-Tab" 
;;           (lambda () (next-window #:only visible? #:except iconified?)))
;; 
;; (bind-key 'all "M-S-Tab" 
;;           (lambda () (prev-window #:only visible? #:except iconified?)))

    ;;;; end key binding to move the viewport ;;;;


    ;;---------------------------;;
    ;; key binding for emergency ;;
    ;;---------------------------;;

;; This binding came as part of the distribution.

;; This works in all contexts

;; in case of emergency, hit Control-Meta-Shift-Q
(bind-key 'all "C-M-S-q" quit)

;;;; Normally, you quit your X Windows session by closing applications
;;;; and then pressing Meta-Ctrl-Backspace (you may use your Alt key for Meta)
;;;; or by using the  mouse to `Quit scwm".

    ;;;; end key bindings for emergency ;;;;



    ;;----------------------------------;;
    ;; init-function: last item in file ;;
    ;;----------------------------------;;


;; this function appears to me to server as a hook; it was defined
;; earlier in this file

(init-function)

;; (make-message-window "Starting SCWM ... done ")

;;;;;;;;;;;;;;;; end of ~/spare-blue.scwmrc  file ;;;;;;;;;;;;;;;;
