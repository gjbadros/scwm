;;-------------------------------;;
;; import the scwm modules       ;;

(use-modules (app scwm base)
	     (app scwm winops)
	     (app scwm winlist)
	     (app scwm wininfo))

;;-------------------------------;;
;; set some basic styles info    ;;

(define helv12
  (load-font "-adobe-helvetica-bold-r-*-*-12-*-*-*-*-*-*-*"))
(define helv14 
  (load-font "-adobe-helvetica-bold-r-*-*-14-*-*-*-*-*-*-*"))

(menu-style #:fg "white" #:bg "navy" #:stipple "yellow" #:font helv14 #:mwm #f)
(title-style #:font helv12 #:justify 'left)

(set-icon-font! helv12)
(set-hilight-colors! "white" "navy")
(set-xor-value! 127)


;;-------------------------------;;
;; define some useful menus      ;;

(define util-menu 
  (make-menu "Utilities"
	     'title
	     (list "xterm" (lambda () (execute "xterm")))
	     (list "rxvt" (lambda () (execute "rxvt")))
	     (list "top" (lambda () (execute "rxvt -T Top -n Top -e top")))
	     (list "xcalc" (lambda () (execute "xcalc")))
	     (list "xmag" (lambda () (execute "xmag")))
	     'separator
	     (list "Exit scwm" quit)))
(define (popup-util)
  (popup util-menu))

(define window-ops-menu
  (make-menu "Window Ops"
	     'title
	     (list "Move" interactive-move)
	     (list "Resize" interactive-resize)
	     (list "Raise" raise-window)
	     (list "Lower" lower-window)
	     (list "(De)Iconify" toggle-iconify)
	     (list "(Un)Maximize" (lambda () (toggle-maximize 100 0)))
	     (list "(Un)Stick" toggle-stick)
	     'separator
	     (list "Close" close-window)
	     (list "Delete" delete-window)
	     (list "Destroy" destroy-window)
	     'separator
	     (list "Refresh Screen" refresh)))
(define (popup-ops)
  (popup window-ops-menu))

(define small-window-ops-menu
  (make-menu "Window Ops2"
	     (list "Move" interactive-move)
	     (list "Resize" interactive-resize)
	     (list "Raise" raise-window)
	     (list "Lower" lower-window)
	     (list "Iconify" iconify)
	     (list "(Un)Maximize" (lambda () (toggle-maximize 100 0)))
	     (list "(Un)Stick" toggle-stick)
	     'separator
	     (list "Close" close-window)
	     (list "Delete" delete-window)
	     (list "Destroy" destroy-window)))	
(define (popup-small-ops)	
  (popup small-window-ops-menu))


;; now set some mouse and key bindings ;;

;; first our root menus
(bind-mouse 'root 1 popup-util)
(bind-mouse 'root 2 popup-ops)
(bind-mouse 'root 3 
	    (lambda () 
	      (show-window-list-menu #:show-geometry #t)))

(bind-mouse 'button-1 1 popup-small-ops)
(bind-mouse '(title frame sidebar) 2 popup-small-ops)
(bind-mouse 'frame 1 resize-or-raise)
(bind-mouse '(title sidebar) 1 move-or-raise)

(bind-key 'all "M-F1" popup-util)
(bind-key 'all "M-F2" popup-ops)

;; in case of emergency, hit Control-Shift-F9
(bind-key 'all "C-S-F9" quit)

;; some stuff for icons
(define (move-or-deiconify)
  (case (mouse-event-type)
    ((motion) (interactive-move))
    ((double-click) (deiconify))))

(bind-mouse 'icon 1 move-or-deiconify)
(bind-mouse 'icon 2 deiconify)

;; move the pointer with the keyboard
(bind-key 'all "M-Left" (lambda () (move-pointer (%x -1) 0)))
(bind-key 'all "M-Right" (lambda () (move-pointer (%x 1) 0)))
(bind-key 'all "M-Up" (lambda () (move-pointer 0 (%y -1))))
(bind-key 'all "M-Down" (lambda () (move-pointer 0 (%y 1))))

;; rotate the current window with the keyboard
(bind-key 'all "M-Tab"
	  (lambda ()
	    (window-list-proc
	     (next-window #:only visible? #:except iconified?))))

(bind-key 'all "M-S-Tab" 
	  (lambda ()
	    (window-list-proc
	     (prev-window #:only visible? #:except iconified?))))
