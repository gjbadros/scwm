;;-------------------------------;;
;; import the scwm modules       ;;

(use-modules (app scwm base)
	     (app scwm winops)
	     (app scwm winlist)
	     (app scwm wininfo)
             (app scwm style)
	     (app scwm face))

;;-------------------------------;;
;; set some basic styles info    ;;


(define font12
  (load-font "-adobe-helvetica-bold-r-*-*-12-*-*-*-*-*-*-*"))
(define font14 
  (load-font "-adobe-helvetica-bold-r-*-*-14-*-*-*-*-*-*-*"))

(menu-style #:fg "white" #:bg "blueviolet" #:stipple "blue"
	    #:font font14 #:mwm #f)

(title-style #:font font12 #:justify 'left)

(set-icon-font! font12)
(set-hilight-colors! "white" "blueviolet")
(set-rubber-band-mask! 127)


(define HOME (getenv "HOME"))
(define USER (getenv "USER"))

(define user-image-path (string-append HOME "/pixmaps:" HOME "/bitmaps"))


;;-------------------------------;;
;; set some paths                ;;
;;

;; these are OK for my system, but may need to be changed for
;; yours. This should probably be eventually autoconfed or something.

(set-image-path! (string-append user-image-path 
			       ":/usr/X11/include/X11/bitmaps:\
/usr/local/X11/include/X11/pixmaps:/usr/local/lib/icons:\
/uns/include/X11/pixmaps:\
/usr/lib/icons:/usr/X11/include/X11/pixmaps:/usr/X11/lib/X11/mini-icons"))


;;-------------------------------;;
;; set some window styles        ;;

(window-style "*" 
	      #:fg "white" #:bg "navy" 
	      #:icon "unknown1.xpm" 
	      #:icon-box (list (x- 70) 1 69 (y- 141))
	      #:border-width 6 
	      #:focus 'mouse
	      #:random-placement #t #:smart-placement #t
	      #:mwm-func-hint #t #:mwm-decor-hint #t
	      #:int-override #t #:decroate-transient #t
	      #:PPosition-hint #f
	      #:lenience #t
	      )

(define desk-widget
  (make-style #:plain-border #t #:sticky #t #:winlist-skip #t
	      #:border-width 3 #:focus 'none))

(window-style "*lock" #:use-style desk-widget)
(window-style "xload" #:no-titlebar #t #:use-style desk-widget)
(window-style "xscreensaver" #:no-titlebar #t #:use-style desk-widget)
(window-style "xbiff" #:no-titlebar #t #:use-style desk-widget)
(window-style "xcalc" #:icon "xcalc.xpm")
(window-style "xman" #:icon "xman.xpm")
(window-style "xmag" #:icon "mag_glass.xpm")
(window-style "Emacs" #:icon "gnu-animal.xpm")
(window-style "XTerm" #:icon "xterm.xpm")



;;-------------------------------;;
;; define some useful menus      ;;


(define (vertical-toggle-maximize)
  (toggle-maximize 0 (%y 100)))

(define window-ops-menu
  (make-menu "Window Ops"
	     'title
	     (menu-item "Move" #:action interactive-move)
	     (menu-item "Resize" #:action interactive-resize)
	     (menu-item "Raise" #:action raise-window)
	     (menu-item "Lower" #:action lower-window)
	     (menu-item "Print" #:action print-window)
	     (menu-item "(Un)Window-Shade" #:action toggle-window-shade)
	     (menu-item "(De)Iconify" #:action toggle-iconify)
	     (menu-item "(Un)Maximize" #:action vertical-toggle-maximize)
	     (menu-item "(Un)Stick" #:action toggle-stick)
	     (menu-item "(Un)Keep On Top" #:action toggle-on-top)
	     (menu-separator)
	     (menu-item "Close" #:action close-window)
	     (menu-item "Delete" #:action delete-window)
	     (menu-item "Destroy" #:action destroy-window)
	     (menu-separator)
	     (menu-item "Refresh Screen" #:action refresh)))
(define (popup-ops)
  (popup window-ops-menu))

(define quit-verify
  (make-menu "Really quit scwm?"
	     (menu-title)
	     (menu-item "Yes" #:action quit)
	     (menu-item "No" #:action noop)
	     (menu-separator)
	     (menu-item "Restart scwm" #:action (lambda () (restart "scwm")))))

(define desk-menu 
  (make-menu "Desks"
	     (menu-title)
	     (menu-item "Desk 1" #:action (lambda () (set-current-desk! 0)))
	     (menu-item "Desk 2" #:action (lambda () (set-current-desk! 1)))
	     (menu-item "Desk 3" #:action (lambda () (set-current-desk! 2)))
	     (menu-item "Desk 4" #:action (lambda () (set-current-desk! 3)))))

(define util-menu 
  (make-menu "Utilities"
	     (menu-title)
	     (menu-item "xterm" #:action (lambda () (execute "xterm")))
	     (menu-item "rxvt" #:action (lambda () (execute "rxvt")))
	     (menu-item "emacs" #:action (lambda () (execute "emacs")))
	     (menu-item "top" #:action 
			(lambda () (execute "rxvt -T Top -n Top -e top")))
	     (menu-item "xcalc" #:action (lambda () (execute "xcalc")))
	     (menu-item "xmag" #:action (lambda () (execute "xmag")))
	     (menu-separator)
	     (menu-item "Desks" #:action desk-menu)
	     (menu-separator)
	     (menu-item "Exit scwm" #:action quit-verify)))

(define (popup-util)
  (popup util-menu))

(define (make-small-window-ops-menu w)
  (make-menu "Window Ops2"
	     (menu-item "Move" #:action interactive-move)
	     (menu-item "Resize" #:action interactive-resize)
	     (menu-item "Raise" #:action raise-window)
	     (menu-item "Lower" #:action lower-window)
	     (menu-item "Iconify" #:action iconify)
	     (menu-separator)
	     (menu-item "More" #:action (make-menu "More"
			    (menu-item (if (maximized? w)
				      "Unmaximize"
				      "Maximize") 
				       #:action vertical-toggle-maximize)
			    (menu-item (if (sticky? w)
				      "Unstick"
				      "Stick") #:action toggle-stick)
			    (menu-item (if (window-shaded? w)
				      "UnWindow-Shade"
				      "Window-Shade") 
				       #:action toggle-window-shade)
			    (menu-item (if (kept-on-top? w)
				      "UnKeep On Top"
				      "Keep On Top") #:action toggle-on-top)))
             (menu-separator)
	     (menu-item "Close" #:action close-window)
	     (menu-item "Destroy" #:action destroy-window)))	

(define (popup-small-ops)
  (popup (make-small-window-ops-menu (get-window))))



;; now set some mouse and key bindings ;;

;; first our root menus
(bind-mouse 'root 1 popup-util)
(bind-mouse 'root 2 popup-ops)
(bind-mouse 'root 3 (lambda () 
		      (show-window-list-menu #:show-geometry #t)))
(bind-mouse 'root "M-3" (lambda () (popup desk-menu)))


;; window buttons
(bind-mouse 'button-1 1 popup-small-ops)
(bind-mouse 'button-2 1 vertical-toggle-maximize)
(bind-mouse 'button-4 1 iconify)

;; operations on parts of the window
(bind-mouse '(frame sidebar) 2 popup-small-ops)
(bind-mouse 'frame 1 resize-or-raise)
(bind-mouse 'sidebar 1 move-or-raise)
(define (move-or-shade)
  (case (mouse-event-type)
    ((double-click) (toggle-window-shade))
    (else (move-or-raise))))
(bind-mouse 'title 1 move-or-shade)
(bind-mouse 'title 3 lower-window)


;; key bindings for the menus
(bind-key 'all "M-F1" popup-util)
(bind-key 'all "M-F2" popup-ops)

;; in case of emergency, hit Control-Meta-Q
(bind-key 'all "C-M-q" quit)

;; some stuff for icons
(define (move-or-deiconify)
  (case (mouse-event-type)
    ((motion) (interactive-move))
    ((double-click) (deiconify))))

(bind-mouse 'icon 1 move-or-deiconify)
(bind-mouse 'icon 2 deiconify)



;; move the pointer with the keyboard
(bind-key 'all "M-Left" (lambda () (move-pointer (%x -1) 0)))
(bind-key 'all "M-Right" (lambda () (move-pointer (%x 1) 0)))
(bind-key 'all "M-Up" (lambda () (move-pointer 0 (%y -1))))
(bind-key 'all "M-Down" (lambda () (move-pointer 0 (%y 1))))

;; move the viewport with the keyboard
(bind-key 'all "C-M-Left" (lambda () (move-viewport (%x -100) 0)))
(bind-key 'all "C-M-Right" (lambda () (move-pointer (%x 100) 0)))
(bind-key 'all "C-M-Up" (lambda () (move-viewport 0 (%y -100))))
(bind-key 'all "C-M-Down" (lambda () (move-viewport 0 (%y 100))))

;; rotate the current window with the keyboard
(bind-key 'all "M-Tab"
	  (lambda ()
	    (next-window #:only visible? #:except iconified?)))

(bind-key 'all "M-S-Tab" 
	  (lambda ()
	    (prev-window #:only visible? #:except iconified?)))
