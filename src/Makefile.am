## $Id$
## process this file with automake to create Makefile.in

bin_PROGRAMS = scwm

scwm_SOURCES =  Grab.c \
                ICCCM.c \
                add_window.c \
                binding.c \
                borders.c \
                callbacks.c \
		changed.c \
                color.c \
                colormaps.c \
                colors.c \
                complex.c \
                decor.c \
                decorations.c \
                deskpage.c \
                drawmenu.c \
                errors.c \
                events.c \
                face.c \
                focus.c \
                font.c \
                getopt.c \
                getopt1.c \
                guile-compat.c \
                icons.c \
                image.c \
                init_scheme_string.c \
		log-usage.c \
                menu.c \
                menuitem.c \
		menulook.c \
                miscprocs.c \
                module-interface.c \
                move.c \
		message-window.c \
                placement.c \
                resize.c \
		screen.c \
                scwm.c \
                shutdown.c \
                string_token.c \
                syscompat.c \
                system.c \
                util.c \
                virtual.c \
                window.c \
                xmisc.c \
                xproperty.c \
		xrm.c

session_manager_srcs = session-manager.c
session_manager_headers = session-manager.h

session_manager_objs = $(session_manager_srcs:.c=.o)


cassowary_srcs = constraint-primitives.cc scwm-constraints.cc 
cassowary_headers = constraint-primitives.h scwm-constraints.h scwm-constraints.hpp

cassowary_objs = $(cassowary_srcs:.cc=.o)

EXTRA_scwm_SOURCES = $(cassowary_srcs) $(session_manager_srcs)

noinst_HEADERS = Grab.h events.h placement.h ICCCM.h face.h resize.h \
add_window.h focus.h screen.h binding.h font.h scwm-constraints.h \
borders.h getopt.h scwm-snarf.h callbacks.h guile-compat.h scwm.h \
color.h icons.h session-manager.h colormaps.h image.h shutdown.h \
colors.h log-usage.h string_token.h complex.h menu.h syscompat.h \
constraint-primitives.h menuitem.h system.h decor.h menulook.h util.h \
decorations.h miscprocs.h virtual.h deskpage.h module-interface.h window.h \
drawmenu.h module-types.h xmisc.h errors.h move.h window_fwd.h deskpage.h \
move.h xmisc.h drawmenu.h placement.h xproperty.h errors.h resize.h xrm.h \
events.h scm_init_funcs.h dbug_resize.h message-window.h

noinst_HEADERS += $(cassowary_headers) $(session_manager_headers)

scwm_LDADD = @CASSOWARY_OBJECTS@ @SESSION_MANAGER_OBJECTS@ \
	      @SM_LIB@ @XEXT_LIB@ @XMU_LIB@ @XPM_LIB@ \
	      @x_libs@ @GUILE_LIBS@ @CASSOWARY_LIBS@
scwm_LDFLAGS = @x_ldflags@ -export-dynamic
scwm_DEPENDENCIES = @CASSOWARY_OBJECTS@ @SESSION_MANAGER_OBJECTS@

INCLUDES = @x_cflags@ @GUILE_INCLUDES@ @CASSOWARY_INCLUDES@

guile_snarfs = Grab.x add_window.x binding.x callbacks.x color.x \
constraint-primitives.x \
decor.x deskpage.x drawmenu.x events.x face.x font.x icons.x image.x menu.x menuitem.x \
menulook.x message-window.x miscprocs.x module-interface.x move.x placement.x resize.x \
screen.x shutdown.x virtual.x window.x xproperty.x xrm.x

BUILT_SOURCES = init_scheme_string.c scwmpaths.h scm_init_funcs.h \
	$(guile_snarfs)

##OMIT_DEPENDENCIES = $(BUILT_SOURCES)

## This is how guile does it:
## (Sadly it does not work with Automake 1.2f)
## Add -MG to make the .x magic work with auto-dep code.
## MKDEP = gcc -M -MG $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)

EXTRA_DIST=generate_scm_init_funcs

SUFFIXES = .x


# just use `make CC=g++' and the revised guile-snarf which uses ${CC} will work
# for C++ prototype extraction
%.x: %.c
	guile-snarf $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS) $< > $@

%.x: %.cc
	CC=$(CXX) \
	guile-snarf $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CXXFLAGS) $< > $@

## FIXMS: This really sucks, but it's the best we can do until
## Automake gets a way to compute dependencies with -MG
## scwm.o: scwmpaths.h
## callbacks.o: callbacks.x
## color.o: color.x
## font.o: font.x
## image.o: scwmpaths.h image.x
## menuitem.o: menuitem.x
## module-interface.o: module-interface.x
## menu.o: menu.x
## shutdown.o: shutdown.x


init_scheme_string.c: ../scheme/minimal.scm
	( echo "char *init_scheme_string = \"\\" ; \
	  sed -e 's/;.*$$//g' -e 's/"/\\"/g' -e "s/'/\\\\'/g" -e 's/$$/\\n\\/' ; \
	  echo \"\; ) <$< > $@

scwmpaths.h: ../config.status
	@echo "Generating scwmpaths.h..." 
	@rm -f scwmpaths.tmp
	@echo '/* generated by Makefile -- do not edit */' > scwmpaths.tmp
	@echo '#define SCWM_PREFIX "${prefix}"' >> scwmpaths.tmp
	@echo '#define SCWM_EXEC_PREFIX "${exec_prefix}"' >> scwmpaths.tmp
	@echo '#define SCWMDIR "@scwmrcdir@"' >> scwmpaths.tmp
	@echo '#define SCWMRC ".$(PACKAGE)rc"' >> scwmpaths.tmp
	@echo '#define SCWM_LOAD_PATH "@scwm_load_path@"' >> scwmpaths.tmp
	@echo '#define SCWM_BIN_LOAD_PATH "@scwm_bin_load_path@"' >> scwmpaths.tmp
	@echo '#define SCWM_IMAGE_LOAD_PATH "@scwm_image_load_path@"' >> scwmpaths.tmp
	@mv scwmpaths.tmp scwmpaths.h

scm_init_funcs.h: ../config.status
	@echo "Generating scm_init_funcs.h..."
	@$(srcdir)/generate_scm_init_funcs $(guile_snarfs) > $@

CLEANFILES = scwmpaths.h init_scheme_string.c $(BUILT_SOURCES)

# Want etags to mark SCM_SYMBOL macros and SCWM_PROC macros
# Note that we mark through the 2nd argument to SCWM_PROC so we
# get the scheme procedure name, too (not just the C function name)
ETAGS_ARGS = --regex='/[ \t]*SCM_SYMBOL[ \t]*(\([^,]*\)/\1/' --regex='/[ \t]*SCWM_PROC[ \t]*(\([^,]*\),[^,]*/\1/'
