# $Id$
# Makefile for SCWM
# (C) 1998 Maciej Stachowiak and Greg J. Badros

SHELL=/bin/sh

@SET_MAKE@

VPATH=@srcdir@
top_srcdir=@top_srcdir@
srcdir=@srcdir@
prefix=@prefix@
exec_prefix=@exec_prefix@
bin_dir=@exec_prefix@/bin
x_includes=@x_includes@
x_libraries=@x_libraries@
scwm_icons=@scwm_icons@
scwm_rc=@scwm_rc@
scwm_name=@scwm_name@
scwm_image_load_path=@scwm_image_load_path@
scwm_load_path=@scwm_load_path@
scwm_dir=@scwm_dir@
mkinstalldirs=$(SHELL) $(top_srcdir)/mkinstalldirs
LDFLAGS=@LDFLAGS@

#
# Libraries
#

X_LIBRARY=-lX11 @LIBS@
XEXT_LIBRARY=-lXext
XPM_LIBRARY=-lXpm

LIBS=-L../libs $(x_libraries) $(XPM_LIBRARY) $(XEXT_LIBRARY) $(X_LIBRARY) $(LDFLAGS) $(CASSOWARY_LIBS)

PATH_DEFINES=-DSCWM_ICONDIR=\"$(scwm_icons)\" \
               -DSCWMDIR=\"$(scwm_dir)\" \
               -DSCWMRC=\"$(scwm_rc)\" \
               -DSCWM_IMAGE_LOAD_PATH="\"$(scwm_image_load_path)\""\
               -DSCWM_LOAD_PATH=\"$(scwm_load_path)\" 

EXTRA_DEFINES=$(PATH_DEFINES)

#USE_CASSOWARY=true
# Cassowary is a developer-only constraint solving extension to SCWM
ifdef USE_CASSOWARY
	CASSOWARY_DIR=../../cassowary/wrappers
	CASSOWARY_LIBS=-L$(CASSOWARY_DIR) $(CASSOWARY_DIR)/cassowary_wrap.o -lcassowary
	EXTRA_DEFINES+=-DUSE_CASSOWARY
endif


CC=@CC@
INCLUDES=-I../include -I$(top_srcdir)/include -I. $(x_includes) -I$(prefix)/include
CFLAGS=$(INCLUDES) @CFLAGS@ $(EXTRA_DEFINES)

ifeq ($(CC),gcc)
    MAKEDEPEND=$(CC) -M
else
ifeq ($(CC),g++)
    MAKEDEPEND=$(CC) -M
else
    MAKEDEPEND=@MAKEDEPEND@
endif
endif

INSTALL=@INSTALL@
INSTALL_PROGRAM=@INSTALL_PROGRAM@
RM=@RM@

PROG=$(scwm_name)

HEADERS = $(wildcard *.h)

SRCS = \
        string_token.c \
	ICCCM.c \
	system.c \
	Grab.c \
	add_window.c \
	borders.c \
	colormaps.c \
	colors.c \
	complex.c \
	decorations.c \
	events.c \
	focus.c \
	scwm.c \
	icons.c \
	misc.c \
	xmisc.c \
	move.c \
	placement.c \
	resize.c \
	virtual.c \
	scmprocs.c \
	scmtypes.c \
	font.c \
	color.c \
	miscprocs.c \
	binding.c \
	errors.c \
	util.c \
	window.c \
	scwmmenu.c \
	drawmenu.c \
	menuitem.c \
	deskpage.c \
	decor.c \
	face.c \
	module-interface.c \
	image.c \
	callbacks.c \
	shutdown.c

SNARFED_FILES = font.x \
	image.x \
	menuitem.x \
	module-interface.x \
	scwmmenu.x \
	color.x \
	callbacks.x \
	shutdown.x

LOADABLE_PRIMITIVE_SOURCES = draw-pie-menu.c

LOADABLE_PRIMITIVES = draw-pie-menu.so

OBJS := $(SRCS:.c=.o) init_scheme_string.o

BUILT_SOURCES = $(SNARFED_FILES) init_scheme_string.c

all: $(SNARFED_FILES) $(PROG) $(LOADABLE_PRIMITIVES)

tags: $(SRCS) $(BUILT_SOURCES) $(HEADERS)
	etags $^

depend: $(BUILT_SOURCES)
	$(MAKEDEPEND) $(CFLAGS) $(SRCS) > makefile.depend

install: all
	$(mkinstalldirs) $(bin_dir)
	$(INSTALL_PROGRAM) $(PROG) $(bin_dir)

mostlyclean:
	$(RM) $(OBJS) *~ core *.bak *.x

clean: mostlyclean
	$(RM) $(PROG)

distclean: clean

# FIXGJB: -rdynamic may be linux specific -- use configure?
$(PROG): $(OBJS)
	rm -f $(PROG)
	$(CC) -o $(PROG) -rdynamic $(OBJS) $(LIBS)

# Build the scheme string to include in the executable
init_scheme_string.c: ../scheme/minimal.scm
	( echo -n "char *init_scheme_string = \"" ; \
	  sed -e 's/;.*$$//g' -e 's/"/\\"/g' -e "s/'/\\\\'/g" -e 's/$$/\\n\\/' ; \
	  echo \"\; ) <$< > $@

# guile-snarf builds the .x file which gets included by the .c
# file.  It is needed to create the dependencies, and to compile
# the .c file into the .o file
%.o : %.x

# build a dynamically loadable object file
# (FIXGJB: this needs to use autoconf settings; this is for linux)
%.so : %.c
	gcc $(CFLAGS) -fpic -shared -o $@ $^



# Grab the SCM_PROC-s from the C source code
# Note that the C code guards the #include "foo.x" with #ifndef SCM_MAGIC_SNARFER
# so that the .x file need not exist for this rule, which generates that .x file
%.x : %.c
	guile-snarf $(CFLAGS) $< >tmp.$@ && mv tmp.$@ $@

# The leading - means do not error
-include makefile.depend
