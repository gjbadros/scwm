Brief Installation Instructions ===========================================

To build scwm on unix, there are two basic steps:

        1. Type "./configure", to configure the package for your system.
        2. Type "make", to build the package.

Generic instructions for configuring and compiling GNU distributions
are included below.


What You Get ==============================================================

The `make' command builds several things: 

   - An executable file `scwm/scwm', which is the window manager
program itself.

   - Two executables, `utilities/scwmexec/scwmexec' and `utilities/scwmrepl/scwmrepl

To install Scwm, type `make install'.  This installs the executable
mentioned above, as well as a system.scwmrc file and several guile
modules written in Scheme that provide additional window manager
commands. 


What You Need =============================================================

To build this program, you need a working guile configuration.  In
particular, be sure that you use its built-in regular expression
support, not the "rx" library.  If you have librx.{a,so} in your
LD_LIBRARY_PATH, guile's configure will find and use it.  To prevent
that, either change your LD_LIBRARY_PATH, rename librx.{a,so}, or edit
config.cache after running guile's configure but before doing the
make.  You need to edit the line that looks like:

ac_cv_lib_rx_main=${ac_cv_lib_rx_main='no'}
                                       ^^ be sure this is no

Scwm is tested with both guile-1.2, and recent developer releases of guile.

You also need the `sed' stream editor in your PATH, and a working GNU make.

Configureing guile `--with-threads' may be useful but is not required.

Using SCWM Without Installing It =========================================

If you want to run scwm without installing it, copy the
sample.scwmrc/system.scwmrc file to your home directory as
.scwmrc. Then set the environment variable `SCWM_LOAD_PATH' to a
colon-separated list of directories, including the directory
containing this INSTALL file.

For example, suppose the SCWM distribution unpacked into a directory
called `/home/mstachow/scwm-0.6' (so the full name of this file would be
`/home/mstachow/scwm-0.6/INSTALL').  Then you might say:

  export SCWM_LOAD_PATH=/home/mstachow/scwm-0.1

if you're using Bash or any other Bourne shell variant, or

  setenv SCWM_LOAD_PATH /home/mstachow/scwm-0.1

if you're using CSH or one of its variants.

After copying the .scwmrc and setting SCWM_LOAD_PATH, you should be
able to run scwm out of the build directory without difficulty.


Generic Instructions for Building Auto-Configured Packages ================

To compile this package:

1.  Configure the package for your system.  In the directory that this
file is in, type `./configure'.  If you're using `csh' on an old
version of System V, you might need to type `sh configure' instead to
prevent `csh' from trying to execute `configure' itself.

The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation, and
creates the Makefile(s) (one in each subdirectory of the source
directory).  In some packages it creates a C header file containing
system-dependent definitions.  It also creates a file `config.status'
that you can run in the future to recreate the current configuration.
Running `configure' takes a minute or two.

To compile the package in a different directory from the one
containing the source code, you must use GNU make.  `cd' to the
directory where you want the object files and executables to go and
run `configure' with the option `--srcdir=DIR', where DIR is the
directory that contains the source code.  Using this option is
actually unnecessary if the source code is in the parent directory of
the one in which you are compiling; `configure' automatically checks
for the source code in `..' if it does not find it in the current
directory.

By default, `make install' will install the package's files in
/usr/local/bin, /usr/local/lib, /usr/local/man, etc.  You can specify
an installation prefix other than /usr/local by giving `configure' the
option `--prefix=PATH'.  Alternately, you can do so by changing the
`prefix' variable in the Makefile that `configure' creates (the
Makefile in the top-level directory, if the package contains
subdirectories).

You can specify separate installation prefixes for machine-specific
files and machine-independent files.  If you give `configure' the
option `--exec_prefix=PATH', the package will use PATH as the prefix
for installing programs and libraries.  Normally, all files are
installed using the same prefix.

`configure' ignores any other arguments that you give it.

If your system requires unusual options for compilation or linking
that `configure' doesn't know about, you can give `configure' initial
values for some variables by setting them in the environment.  In
Bourne-compatible shells, you can do that on the command line like
this:
        CC='gcc -traditional' DEFS=-D_POSIX_SOURCE ./configure

The `make' variables that you might want to override with environment
variables when running `configure' are:

(For these variables, any value given in the environment overrides the
value that `configure' would choose:)
CC              C compiler program.
                Default is `cc', or `gcc' if `gcc' is in your PATH.
INSTALL         Program to use to install files.
                Default is `install' if you have it, `cp' otherwise.
INCLUDEDIR      Directory for `configure' to search for include files.
                Default is /usr/include.

(For these variables, any value given in the environment is added to
the value that `configure' chooses:)
DEFS            Configuration options, in the form '-Dfoo -Dbar ...'
LIBS            Libraries to link with, in the form '-lfoo -lbar ...'

If you need to do unusual things to compile the package, we encourage
you to teach `configure' how to do them and mail the diffs to the
address given in the README so we can include them in the next
release.

2.  Type `make' to compile the package.

3.  Type `make install' to install programs, data files, and
documentation.

4.  You can remove the program binaries and object files from the
source directory by typing `make clean'.  To also remove the
Makefile(s), the header file containing system-dependent definitions
(if the package uses one), and `config.status' (all the files that
`configure' created), type `make distclean'.

The file `configure.in' is used as a template to create `configure' by
a program called `autoconf'.  You will only need it if you want to
regenerate `configure' using a newer version of `autoconf'.






